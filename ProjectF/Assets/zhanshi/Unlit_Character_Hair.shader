//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Unlit/Character_Hair" {
Properties {
[Header(Base)] _MainTex ("Main Texture", 2D) = "white" { }
_Maincolor ("Emission Color", Color) = (1,1,1,1)
_Normal ("Normal Map", 2D) = "bump" { }
_MREA ("Eoughnessmap", 2D) = "white" { }
_Roughness ("roughness", Range(0, 1)) = 0
_anisotropic ("Anisotropic", Range(-1, 1)) = 1
_anisocolor ("Aniso Color", Color) = (1,1,1,1)
_anisooffest ("Aniso Offest", Float) = 0
[Header(Rim)] _rimlightdir ("Rim Light Dir", Vector) = (1,1,1,1)
_rimcolor ("Rim Color", Color) = (1,1,1,1)
_rimintensity ("Rim Intensity", Float) = 1
_rimthreshold ("Rim Threshold", Range(0, 1)) = 0
_rimhardness ("Rim Hardness", Float) = 20
_Expond ("ENV Expond", Float) = 1
}
SubShader {
 LOD 100
 Tags { "RenderType" = "Opaque" }
 Pass {
  LOD 100
  Tags { "LIGHTMODE" = "LightweightForward" "RenderType" = "Opaque" }
  GpuProgramID 14822
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec3 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = max(u_xlat9, 1.17549435e-38);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = max(u_xlat9, 1.17549435e-38);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD4.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _Expond;
	UNITY_UNIFORM vec4 _MREA_ST;
	UNITY_UNIFORM vec4 _MainTex_ST;
	UNITY_UNIFORM vec4 _Maincolor;
	UNITY_UNIFORM float _Roughness;
	UNITY_UNIFORM vec3 _rimlightdir;
	UNITY_UNIFORM vec4 _rimcolor;
	UNITY_UNIFORM float _rimhardness;
	UNITY_UNIFORM float _rimthreshold;
	UNITY_UNIFORM float _rimintensity;
	UNITY_UNIFORM float _anisotropic;
	UNITY_UNIFORM vec4 _anisocolor;
	UNITY_UNIFORM float _anisooffest;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(2) uniform mediump sampler2D _Normal;
UNITY_LOCATION(3) uniform mediump sampler2D _MREA;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
vec3 u_xlat10;
float u_xlat18;
float u_xlat24;
float u_xlat25;
float u_xlat26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat8.xyz = vs_TEXCOORD2.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat24 = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat25 = (-_anisotropic) * 0.899999976 + 1.0;
    u_xlat25 = sqrt(u_xlat25);
    u_xlat2.xy = vs_TEXCOORD0.xy * _MREA_ST.xy + _MREA_ST.zw;
    u_xlat16_2 = texture(_MREA, u_xlat2.xy).x;
    u_xlat10.x = u_xlat16_2 * u_xlat16_2;
    u_xlat16_3.x = u_xlat16_2 * 2.0 + -1.0;
    u_xlat2.x = u_xlat16_3.x + _anisooffest;
    u_xlat18 = u_xlat10.x / u_xlat25;
    u_xlat25 = u_xlat25 * u_xlat10.x;
    u_xlat10.x = u_xlat18 * u_xlat18;
    u_xlat24 = u_xlat24 / u_xlat10.x;
    u_xlat10.x = u_xlat25 * u_xlat25;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat16_5.xyz = texture(_Normal, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_MainTex, u_xlat4.xy).xyz;
    u_xlat4.xyz = u_xlat16_4.xyz * _Maincolor.xyz;
    u_xlat16_3.xyz = u_xlat4.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
    u_xlat16_6.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = u_xlat16_6.yyy * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = u_xlat16_6.xxx * vs_TEXCOORD3.xyz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat16_6.zzz * vs_TEXCOORD1.xyz + u_xlat4.xyz;
    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat4.xyz = vec3(u_xlat26) * u_xlat4.xyz;
    u_xlat5.xyz = u_xlat4.xyz * u_xlat2.xxx + vs_TEXCOORD4.xyz;
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat2.x = u_xlat2.x / u_xlat10.x;
    u_xlat24 = u_xlat24 + u_xlat2.x;
    u_xlat2.x = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    u_xlat0.y = u_xlat2.x * u_xlat2.x + u_xlat24;
    u_xlat0.xy = u_xlat0.xy * u_xlat0.xy;
    u_xlat8.x = u_xlat18 * u_xlat0.y;
    u_xlat8.x = u_xlat25 * u_xlat8.x;
    u_xlat8.x = u_xlat8.x * 3.14159274;
    u_xlat8.x = float(1.0) / u_xlat8.x;
    u_xlat8.xyz = u_xlat8.xxx * _anisocolor.xyz;
    u_xlat8.xyz = u_xlat8.xyz * _anisocolor.www;
    u_xlat25 = (-_Roughness) + 1.0;
    u_xlat16_27 = (-u_xlat25) + 1.0;
    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
    u_xlat16_27 = max(u_xlat16_27, 0.00200000009);
    u_xlat25 = u_xlat16_27 + u_xlat16_27;
    u_xlat0.x = u_xlat0.x * u_xlat25 + -0.5;
    u_xlat25 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat25 = max(u_xlat25, 9.99999975e-06);
    u_xlat25 = (-u_xlat25) + 1.0;
    u_xlat25 = max(u_xlat25, 0.0);
    u_xlat2.x = u_xlat25 * u_xlat25;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat25 = u_xlat25 * u_xlat2.x;
    u_xlat25 = u_xlat0.x * u_xlat25 + 1.0;
    u_xlat2.x = dot(u_xlat4.xyz, _MainLightPosition.xyz);
    u_xlat2.x = max(u_xlat2.x, 9.99999975e-06);
    u_xlat10.x = (-u_xlat2.x) + 1.0;
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlat18 = u_xlat10.x * u_xlat10.x;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat10.x = u_xlat10.x * u_xlat18;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + 1.0;
    u_xlat0.x = u_xlat25 * u_xlat0.x;
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat10.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
    u_xlat0.xyz = u_xlat10.xyz * _MainLightColor.xyz + u_xlat8.xyz;
    u_xlat16_6.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_6.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_6.x);
    u_xlat16_5 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_6.xyz = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;
    u_xlat4.w = 1.0;
    u_xlat16_7.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_7.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_7.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat10.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
    u_xlat24 = dot((-u_xlat1.xyz), u_xlat4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat1.xyz = u_xlat4.xyz * (-vec3(u_xlat24)) + (-u_xlat1.xyz);
    u_xlat16_6.x = (-u_xlat16_27) * 0.699999988 + 1.70000005;
    u_xlat16_27 = u_xlat16_27 * u_xlat16_6.x;
    u_xlat16_27 = u_xlat16_27 * 6.0;
    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat1.xyz, u_xlat16_27);
    u_xlat16_27 = u_xlat16_1.w + -1.0;
    u_xlat16_27 = unity_SpecCube0_HDR.w * u_xlat16_27 + 1.0;
    u_xlat16_27 = max(u_xlat16_27, 0.0);
    u_xlat16_27 = log2(u_xlat16_27);
    u_xlat16_27 = u_xlat16_27 * unity_SpecCube0_HDR.y;
    u_xlat16_27 = exp2(u_xlat16_27);
    u_xlat16_27 = u_xlat16_27 * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_1.xyz * vec3(u_xlat16_27);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
    u_xlat16_3.xyz = u_xlat10.xyz * vec3(_Expond) + u_xlat16_3.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixInvV[1].xyz * _rimlightdir.xxyz.zzz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixInvV[0].xyz * _rimlightdir.xxyz.yyy + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixInvV[2].xyz * vec3(_rimlightdir.z, _rimlightdir.z, _rimlightdir.z) + u_xlat1.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat24 = u_xlat24 * 0.5 + 0.5;
    u_xlat24 = u_xlat24 + (-_rimthreshold);
    u_xlat24 = u_xlat24 * _rimhardness;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = vec3(u_xlat24) * _rimcolor.xyz;
    u_xlat1.xyz = u_xlat16_3.xyz * vec3(vec3(_rimintensity, _rimintensity, _rimintensity));
    u_xlat2.xyz = u_xlat2.xxx * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat16_3.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(2.20000005, 2.20000005, 2.20000005);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    SV_Target0.xyz = sqrt(u_xlat16_3.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 222
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %84 %93 %95 %98 %138 %141 %148 %150 %184 %208 %213 %214 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 RelaxedPrecision 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 RelaxedPrecision 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 RelaxedPrecision 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 RelaxedPrecision 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 RelaxedPrecision 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 RelaxedPrecision 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpMemberDecorate %21 16 RelaxedPrecision 
                                                      OpMemberDecorate %21 16 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpDecorate %59 ArrayStride 59 
                                                      OpMemberDecorate %60 0 Offset 60 
                                                      OpMemberDecorate %60 1 Offset 60 
                                                      OpDecorate %60 Block 
                                                      OpDecorate %62 DescriptorSet 62 
                                                      OpDecorate %62 Binding 62 
                                                      OpMemberDecorate %82 0 BuiltIn 82 
                                                      OpMemberDecorate %82 1 BuiltIn 82 
                                                      OpMemberDecorate %82 2 BuiltIn 82 
                                                      OpDecorate %82 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 93 
                                                      OpDecorate %95 Location 95 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate vs_TEXCOORD1 Location 138 
                                                      OpDecorate vs_TEXCOORD2 Location 141 
                                                      OpDecorate vs_TEXCOORD5 Location 148 
                                                      OpDecorate %150 Location 150 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 208 
                                                      OpDecorate vs_TEXCOORD6 Location 213 
                                                      OpDecorate %214 Location 214 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %10 %16 
                                              %18 = OpTypeArray %10 %16 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypeArray %10 %19 
                                              %21 = OpTypeStruct %17 %18 %10 %10 %10 %20 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4; f32_4[2]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 0 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %10 
                                          i32 %40 = OpConstant 2 
                                          i32 %50 = OpConstant 3 
                                              %55 = OpTypePointer Private %10 
                               Private f32_4* %56 = OpVariable Private 
                                              %59 = OpTypeArray %10 %16 
                                              %60 = OpTypeStruct %7 %59 
                                              %61 = OpTypePointer Uniform %60 
           Uniform struct {f32_3; f32_4[4];}* %62 = OpVariable Uniform 
                                          u32 %80 = OpConstant 1 
                                              %81 = OpTypeArray %6 %80 
                                              %82 = OpTypeStruct %10 %6 %81 
                                              %83 = OpTypePointer Output %82 
         Output struct {f32_4; f32; f32[1];}* %84 = OpVariable Output 
                                              %89 = OpTypePointer Output %10 
                                              %91 = OpTypeVector %6 2 
                                              %92 = OpTypePointer Output %91 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                              %94 = OpTypePointer Input %91 
                                 Input f32_2* %95 = OpVariable Input 
                                              %97 = OpTypePointer Input %7 
                                 Input f32_3* %98 = OpVariable Input 
                                         u32 %104 = OpConstant 0 
                                             %105 = OpTypePointer Private %6 
                                Private f32* %119 = OpVariable Private 
                                         f32 %126 = OpConstant 3.674022E-40 
                                             %137 = OpTypePointer Output %7 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %144 = OpTypePointer Uniform %7 
                       Output f32_3* vs_TEXCOORD5 = OpVariable Output 
                                Input f32_4* %150 = OpVariable Input 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                              Private f32_3* %186 = OpVariable Private 
                                         u32 %200 = OpConstant 3 
                                             %201 = OpTypePointer Input %6 
                                             %204 = OpTypePointer Uniform %6 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                Input f32_4* %214 = OpVariable Input 
                                             %216 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %12 
                                        f32_3 %14 = OpVectorShuffle %13 %13 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_3 %30 = OpVectorShuffle %29 %29 0 1 2 
                                        f32_3 %31 = OpFMul %14 %30 
                                                      OpStore %9 %31 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %25 
                                        f32_4 %33 = OpLoad %32 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                        f32_4 %35 = OpLoad %12 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 0 0 
                                        f32_3 %37 = OpFMul %34 %36 
                                        f32_3 %38 = OpLoad %9 
                                        f32_3 %39 = OpFAdd %37 %38 
                                                      OpStore %9 %39 
                               Uniform f32_4* %41 = OpAccessChain %23 %25 %40 
                                        f32_4 %42 = OpLoad %41 
                                        f32_3 %43 = OpVectorShuffle %42 %42 0 1 2 
                                        f32_4 %44 = OpLoad %12 
                                        f32_3 %45 = OpVectorShuffle %44 %44 2 2 2 
                                        f32_3 %46 = OpFMul %43 %45 
                                        f32_3 %47 = OpLoad %9 
                                        f32_3 %48 = OpFAdd %46 %47 
                                                      OpStore %9 %48 
                                        f32_3 %49 = OpLoad %9 
                               Uniform f32_4* %51 = OpAccessChain %23 %25 %50 
                                        f32_4 %52 = OpLoad %51 
                                        f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                        f32_3 %54 = OpFAdd %49 %53 
                                                      OpStore %9 %54 
                                        f32_3 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 1 1 1 1 
                               Uniform f32_4* %63 = OpAccessChain %62 %26 %26 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFMul %58 %64 
                                                      OpStore %56 %65 
                               Uniform f32_4* %66 = OpAccessChain %62 %26 %25 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpLoad %9 
                                        f32_4 %69 = OpVectorShuffle %68 %68 0 0 0 0 
                                        f32_4 %70 = OpFMul %67 %69 
                                        f32_4 %71 = OpLoad %56 
                                        f32_4 %72 = OpFAdd %70 %71 
                                                      OpStore %56 %72 
                               Uniform f32_4* %73 = OpAccessChain %62 %26 %40 
                                        f32_4 %74 = OpLoad %73 
                                        f32_3 %75 = OpLoad %9 
                                        f32_4 %76 = OpVectorShuffle %75 %75 2 2 2 2 
                                        f32_4 %77 = OpFMul %74 %76 
                                        f32_4 %78 = OpLoad %56 
                                        f32_4 %79 = OpFAdd %77 %78 
                                                      OpStore %56 %79 
                                        f32_4 %85 = OpLoad %56 
                               Uniform f32_4* %86 = OpAccessChain %62 %26 %50 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpFAdd %85 %87 
                                Output f32_4* %90 = OpAccessChain %84 %25 
                                                      OpStore %90 %88 
                                        f32_2 %96 = OpLoad %95 
                                                      OpStore vs_TEXCOORD0 %96 
                                        f32_3 %99 = OpLoad %98 
                              Uniform f32_4* %100 = OpAccessChain %23 %26 %25 
                                       f32_4 %101 = OpLoad %100 
                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 2 
                                         f32 %103 = OpDot %99 %102 
                                Private f32* %106 = OpAccessChain %56 %104 
                                                      OpStore %106 %103 
                                       f32_3 %107 = OpLoad %98 
                              Uniform f32_4* %108 = OpAccessChain %23 %26 %26 
                                       f32_4 %109 = OpLoad %108 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                         f32 %111 = OpDot %107 %110 
                                Private f32* %112 = OpAccessChain %56 %80 
                                                      OpStore %112 %111 
                                       f32_3 %113 = OpLoad %98 
                              Uniform f32_4* %114 = OpAccessChain %23 %26 %40 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                         f32 %117 = OpDot %113 %116 
                                Private f32* %118 = OpAccessChain %56 %19 
                                                      OpStore %118 %117 
                                       f32_4 %120 = OpLoad %56 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_4 %122 = OpLoad %56 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                         f32 %124 = OpDot %121 %123 
                                                      OpStore %119 %124 
                                         f32 %125 = OpLoad %119 
                                         f32 %127 = OpExtInst %1 40 %125 %126 
                                                      OpStore %119 %127 
                                         f32 %128 = OpLoad %119 
                                         f32 %129 = OpExtInst %1 32 %128 
                                                      OpStore %119 %129 
                                         f32 %130 = OpLoad %119 
                                       f32_3 %131 = OpCompositeConstruct %130 %130 %130 
                                       f32_4 %132 = OpLoad %56 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_3 %134 = OpFMul %131 %133 
                                       f32_4 %135 = OpLoad %56 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 6 3 
                                                      OpStore %56 %136 
                                       f32_4 %139 = OpLoad %56 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                                      OpStore vs_TEXCOORD1 %140 
                                       f32_3 %142 = OpLoad %9 
                                       f32_3 %143 = OpFNegate %142 
                              Uniform f32_3* %145 = OpAccessChain %62 %25 
                                       f32_3 %146 = OpLoad %145 
                                       f32_3 %147 = OpFAdd %143 %146 
                                                      OpStore vs_TEXCOORD2 %147 
                                       f32_3 %149 = OpLoad %9 
                                                      OpStore vs_TEXCOORD5 %149 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 1 1 1 
                              Uniform f32_4* %153 = OpAccessChain %23 %25 %26 
                                       f32_4 %154 = OpLoad %153 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFMul %152 %155 
                                                      OpStore %9 %156 
                              Uniform f32_4* %157 = OpAccessChain %23 %25 %25 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_4 %160 = OpLoad %150 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 0 0 
                                       f32_3 %162 = OpFMul %159 %161 
                                       f32_3 %163 = OpLoad %9 
                                       f32_3 %164 = OpFAdd %162 %163 
                                                      OpStore %9 %164 
                              Uniform f32_4* %165 = OpAccessChain %23 %25 %40 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_4 %168 = OpLoad %150 
                                       f32_3 %169 = OpVectorShuffle %168 %168 2 2 2 
                                       f32_3 %170 = OpFMul %167 %169 
                                       f32_3 %171 = OpLoad %9 
                                       f32_3 %172 = OpFAdd %170 %171 
                                                      OpStore %9 %172 
                                       f32_3 %173 = OpLoad %9 
                                       f32_3 %174 = OpLoad %9 
                                         f32 %175 = OpDot %173 %174 
                                                      OpStore %119 %175 
                                         f32 %176 = OpLoad %119 
                                         f32 %177 = OpExtInst %1 40 %176 %126 
                                                      OpStore %119 %177 
                                         f32 %178 = OpLoad %119 
                                         f32 %179 = OpExtInst %1 32 %178 
                                                      OpStore %119 %179 
                                         f32 %180 = OpLoad %119 
                                       f32_3 %181 = OpCompositeConstruct %180 %180 %180 
                                       f32_3 %182 = OpLoad %9 
                                       f32_3 %183 = OpFMul %181 %182 
                                                      OpStore %9 %183 
                                       f32_3 %185 = OpLoad %9 
                                                      OpStore vs_TEXCOORD3 %185 
                                       f32_3 %187 = OpLoad %9 
                                       f32_3 %188 = OpVectorShuffle %187 %187 1 2 0 
                                       f32_4 %189 = OpLoad %56 
                                       f32_3 %190 = OpVectorShuffle %189 %189 2 0 1 
                                       f32_3 %191 = OpFMul %188 %190 
                                                      OpStore %186 %191 
                                       f32_4 %192 = OpLoad %56 
                                       f32_3 %193 = OpVectorShuffle %192 %192 1 2 0 
                                       f32_3 %194 = OpLoad %9 
                                       f32_3 %195 = OpVectorShuffle %194 %194 2 0 1 
                                       f32_3 %196 = OpFMul %193 %195 
                                       f32_3 %197 = OpLoad %186 
                                       f32_3 %198 = OpFNegate %197 
                                       f32_3 %199 = OpFAdd %196 %198 
                                                      OpStore %9 %199 
                                  Input f32* %202 = OpAccessChain %150 %200 
                                         f32 %203 = OpLoad %202 
                                Uniform f32* %205 = OpAccessChain %23 %50 %200 
                                         f32 %206 = OpLoad %205 
                                         f32 %207 = OpFMul %203 %206 
                                                      OpStore %119 %207 
                                         f32 %209 = OpLoad %119 
                                       f32_3 %210 = OpCompositeConstruct %209 %209 %209 
                                       f32_3 %211 = OpLoad %9 
                                       f32_3 %212 = OpFMul %210 %211 
                                                      OpStore vs_TEXCOORD4 %212 
                                       f32_4 %215 = OpLoad %214 
                                                      OpStore vs_TEXCOORD6 %215 
                                 Output f32* %217 = OpAccessChain %84 %25 %80 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpFNegate %218 
                                 Output f32* %220 = OpAccessChain %84 %25 %80 
                                                      OpStore %220 %219 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 754
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %59 %84 %207 %223 %746 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %30 ArrayStride 30 
                                                      OpMemberDecorate %31 0 Offset 31 
                                                      OpMemberDecorate %31 1 RelaxedPrecision 
                                                      OpMemberDecorate %31 1 Offset 31 
                                                      OpMemberDecorate %31 2 Offset 31 
                                                      OpDecorate %31 Block 
                                                      OpDecorate %33 DescriptorSet 33 
                                                      OpDecorate %33 Binding 33 
                                                      OpDecorate vs_TEXCOORD3 Location 59 
                                                      OpMemberDecorate %67 0 Offset 67 
                                                      OpMemberDecorate %67 1 Offset 67 
                                                      OpMemberDecorate %67 2 Offset 67 
                                                      OpMemberDecorate %67 3 Offset 67 
                                                      OpMemberDecorate %67 4 Offset 67 
                                                      OpMemberDecorate %67 5 Offset 67 
                                                      OpMemberDecorate %67 6 Offset 67 
                                                      OpMemberDecorate %67 7 Offset 67 
                                                      OpMemberDecorate %67 8 Offset 67 
                                                      OpMemberDecorate %67 9 Offset 67 
                                                      OpMemberDecorate %67 10 Offset 67 
                                                      OpMemberDecorate %67 11 Offset 67 
                                                      OpMemberDecorate %67 12 Offset 67 
                                                      OpDecorate %67 Block 
                                                      OpDecorate %69 DescriptorSet 69 
                                                      OpDecorate %69 Binding 69 
                                                      OpDecorate vs_TEXCOORD0 Location 84 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %100 DescriptorSet 100 
                                                      OpDecorate %100 Binding 100 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %104 DescriptorSet 104 
                                                      OpDecorate %104 Binding 104 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %120 RelaxedPrecision 
                                                      OpDecorate %122 RelaxedPrecision 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %167 DescriptorSet 167 
                                                      OpDecorate %167 Binding 167 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %169 DescriptorSet 169 
                                                      OpDecorate %169 Binding 169 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %177 DescriptorSet 177 
                                                      OpDecorate %177 Binding 177 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %179 DescriptorSet 179 
                                                      OpDecorate %179 Binding 179 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 207 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 223 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %483 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                                      OpDecorate %487 RelaxedPrecision 
                                                      OpDecorate %493 RelaxedPrecision 
                                                      OpDecorate %494 ArrayStride 494 
                                                      OpDecorate %495 ArrayStride 495 
                                                      OpDecorate %497 ArrayStride 497 
                                                      OpMemberDecorate %498 0 Offset 498 
                                                      OpMemberDecorate %498 1 Offset 498 
                                                      OpMemberDecorate %498 2 Offset 498 
                                                      OpMemberDecorate %498 3 RelaxedPrecision 
                                                      OpMemberDecorate %498 3 Offset 498 
                                                      OpMemberDecorate %498 4 RelaxedPrecision 
                                                      OpMemberDecorate %498 4 Offset 498 
                                                      OpMemberDecorate %498 5 RelaxedPrecision 
                                                      OpMemberDecorate %498 5 Offset 498 
                                                      OpMemberDecorate %498 6 Offset 498 
                                                      OpMemberDecorate %498 7 RelaxedPrecision 
                                                      OpMemberDecorate %498 7 Offset 498 
                                                      OpMemberDecorate %498 8 Offset 498 
                                                      OpMemberDecorate %498 9 Offset 498 
                                                      OpMemberDecorate %498 10 RelaxedPrecision 
                                                      OpMemberDecorate %498 10 Offset 498 
                                                      OpMemberDecorate %498 11 RelaxedPrecision 
                                                      OpMemberDecorate %498 11 Offset 498 
                                                      OpMemberDecorate %498 12 RelaxedPrecision 
                                                      OpMemberDecorate %498 12 Offset 498 
                                                      OpMemberDecorate %498 13 RelaxedPrecision 
                                                      OpMemberDecorate %498 13 Offset 498 
                                                      OpMemberDecorate %498 14 RelaxedPrecision 
                                                      OpMemberDecorate %498 14 Offset 498 
                                                      OpMemberDecorate %498 15 RelaxedPrecision 
                                                      OpMemberDecorate %498 15 Offset 498 
                                                      OpMemberDecorate %498 16 RelaxedPrecision 
                                                      OpMemberDecorate %498 16 Offset 498 
                                                      OpDecorate %498 Block 
                                                      OpDecorate %500 DescriptorSet 500 
                                                      OpDecorate %500 Binding 500 
                                                      OpDecorate %503 RelaxedPrecision 
                                                      OpDecorate %504 RelaxedPrecision 
                                                      OpDecorate %505 RelaxedPrecision 
                                                      OpDecorate %509 RelaxedPrecision 
                                                      OpDecorate %510 RelaxedPrecision 
                                                      OpDecorate %511 RelaxedPrecision 
                                                      OpDecorate %515 RelaxedPrecision 
                                                      OpDecorate %516 RelaxedPrecision 
                                                      OpDecorate %517 RelaxedPrecision 
                                                      OpDecorate %521 RelaxedPrecision 
                                                      OpDecorate %522 RelaxedPrecision 
                                                      OpDecorate %523 RelaxedPrecision 
                                                      OpDecorate %524 RelaxedPrecision 
                                                      OpDecorate %525 RelaxedPrecision 
                                                      OpDecorate %526 RelaxedPrecision 
                                                      OpDecorate %527 RelaxedPrecision 
                                                      OpDecorate %531 RelaxedPrecision 
                                                      OpDecorate %536 RelaxedPrecision 
                                                      OpDecorate %541 RelaxedPrecision 
                                                      OpDecorate %545 RelaxedPrecision 
                                                      OpDecorate %546 RelaxedPrecision 
                                                      OpDecorate %547 RelaxedPrecision 
                                                      OpDecorate %548 RelaxedPrecision 
                                                      OpDecorate %550 RelaxedPrecision 
                                                      OpDecorate %551 RelaxedPrecision 
                                                      OpDecorate %552 RelaxedPrecision 
                                                      OpDecorate %553 RelaxedPrecision 
                                                      OpDecorate %571 RelaxedPrecision 
                                                      OpDecorate %572 RelaxedPrecision 
                                                      OpDecorate %574 RelaxedPrecision 
                                                      OpDecorate %576 RelaxedPrecision 
                                                      OpDecorate %578 RelaxedPrecision 
                                                      OpDecorate %580 RelaxedPrecision 
                                                      OpDecorate %581 RelaxedPrecision 
                                                      OpDecorate %582 RelaxedPrecision 
                                                      OpDecorate %584 RelaxedPrecision 
                                                      OpDecorate %585 RelaxedPrecision 
                                                      OpDecorate %588 RelaxedPrecision 
                                                      OpDecorate %588 DescriptorSet 588 
                                                      OpDecorate %588 Binding 588 
                                                      OpDecorate %589 RelaxedPrecision 
                                                      OpDecorate %590 RelaxedPrecision 
                                                      OpDecorate %590 DescriptorSet 590 
                                                      OpDecorate %590 Binding 590 
                                                      OpDecorate %591 RelaxedPrecision 
                                                      OpDecorate %595 RelaxedPrecision 
                                                      OpDecorate %598 RelaxedPrecision 
                                                      OpDecorate %599 RelaxedPrecision 
                                                      OpDecorate %602 RelaxedPrecision 
                                                      OpDecorate %603 RelaxedPrecision 
                                                      OpDecorate %604 RelaxedPrecision 
                                                      OpDecorate %605 RelaxedPrecision 
                                                      OpDecorate %606 RelaxedPrecision 
                                                      OpDecorate %607 RelaxedPrecision 
                                                      OpDecorate %608 RelaxedPrecision 
                                                      OpDecorate %609 RelaxedPrecision 
                                                      OpDecorate %610 RelaxedPrecision 
                                                      OpDecorate %612 RelaxedPrecision 
                                                      OpDecorate %613 RelaxedPrecision 
                                                      OpDecorate %614 RelaxedPrecision 
                                                      OpDecorate %615 RelaxedPrecision 
                                                      OpDecorate %616 RelaxedPrecision 
                                                      OpDecorate %618 RelaxedPrecision 
                                                      OpDecorate %619 RelaxedPrecision 
                                                      OpDecorate %620 RelaxedPrecision 
                                                      OpDecorate %621 RelaxedPrecision 
                                                      OpDecorate %622 RelaxedPrecision 
                                                      OpDecorate %623 RelaxedPrecision 
                                                      OpDecorate %624 RelaxedPrecision 
                                                      OpDecorate %625 RelaxedPrecision 
                                                      OpDecorate %626 RelaxedPrecision 
                                                      OpDecorate %627 RelaxedPrecision 
                                                      OpDecorate %633 RelaxedPrecision 
                                                      OpDecorate %636 RelaxedPrecision 
                                                      OpDecorate %705 RelaxedPrecision 
                                                      OpDecorate %713 RelaxedPrecision 
                                                      OpDecorate %714 RelaxedPrecision 
                                                      OpDecorate %715 RelaxedPrecision 
                                                      OpDecorate %716 RelaxedPrecision 
                                                      OpDecorate %717 RelaxedPrecision 
                                                      OpDecorate %718 RelaxedPrecision 
                                                      OpDecorate %737 RelaxedPrecision 
                                                      OpDecorate %738 RelaxedPrecision 
                                                      OpDecorate %739 RelaxedPrecision 
                                                      OpDecorate %742 RelaxedPrecision 
                                                      OpDecorate %743 RelaxedPrecision 
                                                      OpDecorate %744 RelaxedPrecision 
                                                      OpDecorate %746 RelaxedPrecision 
                                                      OpDecorate %746 Location 746 
                                                      OpDecorate %747 RelaxedPrecision 
                                                      OpDecorate %748 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 0 
                                              %17 = OpTypePointer Private %6 
                               Private f32_3* %23 = OpVariable Private 
                                              %28 = OpTypeVector %6 4 
                                          u32 %29 = OpConstant 4 
                                              %30 = OpTypeArray %28 %29 
                                              %31 = OpTypeStruct %28 %28 %30 
                                              %32 = OpTypePointer Uniform %31 
    Uniform struct {f32_4; f32_4; f32_4[4];}* %33 = OpVariable Uniform 
                                              %34 = OpTypeInt 32 1 
                                          i32 %35 = OpConstant 0 
                                              %36 = OpTypePointer Uniform %28 
                               Private f32_3* %41 = OpVariable Private 
                                 Private f32* %58 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                 Private f32* %66 = OpVariable Private 
                                              %67 = OpTypeStruct %6 %28 %28 %28 %6 %7 %28 %6 %6 %6 %6 %28 %6 
                                              %68 = OpTypePointer Uniform %67 
Uniform struct {f32; f32_4; f32_4; f32_4; f32; f32_3; f32_4; f32; f32; f32; f32; f32_4; f32;}* %69 = OpVariable Uniform 
                                          i32 %70 = OpConstant 10 
                                              %71 = OpTypePointer Uniform %6 
                                          f32 %75 = OpConstant 3.674022E-40 
                                          f32 %77 = OpConstant 3.674022E-40 
                               Private f32_3* %81 = OpVariable Private 
                                              %82 = OpTypeVector %6 2 
                                              %83 = OpTypePointer Input %82 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                          i32 %86 = OpConstant 1 
                                 Private f32* %97 = OpVariable Private 
                                              %98 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %99 = OpTypePointer UniformConstant %98 
        UniformConstant read_only Texture2D* %100 = OpVariable UniformConstant 
                                             %102 = OpTypeSampler 
                                             %103 = OpTypePointer UniformConstant %102 
                    UniformConstant sampler* %104 = OpVariable UniformConstant 
                                             %106 = OpTypeSampledImage %98 
                              Private f32_3* %112 = OpVariable Private 
                              Private f32_3* %117 = OpVariable Private 
                                         f32 %119 = OpConstant 3.674022E-40 
                                         f32 %121 = OpConstant 3.674022E-40 
                                         i32 %126 = OpConstant 12 
                                Private f32* %131 = OpVariable Private 
                                             %152 = OpTypePointer Private %28 
                              Private f32_4* %153 = OpVariable Private 
                                         i32 %155 = OpConstant 2 
                              Private f32_3* %166 = OpVariable Private 
        UniformConstant read_only Texture2D* %167 = OpVariable UniformConstant 
                    UniformConstant sampler* %169 = OpVariable UniformConstant 
                              Private f32_3* %176 = OpVariable Private 
        UniformConstant read_only Texture2D* %177 = OpVariable UniformConstant 
                    UniformConstant sampler* %179 = OpVariable UniformConstant 
                                         i32 %187 = OpConstant 3 
                                         f32 %196 = OpConstant 3.674022E-40 
                                       f32_3 %197 = OpConstantComposite %196 %196 %196 
                              Private f32_3* %199 = OpVariable Private 
                                       f32_3 %201 = OpConstantComposite %119 %119 %119 
                                       f32_3 %203 = OpConstantComposite %121 %121 %121 
                        Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                Private f32* %231 = OpVariable Private 
                              Private f32_3* %246 = OpVariable Private 
                                         f32 %299 = OpConstant 3.674022E-40 
                                         u32 %309 = OpConstant 1 
                                         f32 %330 = OpConstant 3.674022E-40 
                                         i32 %339 = OpConstant 11 
                                         i32 %349 = OpConstant 4 
                                Private f32* %354 = OpVariable Private 
                                         f32 %362 = OpConstant 3.674022E-40 
                                         f32 %371 = OpConstant 3.674022E-40 
                                         f32 %384 = OpConstant 3.674022E-40 
                              Private f32_4* %487 = OpVariable Private 
                              Private f32_3* %493 = OpVariable Private 
                                             %494 = OpTypeArray %28 %29 
                                             %495 = OpTypeArray %28 %29 
                                         u32 %496 = OpConstant 2 
                                             %497 = OpTypeArray %28 %496 
                                             %498 = OpTypeStruct %494 %495 %28 %28 %28 %497 %28 %28 %28 %28 %28 %28 %28 %28 %28 %28 %28 
                                             %499 = OpTypePointer Uniform %498 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4; f32_4[2]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %500 = OpVariable Uniform 
                                         i32 %501 = OpConstant 13 
                                         i32 %507 = OpConstant 14 
                                         i32 %513 = OpConstant 15 
                                         i32 %519 = OpConstant 16 
                                         u32 %528 = OpConstant 3 
                                       f32_3 %549 = OpConstantComposite %384 %384 %384 
                                         f32 %573 = OpConstant 3.674022E-40 
                                         f32 %575 = OpConstant 3.674022E-40 
                                         f32 %583 = OpConstant 3.674022E-40 
                              Private f32_4* %585 = OpVariable Private 
                                             %586 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %587 = OpTypePointer UniformConstant %586 
      UniformConstant read_only TextureCube* %588 = OpVariable UniformConstant 
                    UniformConstant sampler* %590 = OpVariable UniformConstant 
                                             %592 = OpTypeSampledImage %586 
                                         i32 %600 = OpConstant 7 
                                         i32 %641 = OpConstant 5 
                                             %642 = OpTypePointer Uniform %7 
                                         f32 %683 = OpConstant 3.674022E-40 
                                         i32 %687 = OpConstant 8 
                                         i32 %700 = OpConstant 6 
                                         i32 %706 = OpConstant 9 
                                       f32_3 %724 = OpConstantComposite %573 %573 %573 
                                         f32 %727 = OpConstant 3.674022E-40 
                                       f32_3 %728 = OpConstantComposite %727 %727 %727 
                                         f32 %740 = OpConstant 3.674022E-40 
                                       f32_3 %741 = OpConstantComposite %740 %740 %740 
                                             %745 = OpTypePointer Output %28 
                               Output f32_4* %746 = OpVariable Output 
                                             %751 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                                          f32 %14 = OpDot %12 %13 
                                 Private f32* %18 = OpAccessChain %9 %16 
                                                      OpStore %18 %14 
                                 Private f32* %19 = OpAccessChain %9 %16 
                                          f32 %20 = OpLoad %19 
                                          f32 %21 = OpExtInst %1 32 %20 
                                 Private f32* %22 = OpAccessChain %9 %16 
                                                      OpStore %22 %21 
                                        f32_3 %24 = OpLoad vs_TEXCOORD2 
                                        f32_3 %25 = OpLoad %9 
                                        f32_3 %26 = OpVectorShuffle %25 %25 0 0 0 
                                        f32_3 %27 = OpFMul %24 %26 
                               Uniform f32_4* %37 = OpAccessChain %33 %35 
                                        f32_4 %38 = OpLoad %37 
                                        f32_3 %39 = OpVectorShuffle %38 %38 0 1 2 
                                        f32_3 %40 = OpFAdd %27 %39 
                                                      OpStore %23 %40 
                                        f32_3 %42 = OpLoad %9 
                                        f32_3 %43 = OpVectorShuffle %42 %42 0 0 0 
                                        f32_3 %44 = OpLoad vs_TEXCOORD2 
                                        f32_3 %45 = OpFMul %43 %44 
                                                      OpStore %41 %45 
                                        f32_3 %46 = OpLoad %23 
                                        f32_3 %47 = OpLoad %23 
                                          f32 %48 = OpDot %46 %47 
                                 Private f32* %49 = OpAccessChain %9 %16 
                                                      OpStore %49 %48 
                                 Private f32* %50 = OpAccessChain %9 %16 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpExtInst %1 32 %51 
                                 Private f32* %53 = OpAccessChain %9 %16 
                                                      OpStore %53 %52 
                                        f32_3 %54 = OpLoad %9 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 0 0 
                                        f32_3 %56 = OpLoad %23 
                                        f32_3 %57 = OpFMul %55 %56 
                                                      OpStore %9 %57 
                                        f32_3 %60 = OpLoad vs_TEXCOORD3 
                                        f32_3 %61 = OpLoad %9 
                                          f32 %62 = OpDot %60 %61 
                                                      OpStore %58 %62 
                                          f32 %63 = OpLoad %58 
                                          f32 %64 = OpLoad %58 
                                          f32 %65 = OpFMul %63 %64 
                                                      OpStore %58 %65 
                                 Uniform f32* %72 = OpAccessChain %69 %70 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFNegate %73 
                                          f32 %76 = OpFMul %74 %75 
                                          f32 %78 = OpFAdd %76 %77 
                                                      OpStore %66 %78 
                                          f32 %79 = OpLoad %66 
                                          f32 %80 = OpExtInst %1 31 %79 
                                                      OpStore %66 %80 
                                        f32_2 %85 = OpLoad vs_TEXCOORD0 
                               Uniform f32_4* %87 = OpAccessChain %69 %86 
                                        f32_4 %88 = OpLoad %87 
                                        f32_2 %89 = OpVectorShuffle %88 %88 0 1 
                                        f32_2 %90 = OpFMul %85 %89 
                               Uniform f32_4* %91 = OpAccessChain %69 %86 
                                        f32_4 %92 = OpLoad %91 
                                        f32_2 %93 = OpVectorShuffle %92 %92 2 3 
                                        f32_2 %94 = OpFAdd %90 %93 
                                        f32_3 %95 = OpLoad %81 
                                        f32_3 %96 = OpVectorShuffle %95 %94 3 4 2 
                                                      OpStore %81 %96 
                         read_only Texture2D %101 = OpLoad %100 
                                     sampler %105 = OpLoad %104 
                  read_only Texture2DSampled %107 = OpSampledImage %101 %105 
                                       f32_3 %108 = OpLoad %81 
                                       f32_2 %109 = OpVectorShuffle %108 %108 0 1 
                                       f32_4 %110 = OpImageSampleImplicitLod %107 %109 
                                         f32 %111 = OpCompositeExtract %110 0 
                                                      OpStore %97 %111 
                                         f32 %113 = OpLoad %97 
                                         f32 %114 = OpLoad %97 
                                         f32 %115 = OpFMul %113 %114 
                                Private f32* %116 = OpAccessChain %112 %16 
                                                      OpStore %116 %115 
                                         f32 %118 = OpLoad %97 
                                         f32 %120 = OpFMul %118 %119 
                                         f32 %122 = OpFAdd %120 %121 
                                Private f32* %123 = OpAccessChain %117 %16 
                                                      OpStore %123 %122 
                                Private f32* %124 = OpAccessChain %117 %16 
                                         f32 %125 = OpLoad %124 
                                Uniform f32* %127 = OpAccessChain %69 %126 
                                         f32 %128 = OpLoad %127 
                                         f32 %129 = OpFAdd %125 %128 
                                Private f32* %130 = OpAccessChain %81 %16 
                                                      OpStore %130 %129 
                                Private f32* %132 = OpAccessChain %112 %16 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpLoad %66 
                                         f32 %135 = OpFDiv %133 %134 
                                                      OpStore %131 %135 
                                         f32 %136 = OpLoad %66 
                                Private f32* %137 = OpAccessChain %112 %16 
                                         f32 %138 = OpLoad %137 
                                         f32 %139 = OpFMul %136 %138 
                                                      OpStore %66 %139 
                                         f32 %140 = OpLoad %131 
                                         f32 %141 = OpLoad %131 
                                         f32 %142 = OpFMul %140 %141 
                                Private f32* %143 = OpAccessChain %112 %16 
                                                      OpStore %143 %142 
                                         f32 %144 = OpLoad %58 
                                Private f32* %145 = OpAccessChain %112 %16 
                                         f32 %146 = OpLoad %145 
                                         f32 %147 = OpFDiv %144 %146 
                                                      OpStore %58 %147 
                                         f32 %148 = OpLoad %66 
                                         f32 %149 = OpLoad %66 
                                         f32 %150 = OpFMul %148 %149 
                                Private f32* %151 = OpAccessChain %112 %16 
                                                      OpStore %151 %150 
                                       f32_2 %154 = OpLoad vs_TEXCOORD0 
                              Uniform f32_4* %156 = OpAccessChain %69 %155 
                                       f32_4 %157 = OpLoad %156 
                                       f32_2 %158 = OpVectorShuffle %157 %157 0 1 
                                       f32_2 %159 = OpFMul %154 %158 
                              Uniform f32_4* %160 = OpAccessChain %69 %155 
                                       f32_4 %161 = OpLoad %160 
                                       f32_2 %162 = OpVectorShuffle %161 %161 2 3 
                                       f32_2 %163 = OpFAdd %159 %162 
                                       f32_4 %164 = OpLoad %153 
                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 2 3 
                                                      OpStore %153 %165 
                         read_only Texture2D %168 = OpLoad %167 
                                     sampler %170 = OpLoad %169 
                  read_only Texture2DSampled %171 = OpSampledImage %168 %170 
                                       f32_4 %172 = OpLoad %153 
                                       f32_2 %173 = OpVectorShuffle %172 %172 0 1 
                                       f32_4 %174 = OpImageSampleImplicitLod %171 %173 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                                                      OpStore %166 %175 
                         read_only Texture2D %178 = OpLoad %177 
                                     sampler %180 = OpLoad %179 
                  read_only Texture2DSampled %181 = OpSampledImage %178 %180 
                                       f32_4 %182 = OpLoad %153 
                                       f32_2 %183 = OpVectorShuffle %182 %182 0 1 
                                       f32_4 %184 = OpImageSampleImplicitLod %181 %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                                      OpStore %176 %185 
                                       f32_3 %186 = OpLoad %176 
                              Uniform f32_4* %188 = OpAccessChain %69 %187 
                                       f32_4 %189 = OpLoad %188 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_3 %191 = OpFMul %186 %190 
                                       f32_4 %192 = OpLoad %153 
                                       f32_4 %193 = OpVectorShuffle %192 %191 4 5 6 3 
                                                      OpStore %153 %193 
                                       f32_4 %194 = OpLoad %153 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_3 %198 = OpFMul %195 %197 
                                                      OpStore %117 %198 
                                       f32_3 %200 = OpLoad %166 
                                       f32_3 %202 = OpFMul %200 %201 
                                       f32_3 %204 = OpFAdd %202 %203 
                                                      OpStore %199 %204 
                                       f32_3 %205 = OpLoad %199 
                                       f32_3 %206 = OpVectorShuffle %205 %205 1 1 1 
                                       f32_3 %208 = OpLoad vs_TEXCOORD4 
                                       f32_3 %209 = OpFMul %206 %208 
                                       f32_4 %210 = OpLoad %153 
                                       f32_4 %211 = OpVectorShuffle %210 %209 4 5 6 3 
                                                      OpStore %153 %211 
                                       f32_3 %212 = OpLoad %199 
                                       f32_3 %213 = OpVectorShuffle %212 %212 0 0 0 
                                       f32_3 %214 = OpLoad vs_TEXCOORD3 
                                       f32_3 %215 = OpFMul %213 %214 
                                       f32_4 %216 = OpLoad %153 
                                       f32_3 %217 = OpVectorShuffle %216 %216 0 1 2 
                                       f32_3 %218 = OpFAdd %215 %217 
                                       f32_4 %219 = OpLoad %153 
                                       f32_4 %220 = OpVectorShuffle %219 %218 4 5 6 3 
                                                      OpStore %153 %220 
                                       f32_3 %221 = OpLoad %199 
                                       f32_3 %222 = OpVectorShuffle %221 %221 2 2 2 
                                       f32_3 %224 = OpLoad vs_TEXCOORD1 
                                       f32_3 %225 = OpFMul %222 %224 
                                       f32_4 %226 = OpLoad %153 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_3 %228 = OpFAdd %225 %227 
                                       f32_4 %229 = OpLoad %153 
                                       f32_4 %230 = OpVectorShuffle %229 %228 4 5 6 3 
                                                      OpStore %153 %230 
                                       f32_4 %232 = OpLoad %153 
                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
                                       f32_4 %234 = OpLoad %153 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
                                         f32 %236 = OpDot %233 %235 
                                                      OpStore %231 %236 
                                         f32 %237 = OpLoad %231 
                                         f32 %238 = OpExtInst %1 32 %237 
                                                      OpStore %231 %238 
                                         f32 %239 = OpLoad %231 
                                       f32_3 %240 = OpCompositeConstruct %239 %239 %239 
                                       f32_4 %241 = OpLoad %153 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 1 2 
                                       f32_3 %243 = OpFMul %240 %242 
                                       f32_4 %244 = OpLoad %153 
                                       f32_4 %245 = OpVectorShuffle %244 %243 4 5 6 3 
                                                      OpStore %153 %245 
                                       f32_4 %247 = OpLoad %153 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                       f32_3 %249 = OpLoad %81 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 0 0 
                                       f32_3 %251 = OpFMul %248 %250 
                                       f32_3 %252 = OpLoad vs_TEXCOORD4 
                                       f32_3 %253 = OpFAdd %251 %252 
                                                      OpStore %246 %253 
                                       f32_3 %254 = OpLoad %246 
                                       f32_3 %255 = OpLoad %246 
                                         f32 %256 = OpDot %254 %255 
                                Private f32* %257 = OpAccessChain %81 %16 
                                                      OpStore %257 %256 
                                Private f32* %258 = OpAccessChain %81 %16 
                                         f32 %259 = OpLoad %258 
                                         f32 %260 = OpExtInst %1 32 %259 
                                Private f32* %261 = OpAccessChain %81 %16 
                                                      OpStore %261 %260 
                                       f32_3 %262 = OpLoad %81 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 0 0 
                                       f32_3 %264 = OpLoad %246 
                                       f32_3 %265 = OpFMul %263 %264 
                                                      OpStore %246 %265 
                                       f32_3 %266 = OpLoad %246 
                                       f32_3 %267 = OpLoad %9 
                                         f32 %268 = OpDot %266 %267 
                                Private f32* %269 = OpAccessChain %81 %16 
                                                      OpStore %269 %268 
                                Private f32* %270 = OpAccessChain %81 %16 
                                         f32 %271 = OpLoad %270 
                                Private f32* %272 = OpAccessChain %81 %16 
                                         f32 %273 = OpLoad %272 
                                         f32 %274 = OpFMul %271 %273 
                                Private f32* %275 = OpAccessChain %81 %16 
                                                      OpStore %275 %274 
                                Private f32* %276 = OpAccessChain %81 %16 
                                         f32 %277 = OpLoad %276 
                                Private f32* %278 = OpAccessChain %112 %16 
                                         f32 %279 = OpLoad %278 
                                         f32 %280 = OpFDiv %277 %279 
                                Private f32* %281 = OpAccessChain %81 %16 
                                                      OpStore %281 %280 
                                         f32 %282 = OpLoad %58 
                                Private f32* %283 = OpAccessChain %81 %16 
                                         f32 %284 = OpLoad %283 
                                         f32 %285 = OpFAdd %282 %284 
                                                      OpStore %58 %285 
                                       f32_4 %286 = OpLoad %153 
                                       f32_3 %287 = OpVectorShuffle %286 %286 0 1 2 
                                       f32_3 %288 = OpLoad %9 
                                         f32 %289 = OpDot %287 %288 
                                Private f32* %290 = OpAccessChain %81 %16 
                                                      OpStore %290 %289 
                              Uniform f32_4* %291 = OpAccessChain %33 %35 
                                       f32_4 %292 = OpLoad %291 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
                                       f32_3 %294 = OpLoad %9 
                                         f32 %295 = OpDot %293 %294 
                                Private f32* %296 = OpAccessChain %9 %16 
                                                      OpStore %296 %295 
                                Private f32* %297 = OpAccessChain %9 %16 
                                         f32 %298 = OpLoad %297 
                                         f32 %300 = OpExtInst %1 40 %298 %299 
                                Private f32* %301 = OpAccessChain %9 %16 
                                                      OpStore %301 %300 
                                Private f32* %302 = OpAccessChain %81 %16 
                                         f32 %303 = OpLoad %302 
                                Private f32* %304 = OpAccessChain %81 %16 
                                         f32 %305 = OpLoad %304 
                                         f32 %306 = OpFMul %303 %305 
                                         f32 %307 = OpLoad %58 
                                         f32 %308 = OpFAdd %306 %307 
                                Private f32* %310 = OpAccessChain %9 %309 
                                                      OpStore %310 %308 
                                       f32_3 %311 = OpLoad %9 
                                       f32_2 %312 = OpVectorShuffle %311 %311 0 1 
                                       f32_3 %313 = OpLoad %9 
                                       f32_2 %314 = OpVectorShuffle %313 %313 0 1 
                                       f32_2 %315 = OpFMul %312 %314 
                                       f32_3 %316 = OpLoad %9 
                                       f32_3 %317 = OpVectorShuffle %316 %315 3 4 2 
                                                      OpStore %9 %317 
                                         f32 %318 = OpLoad %131 
                                Private f32* %319 = OpAccessChain %9 %309 
                                         f32 %320 = OpLoad %319 
                                         f32 %321 = OpFMul %318 %320 
                                Private f32* %322 = OpAccessChain %23 %16 
                                                      OpStore %322 %321 
                                         f32 %323 = OpLoad %66 
                                Private f32* %324 = OpAccessChain %23 %16 
                                         f32 %325 = OpLoad %324 
                                         f32 %326 = OpFMul %323 %325 
                                Private f32* %327 = OpAccessChain %23 %16 
                                                      OpStore %327 %326 
                                Private f32* %328 = OpAccessChain %23 %16 
                                         f32 %329 = OpLoad %328 
                                         f32 %331 = OpFMul %329 %330 
                                Private f32* %332 = OpAccessChain %23 %16 
                                                      OpStore %332 %331 
                                Private f32* %333 = OpAccessChain %23 %16 
                                         f32 %334 = OpLoad %333 
                                         f32 %335 = OpFDiv %77 %334 
                                Private f32* %336 = OpAccessChain %23 %16 
                                                      OpStore %336 %335 
                                       f32_3 %337 = OpLoad %23 
                                       f32_3 %338 = OpVectorShuffle %337 %337 0 0 0 
                              Uniform f32_4* %340 = OpAccessChain %69 %339 
                                       f32_4 %341 = OpLoad %340 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                                       f32_3 %343 = OpFMul %338 %342 
                                                      OpStore %23 %343 
                                       f32_3 %344 = OpLoad %23 
                              Uniform f32_4* %345 = OpAccessChain %69 %339 
                                       f32_4 %346 = OpLoad %345 
                                       f32_3 %347 = OpVectorShuffle %346 %346 3 3 3 
                                       f32_3 %348 = OpFMul %344 %347 
                                                      OpStore %23 %348 
                                Uniform f32* %350 = OpAccessChain %69 %349 
                                         f32 %351 = OpLoad %350 
                                         f32 %352 = OpFNegate %351 
                                         f32 %353 = OpFAdd %352 %77 
                                                      OpStore %66 %353 
                                         f32 %355 = OpLoad %66 
                                         f32 %356 = OpFNegate %355 
                                         f32 %357 = OpFAdd %356 %77 
                                                      OpStore %354 %357 
                                         f32 %358 = OpLoad %354 
                                         f32 %359 = OpLoad %354 
                                         f32 %360 = OpFMul %358 %359 
                                                      OpStore %354 %360 
                                         f32 %361 = OpLoad %354 
                                         f32 %363 = OpExtInst %1 40 %361 %362 
                                                      OpStore %354 %363 
                                         f32 %364 = OpLoad %354 
                                         f32 %365 = OpLoad %354 
                                         f32 %366 = OpFAdd %364 %365 
                                                      OpStore %66 %366 
                                Private f32* %367 = OpAccessChain %9 %16 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpLoad %66 
                                         f32 %370 = OpFMul %368 %369 
                                         f32 %372 = OpFAdd %370 %371 
                                Private f32* %373 = OpAccessChain %9 %16 
                                                      OpStore %373 %372 
                                       f32_4 %374 = OpLoad %153 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                                       f32_3 %376 = OpLoad %41 
                                         f32 %377 = OpDot %375 %376 
                                                      OpStore %66 %377 
                                         f32 %378 = OpLoad %66 
                                         f32 %379 = OpExtInst %1 40 %378 %299 
                                                      OpStore %66 %379 
                                         f32 %380 = OpLoad %66 
                                         f32 %381 = OpFNegate %380 
                                         f32 %382 = OpFAdd %381 %77 
                                                      OpStore %66 %382 
                                         f32 %383 = OpLoad %66 
                                         f32 %385 = OpExtInst %1 40 %383 %384 
                                                      OpStore %66 %385 
                                         f32 %386 = OpLoad %66 
                                         f32 %387 = OpLoad %66 
                                         f32 %388 = OpFMul %386 %387 
                                Private f32* %389 = OpAccessChain %81 %16 
                                                      OpStore %389 %388 
                                Private f32* %390 = OpAccessChain %81 %16 
                                         f32 %391 = OpLoad %390 
                                Private f32* %392 = OpAccessChain %81 %16 
                                         f32 %393 = OpLoad %392 
                                         f32 %394 = OpFMul %391 %393 
                                Private f32* %395 = OpAccessChain %81 %16 
                                                      OpStore %395 %394 
                                         f32 %396 = OpLoad %66 
                                Private f32* %397 = OpAccessChain %81 %16 
                                         f32 %398 = OpLoad %397 
                                         f32 %399 = OpFMul %396 %398 
                                                      OpStore %66 %399 
                                Private f32* %400 = OpAccessChain %9 %16 
                                         f32 %401 = OpLoad %400 
                                         f32 %402 = OpLoad %66 
                                         f32 %403 = OpFMul %401 %402 
                                         f32 %404 = OpFAdd %403 %77 
                                                      OpStore %66 %404 
                                       f32_4 %405 = OpLoad %153 
                                       f32_3 %406 = OpVectorShuffle %405 %405 0 1 2 
                              Uniform f32_4* %407 = OpAccessChain %33 %35 
                                       f32_4 %408 = OpLoad %407 
                                       f32_3 %409 = OpVectorShuffle %408 %408 0 1 2 
                                         f32 %410 = OpDot %406 %409 
                                Private f32* %411 = OpAccessChain %81 %16 
                                                      OpStore %411 %410 
                                Private f32* %412 = OpAccessChain %81 %16 
                                         f32 %413 = OpLoad %412 
                                         f32 %414 = OpExtInst %1 40 %413 %299 
                                Private f32* %415 = OpAccessChain %81 %16 
                                                      OpStore %415 %414 
                                Private f32* %416 = OpAccessChain %81 %16 
                                         f32 %417 = OpLoad %416 
                                         f32 %418 = OpFNegate %417 
                                         f32 %419 = OpFAdd %418 %77 
                                Private f32* %420 = OpAccessChain %112 %16 
                                                      OpStore %420 %419 
                                Private f32* %421 = OpAccessChain %112 %16 
                                         f32 %422 = OpLoad %421 
                                         f32 %423 = OpExtInst %1 40 %422 %384 
                                Private f32* %424 = OpAccessChain %112 %16 
                                                      OpStore %424 %423 
                                Private f32* %425 = OpAccessChain %112 %16 
                                         f32 %426 = OpLoad %425 
                                Private f32* %427 = OpAccessChain %112 %16 
                                         f32 %428 = OpLoad %427 
                                         f32 %429 = OpFMul %426 %428 
                                                      OpStore %131 %429 
                                         f32 %430 = OpLoad %131 
                                         f32 %431 = OpLoad %131 
                                         f32 %432 = OpFMul %430 %431 
                                                      OpStore %131 %432 
                                Private f32* %433 = OpAccessChain %112 %16 
                                         f32 %434 = OpLoad %433 
                                         f32 %435 = OpLoad %131 
                                         f32 %436 = OpFMul %434 %435 
                                Private f32* %437 = OpAccessChain %112 %16 
                                                      OpStore %437 %436 
                                Private f32* %438 = OpAccessChain %9 %16 
                                         f32 %439 = OpLoad %438 
                                Private f32* %440 = OpAccessChain %112 %16 
                                         f32 %441 = OpLoad %440 
                                         f32 %442 = OpFMul %439 %441 
                                         f32 %443 = OpFAdd %442 %77 
                                Private f32* %444 = OpAccessChain %9 %16 
                                                      OpStore %444 %443 
                                         f32 %445 = OpLoad %66 
                                Private f32* %446 = OpAccessChain %9 %16 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpFMul %445 %447 
                                Private f32* %449 = OpAccessChain %9 %16 
                                                      OpStore %449 %448 
                                Private f32* %450 = OpAccessChain %81 %16 
                                         f32 %451 = OpLoad %450 
                                Private f32* %452 = OpAccessChain %9 %16 
                                         f32 %453 = OpLoad %452 
                                         f32 %454 = OpFMul %451 %453 
                                Private f32* %455 = OpAccessChain %9 %16 
                                                      OpStore %455 %454 
                                Private f32* %456 = OpAccessChain %9 %16 
                                         f32 %457 = OpLoad %456 
                                         f32 %458 = OpExtInst %1 37 %457 %77 
                                Private f32* %459 = OpAccessChain %9 %16 
                                                      OpStore %459 %458 
                                       f32_3 %460 = OpLoad %9 
                                       f32_3 %461 = OpVectorShuffle %460 %460 0 0 0 
                                       f32_3 %462 = OpLoad %117 
                                       f32_3 %463 = OpFMul %461 %462 
                                                      OpStore %112 %463 
                                       f32_3 %464 = OpLoad %112 
                              Uniform f32_4* %465 = OpAccessChain %33 %86 
                                       f32_4 %466 = OpLoad %465 
                                       f32_3 %467 = OpVectorShuffle %466 %466 0 1 2 
                                       f32_3 %468 = OpFMul %464 %467 
                                       f32_3 %469 = OpLoad %23 
                                       f32_3 %470 = OpFAdd %468 %469 
                                                      OpStore %9 %470 
                                Private f32* %471 = OpAccessChain %153 %309 
                                         f32 %472 = OpLoad %471 
                                Private f32* %473 = OpAccessChain %153 %309 
                                         f32 %474 = OpLoad %473 
                                         f32 %475 = OpFMul %472 %474 
                                Private f32* %476 = OpAccessChain %199 %16 
                                                      OpStore %476 %475 
                                Private f32* %477 = OpAccessChain %153 %16 
                                         f32 %478 = OpLoad %477 
                                Private f32* %479 = OpAccessChain %153 %16 
                                         f32 %480 = OpLoad %479 
                                         f32 %481 = OpFMul %478 %480 
                                Private f32* %482 = OpAccessChain %199 %16 
                                         f32 %483 = OpLoad %482 
                                         f32 %484 = OpFNegate %483 
                                         f32 %485 = OpFAdd %481 %484 
                                Private f32* %486 = OpAccessChain %199 %16 
                                                      OpStore %486 %485 
                                       f32_4 %488 = OpLoad %153 
                                       f32_4 %489 = OpVectorShuffle %488 %488 1 2 2 0 
                                       f32_4 %490 = OpLoad %153 
                                       f32_4 %491 = OpVectorShuffle %490 %490 0 1 2 2 
                                       f32_4 %492 = OpFMul %489 %491 
                                                      OpStore %487 %492 
                              Uniform f32_4* %502 = OpAccessChain %500 %501 
                                       f32_4 %503 = OpLoad %502 
                                       f32_4 %504 = OpLoad %487 
                                         f32 %505 = OpDot %503 %504 
                                Private f32* %506 = OpAccessChain %493 %16 
                                                      OpStore %506 %505 
                              Uniform f32_4* %508 = OpAccessChain %500 %507 
                                       f32_4 %509 = OpLoad %508 
                                       f32_4 %510 = OpLoad %487 
                                         f32 %511 = OpDot %509 %510 
                                Private f32* %512 = OpAccessChain %493 %309 
                                                      OpStore %512 %511 
                              Uniform f32_4* %514 = OpAccessChain %500 %513 
                                       f32_4 %515 = OpLoad %514 
                                       f32_4 %516 = OpLoad %487 
                                         f32 %517 = OpDot %515 %516 
                                Private f32* %518 = OpAccessChain %493 %496 
                                                      OpStore %518 %517 
                              Uniform f32_4* %520 = OpAccessChain %500 %519 
                                       f32_4 %521 = OpLoad %520 
                                       f32_3 %522 = OpVectorShuffle %521 %521 0 1 2 
                                       f32_3 %523 = OpLoad %199 
                                       f32_3 %524 = OpVectorShuffle %523 %523 0 0 0 
                                       f32_3 %525 = OpFMul %522 %524 
                                       f32_3 %526 = OpLoad %493 
                                       f32_3 %527 = OpFAdd %525 %526 
                                                      OpStore %199 %527 
                                Private f32* %529 = OpAccessChain %153 %528 
                                                      OpStore %529 %77 
                              Uniform f32_4* %530 = OpAccessChain %500 %70 
                                       f32_4 %531 = OpLoad %530 
                                       f32_4 %532 = OpLoad %153 
                                         f32 %533 = OpDot %531 %532 
                                Private f32* %534 = OpAccessChain %493 %16 
                                                      OpStore %534 %533 
                              Uniform f32_4* %535 = OpAccessChain %500 %339 
                                       f32_4 %536 = OpLoad %535 
                                       f32_4 %537 = OpLoad %153 
                                         f32 %538 = OpDot %536 %537 
                                Private f32* %539 = OpAccessChain %493 %309 
                                                      OpStore %539 %538 
                              Uniform f32_4* %540 = OpAccessChain %500 %126 
                                       f32_4 %541 = OpLoad %540 
                                       f32_4 %542 = OpLoad %153 
                                         f32 %543 = OpDot %541 %542 
                                Private f32* %544 = OpAccessChain %493 %496 
                                                      OpStore %544 %543 
                                       f32_3 %545 = OpLoad %199 
                                       f32_3 %546 = OpLoad %493 
                                       f32_3 %547 = OpFAdd %545 %546 
                                                      OpStore %199 %547 
                                       f32_3 %548 = OpLoad %199 
                                       f32_3 %550 = OpExtInst %1 40 %548 %549 
                                                      OpStore %199 %550 
                                       f32_3 %551 = OpLoad %117 
                                       f32_3 %552 = OpLoad %199 
                                       f32_3 %553 = OpFMul %551 %552 
                                                      OpStore %112 %553 
                                       f32_3 %554 = OpLoad %41 
                                       f32_3 %555 = OpFNegate %554 
                                       f32_4 %556 = OpLoad %153 
                                       f32_3 %557 = OpVectorShuffle %556 %556 0 1 2 
                                         f32 %558 = OpDot %555 %557 
                                                      OpStore %58 %558 
                                         f32 %559 = OpLoad %58 
                                         f32 %560 = OpLoad %58 
                                         f32 %561 = OpFAdd %559 %560 
                                                      OpStore %58 %561 
                                       f32_4 %562 = OpLoad %153 
                                       f32_3 %563 = OpVectorShuffle %562 %562 0 1 2 
                                         f32 %564 = OpLoad %58 
                                       f32_3 %565 = OpCompositeConstruct %564 %564 %564 
                                       f32_3 %566 = OpFNegate %565 
                                       f32_3 %567 = OpFMul %563 %566 
                                       f32_3 %568 = OpLoad %41 
                                       f32_3 %569 = OpFNegate %568 
                                       f32_3 %570 = OpFAdd %567 %569 
                                                      OpStore %41 %570 
                                         f32 %571 = OpLoad %354 
                                         f32 %572 = OpFNegate %571 
                                         f32 %574 = OpFMul %572 %573 
                                         f32 %576 = OpFAdd %574 %575 
                                Private f32* %577 = OpAccessChain %199 %16 
                                                      OpStore %577 %576 
                                         f32 %578 = OpLoad %354 
                                Private f32* %579 = OpAccessChain %199 %16 
                                         f32 %580 = OpLoad %579 
                                         f32 %581 = OpFMul %578 %580 
                                                      OpStore %354 %581 
                                         f32 %582 = OpLoad %354 
                                         f32 %584 = OpFMul %582 %583 
                                                      OpStore %354 %584 
                       read_only TextureCube %589 = OpLoad %588 
                                     sampler %591 = OpLoad %590 
                read_only TextureCubeSampled %593 = OpSampledImage %589 %591 
                                       f32_3 %594 = OpLoad %41 
                                         f32 %595 = OpLoad %354 
                                       f32_4 %596 = OpImageSampleExplicitLod %593 %594 Lod %28 
                                                      OpStore %585 %596 
                                Private f32* %597 = OpAccessChain %585 %528 
                                         f32 %598 = OpLoad %597 
                                         f32 %599 = OpFAdd %598 %121 
                                                      OpStore %354 %599 
                                Uniform f32* %601 = OpAccessChain %500 %600 %528 
                                         f32 %602 = OpLoad %601 
                                         f32 %603 = OpLoad %354 
                                         f32 %604 = OpFMul %602 %603 
                                         f32 %605 = OpFAdd %604 %77 
                                                      OpStore %354 %605 
                                         f32 %606 = OpLoad %354 
                                         f32 %607 = OpExtInst %1 40 %606 %384 
                                                      OpStore %354 %607 
                                         f32 %608 = OpLoad %354 
                                         f32 %609 = OpExtInst %1 30 %608 
                                                      OpStore %354 %609 
                                         f32 %610 = OpLoad %354 
                                Uniform f32* %611 = OpAccessChain %500 %600 %309 
                                         f32 %612 = OpLoad %611 
                                         f32 %613 = OpFMul %610 %612 
                                                      OpStore %354 %613 
                                         f32 %614 = OpLoad %354 
                                         f32 %615 = OpExtInst %1 29 %614 
                                                      OpStore %354 %615 
                                         f32 %616 = OpLoad %354 
                                Uniform f32* %617 = OpAccessChain %500 %600 %16 
                                         f32 %618 = OpLoad %617 
                                         f32 %619 = OpFMul %616 %618 
                                                      OpStore %354 %619 
                                       f32_4 %620 = OpLoad %585 
                                       f32_3 %621 = OpVectorShuffle %620 %620 0 1 2 
                                         f32 %622 = OpLoad %354 
                                       f32_3 %623 = OpCompositeConstruct %622 %622 %622 
                                       f32_3 %624 = OpFMul %621 %623 
                                                      OpStore %199 %624 
                                       f32_3 %625 = OpLoad %117 
                                       f32_3 %626 = OpLoad %199 
                                       f32_3 %627 = OpFMul %625 %626 
                                                      OpStore %117 %627 
                                       f32_3 %628 = OpLoad %112 
                                Uniform f32* %629 = OpAccessChain %69 %35 
                                         f32 %630 = OpLoad %629 
                                       f32_3 %631 = OpCompositeConstruct %630 %630 %630 
                                       f32_3 %632 = OpFMul %628 %631 
                                       f32_3 %633 = OpLoad %117 
                                       f32_3 %634 = OpFAdd %632 %633 
                                                      OpStore %117 %634 
                                       f32_3 %635 = OpLoad %9 
                                       f32_3 %636 = OpLoad %117 
                                       f32_3 %637 = OpFAdd %635 %636 
                                                      OpStore %9 %637 
                              Uniform f32_4* %638 = OpAccessChain %33 %155 %86 
                                       f32_4 %639 = OpLoad %638 
                                       f32_3 %640 = OpVectorShuffle %639 %639 0 1 2 
                              Uniform f32_3* %643 = OpAccessChain %69 %641 
                                       f32_3 %644 = OpLoad %643 
                                       f32_3 %645 = OpVectorShuffle %644 %644 1 1 1 
                                       f32_3 %646 = OpFMul %640 %645 
                                                      OpStore %41 %646 
                              Uniform f32_4* %647 = OpAccessChain %33 %155 %35 
                                       f32_4 %648 = OpLoad %647 
                                       f32_3 %649 = OpVectorShuffle %648 %648 0 1 2 
                              Uniform f32_3* %650 = OpAccessChain %69 %641 
                                       f32_3 %651 = OpLoad %650 
                                       f32_3 %652 = OpVectorShuffle %651 %651 0 0 0 
                                       f32_3 %653 = OpFMul %649 %652 
                                       f32_3 %654 = OpLoad %41 
                                       f32_3 %655 = OpFAdd %653 %654 
                                                      OpStore %41 %655 
                              Uniform f32_4* %656 = OpAccessChain %33 %155 %155 
                                       f32_4 %657 = OpLoad %656 
                                       f32_3 %658 = OpVectorShuffle %657 %657 0 1 2 
                                Uniform f32* %659 = OpAccessChain %69 %641 %496 
                                         f32 %660 = OpLoad %659 
                                Uniform f32* %661 = OpAccessChain %69 %641 %496 
                                         f32 %662 = OpLoad %661 
                                Uniform f32* %663 = OpAccessChain %69 %641 %496 
                                         f32 %664 = OpLoad %663 
                                       f32_3 %665 = OpCompositeConstruct %660 %662 %664 
                                       f32_3 %666 = OpFMul %658 %665 
                                       f32_3 %667 = OpLoad %41 
                                       f32_3 %668 = OpFAdd %666 %667 
                                                      OpStore %41 %668 
                                       f32_3 %669 = OpLoad %41 
                                       f32_3 %670 = OpLoad %41 
                                         f32 %671 = OpDot %669 %670 
                                                      OpStore %58 %671 
                                         f32 %672 = OpLoad %58 
                                         f32 %673 = OpExtInst %1 32 %672 
                                                      OpStore %58 %673 
                                         f32 %674 = OpLoad %58 
                                       f32_3 %675 = OpCompositeConstruct %674 %674 %674 
                                       f32_3 %676 = OpLoad %41 
                                       f32_3 %677 = OpFMul %675 %676 
                                                      OpStore %41 %677 
                                       f32_4 %678 = OpLoad %153 
                                       f32_3 %679 = OpVectorShuffle %678 %678 0 1 2 
                                       f32_3 %680 = OpLoad %41 
                                         f32 %681 = OpDot %679 %680 
                                                      OpStore %58 %681 
                                         f32 %682 = OpLoad %58 
                                         f32 %684 = OpFMul %682 %683 
                                         f32 %685 = OpFAdd %684 %683 
                                                      OpStore %58 %685 
                                         f32 %686 = OpLoad %58 
                                Uniform f32* %688 = OpAccessChain %69 %687 
                                         f32 %689 = OpLoad %688 
                                         f32 %690 = OpFNegate %689 
                                         f32 %691 = OpFAdd %686 %690 
                                                      OpStore %58 %691 
                                         f32 %692 = OpLoad %58 
                                Uniform f32* %693 = OpAccessChain %69 %600 
                                         f32 %694 = OpLoad %693 
                                         f32 %695 = OpFMul %692 %694 
                                                      OpStore %58 %695 
                                         f32 %696 = OpLoad %58 
                                         f32 %697 = OpExtInst %1 43 %696 %384 %77 
                                                      OpStore %58 %697 
                                         f32 %698 = OpLoad %58 
                                       f32_3 %699 = OpCompositeConstruct %698 %698 %698 
                              Uniform f32_4* %701 = OpAccessChain %69 %700 
                                       f32_4 %702 = OpLoad %701 
                                       f32_3 %703 = OpVectorShuffle %702 %702 0 1 2 
                                       f32_3 %704 = OpFMul %699 %703 
                                                      OpStore %117 %704 
                                       f32_3 %705 = OpLoad %117 
                                Uniform f32* %707 = OpAccessChain %69 %706 
                                         f32 %708 = OpLoad %707 
                                Uniform f32* %709 = OpAccessChain %69 %706 
                                         f32 %710 = OpLoad %709 
                                Uniform f32* %711 = OpAccessChain %69 %706 
                                         f32 %712 = OpLoad %711 
                                       f32_3 %713 = OpCompositeConstruct %708 %710 %712 
                                         f32 %714 = OpCompositeExtract %713 0 
                                         f32 %715 = OpCompositeExtract %713 1 
                                         f32 %716 = OpCompositeExtract %713 2 
                                       f32_3 %717 = OpCompositeConstruct %714 %715 %716 
                                       f32_3 %718 = OpFMul %705 %717 
                                                      OpStore %41 %718 
                                       f32_3 %719 = OpLoad %81 
                                       f32_3 %720 = OpVectorShuffle %719 %719 0 0 0 
                                       f32_3 %721 = OpLoad %41 
                                       f32_3 %722 = OpFMul %720 %721 
                                                      OpStore %81 %722 
                                       f32_3 %723 = OpLoad %81 
                                       f32_3 %725 = OpFMul %723 %724 
                                                      OpStore %81 %725 
                                       f32_3 %726 = OpLoad %41 
                                       f32_3 %729 = OpFMul %726 %728 
                                       f32_3 %730 = OpLoad %81 
                                       f32_3 %731 = OpFAdd %729 %730 
                                                      OpStore %41 %731 
                                       f32_3 %732 = OpLoad %9 
                                       f32_3 %733 = OpLoad %41 
                                       f32_3 %734 = OpFAdd %732 %733 
                                                      OpStore %9 %734 
                                       f32_3 %735 = OpLoad %9 
                                       f32_3 %736 = OpExtInst %1 40 %735 %549 
                                                      OpStore %117 %736 
                                       f32_3 %737 = OpLoad %117 
                                       f32_3 %738 = OpExtInst %1 30 %737 
                                                      OpStore %117 %738 
                                       f32_3 %739 = OpLoad %117 
                                       f32_3 %742 = OpFMul %739 %741 
                                                      OpStore %117 %742 
                                       f32_3 %743 = OpLoad %117 
                                       f32_3 %744 = OpExtInst %1 29 %743 
                                                      OpStore %117 %744 
                                       f32_3 %747 = OpLoad %117 
                                       f32_3 %748 = OpExtInst %1 31 %747 
                                       f32_4 %749 = OpLoad %746 
                                       f32_4 %750 = OpVectorShuffle %749 %748 4 5 6 3 
                                                      OpStore %746 %750 
                                 Output f32* %752 = OpAccessChain %746 %528 
                                                      OpStore %752 %77 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan " {
Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 222
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %84 %93 %95 %98 %138 %141 %148 %150 %184 %208 %213 %214 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 RelaxedPrecision 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 RelaxedPrecision 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 RelaxedPrecision 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 RelaxedPrecision 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 RelaxedPrecision 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 RelaxedPrecision 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpMemberDecorate %21 16 RelaxedPrecision 
                                                      OpMemberDecorate %21 16 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpDecorate %59 ArrayStride 59 
                                                      OpMemberDecorate %60 0 Offset 60 
                                                      OpMemberDecorate %60 1 Offset 60 
                                                      OpDecorate %60 Block 
                                                      OpDecorate %62 DescriptorSet 62 
                                                      OpDecorate %62 Binding 62 
                                                      OpMemberDecorate %82 0 BuiltIn 82 
                                                      OpMemberDecorate %82 1 BuiltIn 82 
                                                      OpMemberDecorate %82 2 BuiltIn 82 
                                                      OpDecorate %82 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 93 
                                                      OpDecorate %95 Location 95 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate vs_TEXCOORD1 Location 138 
                                                      OpDecorate vs_TEXCOORD2 Location 141 
                                                      OpDecorate vs_TEXCOORD5 Location 148 
                                                      OpDecorate %150 Location 150 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 208 
                                                      OpDecorate vs_TEXCOORD6 Location 213 
                                                      OpDecorate %214 Location 214 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %10 %16 
                                              %18 = OpTypeArray %10 %16 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypeArray %10 %19 
                                              %21 = OpTypeStruct %17 %18 %10 %10 %10 %20 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4; f32_4[2]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 0 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %10 
                                          i32 %40 = OpConstant 2 
                                          i32 %50 = OpConstant 3 
                                              %55 = OpTypePointer Private %10 
                               Private f32_4* %56 = OpVariable Private 
                                              %59 = OpTypeArray %10 %16 
                                              %60 = OpTypeStruct %7 %59 
                                              %61 = OpTypePointer Uniform %60 
           Uniform struct {f32_3; f32_4[4];}* %62 = OpVariable Uniform 
                                          u32 %80 = OpConstant 1 
                                              %81 = OpTypeArray %6 %80 
                                              %82 = OpTypeStruct %10 %6 %81 
                                              %83 = OpTypePointer Output %82 
         Output struct {f32_4; f32; f32[1];}* %84 = OpVariable Output 
                                              %89 = OpTypePointer Output %10 
                                              %91 = OpTypeVector %6 2 
                                              %92 = OpTypePointer Output %91 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                              %94 = OpTypePointer Input %91 
                                 Input f32_2* %95 = OpVariable Input 
                                              %97 = OpTypePointer Input %7 
                                 Input f32_3* %98 = OpVariable Input 
                                         u32 %104 = OpConstant 0 
                                             %105 = OpTypePointer Private %6 
                                Private f32* %119 = OpVariable Private 
                                         f32 %126 = OpConstant 3.674022E-40 
                                             %137 = OpTypePointer Output %7 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %144 = OpTypePointer Uniform %7 
                       Output f32_3* vs_TEXCOORD5 = OpVariable Output 
                                Input f32_4* %150 = OpVariable Input 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                              Private f32_3* %186 = OpVariable Private 
                                         u32 %200 = OpConstant 3 
                                             %201 = OpTypePointer Input %6 
                                             %204 = OpTypePointer Uniform %6 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                Input f32_4* %214 = OpVariable Input 
                                             %216 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %12 
                                        f32_3 %14 = OpVectorShuffle %13 %13 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_3 %30 = OpVectorShuffle %29 %29 0 1 2 
                                        f32_3 %31 = OpFMul %14 %30 
                                                      OpStore %9 %31 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %25 
                                        f32_4 %33 = OpLoad %32 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                        f32_4 %35 = OpLoad %12 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 0 0 
                                        f32_3 %37 = OpFMul %34 %36 
                                        f32_3 %38 = OpLoad %9 
                                        f32_3 %39 = OpFAdd %37 %38 
                                                      OpStore %9 %39 
                               Uniform f32_4* %41 = OpAccessChain %23 %25 %40 
                                        f32_4 %42 = OpLoad %41 
                                        f32_3 %43 = OpVectorShuffle %42 %42 0 1 2 
                                        f32_4 %44 = OpLoad %12 
                                        f32_3 %45 = OpVectorShuffle %44 %44 2 2 2 
                                        f32_3 %46 = OpFMul %43 %45 
                                        f32_3 %47 = OpLoad %9 
                                        f32_3 %48 = OpFAdd %46 %47 
                                                      OpStore %9 %48 
                                        f32_3 %49 = OpLoad %9 
                               Uniform f32_4* %51 = OpAccessChain %23 %25 %50 
                                        f32_4 %52 = OpLoad %51 
                                        f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                        f32_3 %54 = OpFAdd %49 %53 
                                                      OpStore %9 %54 
                                        f32_3 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 1 1 1 1 
                               Uniform f32_4* %63 = OpAccessChain %62 %26 %26 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFMul %58 %64 
                                                      OpStore %56 %65 
                               Uniform f32_4* %66 = OpAccessChain %62 %26 %25 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpLoad %9 
                                        f32_4 %69 = OpVectorShuffle %68 %68 0 0 0 0 
                                        f32_4 %70 = OpFMul %67 %69 
                                        f32_4 %71 = OpLoad %56 
                                        f32_4 %72 = OpFAdd %70 %71 
                                                      OpStore %56 %72 
                               Uniform f32_4* %73 = OpAccessChain %62 %26 %40 
                                        f32_4 %74 = OpLoad %73 
                                        f32_3 %75 = OpLoad %9 
                                        f32_4 %76 = OpVectorShuffle %75 %75 2 2 2 2 
                                        f32_4 %77 = OpFMul %74 %76 
                                        f32_4 %78 = OpLoad %56 
                                        f32_4 %79 = OpFAdd %77 %78 
                                                      OpStore %56 %79 
                                        f32_4 %85 = OpLoad %56 
                               Uniform f32_4* %86 = OpAccessChain %62 %26 %50 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpFAdd %85 %87 
                                Output f32_4* %90 = OpAccessChain %84 %25 
                                                      OpStore %90 %88 
                                        f32_2 %96 = OpLoad %95 
                                                      OpStore vs_TEXCOORD0 %96 
                                        f32_3 %99 = OpLoad %98 
                              Uniform f32_4* %100 = OpAccessChain %23 %26 %25 
                                       f32_4 %101 = OpLoad %100 
                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 2 
                                         f32 %103 = OpDot %99 %102 
                                Private f32* %106 = OpAccessChain %56 %104 
                                                      OpStore %106 %103 
                                       f32_3 %107 = OpLoad %98 
                              Uniform f32_4* %108 = OpAccessChain %23 %26 %26 
                                       f32_4 %109 = OpLoad %108 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                         f32 %111 = OpDot %107 %110 
                                Private f32* %112 = OpAccessChain %56 %80 
                                                      OpStore %112 %111 
                                       f32_3 %113 = OpLoad %98 
                              Uniform f32_4* %114 = OpAccessChain %23 %26 %40 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                         f32 %117 = OpDot %113 %116 
                                Private f32* %118 = OpAccessChain %56 %19 
                                                      OpStore %118 %117 
                                       f32_4 %120 = OpLoad %56 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_4 %122 = OpLoad %56 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                         f32 %124 = OpDot %121 %123 
                                                      OpStore %119 %124 
                                         f32 %125 = OpLoad %119 
                                         f32 %127 = OpExtInst %1 40 %125 %126 
                                                      OpStore %119 %127 
                                         f32 %128 = OpLoad %119 
                                         f32 %129 = OpExtInst %1 32 %128 
                                                      OpStore %119 %129 
                                         f32 %130 = OpLoad %119 
                                       f32_3 %131 = OpCompositeConstruct %130 %130 %130 
                                       f32_4 %132 = OpLoad %56 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_3 %134 = OpFMul %131 %133 
                                       f32_4 %135 = OpLoad %56 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 6 3 
                                                      OpStore %56 %136 
                                       f32_4 %139 = OpLoad %56 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                                      OpStore vs_TEXCOORD1 %140 
                                       f32_3 %142 = OpLoad %9 
                                       f32_3 %143 = OpFNegate %142 
                              Uniform f32_3* %145 = OpAccessChain %62 %25 
                                       f32_3 %146 = OpLoad %145 
                                       f32_3 %147 = OpFAdd %143 %146 
                                                      OpStore vs_TEXCOORD2 %147 
                                       f32_3 %149 = OpLoad %9 
                                                      OpStore vs_TEXCOORD5 %149 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 1 1 1 
                              Uniform f32_4* %153 = OpAccessChain %23 %25 %26 
                                       f32_4 %154 = OpLoad %153 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFMul %152 %155 
                                                      OpStore %9 %156 
                              Uniform f32_4* %157 = OpAccessChain %23 %25 %25 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_4 %160 = OpLoad %150 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 0 0 
                                       f32_3 %162 = OpFMul %159 %161 
                                       f32_3 %163 = OpLoad %9 
                                       f32_3 %164 = OpFAdd %162 %163 
                                                      OpStore %9 %164 
                              Uniform f32_4* %165 = OpAccessChain %23 %25 %40 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_4 %168 = OpLoad %150 
                                       f32_3 %169 = OpVectorShuffle %168 %168 2 2 2 
                                       f32_3 %170 = OpFMul %167 %169 
                                       f32_3 %171 = OpLoad %9 
                                       f32_3 %172 = OpFAdd %170 %171 
                                                      OpStore %9 %172 
                                       f32_3 %173 = OpLoad %9 
                                       f32_3 %174 = OpLoad %9 
                                         f32 %175 = OpDot %173 %174 
                                                      OpStore %119 %175 
                                         f32 %176 = OpLoad %119 
                                         f32 %177 = OpExtInst %1 40 %176 %126 
                                                      OpStore %119 %177 
                                         f32 %178 = OpLoad %119 
                                         f32 %179 = OpExtInst %1 32 %178 
                                                      OpStore %119 %179 
                                         f32 %180 = OpLoad %119 
                                       f32_3 %181 = OpCompositeConstruct %180 %180 %180 
                                       f32_3 %182 = OpLoad %9 
                                       f32_3 %183 = OpFMul %181 %182 
                                                      OpStore %9 %183 
                                       f32_3 %185 = OpLoad %9 
                                                      OpStore vs_TEXCOORD3 %185 
                                       f32_3 %187 = OpLoad %9 
                                       f32_3 %188 = OpVectorShuffle %187 %187 1 2 0 
                                       f32_4 %189 = OpLoad %56 
                                       f32_3 %190 = OpVectorShuffle %189 %189 2 0 1 
                                       f32_3 %191 = OpFMul %188 %190 
                                                      OpStore %186 %191 
                                       f32_4 %192 = OpLoad %56 
                                       f32_3 %193 = OpVectorShuffle %192 %192 1 2 0 
                                       f32_3 %194 = OpLoad %9 
                                       f32_3 %195 = OpVectorShuffle %194 %194 2 0 1 
                                       f32_3 %196 = OpFMul %193 %195 
                                       f32_3 %197 = OpLoad %186 
                                       f32_3 %198 = OpFNegate %197 
                                       f32_3 %199 = OpFAdd %196 %198 
                                                      OpStore %9 %199 
                                  Input f32* %202 = OpAccessChain %150 %200 
                                         f32 %203 = OpLoad %202 
                                Uniform f32* %205 = OpAccessChain %23 %50 %200 
                                         f32 %206 = OpLoad %205 
                                         f32 %207 = OpFMul %203 %206 
                                                      OpStore %119 %207 
                                         f32 %209 = OpLoad %119 
                                       f32_3 %210 = OpCompositeConstruct %209 %209 %209 
                                       f32_3 %211 = OpLoad %9 
                                       f32_3 %212 = OpFMul %210 %211 
                                                      OpStore vs_TEXCOORD4 %212 
                                       f32_4 %215 = OpLoad %214 
                                                      OpStore vs_TEXCOORD6 %215 
                                 Output f32* %217 = OpAccessChain %84 %25 %80 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpFNegate %218 
                                 Output f32* %220 = OpAccessChain %84 %25 %80 
                                                      OpStore %220 %219 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 754
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %59 %84 %207 %223 %746 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %30 ArrayStride 30 
                                                      OpMemberDecorate %31 0 Offset 31 
                                                      OpMemberDecorate %31 1 RelaxedPrecision 
                                                      OpMemberDecorate %31 1 Offset 31 
                                                      OpMemberDecorate %31 2 Offset 31 
                                                      OpDecorate %31 Block 
                                                      OpDecorate %33 DescriptorSet 33 
                                                      OpDecorate %33 Binding 33 
                                                      OpDecorate vs_TEXCOORD3 Location 59 
                                                      OpMemberDecorate %67 0 Offset 67 
                                                      OpMemberDecorate %67 1 Offset 67 
                                                      OpMemberDecorate %67 2 Offset 67 
                                                      OpMemberDecorate %67 3 Offset 67 
                                                      OpMemberDecorate %67 4 Offset 67 
                                                      OpMemberDecorate %67 5 Offset 67 
                                                      OpMemberDecorate %67 6 Offset 67 
                                                      OpMemberDecorate %67 7 Offset 67 
                                                      OpMemberDecorate %67 8 Offset 67 
                                                      OpMemberDecorate %67 9 Offset 67 
                                                      OpMemberDecorate %67 10 Offset 67 
                                                      OpMemberDecorate %67 11 Offset 67 
                                                      OpMemberDecorate %67 12 Offset 67 
                                                      OpDecorate %67 Block 
                                                      OpDecorate %69 DescriptorSet 69 
                                                      OpDecorate %69 Binding 69 
                                                      OpDecorate vs_TEXCOORD0 Location 84 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %100 DescriptorSet 100 
                                                      OpDecorate %100 Binding 100 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %104 DescriptorSet 104 
                                                      OpDecorate %104 Binding 104 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %120 RelaxedPrecision 
                                                      OpDecorate %122 RelaxedPrecision 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %167 DescriptorSet 167 
                                                      OpDecorate %167 Binding 167 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %169 DescriptorSet 169 
                                                      OpDecorate %169 Binding 169 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %177 DescriptorSet 177 
                                                      OpDecorate %177 Binding 177 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %179 DescriptorSet 179 
                                                      OpDecorate %179 Binding 179 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 207 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 223 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %483 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                                      OpDecorate %487 RelaxedPrecision 
                                                      OpDecorate %493 RelaxedPrecision 
                                                      OpDecorate %494 ArrayStride 494 
                                                      OpDecorate %495 ArrayStride 495 
                                                      OpDecorate %497 ArrayStride 497 
                                                      OpMemberDecorate %498 0 Offset 498 
                                                      OpMemberDecorate %498 1 Offset 498 
                                                      OpMemberDecorate %498 2 Offset 498 
                                                      OpMemberDecorate %498 3 RelaxedPrecision 
                                                      OpMemberDecorate %498 3 Offset 498 
                                                      OpMemberDecorate %498 4 RelaxedPrecision 
                                                      OpMemberDecorate %498 4 Offset 498 
                                                      OpMemberDecorate %498 5 RelaxedPrecision 
                                                      OpMemberDecorate %498 5 Offset 498 
                                                      OpMemberDecorate %498 6 Offset 498 
                                                      OpMemberDecorate %498 7 RelaxedPrecision 
                                                      OpMemberDecorate %498 7 Offset 498 
                                                      OpMemberDecorate %498 8 Offset 498 
                                                      OpMemberDecorate %498 9 Offset 498 
                                                      OpMemberDecorate %498 10 RelaxedPrecision 
                                                      OpMemberDecorate %498 10 Offset 498 
                                                      OpMemberDecorate %498 11 RelaxedPrecision 
                                                      OpMemberDecorate %498 11 Offset 498 
                                                      OpMemberDecorate %498 12 RelaxedPrecision 
                                                      OpMemberDecorate %498 12 Offset 498 
                                                      OpMemberDecorate %498 13 RelaxedPrecision 
                                                      OpMemberDecorate %498 13 Offset 498 
                                                      OpMemberDecorate %498 14 RelaxedPrecision 
                                                      OpMemberDecorate %498 14 Offset 498 
                                                      OpMemberDecorate %498 15 RelaxedPrecision 
                                                      OpMemberDecorate %498 15 Offset 498 
                                                      OpMemberDecorate %498 16 RelaxedPrecision 
                                                      OpMemberDecorate %498 16 Offset 498 
                                                      OpDecorate %498 Block 
                                                      OpDecorate %500 DescriptorSet 500 
                                                      OpDecorate %500 Binding 500 
                                                      OpDecorate %503 RelaxedPrecision 
                                                      OpDecorate %504 RelaxedPrecision 
                                                      OpDecorate %505 RelaxedPrecision 
                                                      OpDecorate %509 RelaxedPrecision 
                                                      OpDecorate %510 RelaxedPrecision 
                                                      OpDecorate %511 RelaxedPrecision 
                                                      OpDecorate %515 RelaxedPrecision 
                                                      OpDecorate %516 RelaxedPrecision 
                                                      OpDecorate %517 RelaxedPrecision 
                                                      OpDecorate %521 RelaxedPrecision 
                                                      OpDecorate %522 RelaxedPrecision 
                                                      OpDecorate %523 RelaxedPrecision 
                                                      OpDecorate %524 RelaxedPrecision 
                                                      OpDecorate %525 RelaxedPrecision 
                                                      OpDecorate %526 RelaxedPrecision 
                                                      OpDecorate %527 RelaxedPrecision 
                                                      OpDecorate %531 RelaxedPrecision 
                                                      OpDecorate %536 RelaxedPrecision 
                                                      OpDecorate %541 RelaxedPrecision 
                                                      OpDecorate %545 RelaxedPrecision 
                                                      OpDecorate %546 RelaxedPrecision 
                                                      OpDecorate %547 RelaxedPrecision 
                                                      OpDecorate %548 RelaxedPrecision 
                                                      OpDecorate %550 RelaxedPrecision 
                                                      OpDecorate %551 RelaxedPrecision 
                                                      OpDecorate %552 RelaxedPrecision 
                                                      OpDecorate %553 RelaxedPrecision 
                                                      OpDecorate %571 RelaxedPrecision 
                                                      OpDecorate %572 RelaxedPrecision 
                                                      OpDecorate %574 RelaxedPrecision 
                                                      OpDecorate %576 RelaxedPrecision 
                                                      OpDecorate %578 RelaxedPrecision 
                                                      OpDecorate %580 RelaxedPrecision 
                                                      OpDecorate %581 RelaxedPrecision 
                                                      OpDecorate %582 RelaxedPrecision 
                                                      OpDecorate %584 RelaxedPrecision 
                                                      OpDecorate %585 RelaxedPrecision 
                                                      OpDecorate %588 RelaxedPrecision 
                                                      OpDecorate %588 DescriptorSet 588 
                                                      OpDecorate %588 Binding 588 
                                                      OpDecorate %589 RelaxedPrecision 
                                                      OpDecorate %590 RelaxedPrecision 
                                                      OpDecorate %590 DescriptorSet 590 
                                                      OpDecorate %590 Binding 590 
                                                      OpDecorate %591 RelaxedPrecision 
                                                      OpDecorate %595 RelaxedPrecision 
                                                      OpDecorate %598 RelaxedPrecision 
                                                      OpDecorate %599 RelaxedPrecision 
                                                      OpDecorate %602 RelaxedPrecision 
                                                      OpDecorate %603 RelaxedPrecision 
                                                      OpDecorate %604 RelaxedPrecision 
                                                      OpDecorate %605 RelaxedPrecision 
                                                      OpDecorate %606 RelaxedPrecision 
                                                      OpDecorate %607 RelaxedPrecision 
                                                      OpDecorate %608 RelaxedPrecision 
                                                      OpDecorate %609 RelaxedPrecision 
                                                      OpDecorate %610 RelaxedPrecision 
                                                      OpDecorate %612 RelaxedPrecision 
                                                      OpDecorate %613 RelaxedPrecision 
                                                      OpDecorate %614 RelaxedPrecision 
                                                      OpDecorate %615 RelaxedPrecision 
                                                      OpDecorate %616 RelaxedPrecision 
                                                      OpDecorate %618 RelaxedPrecision 
                                                      OpDecorate %619 RelaxedPrecision 
                                                      OpDecorate %620 RelaxedPrecision 
                                                      OpDecorate %621 RelaxedPrecision 
                                                      OpDecorate %622 RelaxedPrecision 
                                                      OpDecorate %623 RelaxedPrecision 
                                                      OpDecorate %624 RelaxedPrecision 
                                                      OpDecorate %625 RelaxedPrecision 
                                                      OpDecorate %626 RelaxedPrecision 
                                                      OpDecorate %627 RelaxedPrecision 
                                                      OpDecorate %633 RelaxedPrecision 
                                                      OpDecorate %636 RelaxedPrecision 
                                                      OpDecorate %705 RelaxedPrecision 
                                                      OpDecorate %713 RelaxedPrecision 
                                                      OpDecorate %714 RelaxedPrecision 
                                                      OpDecorate %715 RelaxedPrecision 
                                                      OpDecorate %716 RelaxedPrecision 
                                                      OpDecorate %717 RelaxedPrecision 
                                                      OpDecorate %718 RelaxedPrecision 
                                                      OpDecorate %737 RelaxedPrecision 
                                                      OpDecorate %738 RelaxedPrecision 
                                                      OpDecorate %739 RelaxedPrecision 
                                                      OpDecorate %742 RelaxedPrecision 
                                                      OpDecorate %743 RelaxedPrecision 
                                                      OpDecorate %744 RelaxedPrecision 
                                                      OpDecorate %746 RelaxedPrecision 
                                                      OpDecorate %746 Location 746 
                                                      OpDecorate %747 RelaxedPrecision 
                                                      OpDecorate %748 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 0 
                                              %17 = OpTypePointer Private %6 
                               Private f32_3* %23 = OpVariable Private 
                                              %28 = OpTypeVector %6 4 
                                          u32 %29 = OpConstant 4 
                                              %30 = OpTypeArray %28 %29 
                                              %31 = OpTypeStruct %28 %28 %30 
                                              %32 = OpTypePointer Uniform %31 
    Uniform struct {f32_4; f32_4; f32_4[4];}* %33 = OpVariable Uniform 
                                              %34 = OpTypeInt 32 1 
                                          i32 %35 = OpConstant 0 
                                              %36 = OpTypePointer Uniform %28 
                               Private f32_3* %41 = OpVariable Private 
                                 Private f32* %58 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                 Private f32* %66 = OpVariable Private 
                                              %67 = OpTypeStruct %6 %28 %28 %28 %6 %7 %28 %6 %6 %6 %6 %28 %6 
                                              %68 = OpTypePointer Uniform %67 
Uniform struct {f32; f32_4; f32_4; f32_4; f32; f32_3; f32_4; f32; f32; f32; f32; f32_4; f32;}* %69 = OpVariable Uniform 
                                          i32 %70 = OpConstant 10 
                                              %71 = OpTypePointer Uniform %6 
                                          f32 %75 = OpConstant 3.674022E-40 
                                          f32 %77 = OpConstant 3.674022E-40 
                               Private f32_3* %81 = OpVariable Private 
                                              %82 = OpTypeVector %6 2 
                                              %83 = OpTypePointer Input %82 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                          i32 %86 = OpConstant 1 
                                 Private f32* %97 = OpVariable Private 
                                              %98 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %99 = OpTypePointer UniformConstant %98 
        UniformConstant read_only Texture2D* %100 = OpVariable UniformConstant 
                                             %102 = OpTypeSampler 
                                             %103 = OpTypePointer UniformConstant %102 
                    UniformConstant sampler* %104 = OpVariable UniformConstant 
                                             %106 = OpTypeSampledImage %98 
                              Private f32_3* %112 = OpVariable Private 
                              Private f32_3* %117 = OpVariable Private 
                                         f32 %119 = OpConstant 3.674022E-40 
                                         f32 %121 = OpConstant 3.674022E-40 
                                         i32 %126 = OpConstant 12 
                                Private f32* %131 = OpVariable Private 
                                             %152 = OpTypePointer Private %28 
                              Private f32_4* %153 = OpVariable Private 
                                         i32 %155 = OpConstant 2 
                              Private f32_3* %166 = OpVariable Private 
        UniformConstant read_only Texture2D* %167 = OpVariable UniformConstant 
                    UniformConstant sampler* %169 = OpVariable UniformConstant 
                              Private f32_3* %176 = OpVariable Private 
        UniformConstant read_only Texture2D* %177 = OpVariable UniformConstant 
                    UniformConstant sampler* %179 = OpVariable UniformConstant 
                                         i32 %187 = OpConstant 3 
                                         f32 %196 = OpConstant 3.674022E-40 
                                       f32_3 %197 = OpConstantComposite %196 %196 %196 
                              Private f32_3* %199 = OpVariable Private 
                                       f32_3 %201 = OpConstantComposite %119 %119 %119 
                                       f32_3 %203 = OpConstantComposite %121 %121 %121 
                        Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                Private f32* %231 = OpVariable Private 
                              Private f32_3* %246 = OpVariable Private 
                                         f32 %299 = OpConstant 3.674022E-40 
                                         u32 %309 = OpConstant 1 
                                         f32 %330 = OpConstant 3.674022E-40 
                                         i32 %339 = OpConstant 11 
                                         i32 %349 = OpConstant 4 
                                Private f32* %354 = OpVariable Private 
                                         f32 %362 = OpConstant 3.674022E-40 
                                         f32 %371 = OpConstant 3.674022E-40 
                                         f32 %384 = OpConstant 3.674022E-40 
                              Private f32_4* %487 = OpVariable Private 
                              Private f32_3* %493 = OpVariable Private 
                                             %494 = OpTypeArray %28 %29 
                                             %495 = OpTypeArray %28 %29 
                                         u32 %496 = OpConstant 2 
                                             %497 = OpTypeArray %28 %496 
                                             %498 = OpTypeStruct %494 %495 %28 %28 %28 %497 %28 %28 %28 %28 %28 %28 %28 %28 %28 %28 %28 
                                             %499 = OpTypePointer Uniform %498 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4; f32_4[2]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %500 = OpVariable Uniform 
                                         i32 %501 = OpConstant 13 
                                         i32 %507 = OpConstant 14 
                                         i32 %513 = OpConstant 15 
                                         i32 %519 = OpConstant 16 
                                         u32 %528 = OpConstant 3 
                                       f32_3 %549 = OpConstantComposite %384 %384 %384 
                                         f32 %573 = OpConstant 3.674022E-40 
                                         f32 %575 = OpConstant 3.674022E-40 
                                         f32 %583 = OpConstant 3.674022E-40 
                              Private f32_4* %585 = OpVariable Private 
                                             %586 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %587 = OpTypePointer UniformConstant %586 
      UniformConstant read_only TextureCube* %588 = OpVariable UniformConstant 
                    UniformConstant sampler* %590 = OpVariable UniformConstant 
                                             %592 = OpTypeSampledImage %586 
                                         i32 %600 = OpConstant 7 
                                         i32 %641 = OpConstant 5 
                                             %642 = OpTypePointer Uniform %7 
                                         f32 %683 = OpConstant 3.674022E-40 
                                         i32 %687 = OpConstant 8 
                                         i32 %700 = OpConstant 6 
                                         i32 %706 = OpConstant 9 
                                       f32_3 %724 = OpConstantComposite %573 %573 %573 
                                         f32 %727 = OpConstant 3.674022E-40 
                                       f32_3 %728 = OpConstantComposite %727 %727 %727 
                                         f32 %740 = OpConstant 3.674022E-40 
                                       f32_3 %741 = OpConstantComposite %740 %740 %740 
                                             %745 = OpTypePointer Output %28 
                               Output f32_4* %746 = OpVariable Output 
                                             %751 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                                          f32 %14 = OpDot %12 %13 
                                 Private f32* %18 = OpAccessChain %9 %16 
                                                      OpStore %18 %14 
                                 Private f32* %19 = OpAccessChain %9 %16 
                                          f32 %20 = OpLoad %19 
                                          f32 %21 = OpExtInst %1 32 %20 
                                 Private f32* %22 = OpAccessChain %9 %16 
                                                      OpStore %22 %21 
                                        f32_3 %24 = OpLoad vs_TEXCOORD2 
                                        f32_3 %25 = OpLoad %9 
                                        f32_3 %26 = OpVectorShuffle %25 %25 0 0 0 
                                        f32_3 %27 = OpFMul %24 %26 
                               Uniform f32_4* %37 = OpAccessChain %33 %35 
                                        f32_4 %38 = OpLoad %37 
                                        f32_3 %39 = OpVectorShuffle %38 %38 0 1 2 
                                        f32_3 %40 = OpFAdd %27 %39 
                                                      OpStore %23 %40 
                                        f32_3 %42 = OpLoad %9 
                                        f32_3 %43 = OpVectorShuffle %42 %42 0 0 0 
                                        f32_3 %44 = OpLoad vs_TEXCOORD2 
                                        f32_3 %45 = OpFMul %43 %44 
                                                      OpStore %41 %45 
                                        f32_3 %46 = OpLoad %23 
                                        f32_3 %47 = OpLoad %23 
                                          f32 %48 = OpDot %46 %47 
                                 Private f32* %49 = OpAccessChain %9 %16 
                                                      OpStore %49 %48 
                                 Private f32* %50 = OpAccessChain %9 %16 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpExtInst %1 32 %51 
                                 Private f32* %53 = OpAccessChain %9 %16 
                                                      OpStore %53 %52 
                                        f32_3 %54 = OpLoad %9 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 0 0 
                                        f32_3 %56 = OpLoad %23 
                                        f32_3 %57 = OpFMul %55 %56 
                                                      OpStore %9 %57 
                                        f32_3 %60 = OpLoad vs_TEXCOORD3 
                                        f32_3 %61 = OpLoad %9 
                                          f32 %62 = OpDot %60 %61 
                                                      OpStore %58 %62 
                                          f32 %63 = OpLoad %58 
                                          f32 %64 = OpLoad %58 
                                          f32 %65 = OpFMul %63 %64 
                                                      OpStore %58 %65 
                                 Uniform f32* %72 = OpAccessChain %69 %70 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFNegate %73 
                                          f32 %76 = OpFMul %74 %75 
                                          f32 %78 = OpFAdd %76 %77 
                                                      OpStore %66 %78 
                                          f32 %79 = OpLoad %66 
                                          f32 %80 = OpExtInst %1 31 %79 
                                                      OpStore %66 %80 
                                        f32_2 %85 = OpLoad vs_TEXCOORD0 
                               Uniform f32_4* %87 = OpAccessChain %69 %86 
                                        f32_4 %88 = OpLoad %87 
                                        f32_2 %89 = OpVectorShuffle %88 %88 0 1 
                                        f32_2 %90 = OpFMul %85 %89 
                               Uniform f32_4* %91 = OpAccessChain %69 %86 
                                        f32_4 %92 = OpLoad %91 
                                        f32_2 %93 = OpVectorShuffle %92 %92 2 3 
                                        f32_2 %94 = OpFAdd %90 %93 
                                        f32_3 %95 = OpLoad %81 
                                        f32_3 %96 = OpVectorShuffle %95 %94 3 4 2 
                                                      OpStore %81 %96 
                         read_only Texture2D %101 = OpLoad %100 
                                     sampler %105 = OpLoad %104 
                  read_only Texture2DSampled %107 = OpSampledImage %101 %105 
                                       f32_3 %108 = OpLoad %81 
                                       f32_2 %109 = OpVectorShuffle %108 %108 0 1 
                                       f32_4 %110 = OpImageSampleImplicitLod %107 %109 
                                         f32 %111 = OpCompositeExtract %110 0 
                                                      OpStore %97 %111 
                                         f32 %113 = OpLoad %97 
                                         f32 %114 = OpLoad %97 
                                         f32 %115 = OpFMul %113 %114 
                                Private f32* %116 = OpAccessChain %112 %16 
                                                      OpStore %116 %115 
                                         f32 %118 = OpLoad %97 
                                         f32 %120 = OpFMul %118 %119 
                                         f32 %122 = OpFAdd %120 %121 
                                Private f32* %123 = OpAccessChain %117 %16 
                                                      OpStore %123 %122 
                                Private f32* %124 = OpAccessChain %117 %16 
                                         f32 %125 = OpLoad %124 
                                Uniform f32* %127 = OpAccessChain %69 %126 
                                         f32 %128 = OpLoad %127 
                                         f32 %129 = OpFAdd %125 %128 
                                Private f32* %130 = OpAccessChain %81 %16 
                                                      OpStore %130 %129 
                                Private f32* %132 = OpAccessChain %112 %16 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpLoad %66 
                                         f32 %135 = OpFDiv %133 %134 
                                                      OpStore %131 %135 
                                         f32 %136 = OpLoad %66 
                                Private f32* %137 = OpAccessChain %112 %16 
                                         f32 %138 = OpLoad %137 
                                         f32 %139 = OpFMul %136 %138 
                                                      OpStore %66 %139 
                                         f32 %140 = OpLoad %131 
                                         f32 %141 = OpLoad %131 
                                         f32 %142 = OpFMul %140 %141 
                                Private f32* %143 = OpAccessChain %112 %16 
                                                      OpStore %143 %142 
                                         f32 %144 = OpLoad %58 
                                Private f32* %145 = OpAccessChain %112 %16 
                                         f32 %146 = OpLoad %145 
                                         f32 %147 = OpFDiv %144 %146 
                                                      OpStore %58 %147 
                                         f32 %148 = OpLoad %66 
                                         f32 %149 = OpLoad %66 
                                         f32 %150 = OpFMul %148 %149 
                                Private f32* %151 = OpAccessChain %112 %16 
                                                      OpStore %151 %150 
                                       f32_2 %154 = OpLoad vs_TEXCOORD0 
                              Uniform f32_4* %156 = OpAccessChain %69 %155 
                                       f32_4 %157 = OpLoad %156 
                                       f32_2 %158 = OpVectorShuffle %157 %157 0 1 
                                       f32_2 %159 = OpFMul %154 %158 
                              Uniform f32_4* %160 = OpAccessChain %69 %155 
                                       f32_4 %161 = OpLoad %160 
                                       f32_2 %162 = OpVectorShuffle %161 %161 2 3 
                                       f32_2 %163 = OpFAdd %159 %162 
                                       f32_4 %164 = OpLoad %153 
                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 2 3 
                                                      OpStore %153 %165 
                         read_only Texture2D %168 = OpLoad %167 
                                     sampler %170 = OpLoad %169 
                  read_only Texture2DSampled %171 = OpSampledImage %168 %170 
                                       f32_4 %172 = OpLoad %153 
                                       f32_2 %173 = OpVectorShuffle %172 %172 0 1 
                                       f32_4 %174 = OpImageSampleImplicitLod %171 %173 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                                                      OpStore %166 %175 
                         read_only Texture2D %178 = OpLoad %177 
                                     sampler %180 = OpLoad %179 
                  read_only Texture2DSampled %181 = OpSampledImage %178 %180 
                                       f32_4 %182 = OpLoad %153 
                                       f32_2 %183 = OpVectorShuffle %182 %182 0 1 
                                       f32_4 %184 = OpImageSampleImplicitLod %181 %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                                      OpStore %176 %185 
                                       f32_3 %186 = OpLoad %176 
                              Uniform f32_4* %188 = OpAccessChain %69 %187 
                                       f32_4 %189 = OpLoad %188 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_3 %191 = OpFMul %186 %190 
                                       f32_4 %192 = OpLoad %153 
                                       f32_4 %193 = OpVectorShuffle %192 %191 4 5 6 3 
                                                      OpStore %153 %193 
                                       f32_4 %194 = OpLoad %153 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_3 %198 = OpFMul %195 %197 
                                                      OpStore %117 %198 
                                       f32_3 %200 = OpLoad %166 
                                       f32_3 %202 = OpFMul %200 %201 
                                       f32_3 %204 = OpFAdd %202 %203 
                                                      OpStore %199 %204 
                                       f32_3 %205 = OpLoad %199 
                                       f32_3 %206 = OpVectorShuffle %205 %205 1 1 1 
                                       f32_3 %208 = OpLoad vs_TEXCOORD4 
                                       f32_3 %209 = OpFMul %206 %208 
                                       f32_4 %210 = OpLoad %153 
                                       f32_4 %211 = OpVectorShuffle %210 %209 4 5 6 3 
                                                      OpStore %153 %211 
                                       f32_3 %212 = OpLoad %199 
                                       f32_3 %213 = OpVectorShuffle %212 %212 0 0 0 
                                       f32_3 %214 = OpLoad vs_TEXCOORD3 
                                       f32_3 %215 = OpFMul %213 %214 
                                       f32_4 %216 = OpLoad %153 
                                       f32_3 %217 = OpVectorShuffle %216 %216 0 1 2 
                                       f32_3 %218 = OpFAdd %215 %217 
                                       f32_4 %219 = OpLoad %153 
                                       f32_4 %220 = OpVectorShuffle %219 %218 4 5 6 3 
                                                      OpStore %153 %220 
                                       f32_3 %221 = OpLoad %199 
                                       f32_3 %222 = OpVectorShuffle %221 %221 2 2 2 
                                       f32_3 %224 = OpLoad vs_TEXCOORD1 
                                       f32_3 %225 = OpFMul %222 %224 
                                       f32_4 %226 = OpLoad %153 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_3 %228 = OpFAdd %225 %227 
                                       f32_4 %229 = OpLoad %153 
                                       f32_4 %230 = OpVectorShuffle %229 %228 4 5 6 3 
                                                      OpStore %153 %230 
                                       f32_4 %232 = OpLoad %153 
                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
                                       f32_4 %234 = OpLoad %153 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
                                         f32 %236 = OpDot %233 %235 
                                                      OpStore %231 %236 
                                         f32 %237 = OpLoad %231 
                                         f32 %238 = OpExtInst %1 32 %237 
                                                      OpStore %231 %238 
                                         f32 %239 = OpLoad %231 
                                       f32_3 %240 = OpCompositeConstruct %239 %239 %239 
                                       f32_4 %241 = OpLoad %153 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 1 2 
                                       f32_3 %243 = OpFMul %240 %242 
                                       f32_4 %244 = OpLoad %153 
                                       f32_4 %245 = OpVectorShuffle %244 %243 4 5 6 3 
                                                      OpStore %153 %245 
                                       f32_4 %247 = OpLoad %153 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                       f32_3 %249 = OpLoad %81 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 0 0 
                                       f32_3 %251 = OpFMul %248 %250 
                                       f32_3 %252 = OpLoad vs_TEXCOORD4 
                                       f32_3 %253 = OpFAdd %251 %252 
                                                      OpStore %246 %253 
                                       f32_3 %254 = OpLoad %246 
                                       f32_3 %255 = OpLoad %246 
                                         f32 %256 = OpDot %254 %255 
                                Private f32* %257 = OpAccessChain %81 %16 
                                                      OpStore %257 %256 
                                Private f32* %258 = OpAccessChain %81 %16 
                                         f32 %259 = OpLoad %258 
                                         f32 %260 = OpExtInst %1 32 %259 
                                Private f32* %261 = OpAccessChain %81 %16 
                                                      OpStore %261 %260 
                                       f32_3 %262 = OpLoad %81 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 0 0 
                                       f32_3 %264 = OpLoad %246 
                                       f32_3 %265 = OpFMul %263 %264 
                                                      OpStore %246 %265 
                                       f32_3 %266 = OpLoad %246 
                                       f32_3 %267 = OpLoad %9 
                                         f32 %268 = OpDot %266 %267 
                                Private f32* %269 = OpAccessChain %81 %16 
                                                      OpStore %269 %268 
                                Private f32* %270 = OpAccessChain %81 %16 
                                         f32 %271 = OpLoad %270 
                                Private f32* %272 = OpAccessChain %81 %16 
                                         f32 %273 = OpLoad %272 
                                         f32 %274 = OpFMul %271 %273 
                                Private f32* %275 = OpAccessChain %81 %16 
                                                      OpStore %275 %274 
                                Private f32* %276 = OpAccessChain %81 %16 
                                         f32 %277 = OpLoad %276 
                                Private f32* %278 = OpAccessChain %112 %16 
                                         f32 %279 = OpLoad %278 
                                         f32 %280 = OpFDiv %277 %279 
                                Private f32* %281 = OpAccessChain %81 %16 
                                                      OpStore %281 %280 
                                         f32 %282 = OpLoad %58 
                                Private f32* %283 = OpAccessChain %81 %16 
                                         f32 %284 = OpLoad %283 
                                         f32 %285 = OpFAdd %282 %284 
                                                      OpStore %58 %285 
                                       f32_4 %286 = OpLoad %153 
                                       f32_3 %287 = OpVectorShuffle %286 %286 0 1 2 
                                       f32_3 %288 = OpLoad %9 
                                         f32 %289 = OpDot %287 %288 
                                Private f32* %290 = OpAccessChain %81 %16 
                                                      OpStore %290 %289 
                              Uniform f32_4* %291 = OpAccessChain %33 %35 
                                       f32_4 %292 = OpLoad %291 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
                                       f32_3 %294 = OpLoad %9 
                                         f32 %295 = OpDot %293 %294 
                                Private f32* %296 = OpAccessChain %9 %16 
                                                      OpStore %296 %295 
                                Private f32* %297 = OpAccessChain %9 %16 
                                         f32 %298 = OpLoad %297 
                                         f32 %300 = OpExtInst %1 40 %298 %299 
                                Private f32* %301 = OpAccessChain %9 %16 
                                                      OpStore %301 %300 
                                Private f32* %302 = OpAccessChain %81 %16 
                                         f32 %303 = OpLoad %302 
                                Private f32* %304 = OpAccessChain %81 %16 
                                         f32 %305 = OpLoad %304 
                                         f32 %306 = OpFMul %303 %305 
                                         f32 %307 = OpLoad %58 
                                         f32 %308 = OpFAdd %306 %307 
                                Private f32* %310 = OpAccessChain %9 %309 
                                                      OpStore %310 %308 
                                       f32_3 %311 = OpLoad %9 
                                       f32_2 %312 = OpVectorShuffle %311 %311 0 1 
                                       f32_3 %313 = OpLoad %9 
                                       f32_2 %314 = OpVectorShuffle %313 %313 0 1 
                                       f32_2 %315 = OpFMul %312 %314 
                                       f32_3 %316 = OpLoad %9 
                                       f32_3 %317 = OpVectorShuffle %316 %315 3 4 2 
                                                      OpStore %9 %317 
                                         f32 %318 = OpLoad %131 
                                Private f32* %319 = OpAccessChain %9 %309 
                                         f32 %320 = OpLoad %319 
                                         f32 %321 = OpFMul %318 %320 
                                Private f32* %322 = OpAccessChain %23 %16 
                                                      OpStore %322 %321 
                                         f32 %323 = OpLoad %66 
                                Private f32* %324 = OpAccessChain %23 %16 
                                         f32 %325 = OpLoad %324 
                                         f32 %326 = OpFMul %323 %325 
                                Private f32* %327 = OpAccessChain %23 %16 
                                                      OpStore %327 %326 
                                Private f32* %328 = OpAccessChain %23 %16 
                                         f32 %329 = OpLoad %328 
                                         f32 %331 = OpFMul %329 %330 
                                Private f32* %332 = OpAccessChain %23 %16 
                                                      OpStore %332 %331 
                                Private f32* %333 = OpAccessChain %23 %16 
                                         f32 %334 = OpLoad %333 
                                         f32 %335 = OpFDiv %77 %334 
                                Private f32* %336 = OpAccessChain %23 %16 
                                                      OpStore %336 %335 
                                       f32_3 %337 = OpLoad %23 
                                       f32_3 %338 = OpVectorShuffle %337 %337 0 0 0 
                              Uniform f32_4* %340 = OpAccessChain %69 %339 
                                       f32_4 %341 = OpLoad %340 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                                       f32_3 %343 = OpFMul %338 %342 
                                                      OpStore %23 %343 
                                       f32_3 %344 = OpLoad %23 
                              Uniform f32_4* %345 = OpAccessChain %69 %339 
                                       f32_4 %346 = OpLoad %345 
                                       f32_3 %347 = OpVectorShuffle %346 %346 3 3 3 
                                       f32_3 %348 = OpFMul %344 %347 
                                                      OpStore %23 %348 
                                Uniform f32* %350 = OpAccessChain %69 %349 
                                         f32 %351 = OpLoad %350 
                                         f32 %352 = OpFNegate %351 
                                         f32 %353 = OpFAdd %352 %77 
                                                      OpStore %66 %353 
                                         f32 %355 = OpLoad %66 
                                         f32 %356 = OpFNegate %355 
                                         f32 %357 = OpFAdd %356 %77 
                                                      OpStore %354 %357 
                                         f32 %358 = OpLoad %354 
                                         f32 %359 = OpLoad %354 
                                         f32 %360 = OpFMul %358 %359 
                                                      OpStore %354 %360 
                                         f32 %361 = OpLoad %354 
                                         f32 %363 = OpExtInst %1 40 %361 %362 
                                                      OpStore %354 %363 
                                         f32 %364 = OpLoad %354 
                                         f32 %365 = OpLoad %354 
                                         f32 %366 = OpFAdd %364 %365 
                                                      OpStore %66 %366 
                                Private f32* %367 = OpAccessChain %9 %16 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpLoad %66 
                                         f32 %370 = OpFMul %368 %369 
                                         f32 %372 = OpFAdd %370 %371 
                                Private f32* %373 = OpAccessChain %9 %16 
                                                      OpStore %373 %372 
                                       f32_4 %374 = OpLoad %153 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                                       f32_3 %376 = OpLoad %41 
                                         f32 %377 = OpDot %375 %376 
                                                      OpStore %66 %377 
                                         f32 %378 = OpLoad %66 
                                         f32 %379 = OpExtInst %1 40 %378 %299 
                                                      OpStore %66 %379 
                                         f32 %380 = OpLoad %66 
                                         f32 %381 = OpFNegate %380 
                                         f32 %382 = OpFAdd %381 %77 
                                                      OpStore %66 %382 
                                         f32 %383 = OpLoad %66 
                                         f32 %385 = OpExtInst %1 40 %383 %384 
                                                      OpStore %66 %385 
                                         f32 %386 = OpLoad %66 
                                         f32 %387 = OpLoad %66 
                                         f32 %388 = OpFMul %386 %387 
                                Private f32* %389 = OpAccessChain %81 %16 
                                                      OpStore %389 %388 
                                Private f32* %390 = OpAccessChain %81 %16 
                                         f32 %391 = OpLoad %390 
                                Private f32* %392 = OpAccessChain %81 %16 
                                         f32 %393 = OpLoad %392 
                                         f32 %394 = OpFMul %391 %393 
                                Private f32* %395 = OpAccessChain %81 %16 
                                                      OpStore %395 %394 
                                         f32 %396 = OpLoad %66 
                                Private f32* %397 = OpAccessChain %81 %16 
                                         f32 %398 = OpLoad %397 
                                         f32 %399 = OpFMul %396 %398 
                                                      OpStore %66 %399 
                                Private f32* %400 = OpAccessChain %9 %16 
                                         f32 %401 = OpLoad %400 
                                         f32 %402 = OpLoad %66 
                                         f32 %403 = OpFMul %401 %402 
                                         f32 %404 = OpFAdd %403 %77 
                                                      OpStore %66 %404 
                                       f32_4 %405 = OpLoad %153 
                                       f32_3 %406 = OpVectorShuffle %405 %405 0 1 2 
                              Uniform f32_4* %407 = OpAccessChain %33 %35 
                                       f32_4 %408 = OpLoad %407 
                                       f32_3 %409 = OpVectorShuffle %408 %408 0 1 2 
                                         f32 %410 = OpDot %406 %409 
                                Private f32* %411 = OpAccessChain %81 %16 
                                                      OpStore %411 %410 
                                Private f32* %412 = OpAccessChain %81 %16 
                                         f32 %413 = OpLoad %412 
                                         f32 %414 = OpExtInst %1 40 %413 %299 
                                Private f32* %415 = OpAccessChain %81 %16 
                                                      OpStore %415 %414 
                                Private f32* %416 = OpAccessChain %81 %16 
                                         f32 %417 = OpLoad %416 
                                         f32 %418 = OpFNegate %417 
                                         f32 %419 = OpFAdd %418 %77 
                                Private f32* %420 = OpAccessChain %112 %16 
                                                      OpStore %420 %419 
                                Private f32* %421 = OpAccessChain %112 %16 
                                         f32 %422 = OpLoad %421 
                                         f32 %423 = OpExtInst %1 40 %422 %384 
                                Private f32* %424 = OpAccessChain %112 %16 
                                                      OpStore %424 %423 
                                Private f32* %425 = OpAccessChain %112 %16 
                                         f32 %426 = OpLoad %425 
                                Private f32* %427 = OpAccessChain %112 %16 
                                         f32 %428 = OpLoad %427 
                                         f32 %429 = OpFMul %426 %428 
                                                      OpStore %131 %429 
                                         f32 %430 = OpLoad %131 
                                         f32 %431 = OpLoad %131 
                                         f32 %432 = OpFMul %430 %431 
                                                      OpStore %131 %432 
                                Private f32* %433 = OpAccessChain %112 %16 
                                         f32 %434 = OpLoad %433 
                                         f32 %435 = OpLoad %131 
                                         f32 %436 = OpFMul %434 %435 
                                Private f32* %437 = OpAccessChain %112 %16 
                                                      OpStore %437 %436 
                                Private f32* %438 = OpAccessChain %9 %16 
                                         f32 %439 = OpLoad %438 
                                Private f32* %440 = OpAccessChain %112 %16 
                                         f32 %441 = OpLoad %440 
                                         f32 %442 = OpFMul %439 %441 
                                         f32 %443 = OpFAdd %442 %77 
                                Private f32* %444 = OpAccessChain %9 %16 
                                                      OpStore %444 %443 
                                         f32 %445 = OpLoad %66 
                                Private f32* %446 = OpAccessChain %9 %16 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpFMul %445 %447 
                                Private f32* %449 = OpAccessChain %9 %16 
                                                      OpStore %449 %448 
                                Private f32* %450 = OpAccessChain %81 %16 
                                         f32 %451 = OpLoad %450 
                                Private f32* %452 = OpAccessChain %9 %16 
                                         f32 %453 = OpLoad %452 
                                         f32 %454 = OpFMul %451 %453 
                                Private f32* %455 = OpAccessChain %9 %16 
                                                      OpStore %455 %454 
                                Private f32* %456 = OpAccessChain %9 %16 
                                         f32 %457 = OpLoad %456 
                                         f32 %458 = OpExtInst %1 37 %457 %77 
                                Private f32* %459 = OpAccessChain %9 %16 
                                                      OpStore %459 %458 
                                       f32_3 %460 = OpLoad %9 
                                       f32_3 %461 = OpVectorShuffle %460 %460 0 0 0 
                                       f32_3 %462 = OpLoad %117 
                                       f32_3 %463 = OpFMul %461 %462 
                                                      OpStore %112 %463 
                                       f32_3 %464 = OpLoad %112 
                              Uniform f32_4* %465 = OpAccessChain %33 %86 
                                       f32_4 %466 = OpLoad %465 
                                       f32_3 %467 = OpVectorShuffle %466 %466 0 1 2 
                                       f32_3 %468 = OpFMul %464 %467 
                                       f32_3 %469 = OpLoad %23 
                                       f32_3 %470 = OpFAdd %468 %469 
                                                      OpStore %9 %470 
                                Private f32* %471 = OpAccessChain %153 %309 
                                         f32 %472 = OpLoad %471 
                                Private f32* %473 = OpAccessChain %153 %309 
                                         f32 %474 = OpLoad %473 
                                         f32 %475 = OpFMul %472 %474 
                                Private f32* %476 = OpAccessChain %199 %16 
                                                      OpStore %476 %475 
                                Private f32* %477 = OpAccessChain %153 %16 
                                         f32 %478 = OpLoad %477 
                                Private f32* %479 = OpAccessChain %153 %16 
                                         f32 %480 = OpLoad %479 
                                         f32 %481 = OpFMul %478 %480 
                                Private f32* %482 = OpAccessChain %199 %16 
                                         f32 %483 = OpLoad %482 
                                         f32 %484 = OpFNegate %483 
                                         f32 %485 = OpFAdd %481 %484 
                                Private f32* %486 = OpAccessChain %199 %16 
                                                      OpStore %486 %485 
                                       f32_4 %488 = OpLoad %153 
                                       f32_4 %489 = OpVectorShuffle %488 %488 1 2 2 0 
                                       f32_4 %490 = OpLoad %153 
                                       f32_4 %491 = OpVectorShuffle %490 %490 0 1 2 2 
                                       f32_4 %492 = OpFMul %489 %491 
                                                      OpStore %487 %492 
                              Uniform f32_4* %502 = OpAccessChain %500 %501 
                                       f32_4 %503 = OpLoad %502 
                                       f32_4 %504 = OpLoad %487 
                                         f32 %505 = OpDot %503 %504 
                                Private f32* %506 = OpAccessChain %493 %16 
                                                      OpStore %506 %505 
                              Uniform f32_4* %508 = OpAccessChain %500 %507 
                                       f32_4 %509 = OpLoad %508 
                                       f32_4 %510 = OpLoad %487 
                                         f32 %511 = OpDot %509 %510 
                                Private f32* %512 = OpAccessChain %493 %309 
                                                      OpStore %512 %511 
                              Uniform f32_4* %514 = OpAccessChain %500 %513 
                                       f32_4 %515 = OpLoad %514 
                                       f32_4 %516 = OpLoad %487 
                                         f32 %517 = OpDot %515 %516 
                                Private f32* %518 = OpAccessChain %493 %496 
                                                      OpStore %518 %517 
                              Uniform f32_4* %520 = OpAccessChain %500 %519 
                                       f32_4 %521 = OpLoad %520 
                                       f32_3 %522 = OpVectorShuffle %521 %521 0 1 2 
                                       f32_3 %523 = OpLoad %199 
                                       f32_3 %524 = OpVectorShuffle %523 %523 0 0 0 
                                       f32_3 %525 = OpFMul %522 %524 
                                       f32_3 %526 = OpLoad %493 
                                       f32_3 %527 = OpFAdd %525 %526 
                                                      OpStore %199 %527 
                                Private f32* %529 = OpAccessChain %153 %528 
                                                      OpStore %529 %77 
                              Uniform f32_4* %530 = OpAccessChain %500 %70 
                                       f32_4 %531 = OpLoad %530 
                                       f32_4 %532 = OpLoad %153 
                                         f32 %533 = OpDot %531 %532 
                                Private f32* %534 = OpAccessChain %493 %16 
                                                      OpStore %534 %533 
                              Uniform f32_4* %535 = OpAccessChain %500 %339 
                                       f32_4 %536 = OpLoad %535 
                                       f32_4 %537 = OpLoad %153 
                                         f32 %538 = OpDot %536 %537 
                                Private f32* %539 = OpAccessChain %493 %309 
                                                      OpStore %539 %538 
                              Uniform f32_4* %540 = OpAccessChain %500 %126 
                                       f32_4 %541 = OpLoad %540 
                                       f32_4 %542 = OpLoad %153 
                                         f32 %543 = OpDot %541 %542 
                                Private f32* %544 = OpAccessChain %493 %496 
                                                      OpStore %544 %543 
                                       f32_3 %545 = OpLoad %199 
                                       f32_3 %546 = OpLoad %493 
                                       f32_3 %547 = OpFAdd %545 %546 
                                                      OpStore %199 %547 
                                       f32_3 %548 = OpLoad %199 
                                       f32_3 %550 = OpExtInst %1 40 %548 %549 
                                                      OpStore %199 %550 
                                       f32_3 %551 = OpLoad %117 
                                       f32_3 %552 = OpLoad %199 
                                       f32_3 %553 = OpFMul %551 %552 
                                                      OpStore %112 %553 
                                       f32_3 %554 = OpLoad %41 
                                       f32_3 %555 = OpFNegate %554 
                                       f32_4 %556 = OpLoad %153 
                                       f32_3 %557 = OpVectorShuffle %556 %556 0 1 2 
                                         f32 %558 = OpDot %555 %557 
                                                      OpStore %58 %558 
                                         f32 %559 = OpLoad %58 
                                         f32 %560 = OpLoad %58 
                                         f32 %561 = OpFAdd %559 %560 
                                                      OpStore %58 %561 
                                       f32_4 %562 = OpLoad %153 
                                       f32_3 %563 = OpVectorShuffle %562 %562 0 1 2 
                                         f32 %564 = OpLoad %58 
                                       f32_3 %565 = OpCompositeConstruct %564 %564 %564 
                                       f32_3 %566 = OpFNegate %565 
                                       f32_3 %567 = OpFMul %563 %566 
                                       f32_3 %568 = OpLoad %41 
                                       f32_3 %569 = OpFNegate %568 
                                       f32_3 %570 = OpFAdd %567 %569 
                                                      OpStore %41 %570 
                                         f32 %571 = OpLoad %354 
                                         f32 %572 = OpFNegate %571 
                                         f32 %574 = OpFMul %572 %573 
                                         f32 %576 = OpFAdd %574 %575 
                                Private f32* %577 = OpAccessChain %199 %16 
                                                      OpStore %577 %576 
                                         f32 %578 = OpLoad %354 
                                Private f32* %579 = OpAccessChain %199 %16 
                                         f32 %580 = OpLoad %579 
                                         f32 %581 = OpFMul %578 %580 
                                                      OpStore %354 %581 
                                         f32 %582 = OpLoad %354 
                                         f32 %584 = OpFMul %582 %583 
                                                      OpStore %354 %584 
                       read_only TextureCube %589 = OpLoad %588 
                                     sampler %591 = OpLoad %590 
                read_only TextureCubeSampled %593 = OpSampledImage %589 %591 
                                       f32_3 %594 = OpLoad %41 
                                         f32 %595 = OpLoad %354 
                                       f32_4 %596 = OpImageSampleExplicitLod %593 %594 Lod %28 
                                                      OpStore %585 %596 
                                Private f32* %597 = OpAccessChain %585 %528 
                                         f32 %598 = OpLoad %597 
                                         f32 %599 = OpFAdd %598 %121 
                                                      OpStore %354 %599 
                                Uniform f32* %601 = OpAccessChain %500 %600 %528 
                                         f32 %602 = OpLoad %601 
                                         f32 %603 = OpLoad %354 
                                         f32 %604 = OpFMul %602 %603 
                                         f32 %605 = OpFAdd %604 %77 
                                                      OpStore %354 %605 
                                         f32 %606 = OpLoad %354 
                                         f32 %607 = OpExtInst %1 40 %606 %384 
                                                      OpStore %354 %607 
                                         f32 %608 = OpLoad %354 
                                         f32 %609 = OpExtInst %1 30 %608 
                                                      OpStore %354 %609 
                                         f32 %610 = OpLoad %354 
                                Uniform f32* %611 = OpAccessChain %500 %600 %309 
                                         f32 %612 = OpLoad %611 
                                         f32 %613 = OpFMul %610 %612 
                                                      OpStore %354 %613 
                                         f32 %614 = OpLoad %354 
                                         f32 %615 = OpExtInst %1 29 %614 
                                                      OpStore %354 %615 
                                         f32 %616 = OpLoad %354 
                                Uniform f32* %617 = OpAccessChain %500 %600 %16 
                                         f32 %618 = OpLoad %617 
                                         f32 %619 = OpFMul %616 %618 
                                                      OpStore %354 %619 
                                       f32_4 %620 = OpLoad %585 
                                       f32_3 %621 = OpVectorShuffle %620 %620 0 1 2 
                                         f32 %622 = OpLoad %354 
                                       f32_3 %623 = OpCompositeConstruct %622 %622 %622 
                                       f32_3 %624 = OpFMul %621 %623 
                                                      OpStore %199 %624 
                                       f32_3 %625 = OpLoad %117 
                                       f32_3 %626 = OpLoad %199 
                                       f32_3 %627 = OpFMul %625 %626 
                                                      OpStore %117 %627 
                                       f32_3 %628 = OpLoad %112 
                                Uniform f32* %629 = OpAccessChain %69 %35 
                                         f32 %630 = OpLoad %629 
                                       f32_3 %631 = OpCompositeConstruct %630 %630 %630 
                                       f32_3 %632 = OpFMul %628 %631 
                                       f32_3 %633 = OpLoad %117 
                                       f32_3 %634 = OpFAdd %632 %633 
                                                      OpStore %117 %634 
                                       f32_3 %635 = OpLoad %9 
                                       f32_3 %636 = OpLoad %117 
                                       f32_3 %637 = OpFAdd %635 %636 
                                                      OpStore %9 %637 
                              Uniform f32_4* %638 = OpAccessChain %33 %155 %86 
                                       f32_4 %639 = OpLoad %638 
                                       f32_3 %640 = OpVectorShuffle %639 %639 0 1 2 
                              Uniform f32_3* %643 = OpAccessChain %69 %641 
                                       f32_3 %644 = OpLoad %643 
                                       f32_3 %645 = OpVectorShuffle %644 %644 1 1 1 
                                       f32_3 %646 = OpFMul %640 %645 
                                                      OpStore %41 %646 
                              Uniform f32_4* %647 = OpAccessChain %33 %155 %35 
                                       f32_4 %648 = OpLoad %647 
                                       f32_3 %649 = OpVectorShuffle %648 %648 0 1 2 
                              Uniform f32_3* %650 = OpAccessChain %69 %641 
                                       f32_3 %651 = OpLoad %650 
                                       f32_3 %652 = OpVectorShuffle %651 %651 0 0 0 
                                       f32_3 %653 = OpFMul %649 %652 
                                       f32_3 %654 = OpLoad %41 
                                       f32_3 %655 = OpFAdd %653 %654 
                                                      OpStore %41 %655 
                              Uniform f32_4* %656 = OpAccessChain %33 %155 %155 
                                       f32_4 %657 = OpLoad %656 
                                       f32_3 %658 = OpVectorShuffle %657 %657 0 1 2 
                                Uniform f32* %659 = OpAccessChain %69 %641 %496 
                                         f32 %660 = OpLoad %659 
                                Uniform f32* %661 = OpAccessChain %69 %641 %496 
                                         f32 %662 = OpLoad %661 
                                Uniform f32* %663 = OpAccessChain %69 %641 %496 
                                         f32 %664 = OpLoad %663 
                                       f32_3 %665 = OpCompositeConstruct %660 %662 %664 
                                       f32_3 %666 = OpFMul %658 %665 
                                       f32_3 %667 = OpLoad %41 
                                       f32_3 %668 = OpFAdd %666 %667 
                                                      OpStore %41 %668 
                                       f32_3 %669 = OpLoad %41 
                                       f32_3 %670 = OpLoad %41 
                                         f32 %671 = OpDot %669 %670 
                                                      OpStore %58 %671 
                                         f32 %672 = OpLoad %58 
                                         f32 %673 = OpExtInst %1 32 %672 
                                                      OpStore %58 %673 
                                         f32 %674 = OpLoad %58 
                                       f32_3 %675 = OpCompositeConstruct %674 %674 %674 
                                       f32_3 %676 = OpLoad %41 
                                       f32_3 %677 = OpFMul %675 %676 
                                                      OpStore %41 %677 
                                       f32_4 %678 = OpLoad %153 
                                       f32_3 %679 = OpVectorShuffle %678 %678 0 1 2 
                                       f32_3 %680 = OpLoad %41 
                                         f32 %681 = OpDot %679 %680 
                                                      OpStore %58 %681 
                                         f32 %682 = OpLoad %58 
                                         f32 %684 = OpFMul %682 %683 
                                         f32 %685 = OpFAdd %684 %683 
                                                      OpStore %58 %685 
                                         f32 %686 = OpLoad %58 
                                Uniform f32* %688 = OpAccessChain %69 %687 
                                         f32 %689 = OpLoad %688 
                                         f32 %690 = OpFNegate %689 
                                         f32 %691 = OpFAdd %686 %690 
                                                      OpStore %58 %691 
                                         f32 %692 = OpLoad %58 
                                Uniform f32* %693 = OpAccessChain %69 %600 
                                         f32 %694 = OpLoad %693 
                                         f32 %695 = OpFMul %692 %694 
                                                      OpStore %58 %695 
                                         f32 %696 = OpLoad %58 
                                         f32 %697 = OpExtInst %1 43 %696 %384 %77 
                                                      OpStore %58 %697 
                                         f32 %698 = OpLoad %58 
                                       f32_3 %699 = OpCompositeConstruct %698 %698 %698 
                              Uniform f32_4* %701 = OpAccessChain %69 %700 
                                       f32_4 %702 = OpLoad %701 
                                       f32_3 %703 = OpVectorShuffle %702 %702 0 1 2 
                                       f32_3 %704 = OpFMul %699 %703 
                                                      OpStore %117 %704 
                                       f32_3 %705 = OpLoad %117 
                                Uniform f32* %707 = OpAccessChain %69 %706 
                                         f32 %708 = OpLoad %707 
                                Uniform f32* %709 = OpAccessChain %69 %706 
                                         f32 %710 = OpLoad %709 
                                Uniform f32* %711 = OpAccessChain %69 %706 
                                         f32 %712 = OpLoad %711 
                                       f32_3 %713 = OpCompositeConstruct %708 %710 %712 
                                         f32 %714 = OpCompositeExtract %713 0 
                                         f32 %715 = OpCompositeExtract %713 1 
                                         f32 %716 = OpCompositeExtract %713 2 
                                       f32_3 %717 = OpCompositeConstruct %714 %715 %716 
                                       f32_3 %718 = OpFMul %705 %717 
                                                      OpStore %41 %718 
                                       f32_3 %719 = OpLoad %81 
                                       f32_3 %720 = OpVectorShuffle %719 %719 0 0 0 
                                       f32_3 %721 = OpLoad %41 
                                       f32_3 %722 = OpFMul %720 %721 
                                                      OpStore %81 %722 
                                       f32_3 %723 = OpLoad %81 
                                       f32_3 %725 = OpFMul %723 %724 
                                                      OpStore %81 %725 
                                       f32_3 %726 = OpLoad %41 
                                       f32_3 %729 = OpFMul %726 %728 
                                       f32_3 %730 = OpLoad %81 
                                       f32_3 %731 = OpFAdd %729 %730 
                                                      OpStore %41 %731 
                                       f32_3 %732 = OpLoad %9 
                                       f32_3 %733 = OpLoad %41 
                                       f32_3 %734 = OpFAdd %732 %733 
                                                      OpStore %9 %734 
                                       f32_3 %735 = OpLoad %9 
                                       f32_3 %736 = OpExtInst %1 40 %735 %549 
                                                      OpStore %117 %736 
                                       f32_3 %737 = OpLoad %117 
                                       f32_3 %738 = OpExtInst %1 30 %737 
                                                      OpStore %117 %738 
                                       f32_3 %739 = OpLoad %117 
                                       f32_3 %742 = OpFMul %739 %741 
                                                      OpStore %117 %742 
                                       f32_3 %743 = OpLoad %117 
                                       f32_3 %744 = OpExtInst %1 29 %743 
                                                      OpStore %117 %744 
                                       f32_3 %747 = OpLoad %117 
                                       f32_3 %748 = OpExtInst %1 31 %747 
                                       f32_4 %749 = OpLoad %746 
                                       f32_4 %750 = OpVectorShuffle %749 %748 4 5 6 3 
                                                      OpStore %746 %750 
                                 Output f32* %752 = OpAccessChain %746 %528 
                                                      OpStore %752 %77 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "gles3 " {
Keywords { "_MAIN_LIGHT_SHADOWS" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec3 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = max(u_xlat9, 1.17549435e-38);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = max(u_xlat9, 1.17549435e-38);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD4.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _Expond;
	UNITY_UNIFORM vec4 _MREA_ST;
	UNITY_UNIFORM vec4 _MainTex_ST;
	UNITY_UNIFORM vec4 _Maincolor;
	UNITY_UNIFORM float _Roughness;
	UNITY_UNIFORM vec3 _rimlightdir;
	UNITY_UNIFORM vec4 _rimcolor;
	UNITY_UNIFORM float _rimhardness;
	UNITY_UNIFORM float _rimthreshold;
	UNITY_UNIFORM float _rimintensity;
	UNITY_UNIFORM float _anisotropic;
	UNITY_UNIFORM vec4 _anisocolor;
	UNITY_UNIFORM float _anisooffest;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(2) uniform mediump sampler2D _Normal;
UNITY_LOCATION(3) uniform mediump sampler2D _MREA;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
vec3 u_xlat10;
float u_xlat18;
float u_xlat24;
float u_xlat25;
float u_xlat26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat8.xyz = vs_TEXCOORD2.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat24 = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat25 = (-_anisotropic) * 0.899999976 + 1.0;
    u_xlat25 = sqrt(u_xlat25);
    u_xlat2.xy = vs_TEXCOORD0.xy * _MREA_ST.xy + _MREA_ST.zw;
    u_xlat16_2 = texture(_MREA, u_xlat2.xy).x;
    u_xlat10.x = u_xlat16_2 * u_xlat16_2;
    u_xlat16_3.x = u_xlat16_2 * 2.0 + -1.0;
    u_xlat2.x = u_xlat16_3.x + _anisooffest;
    u_xlat18 = u_xlat10.x / u_xlat25;
    u_xlat25 = u_xlat25 * u_xlat10.x;
    u_xlat10.x = u_xlat18 * u_xlat18;
    u_xlat24 = u_xlat24 / u_xlat10.x;
    u_xlat10.x = u_xlat25 * u_xlat25;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat16_5.xyz = texture(_Normal, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_MainTex, u_xlat4.xy).xyz;
    u_xlat4.xyz = u_xlat16_4.xyz * _Maincolor.xyz;
    u_xlat16_3.xyz = u_xlat4.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
    u_xlat16_6.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = u_xlat16_6.yyy * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = u_xlat16_6.xxx * vs_TEXCOORD3.xyz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat16_6.zzz * vs_TEXCOORD1.xyz + u_xlat4.xyz;
    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat4.xyz = vec3(u_xlat26) * u_xlat4.xyz;
    u_xlat5.xyz = u_xlat4.xyz * u_xlat2.xxx + vs_TEXCOORD4.xyz;
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat2.x = u_xlat2.x / u_xlat10.x;
    u_xlat24 = u_xlat24 + u_xlat2.x;
    u_xlat2.x = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    u_xlat0.y = u_xlat2.x * u_xlat2.x + u_xlat24;
    u_xlat0.xy = u_xlat0.xy * u_xlat0.xy;
    u_xlat8.x = u_xlat18 * u_xlat0.y;
    u_xlat8.x = u_xlat25 * u_xlat8.x;
    u_xlat8.x = u_xlat8.x * 3.14159274;
    u_xlat8.x = float(1.0) / u_xlat8.x;
    u_xlat8.xyz = u_xlat8.xxx * _anisocolor.xyz;
    u_xlat8.xyz = u_xlat8.xyz * _anisocolor.www;
    u_xlat25 = (-_Roughness) + 1.0;
    u_xlat16_27 = (-u_xlat25) + 1.0;
    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
    u_xlat16_27 = max(u_xlat16_27, 0.00200000009);
    u_xlat25 = u_xlat16_27 + u_xlat16_27;
    u_xlat0.x = u_xlat0.x * u_xlat25 + -0.5;
    u_xlat25 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat25 = max(u_xlat25, 9.99999975e-06);
    u_xlat25 = (-u_xlat25) + 1.0;
    u_xlat25 = max(u_xlat25, 0.0);
    u_xlat2.x = u_xlat25 * u_xlat25;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat25 = u_xlat25 * u_xlat2.x;
    u_xlat25 = u_xlat0.x * u_xlat25 + 1.0;
    u_xlat2.x = dot(u_xlat4.xyz, _MainLightPosition.xyz);
    u_xlat2.x = max(u_xlat2.x, 9.99999975e-06);
    u_xlat10.x = (-u_xlat2.x) + 1.0;
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlat18 = u_xlat10.x * u_xlat10.x;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat10.x = u_xlat10.x * u_xlat18;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + 1.0;
    u_xlat0.x = u_xlat25 * u_xlat0.x;
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat10.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
    u_xlat0.xyz = u_xlat10.xyz * _MainLightColor.xyz + u_xlat8.xyz;
    u_xlat16_6.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_6.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_6.x);
    u_xlat16_5 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_6.xyz = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;
    u_xlat4.w = 1.0;
    u_xlat16_7.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_7.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_7.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat10.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
    u_xlat24 = dot((-u_xlat1.xyz), u_xlat4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat1.xyz = u_xlat4.xyz * (-vec3(u_xlat24)) + (-u_xlat1.xyz);
    u_xlat16_6.x = (-u_xlat16_27) * 0.699999988 + 1.70000005;
    u_xlat16_27 = u_xlat16_27 * u_xlat16_6.x;
    u_xlat16_27 = u_xlat16_27 * 6.0;
    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat1.xyz, u_xlat16_27);
    u_xlat16_27 = u_xlat16_1.w + -1.0;
    u_xlat16_27 = unity_SpecCube0_HDR.w * u_xlat16_27 + 1.0;
    u_xlat16_27 = max(u_xlat16_27, 0.0);
    u_xlat16_27 = log2(u_xlat16_27);
    u_xlat16_27 = u_xlat16_27 * unity_SpecCube0_HDR.y;
    u_xlat16_27 = exp2(u_xlat16_27);
    u_xlat16_27 = u_xlat16_27 * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_1.xyz * vec3(u_xlat16_27);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
    u_xlat16_3.xyz = u_xlat10.xyz * vec3(_Expond) + u_xlat16_3.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixInvV[1].xyz * _rimlightdir.xxyz.zzz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixInvV[0].xyz * _rimlightdir.xxyz.yyy + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixInvV[2].xyz * vec3(_rimlightdir.z, _rimlightdir.z, _rimlightdir.z) + u_xlat1.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat24 = u_xlat24 * 0.5 + 0.5;
    u_xlat24 = u_xlat24 + (-_rimthreshold);
    u_xlat24 = u_xlat24 * _rimhardness;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = vec3(u_xlat24) * _rimcolor.xyz;
    u_xlat1.xyz = u_xlat16_3.xyz * vec3(vec3(_rimintensity, _rimintensity, _rimintensity));
    u_xlat2.xyz = u_xlat2.xxx * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat16_3.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(2.20000005, 2.20000005, 2.20000005);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    SV_Target0.xyz = sqrt(u_xlat16_3.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "_ADDITIONAL_LIGHTS" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 222
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %84 %93 %95 %98 %138 %141 %148 %150 %184 %208 %213 %214 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 RelaxedPrecision 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 RelaxedPrecision 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 RelaxedPrecision 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 RelaxedPrecision 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 RelaxedPrecision 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 RelaxedPrecision 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpMemberDecorate %21 16 RelaxedPrecision 
                                                      OpMemberDecorate %21 16 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpDecorate %59 ArrayStride 59 
                                                      OpMemberDecorate %60 0 Offset 60 
                                                      OpMemberDecorate %60 1 Offset 60 
                                                      OpDecorate %60 Block 
                                                      OpDecorate %62 DescriptorSet 62 
                                                      OpDecorate %62 Binding 62 
                                                      OpMemberDecorate %82 0 BuiltIn 82 
                                                      OpMemberDecorate %82 1 BuiltIn 82 
                                                      OpMemberDecorate %82 2 BuiltIn 82 
                                                      OpDecorate %82 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 93 
                                                      OpDecorate %95 Location 95 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate vs_TEXCOORD1 Location 138 
                                                      OpDecorate vs_TEXCOORD2 Location 141 
                                                      OpDecorate vs_TEXCOORD5 Location 148 
                                                      OpDecorate %150 Location 150 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 208 
                                                      OpDecorate vs_TEXCOORD6 Location 213 
                                                      OpDecorate %214 Location 214 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %10 %16 
                                              %18 = OpTypeArray %10 %16 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypeArray %10 %19 
                                              %21 = OpTypeStruct %17 %18 %10 %10 %10 %20 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4; f32_4[2]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 0 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %10 
                                          i32 %40 = OpConstant 2 
                                          i32 %50 = OpConstant 3 
                                              %55 = OpTypePointer Private %10 
                               Private f32_4* %56 = OpVariable Private 
                                              %59 = OpTypeArray %10 %16 
                                              %60 = OpTypeStruct %7 %59 
                                              %61 = OpTypePointer Uniform %60 
           Uniform struct {f32_3; f32_4[4];}* %62 = OpVariable Uniform 
                                          u32 %80 = OpConstant 1 
                                              %81 = OpTypeArray %6 %80 
                                              %82 = OpTypeStruct %10 %6 %81 
                                              %83 = OpTypePointer Output %82 
         Output struct {f32_4; f32; f32[1];}* %84 = OpVariable Output 
                                              %89 = OpTypePointer Output %10 
                                              %91 = OpTypeVector %6 2 
                                              %92 = OpTypePointer Output %91 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                              %94 = OpTypePointer Input %91 
                                 Input f32_2* %95 = OpVariable Input 
                                              %97 = OpTypePointer Input %7 
                                 Input f32_3* %98 = OpVariable Input 
                                         u32 %104 = OpConstant 0 
                                             %105 = OpTypePointer Private %6 
                                Private f32* %119 = OpVariable Private 
                                         f32 %126 = OpConstant 3.674022E-40 
                                             %137 = OpTypePointer Output %7 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %144 = OpTypePointer Uniform %7 
                       Output f32_3* vs_TEXCOORD5 = OpVariable Output 
                                Input f32_4* %150 = OpVariable Input 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                              Private f32_3* %186 = OpVariable Private 
                                         u32 %200 = OpConstant 3 
                                             %201 = OpTypePointer Input %6 
                                             %204 = OpTypePointer Uniform %6 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                Input f32_4* %214 = OpVariable Input 
                                             %216 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %12 
                                        f32_3 %14 = OpVectorShuffle %13 %13 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_3 %30 = OpVectorShuffle %29 %29 0 1 2 
                                        f32_3 %31 = OpFMul %14 %30 
                                                      OpStore %9 %31 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %25 
                                        f32_4 %33 = OpLoad %32 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                        f32_4 %35 = OpLoad %12 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 0 0 
                                        f32_3 %37 = OpFMul %34 %36 
                                        f32_3 %38 = OpLoad %9 
                                        f32_3 %39 = OpFAdd %37 %38 
                                                      OpStore %9 %39 
                               Uniform f32_4* %41 = OpAccessChain %23 %25 %40 
                                        f32_4 %42 = OpLoad %41 
                                        f32_3 %43 = OpVectorShuffle %42 %42 0 1 2 
                                        f32_4 %44 = OpLoad %12 
                                        f32_3 %45 = OpVectorShuffle %44 %44 2 2 2 
                                        f32_3 %46 = OpFMul %43 %45 
                                        f32_3 %47 = OpLoad %9 
                                        f32_3 %48 = OpFAdd %46 %47 
                                                      OpStore %9 %48 
                                        f32_3 %49 = OpLoad %9 
                               Uniform f32_4* %51 = OpAccessChain %23 %25 %50 
                                        f32_4 %52 = OpLoad %51 
                                        f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                        f32_3 %54 = OpFAdd %49 %53 
                                                      OpStore %9 %54 
                                        f32_3 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 1 1 1 1 
                               Uniform f32_4* %63 = OpAccessChain %62 %26 %26 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFMul %58 %64 
                                                      OpStore %56 %65 
                               Uniform f32_4* %66 = OpAccessChain %62 %26 %25 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpLoad %9 
                                        f32_4 %69 = OpVectorShuffle %68 %68 0 0 0 0 
                                        f32_4 %70 = OpFMul %67 %69 
                                        f32_4 %71 = OpLoad %56 
                                        f32_4 %72 = OpFAdd %70 %71 
                                                      OpStore %56 %72 
                               Uniform f32_4* %73 = OpAccessChain %62 %26 %40 
                                        f32_4 %74 = OpLoad %73 
                                        f32_3 %75 = OpLoad %9 
                                        f32_4 %76 = OpVectorShuffle %75 %75 2 2 2 2 
                                        f32_4 %77 = OpFMul %74 %76 
                                        f32_4 %78 = OpLoad %56 
                                        f32_4 %79 = OpFAdd %77 %78 
                                                      OpStore %56 %79 
                                        f32_4 %85 = OpLoad %56 
                               Uniform f32_4* %86 = OpAccessChain %62 %26 %50 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpFAdd %85 %87 
                                Output f32_4* %90 = OpAccessChain %84 %25 
                                                      OpStore %90 %88 
                                        f32_2 %96 = OpLoad %95 
                                                      OpStore vs_TEXCOORD0 %96 
                                        f32_3 %99 = OpLoad %98 
                              Uniform f32_4* %100 = OpAccessChain %23 %26 %25 
                                       f32_4 %101 = OpLoad %100 
                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 2 
                                         f32 %103 = OpDot %99 %102 
                                Private f32* %106 = OpAccessChain %56 %104 
                                                      OpStore %106 %103 
                                       f32_3 %107 = OpLoad %98 
                              Uniform f32_4* %108 = OpAccessChain %23 %26 %26 
                                       f32_4 %109 = OpLoad %108 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                         f32 %111 = OpDot %107 %110 
                                Private f32* %112 = OpAccessChain %56 %80 
                                                      OpStore %112 %111 
                                       f32_3 %113 = OpLoad %98 
                              Uniform f32_4* %114 = OpAccessChain %23 %26 %40 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                         f32 %117 = OpDot %113 %116 
                                Private f32* %118 = OpAccessChain %56 %19 
                                                      OpStore %118 %117 
                                       f32_4 %120 = OpLoad %56 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_4 %122 = OpLoad %56 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                         f32 %124 = OpDot %121 %123 
                                                      OpStore %119 %124 
                                         f32 %125 = OpLoad %119 
                                         f32 %127 = OpExtInst %1 40 %125 %126 
                                                      OpStore %119 %127 
                                         f32 %128 = OpLoad %119 
                                         f32 %129 = OpExtInst %1 32 %128 
                                                      OpStore %119 %129 
                                         f32 %130 = OpLoad %119 
                                       f32_3 %131 = OpCompositeConstruct %130 %130 %130 
                                       f32_4 %132 = OpLoad %56 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_3 %134 = OpFMul %131 %133 
                                       f32_4 %135 = OpLoad %56 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 6 3 
                                                      OpStore %56 %136 
                                       f32_4 %139 = OpLoad %56 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                                      OpStore vs_TEXCOORD1 %140 
                                       f32_3 %142 = OpLoad %9 
                                       f32_3 %143 = OpFNegate %142 
                              Uniform f32_3* %145 = OpAccessChain %62 %25 
                                       f32_3 %146 = OpLoad %145 
                                       f32_3 %147 = OpFAdd %143 %146 
                                                      OpStore vs_TEXCOORD2 %147 
                                       f32_3 %149 = OpLoad %9 
                                                      OpStore vs_TEXCOORD5 %149 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 1 1 1 
                              Uniform f32_4* %153 = OpAccessChain %23 %25 %26 
                                       f32_4 %154 = OpLoad %153 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFMul %152 %155 
                                                      OpStore %9 %156 
                              Uniform f32_4* %157 = OpAccessChain %23 %25 %25 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_4 %160 = OpLoad %150 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 0 0 
                                       f32_3 %162 = OpFMul %159 %161 
                                       f32_3 %163 = OpLoad %9 
                                       f32_3 %164 = OpFAdd %162 %163 
                                                      OpStore %9 %164 
                              Uniform f32_4* %165 = OpAccessChain %23 %25 %40 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_4 %168 = OpLoad %150 
                                       f32_3 %169 = OpVectorShuffle %168 %168 2 2 2 
                                       f32_3 %170 = OpFMul %167 %169 
                                       f32_3 %171 = OpLoad %9 
                                       f32_3 %172 = OpFAdd %170 %171 
                                                      OpStore %9 %172 
                                       f32_3 %173 = OpLoad %9 
                                       f32_3 %174 = OpLoad %9 
                                         f32 %175 = OpDot %173 %174 
                                                      OpStore %119 %175 
                                         f32 %176 = OpLoad %119 
                                         f32 %177 = OpExtInst %1 40 %176 %126 
                                                      OpStore %119 %177 
                                         f32 %178 = OpLoad %119 
                                         f32 %179 = OpExtInst %1 32 %178 
                                                      OpStore %119 %179 
                                         f32 %180 = OpLoad %119 
                                       f32_3 %181 = OpCompositeConstruct %180 %180 %180 
                                       f32_3 %182 = OpLoad %9 
                                       f32_3 %183 = OpFMul %181 %182 
                                                      OpStore %9 %183 
                                       f32_3 %185 = OpLoad %9 
                                                      OpStore vs_TEXCOORD3 %185 
                                       f32_3 %187 = OpLoad %9 
                                       f32_3 %188 = OpVectorShuffle %187 %187 1 2 0 
                                       f32_4 %189 = OpLoad %56 
                                       f32_3 %190 = OpVectorShuffle %189 %189 2 0 1 
                                       f32_3 %191 = OpFMul %188 %190 
                                                      OpStore %186 %191 
                                       f32_4 %192 = OpLoad %56 
                                       f32_3 %193 = OpVectorShuffle %192 %192 1 2 0 
                                       f32_3 %194 = OpLoad %9 
                                       f32_3 %195 = OpVectorShuffle %194 %194 2 0 1 
                                       f32_3 %196 = OpFMul %193 %195 
                                       f32_3 %197 = OpLoad %186 
                                       f32_3 %198 = OpFNegate %197 
                                       f32_3 %199 = OpFAdd %196 %198 
                                                      OpStore %9 %199 
                                  Input f32* %202 = OpAccessChain %150 %200 
                                         f32 %203 = OpLoad %202 
                                Uniform f32* %205 = OpAccessChain %23 %50 %200 
                                         f32 %206 = OpLoad %205 
                                         f32 %207 = OpFMul %203 %206 
                                                      OpStore %119 %207 
                                         f32 %209 = OpLoad %119 
                                       f32_3 %210 = OpCompositeConstruct %209 %209 %209 
                                       f32_3 %211 = OpLoad %9 
                                       f32_3 %212 = OpFMul %210 %211 
                                                      OpStore vs_TEXCOORD4 %212 
                                       f32_4 %215 = OpLoad %214 
                                                      OpStore vs_TEXCOORD6 %215 
                                 Output f32* %217 = OpAccessChain %84 %25 %80 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpFNegate %218 
                                 Output f32* %220 = OpAccessChain %84 %25 %80 
                                                      OpStore %220 %219 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 754
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %59 %84 %207 %223 %746 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %30 ArrayStride 30 
                                                      OpMemberDecorate %31 0 Offset 31 
                                                      OpMemberDecorate %31 1 RelaxedPrecision 
                                                      OpMemberDecorate %31 1 Offset 31 
                                                      OpMemberDecorate %31 2 Offset 31 
                                                      OpDecorate %31 Block 
                                                      OpDecorate %33 DescriptorSet 33 
                                                      OpDecorate %33 Binding 33 
                                                      OpDecorate vs_TEXCOORD3 Location 59 
                                                      OpMemberDecorate %67 0 Offset 67 
                                                      OpMemberDecorate %67 1 Offset 67 
                                                      OpMemberDecorate %67 2 Offset 67 
                                                      OpMemberDecorate %67 3 Offset 67 
                                                      OpMemberDecorate %67 4 Offset 67 
                                                      OpMemberDecorate %67 5 Offset 67 
                                                      OpMemberDecorate %67 6 Offset 67 
                                                      OpMemberDecorate %67 7 Offset 67 
                                                      OpMemberDecorate %67 8 Offset 67 
                                                      OpMemberDecorate %67 9 Offset 67 
                                                      OpMemberDecorate %67 10 Offset 67 
                                                      OpMemberDecorate %67 11 Offset 67 
                                                      OpMemberDecorate %67 12 Offset 67 
                                                      OpDecorate %67 Block 
                                                      OpDecorate %69 DescriptorSet 69 
                                                      OpDecorate %69 Binding 69 
                                                      OpDecorate vs_TEXCOORD0 Location 84 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %100 DescriptorSet 100 
                                                      OpDecorate %100 Binding 100 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %104 DescriptorSet 104 
                                                      OpDecorate %104 Binding 104 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %120 RelaxedPrecision 
                                                      OpDecorate %122 RelaxedPrecision 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %167 DescriptorSet 167 
                                                      OpDecorate %167 Binding 167 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %169 DescriptorSet 169 
                                                      OpDecorate %169 Binding 169 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %177 DescriptorSet 177 
                                                      OpDecorate %177 Binding 177 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %179 DescriptorSet 179 
                                                      OpDecorate %179 Binding 179 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 207 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 223 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %483 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                                      OpDecorate %487 RelaxedPrecision 
                                                      OpDecorate %493 RelaxedPrecision 
                                                      OpDecorate %494 ArrayStride 494 
                                                      OpDecorate %495 ArrayStride 495 
                                                      OpDecorate %497 ArrayStride 497 
                                                      OpMemberDecorate %498 0 Offset 498 
                                                      OpMemberDecorate %498 1 Offset 498 
                                                      OpMemberDecorate %498 2 Offset 498 
                                                      OpMemberDecorate %498 3 RelaxedPrecision 
                                                      OpMemberDecorate %498 3 Offset 498 
                                                      OpMemberDecorate %498 4 RelaxedPrecision 
                                                      OpMemberDecorate %498 4 Offset 498 
                                                      OpMemberDecorate %498 5 RelaxedPrecision 
                                                      OpMemberDecorate %498 5 Offset 498 
                                                      OpMemberDecorate %498 6 Offset 498 
                                                      OpMemberDecorate %498 7 RelaxedPrecision 
                                                      OpMemberDecorate %498 7 Offset 498 
                                                      OpMemberDecorate %498 8 Offset 498 
                                                      OpMemberDecorate %498 9 Offset 498 
                                                      OpMemberDecorate %498 10 RelaxedPrecision 
                                                      OpMemberDecorate %498 10 Offset 498 
                                                      OpMemberDecorate %498 11 RelaxedPrecision 
                                                      OpMemberDecorate %498 11 Offset 498 
                                                      OpMemberDecorate %498 12 RelaxedPrecision 
                                                      OpMemberDecorate %498 12 Offset 498 
                                                      OpMemberDecorate %498 13 RelaxedPrecision 
                                                      OpMemberDecorate %498 13 Offset 498 
                                                      OpMemberDecorate %498 14 RelaxedPrecision 
                                                      OpMemberDecorate %498 14 Offset 498 
                                                      OpMemberDecorate %498 15 RelaxedPrecision 
                                                      OpMemberDecorate %498 15 Offset 498 
                                                      OpMemberDecorate %498 16 RelaxedPrecision 
                                                      OpMemberDecorate %498 16 Offset 498 
                                                      OpDecorate %498 Block 
                                                      OpDecorate %500 DescriptorSet 500 
                                                      OpDecorate %500 Binding 500 
                                                      OpDecorate %503 RelaxedPrecision 
                                                      OpDecorate %504 RelaxedPrecision 
                                                      OpDecorate %505 RelaxedPrecision 
                                                      OpDecorate %509 RelaxedPrecision 
                                                      OpDecorate %510 RelaxedPrecision 
                                                      OpDecorate %511 RelaxedPrecision 
                                                      OpDecorate %515 RelaxedPrecision 
                                                      OpDecorate %516 RelaxedPrecision 
                                                      OpDecorate %517 RelaxedPrecision 
                                                      OpDecorate %521 RelaxedPrecision 
                                                      OpDecorate %522 RelaxedPrecision 
                                                      OpDecorate %523 RelaxedPrecision 
                                                      OpDecorate %524 RelaxedPrecision 
                                                      OpDecorate %525 RelaxedPrecision 
                                                      OpDecorate %526 RelaxedPrecision 
                                                      OpDecorate %527 RelaxedPrecision 
                                                      OpDecorate %531 RelaxedPrecision 
                                                      OpDecorate %536 RelaxedPrecision 
                                                      OpDecorate %541 RelaxedPrecision 
                                                      OpDecorate %545 RelaxedPrecision 
                                                      OpDecorate %546 RelaxedPrecision 
                                                      OpDecorate %547 RelaxedPrecision 
                                                      OpDecorate %548 RelaxedPrecision 
                                                      OpDecorate %550 RelaxedPrecision 
                                                      OpDecorate %551 RelaxedPrecision 
                                                      OpDecorate %552 RelaxedPrecision 
                                                      OpDecorate %553 RelaxedPrecision 
                                                      OpDecorate %571 RelaxedPrecision 
                                                      OpDecorate %572 RelaxedPrecision 
                                                      OpDecorate %574 RelaxedPrecision 
                                                      OpDecorate %576 RelaxedPrecision 
                                                      OpDecorate %578 RelaxedPrecision 
                                                      OpDecorate %580 RelaxedPrecision 
                                                      OpDecorate %581 RelaxedPrecision 
                                                      OpDecorate %582 RelaxedPrecision 
                                                      OpDecorate %584 RelaxedPrecision 
                                                      OpDecorate %585 RelaxedPrecision 
                                                      OpDecorate %588 RelaxedPrecision 
                                                      OpDecorate %588 DescriptorSet 588 
                                                      OpDecorate %588 Binding 588 
                                                      OpDecorate %589 RelaxedPrecision 
                                                      OpDecorate %590 RelaxedPrecision 
                                                      OpDecorate %590 DescriptorSet 590 
                                                      OpDecorate %590 Binding 590 
                                                      OpDecorate %591 RelaxedPrecision 
                                                      OpDecorate %595 RelaxedPrecision 
                                                      OpDecorate %598 RelaxedPrecision 
                                                      OpDecorate %599 RelaxedPrecision 
                                                      OpDecorate %602 RelaxedPrecision 
                                                      OpDecorate %603 RelaxedPrecision 
                                                      OpDecorate %604 RelaxedPrecision 
                                                      OpDecorate %605 RelaxedPrecision 
                                                      OpDecorate %606 RelaxedPrecision 
                                                      OpDecorate %607 RelaxedPrecision 
                                                      OpDecorate %608 RelaxedPrecision 
                                                      OpDecorate %609 RelaxedPrecision 
                                                      OpDecorate %610 RelaxedPrecision 
                                                      OpDecorate %612 RelaxedPrecision 
                                                      OpDecorate %613 RelaxedPrecision 
                                                      OpDecorate %614 RelaxedPrecision 
                                                      OpDecorate %615 RelaxedPrecision 
                                                      OpDecorate %616 RelaxedPrecision 
                                                      OpDecorate %618 RelaxedPrecision 
                                                      OpDecorate %619 RelaxedPrecision 
                                                      OpDecorate %620 RelaxedPrecision 
                                                      OpDecorate %621 RelaxedPrecision 
                                                      OpDecorate %622 RelaxedPrecision 
                                                      OpDecorate %623 RelaxedPrecision 
                                                      OpDecorate %624 RelaxedPrecision 
                                                      OpDecorate %625 RelaxedPrecision 
                                                      OpDecorate %626 RelaxedPrecision 
                                                      OpDecorate %627 RelaxedPrecision 
                                                      OpDecorate %633 RelaxedPrecision 
                                                      OpDecorate %636 RelaxedPrecision 
                                                      OpDecorate %705 RelaxedPrecision 
                                                      OpDecorate %713 RelaxedPrecision 
                                                      OpDecorate %714 RelaxedPrecision 
                                                      OpDecorate %715 RelaxedPrecision 
                                                      OpDecorate %716 RelaxedPrecision 
                                                      OpDecorate %717 RelaxedPrecision 
                                                      OpDecorate %718 RelaxedPrecision 
                                                      OpDecorate %737 RelaxedPrecision 
                                                      OpDecorate %738 RelaxedPrecision 
                                                      OpDecorate %739 RelaxedPrecision 
                                                      OpDecorate %742 RelaxedPrecision 
                                                      OpDecorate %743 RelaxedPrecision 
                                                      OpDecorate %744 RelaxedPrecision 
                                                      OpDecorate %746 RelaxedPrecision 
                                                      OpDecorate %746 Location 746 
                                                      OpDecorate %747 RelaxedPrecision 
                                                      OpDecorate %748 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 0 
                                              %17 = OpTypePointer Private %6 
                               Private f32_3* %23 = OpVariable Private 
                                              %28 = OpTypeVector %6 4 
                                          u32 %29 = OpConstant 4 
                                              %30 = OpTypeArray %28 %29 
                                              %31 = OpTypeStruct %28 %28 %30 
                                              %32 = OpTypePointer Uniform %31 
    Uniform struct {f32_4; f32_4; f32_4[4];}* %33 = OpVariable Uniform 
                                              %34 = OpTypeInt 32 1 
                                          i32 %35 = OpConstant 0 
                                              %36 = OpTypePointer Uniform %28 
                               Private f32_3* %41 = OpVariable Private 
                                 Private f32* %58 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                 Private f32* %66 = OpVariable Private 
                                              %67 = OpTypeStruct %6 %28 %28 %28 %6 %7 %28 %6 %6 %6 %6 %28 %6 
                                              %68 = OpTypePointer Uniform %67 
Uniform struct {f32; f32_4; f32_4; f32_4; f32; f32_3; f32_4; f32; f32; f32; f32; f32_4; f32;}* %69 = OpVariable Uniform 
                                          i32 %70 = OpConstant 10 
                                              %71 = OpTypePointer Uniform %6 
                                          f32 %75 = OpConstant 3.674022E-40 
                                          f32 %77 = OpConstant 3.674022E-40 
                               Private f32_3* %81 = OpVariable Private 
                                              %82 = OpTypeVector %6 2 
                                              %83 = OpTypePointer Input %82 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                          i32 %86 = OpConstant 1 
                                 Private f32* %97 = OpVariable Private 
                                              %98 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %99 = OpTypePointer UniformConstant %98 
        UniformConstant read_only Texture2D* %100 = OpVariable UniformConstant 
                                             %102 = OpTypeSampler 
                                             %103 = OpTypePointer UniformConstant %102 
                    UniformConstant sampler* %104 = OpVariable UniformConstant 
                                             %106 = OpTypeSampledImage %98 
                              Private f32_3* %112 = OpVariable Private 
                              Private f32_3* %117 = OpVariable Private 
                                         f32 %119 = OpConstant 3.674022E-40 
                                         f32 %121 = OpConstant 3.674022E-40 
                                         i32 %126 = OpConstant 12 
                                Private f32* %131 = OpVariable Private 
                                             %152 = OpTypePointer Private %28 
                              Private f32_4* %153 = OpVariable Private 
                                         i32 %155 = OpConstant 2 
                              Private f32_3* %166 = OpVariable Private 
        UniformConstant read_only Texture2D* %167 = OpVariable UniformConstant 
                    UniformConstant sampler* %169 = OpVariable UniformConstant 
                              Private f32_3* %176 = OpVariable Private 
        UniformConstant read_only Texture2D* %177 = OpVariable UniformConstant 
                    UniformConstant sampler* %179 = OpVariable UniformConstant 
                                         i32 %187 = OpConstant 3 
                                         f32 %196 = OpConstant 3.674022E-40 
                                       f32_3 %197 = OpConstantComposite %196 %196 %196 
                              Private f32_3* %199 = OpVariable Private 
                                       f32_3 %201 = OpConstantComposite %119 %119 %119 
                                       f32_3 %203 = OpConstantComposite %121 %121 %121 
                        Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                Private f32* %231 = OpVariable Private 
                              Private f32_3* %246 = OpVariable Private 
                                         f32 %299 = OpConstant 3.674022E-40 
                                         u32 %309 = OpConstant 1 
                                         f32 %330 = OpConstant 3.674022E-40 
                                         i32 %339 = OpConstant 11 
                                         i32 %349 = OpConstant 4 
                                Private f32* %354 = OpVariable Private 
                                         f32 %362 = OpConstant 3.674022E-40 
                                         f32 %371 = OpConstant 3.674022E-40 
                                         f32 %384 = OpConstant 3.674022E-40 
                              Private f32_4* %487 = OpVariable Private 
                              Private f32_3* %493 = OpVariable Private 
                                             %494 = OpTypeArray %28 %29 
                                             %495 = OpTypeArray %28 %29 
                                         u32 %496 = OpConstant 2 
                                             %497 = OpTypeArray %28 %496 
                                             %498 = OpTypeStruct %494 %495 %28 %28 %28 %497 %28 %28 %28 %28 %28 %28 %28 %28 %28 %28 %28 
                                             %499 = OpTypePointer Uniform %498 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4; f32_4[2]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %500 = OpVariable Uniform 
                                         i32 %501 = OpConstant 13 
                                         i32 %507 = OpConstant 14 
                                         i32 %513 = OpConstant 15 
                                         i32 %519 = OpConstant 16 
                                         u32 %528 = OpConstant 3 
                                       f32_3 %549 = OpConstantComposite %384 %384 %384 
                                         f32 %573 = OpConstant 3.674022E-40 
                                         f32 %575 = OpConstant 3.674022E-40 
                                         f32 %583 = OpConstant 3.674022E-40 
                              Private f32_4* %585 = OpVariable Private 
                                             %586 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %587 = OpTypePointer UniformConstant %586 
      UniformConstant read_only TextureCube* %588 = OpVariable UniformConstant 
                    UniformConstant sampler* %590 = OpVariable UniformConstant 
                                             %592 = OpTypeSampledImage %586 
                                         i32 %600 = OpConstant 7 
                                         i32 %641 = OpConstant 5 
                                             %642 = OpTypePointer Uniform %7 
                                         f32 %683 = OpConstant 3.674022E-40 
                                         i32 %687 = OpConstant 8 
                                         i32 %700 = OpConstant 6 
                                         i32 %706 = OpConstant 9 
                                       f32_3 %724 = OpConstantComposite %573 %573 %573 
                                         f32 %727 = OpConstant 3.674022E-40 
                                       f32_3 %728 = OpConstantComposite %727 %727 %727 
                                         f32 %740 = OpConstant 3.674022E-40 
                                       f32_3 %741 = OpConstantComposite %740 %740 %740 
                                             %745 = OpTypePointer Output %28 
                               Output f32_4* %746 = OpVariable Output 
                                             %751 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                                          f32 %14 = OpDot %12 %13 
                                 Private f32* %18 = OpAccessChain %9 %16 
                                                      OpStore %18 %14 
                                 Private f32* %19 = OpAccessChain %9 %16 
                                          f32 %20 = OpLoad %19 
                                          f32 %21 = OpExtInst %1 32 %20 
                                 Private f32* %22 = OpAccessChain %9 %16 
                                                      OpStore %22 %21 
                                        f32_3 %24 = OpLoad vs_TEXCOORD2 
                                        f32_3 %25 = OpLoad %9 
                                        f32_3 %26 = OpVectorShuffle %25 %25 0 0 0 
                                        f32_3 %27 = OpFMul %24 %26 
                               Uniform f32_4* %37 = OpAccessChain %33 %35 
                                        f32_4 %38 = OpLoad %37 
                                        f32_3 %39 = OpVectorShuffle %38 %38 0 1 2 
                                        f32_3 %40 = OpFAdd %27 %39 
                                                      OpStore %23 %40 
                                        f32_3 %42 = OpLoad %9 
                                        f32_3 %43 = OpVectorShuffle %42 %42 0 0 0 
                                        f32_3 %44 = OpLoad vs_TEXCOORD2 
                                        f32_3 %45 = OpFMul %43 %44 
                                                      OpStore %41 %45 
                                        f32_3 %46 = OpLoad %23 
                                        f32_3 %47 = OpLoad %23 
                                          f32 %48 = OpDot %46 %47 
                                 Private f32* %49 = OpAccessChain %9 %16 
                                                      OpStore %49 %48 
                                 Private f32* %50 = OpAccessChain %9 %16 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpExtInst %1 32 %51 
                                 Private f32* %53 = OpAccessChain %9 %16 
                                                      OpStore %53 %52 
                                        f32_3 %54 = OpLoad %9 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 0 0 
                                        f32_3 %56 = OpLoad %23 
                                        f32_3 %57 = OpFMul %55 %56 
                                                      OpStore %9 %57 
                                        f32_3 %60 = OpLoad vs_TEXCOORD3 
                                        f32_3 %61 = OpLoad %9 
                                          f32 %62 = OpDot %60 %61 
                                                      OpStore %58 %62 
                                          f32 %63 = OpLoad %58 
                                          f32 %64 = OpLoad %58 
                                          f32 %65 = OpFMul %63 %64 
                                                      OpStore %58 %65 
                                 Uniform f32* %72 = OpAccessChain %69 %70 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFNegate %73 
                                          f32 %76 = OpFMul %74 %75 
                                          f32 %78 = OpFAdd %76 %77 
                                                      OpStore %66 %78 
                                          f32 %79 = OpLoad %66 
                                          f32 %80 = OpExtInst %1 31 %79 
                                                      OpStore %66 %80 
                                        f32_2 %85 = OpLoad vs_TEXCOORD0 
                               Uniform f32_4* %87 = OpAccessChain %69 %86 
                                        f32_4 %88 = OpLoad %87 
                                        f32_2 %89 = OpVectorShuffle %88 %88 0 1 
                                        f32_2 %90 = OpFMul %85 %89 
                               Uniform f32_4* %91 = OpAccessChain %69 %86 
                                        f32_4 %92 = OpLoad %91 
                                        f32_2 %93 = OpVectorShuffle %92 %92 2 3 
                                        f32_2 %94 = OpFAdd %90 %93 
                                        f32_3 %95 = OpLoad %81 
                                        f32_3 %96 = OpVectorShuffle %95 %94 3 4 2 
                                                      OpStore %81 %96 
                         read_only Texture2D %101 = OpLoad %100 
                                     sampler %105 = OpLoad %104 
                  read_only Texture2DSampled %107 = OpSampledImage %101 %105 
                                       f32_3 %108 = OpLoad %81 
                                       f32_2 %109 = OpVectorShuffle %108 %108 0 1 
                                       f32_4 %110 = OpImageSampleImplicitLod %107 %109 
                                         f32 %111 = OpCompositeExtract %110 0 
                                                      OpStore %97 %111 
                                         f32 %113 = OpLoad %97 
                                         f32 %114 = OpLoad %97 
                                         f32 %115 = OpFMul %113 %114 
                                Private f32* %116 = OpAccessChain %112 %16 
                                                      OpStore %116 %115 
                                         f32 %118 = OpLoad %97 
                                         f32 %120 = OpFMul %118 %119 
                                         f32 %122 = OpFAdd %120 %121 
                                Private f32* %123 = OpAccessChain %117 %16 
                                                      OpStore %123 %122 
                                Private f32* %124 = OpAccessChain %117 %16 
                                         f32 %125 = OpLoad %124 
                                Uniform f32* %127 = OpAccessChain %69 %126 
                                         f32 %128 = OpLoad %127 
                                         f32 %129 = OpFAdd %125 %128 
                                Private f32* %130 = OpAccessChain %81 %16 
                                                      OpStore %130 %129 
                                Private f32* %132 = OpAccessChain %112 %16 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpLoad %66 
                                         f32 %135 = OpFDiv %133 %134 
                                                      OpStore %131 %135 
                                         f32 %136 = OpLoad %66 
                                Private f32* %137 = OpAccessChain %112 %16 
                                         f32 %138 = OpLoad %137 
                                         f32 %139 = OpFMul %136 %138 
                                                      OpStore %66 %139 
                                         f32 %140 = OpLoad %131 
                                         f32 %141 = OpLoad %131 
                                         f32 %142 = OpFMul %140 %141 
                                Private f32* %143 = OpAccessChain %112 %16 
                                                      OpStore %143 %142 
                                         f32 %144 = OpLoad %58 
                                Private f32* %145 = OpAccessChain %112 %16 
                                         f32 %146 = OpLoad %145 
                                         f32 %147 = OpFDiv %144 %146 
                                                      OpStore %58 %147 
                                         f32 %148 = OpLoad %66 
                                         f32 %149 = OpLoad %66 
                                         f32 %150 = OpFMul %148 %149 
                                Private f32* %151 = OpAccessChain %112 %16 
                                                      OpStore %151 %150 
                                       f32_2 %154 = OpLoad vs_TEXCOORD0 
                              Uniform f32_4* %156 = OpAccessChain %69 %155 
                                       f32_4 %157 = OpLoad %156 
                                       f32_2 %158 = OpVectorShuffle %157 %157 0 1 
                                       f32_2 %159 = OpFMul %154 %158 
                              Uniform f32_4* %160 = OpAccessChain %69 %155 
                                       f32_4 %161 = OpLoad %160 
                                       f32_2 %162 = OpVectorShuffle %161 %161 2 3 
                                       f32_2 %163 = OpFAdd %159 %162 
                                       f32_4 %164 = OpLoad %153 
                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 2 3 
                                                      OpStore %153 %165 
                         read_only Texture2D %168 = OpLoad %167 
                                     sampler %170 = OpLoad %169 
                  read_only Texture2DSampled %171 = OpSampledImage %168 %170 
                                       f32_4 %172 = OpLoad %153 
                                       f32_2 %173 = OpVectorShuffle %172 %172 0 1 
                                       f32_4 %174 = OpImageSampleImplicitLod %171 %173 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                                                      OpStore %166 %175 
                         read_only Texture2D %178 = OpLoad %177 
                                     sampler %180 = OpLoad %179 
                  read_only Texture2DSampled %181 = OpSampledImage %178 %180 
                                       f32_4 %182 = OpLoad %153 
                                       f32_2 %183 = OpVectorShuffle %182 %182 0 1 
                                       f32_4 %184 = OpImageSampleImplicitLod %181 %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                                      OpStore %176 %185 
                                       f32_3 %186 = OpLoad %176 
                              Uniform f32_4* %188 = OpAccessChain %69 %187 
                                       f32_4 %189 = OpLoad %188 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_3 %191 = OpFMul %186 %190 
                                       f32_4 %192 = OpLoad %153 
                                       f32_4 %193 = OpVectorShuffle %192 %191 4 5 6 3 
                                                      OpStore %153 %193 
                                       f32_4 %194 = OpLoad %153 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_3 %198 = OpFMul %195 %197 
                                                      OpStore %117 %198 
                                       f32_3 %200 = OpLoad %166 
                                       f32_3 %202 = OpFMul %200 %201 
                                       f32_3 %204 = OpFAdd %202 %203 
                                                      OpStore %199 %204 
                                       f32_3 %205 = OpLoad %199 
                                       f32_3 %206 = OpVectorShuffle %205 %205 1 1 1 
                                       f32_3 %208 = OpLoad vs_TEXCOORD4 
                                       f32_3 %209 = OpFMul %206 %208 
                                       f32_4 %210 = OpLoad %153 
                                       f32_4 %211 = OpVectorShuffle %210 %209 4 5 6 3 
                                                      OpStore %153 %211 
                                       f32_3 %212 = OpLoad %199 
                                       f32_3 %213 = OpVectorShuffle %212 %212 0 0 0 
                                       f32_3 %214 = OpLoad vs_TEXCOORD3 
                                       f32_3 %215 = OpFMul %213 %214 
                                       f32_4 %216 = OpLoad %153 
                                       f32_3 %217 = OpVectorShuffle %216 %216 0 1 2 
                                       f32_3 %218 = OpFAdd %215 %217 
                                       f32_4 %219 = OpLoad %153 
                                       f32_4 %220 = OpVectorShuffle %219 %218 4 5 6 3 
                                                      OpStore %153 %220 
                                       f32_3 %221 = OpLoad %199 
                                       f32_3 %222 = OpVectorShuffle %221 %221 2 2 2 
                                       f32_3 %224 = OpLoad vs_TEXCOORD1 
                                       f32_3 %225 = OpFMul %222 %224 
                                       f32_4 %226 = OpLoad %153 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_3 %228 = OpFAdd %225 %227 
                                       f32_4 %229 = OpLoad %153 
                                       f32_4 %230 = OpVectorShuffle %229 %228 4 5 6 3 
                                                      OpStore %153 %230 
                                       f32_4 %232 = OpLoad %153 
                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
                                       f32_4 %234 = OpLoad %153 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
                                         f32 %236 = OpDot %233 %235 
                                                      OpStore %231 %236 
                                         f32 %237 = OpLoad %231 
                                         f32 %238 = OpExtInst %1 32 %237 
                                                      OpStore %231 %238 
                                         f32 %239 = OpLoad %231 
                                       f32_3 %240 = OpCompositeConstruct %239 %239 %239 
                                       f32_4 %241 = OpLoad %153 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 1 2 
                                       f32_3 %243 = OpFMul %240 %242 
                                       f32_4 %244 = OpLoad %153 
                                       f32_4 %245 = OpVectorShuffle %244 %243 4 5 6 3 
                                                      OpStore %153 %245 
                                       f32_4 %247 = OpLoad %153 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                       f32_3 %249 = OpLoad %81 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 0 0 
                                       f32_3 %251 = OpFMul %248 %250 
                                       f32_3 %252 = OpLoad vs_TEXCOORD4 
                                       f32_3 %253 = OpFAdd %251 %252 
                                                      OpStore %246 %253 
                                       f32_3 %254 = OpLoad %246 
                                       f32_3 %255 = OpLoad %246 
                                         f32 %256 = OpDot %254 %255 
                                Private f32* %257 = OpAccessChain %81 %16 
                                                      OpStore %257 %256 
                                Private f32* %258 = OpAccessChain %81 %16 
                                         f32 %259 = OpLoad %258 
                                         f32 %260 = OpExtInst %1 32 %259 
                                Private f32* %261 = OpAccessChain %81 %16 
                                                      OpStore %261 %260 
                                       f32_3 %262 = OpLoad %81 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 0 0 
                                       f32_3 %264 = OpLoad %246 
                                       f32_3 %265 = OpFMul %263 %264 
                                                      OpStore %246 %265 
                                       f32_3 %266 = OpLoad %246 
                                       f32_3 %267 = OpLoad %9 
                                         f32 %268 = OpDot %266 %267 
                                Private f32* %269 = OpAccessChain %81 %16 
                                                      OpStore %269 %268 
                                Private f32* %270 = OpAccessChain %81 %16 
                                         f32 %271 = OpLoad %270 
                                Private f32* %272 = OpAccessChain %81 %16 
                                         f32 %273 = OpLoad %272 
                                         f32 %274 = OpFMul %271 %273 
                                Private f32* %275 = OpAccessChain %81 %16 
                                                      OpStore %275 %274 
                                Private f32* %276 = OpAccessChain %81 %16 
                                         f32 %277 = OpLoad %276 
                                Private f32* %278 = OpAccessChain %112 %16 
                                         f32 %279 = OpLoad %278 
                                         f32 %280 = OpFDiv %277 %279 
                                Private f32* %281 = OpAccessChain %81 %16 
                                                      OpStore %281 %280 
                                         f32 %282 = OpLoad %58 
                                Private f32* %283 = OpAccessChain %81 %16 
                                         f32 %284 = OpLoad %283 
                                         f32 %285 = OpFAdd %282 %284 
                                                      OpStore %58 %285 
                                       f32_4 %286 = OpLoad %153 
                                       f32_3 %287 = OpVectorShuffle %286 %286 0 1 2 
                                       f32_3 %288 = OpLoad %9 
                                         f32 %289 = OpDot %287 %288 
                                Private f32* %290 = OpAccessChain %81 %16 
                                                      OpStore %290 %289 
                              Uniform f32_4* %291 = OpAccessChain %33 %35 
                                       f32_4 %292 = OpLoad %291 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
                                       f32_3 %294 = OpLoad %9 
                                         f32 %295 = OpDot %293 %294 
                                Private f32* %296 = OpAccessChain %9 %16 
                                                      OpStore %296 %295 
                                Private f32* %297 = OpAccessChain %9 %16 
                                         f32 %298 = OpLoad %297 
                                         f32 %300 = OpExtInst %1 40 %298 %299 
                                Private f32* %301 = OpAccessChain %9 %16 
                                                      OpStore %301 %300 
                                Private f32* %302 = OpAccessChain %81 %16 
                                         f32 %303 = OpLoad %302 
                                Private f32* %304 = OpAccessChain %81 %16 
                                         f32 %305 = OpLoad %304 
                                         f32 %306 = OpFMul %303 %305 
                                         f32 %307 = OpLoad %58 
                                         f32 %308 = OpFAdd %306 %307 
                                Private f32* %310 = OpAccessChain %9 %309 
                                                      OpStore %310 %308 
                                       f32_3 %311 = OpLoad %9 
                                       f32_2 %312 = OpVectorShuffle %311 %311 0 1 
                                       f32_3 %313 = OpLoad %9 
                                       f32_2 %314 = OpVectorShuffle %313 %313 0 1 
                                       f32_2 %315 = OpFMul %312 %314 
                                       f32_3 %316 = OpLoad %9 
                                       f32_3 %317 = OpVectorShuffle %316 %315 3 4 2 
                                                      OpStore %9 %317 
                                         f32 %318 = OpLoad %131 
                                Private f32* %319 = OpAccessChain %9 %309 
                                         f32 %320 = OpLoad %319 
                                         f32 %321 = OpFMul %318 %320 
                                Private f32* %322 = OpAccessChain %23 %16 
                                                      OpStore %322 %321 
                                         f32 %323 = OpLoad %66 
                                Private f32* %324 = OpAccessChain %23 %16 
                                         f32 %325 = OpLoad %324 
                                         f32 %326 = OpFMul %323 %325 
                                Private f32* %327 = OpAccessChain %23 %16 
                                                      OpStore %327 %326 
                                Private f32* %328 = OpAccessChain %23 %16 
                                         f32 %329 = OpLoad %328 
                                         f32 %331 = OpFMul %329 %330 
                                Private f32* %332 = OpAccessChain %23 %16 
                                                      OpStore %332 %331 
                                Private f32* %333 = OpAccessChain %23 %16 
                                         f32 %334 = OpLoad %333 
                                         f32 %335 = OpFDiv %77 %334 
                                Private f32* %336 = OpAccessChain %23 %16 
                                                      OpStore %336 %335 
                                       f32_3 %337 = OpLoad %23 
                                       f32_3 %338 = OpVectorShuffle %337 %337 0 0 0 
                              Uniform f32_4* %340 = OpAccessChain %69 %339 
                                       f32_4 %341 = OpLoad %340 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                                       f32_3 %343 = OpFMul %338 %342 
                                                      OpStore %23 %343 
                                       f32_3 %344 = OpLoad %23 
                              Uniform f32_4* %345 = OpAccessChain %69 %339 
                                       f32_4 %346 = OpLoad %345 
                                       f32_3 %347 = OpVectorShuffle %346 %346 3 3 3 
                                       f32_3 %348 = OpFMul %344 %347 
                                                      OpStore %23 %348 
                                Uniform f32* %350 = OpAccessChain %69 %349 
                                         f32 %351 = OpLoad %350 
                                         f32 %352 = OpFNegate %351 
                                         f32 %353 = OpFAdd %352 %77 
                                                      OpStore %66 %353 
                                         f32 %355 = OpLoad %66 
                                         f32 %356 = OpFNegate %355 
                                         f32 %357 = OpFAdd %356 %77 
                                                      OpStore %354 %357 
                                         f32 %358 = OpLoad %354 
                                         f32 %359 = OpLoad %354 
                                         f32 %360 = OpFMul %358 %359 
                                                      OpStore %354 %360 
                                         f32 %361 = OpLoad %354 
                                         f32 %363 = OpExtInst %1 40 %361 %362 
                                                      OpStore %354 %363 
                                         f32 %364 = OpLoad %354 
                                         f32 %365 = OpLoad %354 
                                         f32 %366 = OpFAdd %364 %365 
                                                      OpStore %66 %366 
                                Private f32* %367 = OpAccessChain %9 %16 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpLoad %66 
                                         f32 %370 = OpFMul %368 %369 
                                         f32 %372 = OpFAdd %370 %371 
                                Private f32* %373 = OpAccessChain %9 %16 
                                                      OpStore %373 %372 
                                       f32_4 %374 = OpLoad %153 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                                       f32_3 %376 = OpLoad %41 
                                         f32 %377 = OpDot %375 %376 
                                                      OpStore %66 %377 
                                         f32 %378 = OpLoad %66 
                                         f32 %379 = OpExtInst %1 40 %378 %299 
                                                      OpStore %66 %379 
                                         f32 %380 = OpLoad %66 
                                         f32 %381 = OpFNegate %380 
                                         f32 %382 = OpFAdd %381 %77 
                                                      OpStore %66 %382 
                                         f32 %383 = OpLoad %66 
                                         f32 %385 = OpExtInst %1 40 %383 %384 
                                                      OpStore %66 %385 
                                         f32 %386 = OpLoad %66 
                                         f32 %387 = OpLoad %66 
                                         f32 %388 = OpFMul %386 %387 
                                Private f32* %389 = OpAccessChain %81 %16 
                                                      OpStore %389 %388 
                                Private f32* %390 = OpAccessChain %81 %16 
                                         f32 %391 = OpLoad %390 
                                Private f32* %392 = OpAccessChain %81 %16 
                                         f32 %393 = OpLoad %392 
                                         f32 %394 = OpFMul %391 %393 
                                Private f32* %395 = OpAccessChain %81 %16 
                                                      OpStore %395 %394 
                                         f32 %396 = OpLoad %66 
                                Private f32* %397 = OpAccessChain %81 %16 
                                         f32 %398 = OpLoad %397 
                                         f32 %399 = OpFMul %396 %398 
                                                      OpStore %66 %399 
                                Private f32* %400 = OpAccessChain %9 %16 
                                         f32 %401 = OpLoad %400 
                                         f32 %402 = OpLoad %66 
                                         f32 %403 = OpFMul %401 %402 
                                         f32 %404 = OpFAdd %403 %77 
                                                      OpStore %66 %404 
                                       f32_4 %405 = OpLoad %153 
                                       f32_3 %406 = OpVectorShuffle %405 %405 0 1 2 
                              Uniform f32_4* %407 = OpAccessChain %33 %35 
                                       f32_4 %408 = OpLoad %407 
                                       f32_3 %409 = OpVectorShuffle %408 %408 0 1 2 
                                         f32 %410 = OpDot %406 %409 
                                Private f32* %411 = OpAccessChain %81 %16 
                                                      OpStore %411 %410 
                                Private f32* %412 = OpAccessChain %81 %16 
                                         f32 %413 = OpLoad %412 
                                         f32 %414 = OpExtInst %1 40 %413 %299 
                                Private f32* %415 = OpAccessChain %81 %16 
                                                      OpStore %415 %414 
                                Private f32* %416 = OpAccessChain %81 %16 
                                         f32 %417 = OpLoad %416 
                                         f32 %418 = OpFNegate %417 
                                         f32 %419 = OpFAdd %418 %77 
                                Private f32* %420 = OpAccessChain %112 %16 
                                                      OpStore %420 %419 
                                Private f32* %421 = OpAccessChain %112 %16 
                                         f32 %422 = OpLoad %421 
                                         f32 %423 = OpExtInst %1 40 %422 %384 
                                Private f32* %424 = OpAccessChain %112 %16 
                                                      OpStore %424 %423 
                                Private f32* %425 = OpAccessChain %112 %16 
                                         f32 %426 = OpLoad %425 
                                Private f32* %427 = OpAccessChain %112 %16 
                                         f32 %428 = OpLoad %427 
                                         f32 %429 = OpFMul %426 %428 
                                                      OpStore %131 %429 
                                         f32 %430 = OpLoad %131 
                                         f32 %431 = OpLoad %131 
                                         f32 %432 = OpFMul %430 %431 
                                                      OpStore %131 %432 
                                Private f32* %433 = OpAccessChain %112 %16 
                                         f32 %434 = OpLoad %433 
                                         f32 %435 = OpLoad %131 
                                         f32 %436 = OpFMul %434 %435 
                                Private f32* %437 = OpAccessChain %112 %16 
                                                      OpStore %437 %436 
                                Private f32* %438 = OpAccessChain %9 %16 
                                         f32 %439 = OpLoad %438 
                                Private f32* %440 = OpAccessChain %112 %16 
                                         f32 %441 = OpLoad %440 
                                         f32 %442 = OpFMul %439 %441 
                                         f32 %443 = OpFAdd %442 %77 
                                Private f32* %444 = OpAccessChain %9 %16 
                                                      OpStore %444 %443 
                                         f32 %445 = OpLoad %66 
                                Private f32* %446 = OpAccessChain %9 %16 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpFMul %445 %447 
                                Private f32* %449 = OpAccessChain %9 %16 
                                                      OpStore %449 %448 
                                Private f32* %450 = OpAccessChain %81 %16 
                                         f32 %451 = OpLoad %450 
                                Private f32* %452 = OpAccessChain %9 %16 
                                         f32 %453 = OpLoad %452 
                                         f32 %454 = OpFMul %451 %453 
                                Private f32* %455 = OpAccessChain %9 %16 
                                                      OpStore %455 %454 
                                Private f32* %456 = OpAccessChain %9 %16 
                                         f32 %457 = OpLoad %456 
                                         f32 %458 = OpExtInst %1 37 %457 %77 
                                Private f32* %459 = OpAccessChain %9 %16 
                                                      OpStore %459 %458 
                                       f32_3 %460 = OpLoad %9 
                                       f32_3 %461 = OpVectorShuffle %460 %460 0 0 0 
                                       f32_3 %462 = OpLoad %117 
                                       f32_3 %463 = OpFMul %461 %462 
                                                      OpStore %112 %463 
                                       f32_3 %464 = OpLoad %112 
                              Uniform f32_4* %465 = OpAccessChain %33 %86 
                                       f32_4 %466 = OpLoad %465 
                                       f32_3 %467 = OpVectorShuffle %466 %466 0 1 2 
                                       f32_3 %468 = OpFMul %464 %467 
                                       f32_3 %469 = OpLoad %23 
                                       f32_3 %470 = OpFAdd %468 %469 
                                                      OpStore %9 %470 
                                Private f32* %471 = OpAccessChain %153 %309 
                                         f32 %472 = OpLoad %471 
                                Private f32* %473 = OpAccessChain %153 %309 
                                         f32 %474 = OpLoad %473 
                                         f32 %475 = OpFMul %472 %474 
                                Private f32* %476 = OpAccessChain %199 %16 
                                                      OpStore %476 %475 
                                Private f32* %477 = OpAccessChain %153 %16 
                                         f32 %478 = OpLoad %477 
                                Private f32* %479 = OpAccessChain %153 %16 
                                         f32 %480 = OpLoad %479 
                                         f32 %481 = OpFMul %478 %480 
                                Private f32* %482 = OpAccessChain %199 %16 
                                         f32 %483 = OpLoad %482 
                                         f32 %484 = OpFNegate %483 
                                         f32 %485 = OpFAdd %481 %484 
                                Private f32* %486 = OpAccessChain %199 %16 
                                                      OpStore %486 %485 
                                       f32_4 %488 = OpLoad %153 
                                       f32_4 %489 = OpVectorShuffle %488 %488 1 2 2 0 
                                       f32_4 %490 = OpLoad %153 
                                       f32_4 %491 = OpVectorShuffle %490 %490 0 1 2 2 
                                       f32_4 %492 = OpFMul %489 %491 
                                                      OpStore %487 %492 
                              Uniform f32_4* %502 = OpAccessChain %500 %501 
                                       f32_4 %503 = OpLoad %502 
                                       f32_4 %504 = OpLoad %487 
                                         f32 %505 = OpDot %503 %504 
                                Private f32* %506 = OpAccessChain %493 %16 
                                                      OpStore %506 %505 
                              Uniform f32_4* %508 = OpAccessChain %500 %507 
                                       f32_4 %509 = OpLoad %508 
                                       f32_4 %510 = OpLoad %487 
                                         f32 %511 = OpDot %509 %510 
                                Private f32* %512 = OpAccessChain %493 %309 
                                                      OpStore %512 %511 
                              Uniform f32_4* %514 = OpAccessChain %500 %513 
                                       f32_4 %515 = OpLoad %514 
                                       f32_4 %516 = OpLoad %487 
                                         f32 %517 = OpDot %515 %516 
                                Private f32* %518 = OpAccessChain %493 %496 
                                                      OpStore %518 %517 
                              Uniform f32_4* %520 = OpAccessChain %500 %519 
                                       f32_4 %521 = OpLoad %520 
                                       f32_3 %522 = OpVectorShuffle %521 %521 0 1 2 
                                       f32_3 %523 = OpLoad %199 
                                       f32_3 %524 = OpVectorShuffle %523 %523 0 0 0 
                                       f32_3 %525 = OpFMul %522 %524 
                                       f32_3 %526 = OpLoad %493 
                                       f32_3 %527 = OpFAdd %525 %526 
                                                      OpStore %199 %527 
                                Private f32* %529 = OpAccessChain %153 %528 
                                                      OpStore %529 %77 
                              Uniform f32_4* %530 = OpAccessChain %500 %70 
                                       f32_4 %531 = OpLoad %530 
                                       f32_4 %532 = OpLoad %153 
                                         f32 %533 = OpDot %531 %532 
                                Private f32* %534 = OpAccessChain %493 %16 
                                                      OpStore %534 %533 
                              Uniform f32_4* %535 = OpAccessChain %500 %339 
                                       f32_4 %536 = OpLoad %535 
                                       f32_4 %537 = OpLoad %153 
                                         f32 %538 = OpDot %536 %537 
                                Private f32* %539 = OpAccessChain %493 %309 
                                                      OpStore %539 %538 
                              Uniform f32_4* %540 = OpAccessChain %500 %126 
                                       f32_4 %541 = OpLoad %540 
                                       f32_4 %542 = OpLoad %153 
                                         f32 %543 = OpDot %541 %542 
                                Private f32* %544 = OpAccessChain %493 %496 
                                                      OpStore %544 %543 
                                       f32_3 %545 = OpLoad %199 
                                       f32_3 %546 = OpLoad %493 
                                       f32_3 %547 = OpFAdd %545 %546 
                                                      OpStore %199 %547 
                                       f32_3 %548 = OpLoad %199 
                                       f32_3 %550 = OpExtInst %1 40 %548 %549 
                                                      OpStore %199 %550 
                                       f32_3 %551 = OpLoad %117 
                                       f32_3 %552 = OpLoad %199 
                                       f32_3 %553 = OpFMul %551 %552 
                                                      OpStore %112 %553 
                                       f32_3 %554 = OpLoad %41 
                                       f32_3 %555 = OpFNegate %554 
                                       f32_4 %556 = OpLoad %153 
                                       f32_3 %557 = OpVectorShuffle %556 %556 0 1 2 
                                         f32 %558 = OpDot %555 %557 
                                                      OpStore %58 %558 
                                         f32 %559 = OpLoad %58 
                                         f32 %560 = OpLoad %58 
                                         f32 %561 = OpFAdd %559 %560 
                                                      OpStore %58 %561 
                                       f32_4 %562 = OpLoad %153 
                                       f32_3 %563 = OpVectorShuffle %562 %562 0 1 2 
                                         f32 %564 = OpLoad %58 
                                       f32_3 %565 = OpCompositeConstruct %564 %564 %564 
                                       f32_3 %566 = OpFNegate %565 
                                       f32_3 %567 = OpFMul %563 %566 
                                       f32_3 %568 = OpLoad %41 
                                       f32_3 %569 = OpFNegate %568 
                                       f32_3 %570 = OpFAdd %567 %569 
                                                      OpStore %41 %570 
                                         f32 %571 = OpLoad %354 
                                         f32 %572 = OpFNegate %571 
                                         f32 %574 = OpFMul %572 %573 
                                         f32 %576 = OpFAdd %574 %575 
                                Private f32* %577 = OpAccessChain %199 %16 
                                                      OpStore %577 %576 
                                         f32 %578 = OpLoad %354 
                                Private f32* %579 = OpAccessChain %199 %16 
                                         f32 %580 = OpLoad %579 
                                         f32 %581 = OpFMul %578 %580 
                                                      OpStore %354 %581 
                                         f32 %582 = OpLoad %354 
                                         f32 %584 = OpFMul %582 %583 
                                                      OpStore %354 %584 
                       read_only TextureCube %589 = OpLoad %588 
                                     sampler %591 = OpLoad %590 
                read_only TextureCubeSampled %593 = OpSampledImage %589 %591 
                                       f32_3 %594 = OpLoad %41 
                                         f32 %595 = OpLoad %354 
                                       f32_4 %596 = OpImageSampleExplicitLod %593 %594 Lod %28 
                                                      OpStore %585 %596 
                                Private f32* %597 = OpAccessChain %585 %528 
                                         f32 %598 = OpLoad %597 
                                         f32 %599 = OpFAdd %598 %121 
                                                      OpStore %354 %599 
                                Uniform f32* %601 = OpAccessChain %500 %600 %528 
                                         f32 %602 = OpLoad %601 
                                         f32 %603 = OpLoad %354 
                                         f32 %604 = OpFMul %602 %603 
                                         f32 %605 = OpFAdd %604 %77 
                                                      OpStore %354 %605 
                                         f32 %606 = OpLoad %354 
                                         f32 %607 = OpExtInst %1 40 %606 %384 
                                                      OpStore %354 %607 
                                         f32 %608 = OpLoad %354 
                                         f32 %609 = OpExtInst %1 30 %608 
                                                      OpStore %354 %609 
                                         f32 %610 = OpLoad %354 
                                Uniform f32* %611 = OpAccessChain %500 %600 %309 
                                         f32 %612 = OpLoad %611 
                                         f32 %613 = OpFMul %610 %612 
                                                      OpStore %354 %613 
                                         f32 %614 = OpLoad %354 
                                         f32 %615 = OpExtInst %1 29 %614 
                                                      OpStore %354 %615 
                                         f32 %616 = OpLoad %354 
                                Uniform f32* %617 = OpAccessChain %500 %600 %16 
                                         f32 %618 = OpLoad %617 
                                         f32 %619 = OpFMul %616 %618 
                                                      OpStore %354 %619 
                                       f32_4 %620 = OpLoad %585 
                                       f32_3 %621 = OpVectorShuffle %620 %620 0 1 2 
                                         f32 %622 = OpLoad %354 
                                       f32_3 %623 = OpCompositeConstruct %622 %622 %622 
                                       f32_3 %624 = OpFMul %621 %623 
                                                      OpStore %199 %624 
                                       f32_3 %625 = OpLoad %117 
                                       f32_3 %626 = OpLoad %199 
                                       f32_3 %627 = OpFMul %625 %626 
                                                      OpStore %117 %627 
                                       f32_3 %628 = OpLoad %112 
                                Uniform f32* %629 = OpAccessChain %69 %35 
                                         f32 %630 = OpLoad %629 
                                       f32_3 %631 = OpCompositeConstruct %630 %630 %630 
                                       f32_3 %632 = OpFMul %628 %631 
                                       f32_3 %633 = OpLoad %117 
                                       f32_3 %634 = OpFAdd %632 %633 
                                                      OpStore %117 %634 
                                       f32_3 %635 = OpLoad %9 
                                       f32_3 %636 = OpLoad %117 
                                       f32_3 %637 = OpFAdd %635 %636 
                                                      OpStore %9 %637 
                              Uniform f32_4* %638 = OpAccessChain %33 %155 %86 
                                       f32_4 %639 = OpLoad %638 
                                       f32_3 %640 = OpVectorShuffle %639 %639 0 1 2 
                              Uniform f32_3* %643 = OpAccessChain %69 %641 
                                       f32_3 %644 = OpLoad %643 
                                       f32_3 %645 = OpVectorShuffle %644 %644 1 1 1 
                                       f32_3 %646 = OpFMul %640 %645 
                                                      OpStore %41 %646 
                              Uniform f32_4* %647 = OpAccessChain %33 %155 %35 
                                       f32_4 %648 = OpLoad %647 
                                       f32_3 %649 = OpVectorShuffle %648 %648 0 1 2 
                              Uniform f32_3* %650 = OpAccessChain %69 %641 
                                       f32_3 %651 = OpLoad %650 
                                       f32_3 %652 = OpVectorShuffle %651 %651 0 0 0 
                                       f32_3 %653 = OpFMul %649 %652 
                                       f32_3 %654 = OpLoad %41 
                                       f32_3 %655 = OpFAdd %653 %654 
                                                      OpStore %41 %655 
                              Uniform f32_4* %656 = OpAccessChain %33 %155 %155 
                                       f32_4 %657 = OpLoad %656 
                                       f32_3 %658 = OpVectorShuffle %657 %657 0 1 2 
                                Uniform f32* %659 = OpAccessChain %69 %641 %496 
                                         f32 %660 = OpLoad %659 
                                Uniform f32* %661 = OpAccessChain %69 %641 %496 
                                         f32 %662 = OpLoad %661 
                                Uniform f32* %663 = OpAccessChain %69 %641 %496 
                                         f32 %664 = OpLoad %663 
                                       f32_3 %665 = OpCompositeConstruct %660 %662 %664 
                                       f32_3 %666 = OpFMul %658 %665 
                                       f32_3 %667 = OpLoad %41 
                                       f32_3 %668 = OpFAdd %666 %667 
                                                      OpStore %41 %668 
                                       f32_3 %669 = OpLoad %41 
                                       f32_3 %670 = OpLoad %41 
                                         f32 %671 = OpDot %669 %670 
                                                      OpStore %58 %671 
                                         f32 %672 = OpLoad %58 
                                         f32 %673 = OpExtInst %1 32 %672 
                                                      OpStore %58 %673 
                                         f32 %674 = OpLoad %58 
                                       f32_3 %675 = OpCompositeConstruct %674 %674 %674 
                                       f32_3 %676 = OpLoad %41 
                                       f32_3 %677 = OpFMul %675 %676 
                                                      OpStore %41 %677 
                                       f32_4 %678 = OpLoad %153 
                                       f32_3 %679 = OpVectorShuffle %678 %678 0 1 2 
                                       f32_3 %680 = OpLoad %41 
                                         f32 %681 = OpDot %679 %680 
                                                      OpStore %58 %681 
                                         f32 %682 = OpLoad %58 
                                         f32 %684 = OpFMul %682 %683 
                                         f32 %685 = OpFAdd %684 %683 
                                                      OpStore %58 %685 
                                         f32 %686 = OpLoad %58 
                                Uniform f32* %688 = OpAccessChain %69 %687 
                                         f32 %689 = OpLoad %688 
                                         f32 %690 = OpFNegate %689 
                                         f32 %691 = OpFAdd %686 %690 
                                                      OpStore %58 %691 
                                         f32 %692 = OpLoad %58 
                                Uniform f32* %693 = OpAccessChain %69 %600 
                                         f32 %694 = OpLoad %693 
                                         f32 %695 = OpFMul %692 %694 
                                                      OpStore %58 %695 
                                         f32 %696 = OpLoad %58 
                                         f32 %697 = OpExtInst %1 43 %696 %384 %77 
                                                      OpStore %58 %697 
                                         f32 %698 = OpLoad %58 
                                       f32_3 %699 = OpCompositeConstruct %698 %698 %698 
                              Uniform f32_4* %701 = OpAccessChain %69 %700 
                                       f32_4 %702 = OpLoad %701 
                                       f32_3 %703 = OpVectorShuffle %702 %702 0 1 2 
                                       f32_3 %704 = OpFMul %699 %703 
                                                      OpStore %117 %704 
                                       f32_3 %705 = OpLoad %117 
                                Uniform f32* %707 = OpAccessChain %69 %706 
                                         f32 %708 = OpLoad %707 
                                Uniform f32* %709 = OpAccessChain %69 %706 
                                         f32 %710 = OpLoad %709 
                                Uniform f32* %711 = OpAccessChain %69 %706 
                                         f32 %712 = OpLoad %711 
                                       f32_3 %713 = OpCompositeConstruct %708 %710 %712 
                                         f32 %714 = OpCompositeExtract %713 0 
                                         f32 %715 = OpCompositeExtract %713 1 
                                         f32 %716 = OpCompositeExtract %713 2 
                                       f32_3 %717 = OpCompositeConstruct %714 %715 %716 
                                       f32_3 %718 = OpFMul %705 %717 
                                                      OpStore %41 %718 
                                       f32_3 %719 = OpLoad %81 
                                       f32_3 %720 = OpVectorShuffle %719 %719 0 0 0 
                                       f32_3 %721 = OpLoad %41 
                                       f32_3 %722 = OpFMul %720 %721 
                                                      OpStore %81 %722 
                                       f32_3 %723 = OpLoad %81 
                                       f32_3 %725 = OpFMul %723 %724 
                                                      OpStore %81 %725 
                                       f32_3 %726 = OpLoad %41 
                                       f32_3 %729 = OpFMul %726 %728 
                                       f32_3 %730 = OpLoad %81 
                                       f32_3 %731 = OpFAdd %729 %730 
                                                      OpStore %41 %731 
                                       f32_3 %732 = OpLoad %9 
                                       f32_3 %733 = OpLoad %41 
                                       f32_3 %734 = OpFAdd %732 %733 
                                                      OpStore %9 %734 
                                       f32_3 %735 = OpLoad %9 
                                       f32_3 %736 = OpExtInst %1 40 %735 %549 
                                                      OpStore %117 %736 
                                       f32_3 %737 = OpLoad %117 
                                       f32_3 %738 = OpExtInst %1 30 %737 
                                                      OpStore %117 %738 
                                       f32_3 %739 = OpLoad %117 
                                       f32_3 %742 = OpFMul %739 %741 
                                                      OpStore %117 %742 
                                       f32_3 %743 = OpLoad %117 
                                       f32_3 %744 = OpExtInst %1 29 %743 
                                                      OpStore %117 %744 
                                       f32_3 %747 = OpLoad %117 
                                       f32_3 %748 = OpExtInst %1 31 %747 
                                       f32_4 %749 = OpLoad %746 
                                       f32_4 %750 = OpVectorShuffle %749 %748 4 5 6 3 
                                                      OpStore %746 %750 
                                 Output f32* %752 = OpAccessChain %746 %528 
                                                      OpStore %752 %77 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "gles3 " {
Keywords { "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec3 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = max(u_xlat9, 1.17549435e-38);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = max(u_xlat9, 1.17549435e-38);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD4.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _Expond;
	UNITY_UNIFORM vec4 _MREA_ST;
	UNITY_UNIFORM vec4 _MainTex_ST;
	UNITY_UNIFORM vec4 _Maincolor;
	UNITY_UNIFORM float _Roughness;
	UNITY_UNIFORM vec3 _rimlightdir;
	UNITY_UNIFORM vec4 _rimcolor;
	UNITY_UNIFORM float _rimhardness;
	UNITY_UNIFORM float _rimthreshold;
	UNITY_UNIFORM float _rimintensity;
	UNITY_UNIFORM float _anisotropic;
	UNITY_UNIFORM vec4 _anisocolor;
	UNITY_UNIFORM float _anisooffest;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(2) uniform mediump sampler2D _Normal;
UNITY_LOCATION(3) uniform mediump sampler2D _MREA;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
vec3 u_xlat10;
float u_xlat18;
float u_xlat24;
float u_xlat25;
float u_xlat26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat8.xyz = vs_TEXCOORD2.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat24 = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat25 = (-_anisotropic) * 0.899999976 + 1.0;
    u_xlat25 = sqrt(u_xlat25);
    u_xlat2.xy = vs_TEXCOORD0.xy * _MREA_ST.xy + _MREA_ST.zw;
    u_xlat16_2 = texture(_MREA, u_xlat2.xy).x;
    u_xlat10.x = u_xlat16_2 * u_xlat16_2;
    u_xlat16_3.x = u_xlat16_2 * 2.0 + -1.0;
    u_xlat2.x = u_xlat16_3.x + _anisooffest;
    u_xlat18 = u_xlat10.x / u_xlat25;
    u_xlat25 = u_xlat25 * u_xlat10.x;
    u_xlat10.x = u_xlat18 * u_xlat18;
    u_xlat24 = u_xlat24 / u_xlat10.x;
    u_xlat10.x = u_xlat25 * u_xlat25;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat16_5.xyz = texture(_Normal, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_MainTex, u_xlat4.xy).xyz;
    u_xlat4.xyz = u_xlat16_4.xyz * _Maincolor.xyz;
    u_xlat16_3.xyz = u_xlat4.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
    u_xlat16_6.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = u_xlat16_6.yyy * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = u_xlat16_6.xxx * vs_TEXCOORD3.xyz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat16_6.zzz * vs_TEXCOORD1.xyz + u_xlat4.xyz;
    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat4.xyz = vec3(u_xlat26) * u_xlat4.xyz;
    u_xlat5.xyz = u_xlat4.xyz * u_xlat2.xxx + vs_TEXCOORD4.xyz;
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat2.x = u_xlat2.x / u_xlat10.x;
    u_xlat24 = u_xlat24 + u_xlat2.x;
    u_xlat2.x = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    u_xlat0.y = u_xlat2.x * u_xlat2.x + u_xlat24;
    u_xlat0.xy = u_xlat0.xy * u_xlat0.xy;
    u_xlat8.x = u_xlat18 * u_xlat0.y;
    u_xlat8.x = u_xlat25 * u_xlat8.x;
    u_xlat8.x = u_xlat8.x * 3.14159274;
    u_xlat8.x = float(1.0) / u_xlat8.x;
    u_xlat8.xyz = u_xlat8.xxx * _anisocolor.xyz;
    u_xlat8.xyz = u_xlat8.xyz * _anisocolor.www;
    u_xlat25 = (-_Roughness) + 1.0;
    u_xlat16_27 = (-u_xlat25) + 1.0;
    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
    u_xlat16_27 = max(u_xlat16_27, 0.00200000009);
    u_xlat25 = u_xlat16_27 + u_xlat16_27;
    u_xlat0.x = u_xlat0.x * u_xlat25 + -0.5;
    u_xlat25 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat25 = max(u_xlat25, 9.99999975e-06);
    u_xlat25 = (-u_xlat25) + 1.0;
    u_xlat25 = max(u_xlat25, 0.0);
    u_xlat2.x = u_xlat25 * u_xlat25;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat25 = u_xlat25 * u_xlat2.x;
    u_xlat25 = u_xlat0.x * u_xlat25 + 1.0;
    u_xlat2.x = dot(u_xlat4.xyz, _MainLightPosition.xyz);
    u_xlat2.x = max(u_xlat2.x, 9.99999975e-06);
    u_xlat10.x = (-u_xlat2.x) + 1.0;
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlat18 = u_xlat10.x * u_xlat10.x;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat10.x = u_xlat10.x * u_xlat18;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + 1.0;
    u_xlat0.x = u_xlat25 * u_xlat0.x;
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat10.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
    u_xlat0.xyz = u_xlat10.xyz * _MainLightColor.xyz + u_xlat8.xyz;
    u_xlat16_6.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_6.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_6.x);
    u_xlat16_5 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_6.xyz = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;
    u_xlat4.w = 1.0;
    u_xlat16_7.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_7.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_7.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat10.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
    u_xlat24 = dot((-u_xlat1.xyz), u_xlat4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat1.xyz = u_xlat4.xyz * (-vec3(u_xlat24)) + (-u_xlat1.xyz);
    u_xlat16_6.x = (-u_xlat16_27) * 0.699999988 + 1.70000005;
    u_xlat16_27 = u_xlat16_27 * u_xlat16_6.x;
    u_xlat16_27 = u_xlat16_27 * 6.0;
    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat1.xyz, u_xlat16_27);
    u_xlat16_27 = u_xlat16_1.w + -1.0;
    u_xlat16_27 = unity_SpecCube0_HDR.w * u_xlat16_27 + 1.0;
    u_xlat16_27 = max(u_xlat16_27, 0.0);
    u_xlat16_27 = log2(u_xlat16_27);
    u_xlat16_27 = u_xlat16_27 * unity_SpecCube0_HDR.y;
    u_xlat16_27 = exp2(u_xlat16_27);
    u_xlat16_27 = u_xlat16_27 * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_1.xyz * vec3(u_xlat16_27);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
    u_xlat16_3.xyz = u_xlat10.xyz * vec3(_Expond) + u_xlat16_3.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixInvV[1].xyz * _rimlightdir.xxyz.zzz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixInvV[0].xyz * _rimlightdir.xxyz.yyy + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixInvV[2].xyz * vec3(_rimlightdir.z, _rimlightdir.z, _rimlightdir.z) + u_xlat1.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat24 = u_xlat24 * 0.5 + 0.5;
    u_xlat24 = u_xlat24 + (-_rimthreshold);
    u_xlat24 = u_xlat24 * _rimhardness;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = vec3(u_xlat24) * _rimcolor.xyz;
    u_xlat1.xyz = u_xlat16_3.xyz * vec3(vec3(_rimintensity, _rimintensity, _rimintensity));
    u_xlat2.xyz = u_xlat2.xxx * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat16_3.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(2.20000005, 2.20000005, 2.20000005);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    SV_Target0.xyz = sqrt(u_xlat16_3.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 222
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %84 %93 %95 %98 %138 %141 %148 %150 %184 %208 %213 %214 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 RelaxedPrecision 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 RelaxedPrecision 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 RelaxedPrecision 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 RelaxedPrecision 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 RelaxedPrecision 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 RelaxedPrecision 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpMemberDecorate %21 16 RelaxedPrecision 
                                                      OpMemberDecorate %21 16 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpDecorate %59 ArrayStride 59 
                                                      OpMemberDecorate %60 0 Offset 60 
                                                      OpMemberDecorate %60 1 Offset 60 
                                                      OpDecorate %60 Block 
                                                      OpDecorate %62 DescriptorSet 62 
                                                      OpDecorate %62 Binding 62 
                                                      OpMemberDecorate %82 0 BuiltIn 82 
                                                      OpMemberDecorate %82 1 BuiltIn 82 
                                                      OpMemberDecorate %82 2 BuiltIn 82 
                                                      OpDecorate %82 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 93 
                                                      OpDecorate %95 Location 95 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate vs_TEXCOORD1 Location 138 
                                                      OpDecorate vs_TEXCOORD2 Location 141 
                                                      OpDecorate vs_TEXCOORD5 Location 148 
                                                      OpDecorate %150 Location 150 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 208 
                                                      OpDecorate vs_TEXCOORD6 Location 213 
                                                      OpDecorate %214 Location 214 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %10 %16 
                                              %18 = OpTypeArray %10 %16 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypeArray %10 %19 
                                              %21 = OpTypeStruct %17 %18 %10 %10 %10 %20 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4; f32_4[2]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 0 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %10 
                                          i32 %40 = OpConstant 2 
                                          i32 %50 = OpConstant 3 
                                              %55 = OpTypePointer Private %10 
                               Private f32_4* %56 = OpVariable Private 
                                              %59 = OpTypeArray %10 %16 
                                              %60 = OpTypeStruct %7 %59 
                                              %61 = OpTypePointer Uniform %60 
           Uniform struct {f32_3; f32_4[4];}* %62 = OpVariable Uniform 
                                          u32 %80 = OpConstant 1 
                                              %81 = OpTypeArray %6 %80 
                                              %82 = OpTypeStruct %10 %6 %81 
                                              %83 = OpTypePointer Output %82 
         Output struct {f32_4; f32; f32[1];}* %84 = OpVariable Output 
                                              %89 = OpTypePointer Output %10 
                                              %91 = OpTypeVector %6 2 
                                              %92 = OpTypePointer Output %91 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                              %94 = OpTypePointer Input %91 
                                 Input f32_2* %95 = OpVariable Input 
                                              %97 = OpTypePointer Input %7 
                                 Input f32_3* %98 = OpVariable Input 
                                         u32 %104 = OpConstant 0 
                                             %105 = OpTypePointer Private %6 
                                Private f32* %119 = OpVariable Private 
                                         f32 %126 = OpConstant 3.674022E-40 
                                             %137 = OpTypePointer Output %7 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %144 = OpTypePointer Uniform %7 
                       Output f32_3* vs_TEXCOORD5 = OpVariable Output 
                                Input f32_4* %150 = OpVariable Input 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                              Private f32_3* %186 = OpVariable Private 
                                         u32 %200 = OpConstant 3 
                                             %201 = OpTypePointer Input %6 
                                             %204 = OpTypePointer Uniform %6 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                Input f32_4* %214 = OpVariable Input 
                                             %216 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %12 
                                        f32_3 %14 = OpVectorShuffle %13 %13 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_3 %30 = OpVectorShuffle %29 %29 0 1 2 
                                        f32_3 %31 = OpFMul %14 %30 
                                                      OpStore %9 %31 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %25 
                                        f32_4 %33 = OpLoad %32 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                        f32_4 %35 = OpLoad %12 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 0 0 
                                        f32_3 %37 = OpFMul %34 %36 
                                        f32_3 %38 = OpLoad %9 
                                        f32_3 %39 = OpFAdd %37 %38 
                                                      OpStore %9 %39 
                               Uniform f32_4* %41 = OpAccessChain %23 %25 %40 
                                        f32_4 %42 = OpLoad %41 
                                        f32_3 %43 = OpVectorShuffle %42 %42 0 1 2 
                                        f32_4 %44 = OpLoad %12 
                                        f32_3 %45 = OpVectorShuffle %44 %44 2 2 2 
                                        f32_3 %46 = OpFMul %43 %45 
                                        f32_3 %47 = OpLoad %9 
                                        f32_3 %48 = OpFAdd %46 %47 
                                                      OpStore %9 %48 
                                        f32_3 %49 = OpLoad %9 
                               Uniform f32_4* %51 = OpAccessChain %23 %25 %50 
                                        f32_4 %52 = OpLoad %51 
                                        f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                        f32_3 %54 = OpFAdd %49 %53 
                                                      OpStore %9 %54 
                                        f32_3 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 1 1 1 1 
                               Uniform f32_4* %63 = OpAccessChain %62 %26 %26 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFMul %58 %64 
                                                      OpStore %56 %65 
                               Uniform f32_4* %66 = OpAccessChain %62 %26 %25 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpLoad %9 
                                        f32_4 %69 = OpVectorShuffle %68 %68 0 0 0 0 
                                        f32_4 %70 = OpFMul %67 %69 
                                        f32_4 %71 = OpLoad %56 
                                        f32_4 %72 = OpFAdd %70 %71 
                                                      OpStore %56 %72 
                               Uniform f32_4* %73 = OpAccessChain %62 %26 %40 
                                        f32_4 %74 = OpLoad %73 
                                        f32_3 %75 = OpLoad %9 
                                        f32_4 %76 = OpVectorShuffle %75 %75 2 2 2 2 
                                        f32_4 %77 = OpFMul %74 %76 
                                        f32_4 %78 = OpLoad %56 
                                        f32_4 %79 = OpFAdd %77 %78 
                                                      OpStore %56 %79 
                                        f32_4 %85 = OpLoad %56 
                               Uniform f32_4* %86 = OpAccessChain %62 %26 %50 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpFAdd %85 %87 
                                Output f32_4* %90 = OpAccessChain %84 %25 
                                                      OpStore %90 %88 
                                        f32_2 %96 = OpLoad %95 
                                                      OpStore vs_TEXCOORD0 %96 
                                        f32_3 %99 = OpLoad %98 
                              Uniform f32_4* %100 = OpAccessChain %23 %26 %25 
                                       f32_4 %101 = OpLoad %100 
                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 2 
                                         f32 %103 = OpDot %99 %102 
                                Private f32* %106 = OpAccessChain %56 %104 
                                                      OpStore %106 %103 
                                       f32_3 %107 = OpLoad %98 
                              Uniform f32_4* %108 = OpAccessChain %23 %26 %26 
                                       f32_4 %109 = OpLoad %108 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                         f32 %111 = OpDot %107 %110 
                                Private f32* %112 = OpAccessChain %56 %80 
                                                      OpStore %112 %111 
                                       f32_3 %113 = OpLoad %98 
                              Uniform f32_4* %114 = OpAccessChain %23 %26 %40 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                         f32 %117 = OpDot %113 %116 
                                Private f32* %118 = OpAccessChain %56 %19 
                                                      OpStore %118 %117 
                                       f32_4 %120 = OpLoad %56 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_4 %122 = OpLoad %56 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                         f32 %124 = OpDot %121 %123 
                                                      OpStore %119 %124 
                                         f32 %125 = OpLoad %119 
                                         f32 %127 = OpExtInst %1 40 %125 %126 
                                                      OpStore %119 %127 
                                         f32 %128 = OpLoad %119 
                                         f32 %129 = OpExtInst %1 32 %128 
                                                      OpStore %119 %129 
                                         f32 %130 = OpLoad %119 
                                       f32_3 %131 = OpCompositeConstruct %130 %130 %130 
                                       f32_4 %132 = OpLoad %56 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_3 %134 = OpFMul %131 %133 
                                       f32_4 %135 = OpLoad %56 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 6 3 
                                                      OpStore %56 %136 
                                       f32_4 %139 = OpLoad %56 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                                      OpStore vs_TEXCOORD1 %140 
                                       f32_3 %142 = OpLoad %9 
                                       f32_3 %143 = OpFNegate %142 
                              Uniform f32_3* %145 = OpAccessChain %62 %25 
                                       f32_3 %146 = OpLoad %145 
                                       f32_3 %147 = OpFAdd %143 %146 
                                                      OpStore vs_TEXCOORD2 %147 
                                       f32_3 %149 = OpLoad %9 
                                                      OpStore vs_TEXCOORD5 %149 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 1 1 1 
                              Uniform f32_4* %153 = OpAccessChain %23 %25 %26 
                                       f32_4 %154 = OpLoad %153 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFMul %152 %155 
                                                      OpStore %9 %156 
                              Uniform f32_4* %157 = OpAccessChain %23 %25 %25 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_4 %160 = OpLoad %150 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 0 0 
                                       f32_3 %162 = OpFMul %159 %161 
                                       f32_3 %163 = OpLoad %9 
                                       f32_3 %164 = OpFAdd %162 %163 
                                                      OpStore %9 %164 
                              Uniform f32_4* %165 = OpAccessChain %23 %25 %40 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_4 %168 = OpLoad %150 
                                       f32_3 %169 = OpVectorShuffle %168 %168 2 2 2 
                                       f32_3 %170 = OpFMul %167 %169 
                                       f32_3 %171 = OpLoad %9 
                                       f32_3 %172 = OpFAdd %170 %171 
                                                      OpStore %9 %172 
                                       f32_3 %173 = OpLoad %9 
                                       f32_3 %174 = OpLoad %9 
                                         f32 %175 = OpDot %173 %174 
                                                      OpStore %119 %175 
                                         f32 %176 = OpLoad %119 
                                         f32 %177 = OpExtInst %1 40 %176 %126 
                                                      OpStore %119 %177 
                                         f32 %178 = OpLoad %119 
                                         f32 %179 = OpExtInst %1 32 %178 
                                                      OpStore %119 %179 
                                         f32 %180 = OpLoad %119 
                                       f32_3 %181 = OpCompositeConstruct %180 %180 %180 
                                       f32_3 %182 = OpLoad %9 
                                       f32_3 %183 = OpFMul %181 %182 
                                                      OpStore %9 %183 
                                       f32_3 %185 = OpLoad %9 
                                                      OpStore vs_TEXCOORD3 %185 
                                       f32_3 %187 = OpLoad %9 
                                       f32_3 %188 = OpVectorShuffle %187 %187 1 2 0 
                                       f32_4 %189 = OpLoad %56 
                                       f32_3 %190 = OpVectorShuffle %189 %189 2 0 1 
                                       f32_3 %191 = OpFMul %188 %190 
                                                      OpStore %186 %191 
                                       f32_4 %192 = OpLoad %56 
                                       f32_3 %193 = OpVectorShuffle %192 %192 1 2 0 
                                       f32_3 %194 = OpLoad %9 
                                       f32_3 %195 = OpVectorShuffle %194 %194 2 0 1 
                                       f32_3 %196 = OpFMul %193 %195 
                                       f32_3 %197 = OpLoad %186 
                                       f32_3 %198 = OpFNegate %197 
                                       f32_3 %199 = OpFAdd %196 %198 
                                                      OpStore %9 %199 
                                  Input f32* %202 = OpAccessChain %150 %200 
                                         f32 %203 = OpLoad %202 
                                Uniform f32* %205 = OpAccessChain %23 %50 %200 
                                         f32 %206 = OpLoad %205 
                                         f32 %207 = OpFMul %203 %206 
                                                      OpStore %119 %207 
                                         f32 %209 = OpLoad %119 
                                       f32_3 %210 = OpCompositeConstruct %209 %209 %209 
                                       f32_3 %211 = OpLoad %9 
                                       f32_3 %212 = OpFMul %210 %211 
                                                      OpStore vs_TEXCOORD4 %212 
                                       f32_4 %215 = OpLoad %214 
                                                      OpStore vs_TEXCOORD6 %215 
                                 Output f32* %217 = OpAccessChain %84 %25 %80 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpFNegate %218 
                                 Output f32* %220 = OpAccessChain %84 %25 %80 
                                                      OpStore %220 %219 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 754
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %59 %84 %207 %223 %746 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %30 ArrayStride 30 
                                                      OpMemberDecorate %31 0 Offset 31 
                                                      OpMemberDecorate %31 1 RelaxedPrecision 
                                                      OpMemberDecorate %31 1 Offset 31 
                                                      OpMemberDecorate %31 2 Offset 31 
                                                      OpDecorate %31 Block 
                                                      OpDecorate %33 DescriptorSet 33 
                                                      OpDecorate %33 Binding 33 
                                                      OpDecorate vs_TEXCOORD3 Location 59 
                                                      OpMemberDecorate %67 0 Offset 67 
                                                      OpMemberDecorate %67 1 Offset 67 
                                                      OpMemberDecorate %67 2 Offset 67 
                                                      OpMemberDecorate %67 3 Offset 67 
                                                      OpMemberDecorate %67 4 Offset 67 
                                                      OpMemberDecorate %67 5 Offset 67 
                                                      OpMemberDecorate %67 6 Offset 67 
                                                      OpMemberDecorate %67 7 Offset 67 
                                                      OpMemberDecorate %67 8 Offset 67 
                                                      OpMemberDecorate %67 9 Offset 67 
                                                      OpMemberDecorate %67 10 Offset 67 
                                                      OpMemberDecorate %67 11 Offset 67 
                                                      OpMemberDecorate %67 12 Offset 67 
                                                      OpDecorate %67 Block 
                                                      OpDecorate %69 DescriptorSet 69 
                                                      OpDecorate %69 Binding 69 
                                                      OpDecorate vs_TEXCOORD0 Location 84 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %100 DescriptorSet 100 
                                                      OpDecorate %100 Binding 100 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %104 DescriptorSet 104 
                                                      OpDecorate %104 Binding 104 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %120 RelaxedPrecision 
                                                      OpDecorate %122 RelaxedPrecision 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %167 DescriptorSet 167 
                                                      OpDecorate %167 Binding 167 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %169 DescriptorSet 169 
                                                      OpDecorate %169 Binding 169 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %177 DescriptorSet 177 
                                                      OpDecorate %177 Binding 177 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %179 DescriptorSet 179 
                                                      OpDecorate %179 Binding 179 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 207 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 223 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %483 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                                      OpDecorate %487 RelaxedPrecision 
                                                      OpDecorate %493 RelaxedPrecision 
                                                      OpDecorate %494 ArrayStride 494 
                                                      OpDecorate %495 ArrayStride 495 
                                                      OpDecorate %497 ArrayStride 497 
                                                      OpMemberDecorate %498 0 Offset 498 
                                                      OpMemberDecorate %498 1 Offset 498 
                                                      OpMemberDecorate %498 2 Offset 498 
                                                      OpMemberDecorate %498 3 RelaxedPrecision 
                                                      OpMemberDecorate %498 3 Offset 498 
                                                      OpMemberDecorate %498 4 RelaxedPrecision 
                                                      OpMemberDecorate %498 4 Offset 498 
                                                      OpMemberDecorate %498 5 RelaxedPrecision 
                                                      OpMemberDecorate %498 5 Offset 498 
                                                      OpMemberDecorate %498 6 Offset 498 
                                                      OpMemberDecorate %498 7 RelaxedPrecision 
                                                      OpMemberDecorate %498 7 Offset 498 
                                                      OpMemberDecorate %498 8 Offset 498 
                                                      OpMemberDecorate %498 9 Offset 498 
                                                      OpMemberDecorate %498 10 RelaxedPrecision 
                                                      OpMemberDecorate %498 10 Offset 498 
                                                      OpMemberDecorate %498 11 RelaxedPrecision 
                                                      OpMemberDecorate %498 11 Offset 498 
                                                      OpMemberDecorate %498 12 RelaxedPrecision 
                                                      OpMemberDecorate %498 12 Offset 498 
                                                      OpMemberDecorate %498 13 RelaxedPrecision 
                                                      OpMemberDecorate %498 13 Offset 498 
                                                      OpMemberDecorate %498 14 RelaxedPrecision 
                                                      OpMemberDecorate %498 14 Offset 498 
                                                      OpMemberDecorate %498 15 RelaxedPrecision 
                                                      OpMemberDecorate %498 15 Offset 498 
                                                      OpMemberDecorate %498 16 RelaxedPrecision 
                                                      OpMemberDecorate %498 16 Offset 498 
                                                      OpDecorate %498 Block 
                                                      OpDecorate %500 DescriptorSet 500 
                                                      OpDecorate %500 Binding 500 
                                                      OpDecorate %503 RelaxedPrecision 
                                                      OpDecorate %504 RelaxedPrecision 
                                                      OpDecorate %505 RelaxedPrecision 
                                                      OpDecorate %509 RelaxedPrecision 
                                                      OpDecorate %510 RelaxedPrecision 
                                                      OpDecorate %511 RelaxedPrecision 
                                                      OpDecorate %515 RelaxedPrecision 
                                                      OpDecorate %516 RelaxedPrecision 
                                                      OpDecorate %517 RelaxedPrecision 
                                                      OpDecorate %521 RelaxedPrecision 
                                                      OpDecorate %522 RelaxedPrecision 
                                                      OpDecorate %523 RelaxedPrecision 
                                                      OpDecorate %524 RelaxedPrecision 
                                                      OpDecorate %525 RelaxedPrecision 
                                                      OpDecorate %526 RelaxedPrecision 
                                                      OpDecorate %527 RelaxedPrecision 
                                                      OpDecorate %531 RelaxedPrecision 
                                                      OpDecorate %536 RelaxedPrecision 
                                                      OpDecorate %541 RelaxedPrecision 
                                                      OpDecorate %545 RelaxedPrecision 
                                                      OpDecorate %546 RelaxedPrecision 
                                                      OpDecorate %547 RelaxedPrecision 
                                                      OpDecorate %548 RelaxedPrecision 
                                                      OpDecorate %550 RelaxedPrecision 
                                                      OpDecorate %551 RelaxedPrecision 
                                                      OpDecorate %552 RelaxedPrecision 
                                                      OpDecorate %553 RelaxedPrecision 
                                                      OpDecorate %571 RelaxedPrecision 
                                                      OpDecorate %572 RelaxedPrecision 
                                                      OpDecorate %574 RelaxedPrecision 
                                                      OpDecorate %576 RelaxedPrecision 
                                                      OpDecorate %578 RelaxedPrecision 
                                                      OpDecorate %580 RelaxedPrecision 
                                                      OpDecorate %581 RelaxedPrecision 
                                                      OpDecorate %582 RelaxedPrecision 
                                                      OpDecorate %584 RelaxedPrecision 
                                                      OpDecorate %585 RelaxedPrecision 
                                                      OpDecorate %588 RelaxedPrecision 
                                                      OpDecorate %588 DescriptorSet 588 
                                                      OpDecorate %588 Binding 588 
                                                      OpDecorate %589 RelaxedPrecision 
                                                      OpDecorate %590 RelaxedPrecision 
                                                      OpDecorate %590 DescriptorSet 590 
                                                      OpDecorate %590 Binding 590 
                                                      OpDecorate %591 RelaxedPrecision 
                                                      OpDecorate %595 RelaxedPrecision 
                                                      OpDecorate %598 RelaxedPrecision 
                                                      OpDecorate %599 RelaxedPrecision 
                                                      OpDecorate %602 RelaxedPrecision 
                                                      OpDecorate %603 RelaxedPrecision 
                                                      OpDecorate %604 RelaxedPrecision 
                                                      OpDecorate %605 RelaxedPrecision 
                                                      OpDecorate %606 RelaxedPrecision 
                                                      OpDecorate %607 RelaxedPrecision 
                                                      OpDecorate %608 RelaxedPrecision 
                                                      OpDecorate %609 RelaxedPrecision 
                                                      OpDecorate %610 RelaxedPrecision 
                                                      OpDecorate %612 RelaxedPrecision 
                                                      OpDecorate %613 RelaxedPrecision 
                                                      OpDecorate %614 RelaxedPrecision 
                                                      OpDecorate %615 RelaxedPrecision 
                                                      OpDecorate %616 RelaxedPrecision 
                                                      OpDecorate %618 RelaxedPrecision 
                                                      OpDecorate %619 RelaxedPrecision 
                                                      OpDecorate %620 RelaxedPrecision 
                                                      OpDecorate %621 RelaxedPrecision 
                                                      OpDecorate %622 RelaxedPrecision 
                                                      OpDecorate %623 RelaxedPrecision 
                                                      OpDecorate %624 RelaxedPrecision 
                                                      OpDecorate %625 RelaxedPrecision 
                                                      OpDecorate %626 RelaxedPrecision 
                                                      OpDecorate %627 RelaxedPrecision 
                                                      OpDecorate %633 RelaxedPrecision 
                                                      OpDecorate %636 RelaxedPrecision 
                                                      OpDecorate %705 RelaxedPrecision 
                                                      OpDecorate %713 RelaxedPrecision 
                                                      OpDecorate %714 RelaxedPrecision 
                                                      OpDecorate %715 RelaxedPrecision 
                                                      OpDecorate %716 RelaxedPrecision 
                                                      OpDecorate %717 RelaxedPrecision 
                                                      OpDecorate %718 RelaxedPrecision 
                                                      OpDecorate %737 RelaxedPrecision 
                                                      OpDecorate %738 RelaxedPrecision 
                                                      OpDecorate %739 RelaxedPrecision 
                                                      OpDecorate %742 RelaxedPrecision 
                                                      OpDecorate %743 RelaxedPrecision 
                                                      OpDecorate %744 RelaxedPrecision 
                                                      OpDecorate %746 RelaxedPrecision 
                                                      OpDecorate %746 Location 746 
                                                      OpDecorate %747 RelaxedPrecision 
                                                      OpDecorate %748 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 0 
                                              %17 = OpTypePointer Private %6 
                               Private f32_3* %23 = OpVariable Private 
                                              %28 = OpTypeVector %6 4 
                                          u32 %29 = OpConstant 4 
                                              %30 = OpTypeArray %28 %29 
                                              %31 = OpTypeStruct %28 %28 %30 
                                              %32 = OpTypePointer Uniform %31 
    Uniform struct {f32_4; f32_4; f32_4[4];}* %33 = OpVariable Uniform 
                                              %34 = OpTypeInt 32 1 
                                          i32 %35 = OpConstant 0 
                                              %36 = OpTypePointer Uniform %28 
                               Private f32_3* %41 = OpVariable Private 
                                 Private f32* %58 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                 Private f32* %66 = OpVariable Private 
                                              %67 = OpTypeStruct %6 %28 %28 %28 %6 %7 %28 %6 %6 %6 %6 %28 %6 
                                              %68 = OpTypePointer Uniform %67 
Uniform struct {f32; f32_4; f32_4; f32_4; f32; f32_3; f32_4; f32; f32; f32; f32; f32_4; f32;}* %69 = OpVariable Uniform 
                                          i32 %70 = OpConstant 10 
                                              %71 = OpTypePointer Uniform %6 
                                          f32 %75 = OpConstant 3.674022E-40 
                                          f32 %77 = OpConstant 3.674022E-40 
                               Private f32_3* %81 = OpVariable Private 
                                              %82 = OpTypeVector %6 2 
                                              %83 = OpTypePointer Input %82 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                          i32 %86 = OpConstant 1 
                                 Private f32* %97 = OpVariable Private 
                                              %98 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %99 = OpTypePointer UniformConstant %98 
        UniformConstant read_only Texture2D* %100 = OpVariable UniformConstant 
                                             %102 = OpTypeSampler 
                                             %103 = OpTypePointer UniformConstant %102 
                    UniformConstant sampler* %104 = OpVariable UniformConstant 
                                             %106 = OpTypeSampledImage %98 
                              Private f32_3* %112 = OpVariable Private 
                              Private f32_3* %117 = OpVariable Private 
                                         f32 %119 = OpConstant 3.674022E-40 
                                         f32 %121 = OpConstant 3.674022E-40 
                                         i32 %126 = OpConstant 12 
                                Private f32* %131 = OpVariable Private 
                                             %152 = OpTypePointer Private %28 
                              Private f32_4* %153 = OpVariable Private 
                                         i32 %155 = OpConstant 2 
                              Private f32_3* %166 = OpVariable Private 
        UniformConstant read_only Texture2D* %167 = OpVariable UniformConstant 
                    UniformConstant sampler* %169 = OpVariable UniformConstant 
                              Private f32_3* %176 = OpVariable Private 
        UniformConstant read_only Texture2D* %177 = OpVariable UniformConstant 
                    UniformConstant sampler* %179 = OpVariable UniformConstant 
                                         i32 %187 = OpConstant 3 
                                         f32 %196 = OpConstant 3.674022E-40 
                                       f32_3 %197 = OpConstantComposite %196 %196 %196 
                              Private f32_3* %199 = OpVariable Private 
                                       f32_3 %201 = OpConstantComposite %119 %119 %119 
                                       f32_3 %203 = OpConstantComposite %121 %121 %121 
                        Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                Private f32* %231 = OpVariable Private 
                              Private f32_3* %246 = OpVariable Private 
                                         f32 %299 = OpConstant 3.674022E-40 
                                         u32 %309 = OpConstant 1 
                                         f32 %330 = OpConstant 3.674022E-40 
                                         i32 %339 = OpConstant 11 
                                         i32 %349 = OpConstant 4 
                                Private f32* %354 = OpVariable Private 
                                         f32 %362 = OpConstant 3.674022E-40 
                                         f32 %371 = OpConstant 3.674022E-40 
                                         f32 %384 = OpConstant 3.674022E-40 
                              Private f32_4* %487 = OpVariable Private 
                              Private f32_3* %493 = OpVariable Private 
                                             %494 = OpTypeArray %28 %29 
                                             %495 = OpTypeArray %28 %29 
                                         u32 %496 = OpConstant 2 
                                             %497 = OpTypeArray %28 %496 
                                             %498 = OpTypeStruct %494 %495 %28 %28 %28 %497 %28 %28 %28 %28 %28 %28 %28 %28 %28 %28 %28 
                                             %499 = OpTypePointer Uniform %498 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4; f32_4[2]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %500 = OpVariable Uniform 
                                         i32 %501 = OpConstant 13 
                                         i32 %507 = OpConstant 14 
                                         i32 %513 = OpConstant 15 
                                         i32 %519 = OpConstant 16 
                                         u32 %528 = OpConstant 3 
                                       f32_3 %549 = OpConstantComposite %384 %384 %384 
                                         f32 %573 = OpConstant 3.674022E-40 
                                         f32 %575 = OpConstant 3.674022E-40 
                                         f32 %583 = OpConstant 3.674022E-40 
                              Private f32_4* %585 = OpVariable Private 
                                             %586 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %587 = OpTypePointer UniformConstant %586 
      UniformConstant read_only TextureCube* %588 = OpVariable UniformConstant 
                    UniformConstant sampler* %590 = OpVariable UniformConstant 
                                             %592 = OpTypeSampledImage %586 
                                         i32 %600 = OpConstant 7 
                                         i32 %641 = OpConstant 5 
                                             %642 = OpTypePointer Uniform %7 
                                         f32 %683 = OpConstant 3.674022E-40 
                                         i32 %687 = OpConstant 8 
                                         i32 %700 = OpConstant 6 
                                         i32 %706 = OpConstant 9 
                                       f32_3 %724 = OpConstantComposite %573 %573 %573 
                                         f32 %727 = OpConstant 3.674022E-40 
                                       f32_3 %728 = OpConstantComposite %727 %727 %727 
                                         f32 %740 = OpConstant 3.674022E-40 
                                       f32_3 %741 = OpConstantComposite %740 %740 %740 
                                             %745 = OpTypePointer Output %28 
                               Output f32_4* %746 = OpVariable Output 
                                             %751 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                                          f32 %14 = OpDot %12 %13 
                                 Private f32* %18 = OpAccessChain %9 %16 
                                                      OpStore %18 %14 
                                 Private f32* %19 = OpAccessChain %9 %16 
                                          f32 %20 = OpLoad %19 
                                          f32 %21 = OpExtInst %1 32 %20 
                                 Private f32* %22 = OpAccessChain %9 %16 
                                                      OpStore %22 %21 
                                        f32_3 %24 = OpLoad vs_TEXCOORD2 
                                        f32_3 %25 = OpLoad %9 
                                        f32_3 %26 = OpVectorShuffle %25 %25 0 0 0 
                                        f32_3 %27 = OpFMul %24 %26 
                               Uniform f32_4* %37 = OpAccessChain %33 %35 
                                        f32_4 %38 = OpLoad %37 
                                        f32_3 %39 = OpVectorShuffle %38 %38 0 1 2 
                                        f32_3 %40 = OpFAdd %27 %39 
                                                      OpStore %23 %40 
                                        f32_3 %42 = OpLoad %9 
                                        f32_3 %43 = OpVectorShuffle %42 %42 0 0 0 
                                        f32_3 %44 = OpLoad vs_TEXCOORD2 
                                        f32_3 %45 = OpFMul %43 %44 
                                                      OpStore %41 %45 
                                        f32_3 %46 = OpLoad %23 
                                        f32_3 %47 = OpLoad %23 
                                          f32 %48 = OpDot %46 %47 
                                 Private f32* %49 = OpAccessChain %9 %16 
                                                      OpStore %49 %48 
                                 Private f32* %50 = OpAccessChain %9 %16 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpExtInst %1 32 %51 
                                 Private f32* %53 = OpAccessChain %9 %16 
                                                      OpStore %53 %52 
                                        f32_3 %54 = OpLoad %9 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 0 0 
                                        f32_3 %56 = OpLoad %23 
                                        f32_3 %57 = OpFMul %55 %56 
                                                      OpStore %9 %57 
                                        f32_3 %60 = OpLoad vs_TEXCOORD3 
                                        f32_3 %61 = OpLoad %9 
                                          f32 %62 = OpDot %60 %61 
                                                      OpStore %58 %62 
                                          f32 %63 = OpLoad %58 
                                          f32 %64 = OpLoad %58 
                                          f32 %65 = OpFMul %63 %64 
                                                      OpStore %58 %65 
                                 Uniform f32* %72 = OpAccessChain %69 %70 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFNegate %73 
                                          f32 %76 = OpFMul %74 %75 
                                          f32 %78 = OpFAdd %76 %77 
                                                      OpStore %66 %78 
                                          f32 %79 = OpLoad %66 
                                          f32 %80 = OpExtInst %1 31 %79 
                                                      OpStore %66 %80 
                                        f32_2 %85 = OpLoad vs_TEXCOORD0 
                               Uniform f32_4* %87 = OpAccessChain %69 %86 
                                        f32_4 %88 = OpLoad %87 
                                        f32_2 %89 = OpVectorShuffle %88 %88 0 1 
                                        f32_2 %90 = OpFMul %85 %89 
                               Uniform f32_4* %91 = OpAccessChain %69 %86 
                                        f32_4 %92 = OpLoad %91 
                                        f32_2 %93 = OpVectorShuffle %92 %92 2 3 
                                        f32_2 %94 = OpFAdd %90 %93 
                                        f32_3 %95 = OpLoad %81 
                                        f32_3 %96 = OpVectorShuffle %95 %94 3 4 2 
                                                      OpStore %81 %96 
                         read_only Texture2D %101 = OpLoad %100 
                                     sampler %105 = OpLoad %104 
                  read_only Texture2DSampled %107 = OpSampledImage %101 %105 
                                       f32_3 %108 = OpLoad %81 
                                       f32_2 %109 = OpVectorShuffle %108 %108 0 1 
                                       f32_4 %110 = OpImageSampleImplicitLod %107 %109 
                                         f32 %111 = OpCompositeExtract %110 0 
                                                      OpStore %97 %111 
                                         f32 %113 = OpLoad %97 
                                         f32 %114 = OpLoad %97 
                                         f32 %115 = OpFMul %113 %114 
                                Private f32* %116 = OpAccessChain %112 %16 
                                                      OpStore %116 %115 
                                         f32 %118 = OpLoad %97 
                                         f32 %120 = OpFMul %118 %119 
                                         f32 %122 = OpFAdd %120 %121 
                                Private f32* %123 = OpAccessChain %117 %16 
                                                      OpStore %123 %122 
                                Private f32* %124 = OpAccessChain %117 %16 
                                         f32 %125 = OpLoad %124 
                                Uniform f32* %127 = OpAccessChain %69 %126 
                                         f32 %128 = OpLoad %127 
                                         f32 %129 = OpFAdd %125 %128 
                                Private f32* %130 = OpAccessChain %81 %16 
                                                      OpStore %130 %129 
                                Private f32* %132 = OpAccessChain %112 %16 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpLoad %66 
                                         f32 %135 = OpFDiv %133 %134 
                                                      OpStore %131 %135 
                                         f32 %136 = OpLoad %66 
                                Private f32* %137 = OpAccessChain %112 %16 
                                         f32 %138 = OpLoad %137 
                                         f32 %139 = OpFMul %136 %138 
                                                      OpStore %66 %139 
                                         f32 %140 = OpLoad %131 
                                         f32 %141 = OpLoad %131 
                                         f32 %142 = OpFMul %140 %141 
                                Private f32* %143 = OpAccessChain %112 %16 
                                                      OpStore %143 %142 
                                         f32 %144 = OpLoad %58 
                                Private f32* %145 = OpAccessChain %112 %16 
                                         f32 %146 = OpLoad %145 
                                         f32 %147 = OpFDiv %144 %146 
                                                      OpStore %58 %147 
                                         f32 %148 = OpLoad %66 
                                         f32 %149 = OpLoad %66 
                                         f32 %150 = OpFMul %148 %149 
                                Private f32* %151 = OpAccessChain %112 %16 
                                                      OpStore %151 %150 
                                       f32_2 %154 = OpLoad vs_TEXCOORD0 
                              Uniform f32_4* %156 = OpAccessChain %69 %155 
                                       f32_4 %157 = OpLoad %156 
                                       f32_2 %158 = OpVectorShuffle %157 %157 0 1 
                                       f32_2 %159 = OpFMul %154 %158 
                              Uniform f32_4* %160 = OpAccessChain %69 %155 
                                       f32_4 %161 = OpLoad %160 
                                       f32_2 %162 = OpVectorShuffle %161 %161 2 3 
                                       f32_2 %163 = OpFAdd %159 %162 
                                       f32_4 %164 = OpLoad %153 
                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 2 3 
                                                      OpStore %153 %165 
                         read_only Texture2D %168 = OpLoad %167 
                                     sampler %170 = OpLoad %169 
                  read_only Texture2DSampled %171 = OpSampledImage %168 %170 
                                       f32_4 %172 = OpLoad %153 
                                       f32_2 %173 = OpVectorShuffle %172 %172 0 1 
                                       f32_4 %174 = OpImageSampleImplicitLod %171 %173 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                                                      OpStore %166 %175 
                         read_only Texture2D %178 = OpLoad %177 
                                     sampler %180 = OpLoad %179 
                  read_only Texture2DSampled %181 = OpSampledImage %178 %180 
                                       f32_4 %182 = OpLoad %153 
                                       f32_2 %183 = OpVectorShuffle %182 %182 0 1 
                                       f32_4 %184 = OpImageSampleImplicitLod %181 %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                                      OpStore %176 %185 
                                       f32_3 %186 = OpLoad %176 
                              Uniform f32_4* %188 = OpAccessChain %69 %187 
                                       f32_4 %189 = OpLoad %188 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_3 %191 = OpFMul %186 %190 
                                       f32_4 %192 = OpLoad %153 
                                       f32_4 %193 = OpVectorShuffle %192 %191 4 5 6 3 
                                                      OpStore %153 %193 
                                       f32_4 %194 = OpLoad %153 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_3 %198 = OpFMul %195 %197 
                                                      OpStore %117 %198 
                                       f32_3 %200 = OpLoad %166 
                                       f32_3 %202 = OpFMul %200 %201 
                                       f32_3 %204 = OpFAdd %202 %203 
                                                      OpStore %199 %204 
                                       f32_3 %205 = OpLoad %199 
                                       f32_3 %206 = OpVectorShuffle %205 %205 1 1 1 
                                       f32_3 %208 = OpLoad vs_TEXCOORD4 
                                       f32_3 %209 = OpFMul %206 %208 
                                       f32_4 %210 = OpLoad %153 
                                       f32_4 %211 = OpVectorShuffle %210 %209 4 5 6 3 
                                                      OpStore %153 %211 
                                       f32_3 %212 = OpLoad %199 
                                       f32_3 %213 = OpVectorShuffle %212 %212 0 0 0 
                                       f32_3 %214 = OpLoad vs_TEXCOORD3 
                                       f32_3 %215 = OpFMul %213 %214 
                                       f32_4 %216 = OpLoad %153 
                                       f32_3 %217 = OpVectorShuffle %216 %216 0 1 2 
                                       f32_3 %218 = OpFAdd %215 %217 
                                       f32_4 %219 = OpLoad %153 
                                       f32_4 %220 = OpVectorShuffle %219 %218 4 5 6 3 
                                                      OpStore %153 %220 
                                       f32_3 %221 = OpLoad %199 
                                       f32_3 %222 = OpVectorShuffle %221 %221 2 2 2 
                                       f32_3 %224 = OpLoad vs_TEXCOORD1 
                                       f32_3 %225 = OpFMul %222 %224 
                                       f32_4 %226 = OpLoad %153 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_3 %228 = OpFAdd %225 %227 
                                       f32_4 %229 = OpLoad %153 
                                       f32_4 %230 = OpVectorShuffle %229 %228 4 5 6 3 
                                                      OpStore %153 %230 
                                       f32_4 %232 = OpLoad %153 
                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
                                       f32_4 %234 = OpLoad %153 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
                                         f32 %236 = OpDot %233 %235 
                                                      OpStore %231 %236 
                                         f32 %237 = OpLoad %231 
                                         f32 %238 = OpExtInst %1 32 %237 
                                                      OpStore %231 %238 
                                         f32 %239 = OpLoad %231 
                                       f32_3 %240 = OpCompositeConstruct %239 %239 %239 
                                       f32_4 %241 = OpLoad %153 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 1 2 
                                       f32_3 %243 = OpFMul %240 %242 
                                       f32_4 %244 = OpLoad %153 
                                       f32_4 %245 = OpVectorShuffle %244 %243 4 5 6 3 
                                                      OpStore %153 %245 
                                       f32_4 %247 = OpLoad %153 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                       f32_3 %249 = OpLoad %81 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 0 0 
                                       f32_3 %251 = OpFMul %248 %250 
                                       f32_3 %252 = OpLoad vs_TEXCOORD4 
                                       f32_3 %253 = OpFAdd %251 %252 
                                                      OpStore %246 %253 
                                       f32_3 %254 = OpLoad %246 
                                       f32_3 %255 = OpLoad %246 
                                         f32 %256 = OpDot %254 %255 
                                Private f32* %257 = OpAccessChain %81 %16 
                                                      OpStore %257 %256 
                                Private f32* %258 = OpAccessChain %81 %16 
                                         f32 %259 = OpLoad %258 
                                         f32 %260 = OpExtInst %1 32 %259 
                                Private f32* %261 = OpAccessChain %81 %16 
                                                      OpStore %261 %260 
                                       f32_3 %262 = OpLoad %81 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 0 0 
                                       f32_3 %264 = OpLoad %246 
                                       f32_3 %265 = OpFMul %263 %264 
                                                      OpStore %246 %265 
                                       f32_3 %266 = OpLoad %246 
                                       f32_3 %267 = OpLoad %9 
                                         f32 %268 = OpDot %266 %267 
                                Private f32* %269 = OpAccessChain %81 %16 
                                                      OpStore %269 %268 
                                Private f32* %270 = OpAccessChain %81 %16 
                                         f32 %271 = OpLoad %270 
                                Private f32* %272 = OpAccessChain %81 %16 
                                         f32 %273 = OpLoad %272 
                                         f32 %274 = OpFMul %271 %273 
                                Private f32* %275 = OpAccessChain %81 %16 
                                                      OpStore %275 %274 
                                Private f32* %276 = OpAccessChain %81 %16 
                                         f32 %277 = OpLoad %276 
                                Private f32* %278 = OpAccessChain %112 %16 
                                         f32 %279 = OpLoad %278 
                                         f32 %280 = OpFDiv %277 %279 
                                Private f32* %281 = OpAccessChain %81 %16 
                                                      OpStore %281 %280 
                                         f32 %282 = OpLoad %58 
                                Private f32* %283 = OpAccessChain %81 %16 
                                         f32 %284 = OpLoad %283 
                                         f32 %285 = OpFAdd %282 %284 
                                                      OpStore %58 %285 
                                       f32_4 %286 = OpLoad %153 
                                       f32_3 %287 = OpVectorShuffle %286 %286 0 1 2 
                                       f32_3 %288 = OpLoad %9 
                                         f32 %289 = OpDot %287 %288 
                                Private f32* %290 = OpAccessChain %81 %16 
                                                      OpStore %290 %289 
                              Uniform f32_4* %291 = OpAccessChain %33 %35 
                                       f32_4 %292 = OpLoad %291 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
                                       f32_3 %294 = OpLoad %9 
                                         f32 %295 = OpDot %293 %294 
                                Private f32* %296 = OpAccessChain %9 %16 
                                                      OpStore %296 %295 
                                Private f32* %297 = OpAccessChain %9 %16 
                                         f32 %298 = OpLoad %297 
                                         f32 %300 = OpExtInst %1 40 %298 %299 
                                Private f32* %301 = OpAccessChain %9 %16 
                                                      OpStore %301 %300 
                                Private f32* %302 = OpAccessChain %81 %16 
                                         f32 %303 = OpLoad %302 
                                Private f32* %304 = OpAccessChain %81 %16 
                                         f32 %305 = OpLoad %304 
                                         f32 %306 = OpFMul %303 %305 
                                         f32 %307 = OpLoad %58 
                                         f32 %308 = OpFAdd %306 %307 
                                Private f32* %310 = OpAccessChain %9 %309 
                                                      OpStore %310 %308 
                                       f32_3 %311 = OpLoad %9 
                                       f32_2 %312 = OpVectorShuffle %311 %311 0 1 
                                       f32_3 %313 = OpLoad %9 
                                       f32_2 %314 = OpVectorShuffle %313 %313 0 1 
                                       f32_2 %315 = OpFMul %312 %314 
                                       f32_3 %316 = OpLoad %9 
                                       f32_3 %317 = OpVectorShuffle %316 %315 3 4 2 
                                                      OpStore %9 %317 
                                         f32 %318 = OpLoad %131 
                                Private f32* %319 = OpAccessChain %9 %309 
                                         f32 %320 = OpLoad %319 
                                         f32 %321 = OpFMul %318 %320 
                                Private f32* %322 = OpAccessChain %23 %16 
                                                      OpStore %322 %321 
                                         f32 %323 = OpLoad %66 
                                Private f32* %324 = OpAccessChain %23 %16 
                                         f32 %325 = OpLoad %324 
                                         f32 %326 = OpFMul %323 %325 
                                Private f32* %327 = OpAccessChain %23 %16 
                                                      OpStore %327 %326 
                                Private f32* %328 = OpAccessChain %23 %16 
                                         f32 %329 = OpLoad %328 
                                         f32 %331 = OpFMul %329 %330 
                                Private f32* %332 = OpAccessChain %23 %16 
                                                      OpStore %332 %331 
                                Private f32* %333 = OpAccessChain %23 %16 
                                         f32 %334 = OpLoad %333 
                                         f32 %335 = OpFDiv %77 %334 
                                Private f32* %336 = OpAccessChain %23 %16 
                                                      OpStore %336 %335 
                                       f32_3 %337 = OpLoad %23 
                                       f32_3 %338 = OpVectorShuffle %337 %337 0 0 0 
                              Uniform f32_4* %340 = OpAccessChain %69 %339 
                                       f32_4 %341 = OpLoad %340 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                                       f32_3 %343 = OpFMul %338 %342 
                                                      OpStore %23 %343 
                                       f32_3 %344 = OpLoad %23 
                              Uniform f32_4* %345 = OpAccessChain %69 %339 
                                       f32_4 %346 = OpLoad %345 
                                       f32_3 %347 = OpVectorShuffle %346 %346 3 3 3 
                                       f32_3 %348 = OpFMul %344 %347 
                                                      OpStore %23 %348 
                                Uniform f32* %350 = OpAccessChain %69 %349 
                                         f32 %351 = OpLoad %350 
                                         f32 %352 = OpFNegate %351 
                                         f32 %353 = OpFAdd %352 %77 
                                                      OpStore %66 %353 
                                         f32 %355 = OpLoad %66 
                                         f32 %356 = OpFNegate %355 
                                         f32 %357 = OpFAdd %356 %77 
                                                      OpStore %354 %357 
                                         f32 %358 = OpLoad %354 
                                         f32 %359 = OpLoad %354 
                                         f32 %360 = OpFMul %358 %359 
                                                      OpStore %354 %360 
                                         f32 %361 = OpLoad %354 
                                         f32 %363 = OpExtInst %1 40 %361 %362 
                                                      OpStore %354 %363 
                                         f32 %364 = OpLoad %354 
                                         f32 %365 = OpLoad %354 
                                         f32 %366 = OpFAdd %364 %365 
                                                      OpStore %66 %366 
                                Private f32* %367 = OpAccessChain %9 %16 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpLoad %66 
                                         f32 %370 = OpFMul %368 %369 
                                         f32 %372 = OpFAdd %370 %371 
                                Private f32* %373 = OpAccessChain %9 %16 
                                                      OpStore %373 %372 
                                       f32_4 %374 = OpLoad %153 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                                       f32_3 %376 = OpLoad %41 
                                         f32 %377 = OpDot %375 %376 
                                                      OpStore %66 %377 
                                         f32 %378 = OpLoad %66 
                                         f32 %379 = OpExtInst %1 40 %378 %299 
                                                      OpStore %66 %379 
                                         f32 %380 = OpLoad %66 
                                         f32 %381 = OpFNegate %380 
                                         f32 %382 = OpFAdd %381 %77 
                                                      OpStore %66 %382 
                                         f32 %383 = OpLoad %66 
                                         f32 %385 = OpExtInst %1 40 %383 %384 
                                                      OpStore %66 %385 
                                         f32 %386 = OpLoad %66 
                                         f32 %387 = OpLoad %66 
                                         f32 %388 = OpFMul %386 %387 
                                Private f32* %389 = OpAccessChain %81 %16 
                                                      OpStore %389 %388 
                                Private f32* %390 = OpAccessChain %81 %16 
                                         f32 %391 = OpLoad %390 
                                Private f32* %392 = OpAccessChain %81 %16 
                                         f32 %393 = OpLoad %392 
                                         f32 %394 = OpFMul %391 %393 
                                Private f32* %395 = OpAccessChain %81 %16 
                                                      OpStore %395 %394 
                                         f32 %396 = OpLoad %66 
                                Private f32* %397 = OpAccessChain %81 %16 
                                         f32 %398 = OpLoad %397 
                                         f32 %399 = OpFMul %396 %398 
                                                      OpStore %66 %399 
                                Private f32* %400 = OpAccessChain %9 %16 
                                         f32 %401 = OpLoad %400 
                                         f32 %402 = OpLoad %66 
                                         f32 %403 = OpFMul %401 %402 
                                         f32 %404 = OpFAdd %403 %77 
                                                      OpStore %66 %404 
                                       f32_4 %405 = OpLoad %153 
                                       f32_3 %406 = OpVectorShuffle %405 %405 0 1 2 
                              Uniform f32_4* %407 = OpAccessChain %33 %35 
                                       f32_4 %408 = OpLoad %407 
                                       f32_3 %409 = OpVectorShuffle %408 %408 0 1 2 
                                         f32 %410 = OpDot %406 %409 
                                Private f32* %411 = OpAccessChain %81 %16 
                                                      OpStore %411 %410 
                                Private f32* %412 = OpAccessChain %81 %16 
                                         f32 %413 = OpLoad %412 
                                         f32 %414 = OpExtInst %1 40 %413 %299 
                                Private f32* %415 = OpAccessChain %81 %16 
                                                      OpStore %415 %414 
                                Private f32* %416 = OpAccessChain %81 %16 
                                         f32 %417 = OpLoad %416 
                                         f32 %418 = OpFNegate %417 
                                         f32 %419 = OpFAdd %418 %77 
                                Private f32* %420 = OpAccessChain %112 %16 
                                                      OpStore %420 %419 
                                Private f32* %421 = OpAccessChain %112 %16 
                                         f32 %422 = OpLoad %421 
                                         f32 %423 = OpExtInst %1 40 %422 %384 
                                Private f32* %424 = OpAccessChain %112 %16 
                                                      OpStore %424 %423 
                                Private f32* %425 = OpAccessChain %112 %16 
                                         f32 %426 = OpLoad %425 
                                Private f32* %427 = OpAccessChain %112 %16 
                                         f32 %428 = OpLoad %427 
                                         f32 %429 = OpFMul %426 %428 
                                                      OpStore %131 %429 
                                         f32 %430 = OpLoad %131 
                                         f32 %431 = OpLoad %131 
                                         f32 %432 = OpFMul %430 %431 
                                                      OpStore %131 %432 
                                Private f32* %433 = OpAccessChain %112 %16 
                                         f32 %434 = OpLoad %433 
                                         f32 %435 = OpLoad %131 
                                         f32 %436 = OpFMul %434 %435 
                                Private f32* %437 = OpAccessChain %112 %16 
                                                      OpStore %437 %436 
                                Private f32* %438 = OpAccessChain %9 %16 
                                         f32 %439 = OpLoad %438 
                                Private f32* %440 = OpAccessChain %112 %16 
                                         f32 %441 = OpLoad %440 
                                         f32 %442 = OpFMul %439 %441 
                                         f32 %443 = OpFAdd %442 %77 
                                Private f32* %444 = OpAccessChain %9 %16 
                                                      OpStore %444 %443 
                                         f32 %445 = OpLoad %66 
                                Private f32* %446 = OpAccessChain %9 %16 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpFMul %445 %447 
                                Private f32* %449 = OpAccessChain %9 %16 
                                                      OpStore %449 %448 
                                Private f32* %450 = OpAccessChain %81 %16 
                                         f32 %451 = OpLoad %450 
                                Private f32* %452 = OpAccessChain %9 %16 
                                         f32 %453 = OpLoad %452 
                                         f32 %454 = OpFMul %451 %453 
                                Private f32* %455 = OpAccessChain %9 %16 
                                                      OpStore %455 %454 
                                Private f32* %456 = OpAccessChain %9 %16 
                                         f32 %457 = OpLoad %456 
                                         f32 %458 = OpExtInst %1 37 %457 %77 
                                Private f32* %459 = OpAccessChain %9 %16 
                                                      OpStore %459 %458 
                                       f32_3 %460 = OpLoad %9 
                                       f32_3 %461 = OpVectorShuffle %460 %460 0 0 0 
                                       f32_3 %462 = OpLoad %117 
                                       f32_3 %463 = OpFMul %461 %462 
                                                      OpStore %112 %463 
                                       f32_3 %464 = OpLoad %112 
                              Uniform f32_4* %465 = OpAccessChain %33 %86 
                                       f32_4 %466 = OpLoad %465 
                                       f32_3 %467 = OpVectorShuffle %466 %466 0 1 2 
                                       f32_3 %468 = OpFMul %464 %467 
                                       f32_3 %469 = OpLoad %23 
                                       f32_3 %470 = OpFAdd %468 %469 
                                                      OpStore %9 %470 
                                Private f32* %471 = OpAccessChain %153 %309 
                                         f32 %472 = OpLoad %471 
                                Private f32* %473 = OpAccessChain %153 %309 
                                         f32 %474 = OpLoad %473 
                                         f32 %475 = OpFMul %472 %474 
                                Private f32* %476 = OpAccessChain %199 %16 
                                                      OpStore %476 %475 
                                Private f32* %477 = OpAccessChain %153 %16 
                                         f32 %478 = OpLoad %477 
                                Private f32* %479 = OpAccessChain %153 %16 
                                         f32 %480 = OpLoad %479 
                                         f32 %481 = OpFMul %478 %480 
                                Private f32* %482 = OpAccessChain %199 %16 
                                         f32 %483 = OpLoad %482 
                                         f32 %484 = OpFNegate %483 
                                         f32 %485 = OpFAdd %481 %484 
                                Private f32* %486 = OpAccessChain %199 %16 
                                                      OpStore %486 %485 
                                       f32_4 %488 = OpLoad %153 
                                       f32_4 %489 = OpVectorShuffle %488 %488 1 2 2 0 
                                       f32_4 %490 = OpLoad %153 
                                       f32_4 %491 = OpVectorShuffle %490 %490 0 1 2 2 
                                       f32_4 %492 = OpFMul %489 %491 
                                                      OpStore %487 %492 
                              Uniform f32_4* %502 = OpAccessChain %500 %501 
                                       f32_4 %503 = OpLoad %502 
                                       f32_4 %504 = OpLoad %487 
                                         f32 %505 = OpDot %503 %504 
                                Private f32* %506 = OpAccessChain %493 %16 
                                                      OpStore %506 %505 
                              Uniform f32_4* %508 = OpAccessChain %500 %507 
                                       f32_4 %509 = OpLoad %508 
                                       f32_4 %510 = OpLoad %487 
                                         f32 %511 = OpDot %509 %510 
                                Private f32* %512 = OpAccessChain %493 %309 
                                                      OpStore %512 %511 
                              Uniform f32_4* %514 = OpAccessChain %500 %513 
                                       f32_4 %515 = OpLoad %514 
                                       f32_4 %516 = OpLoad %487 
                                         f32 %517 = OpDot %515 %516 
                                Private f32* %518 = OpAccessChain %493 %496 
                                                      OpStore %518 %517 
                              Uniform f32_4* %520 = OpAccessChain %500 %519 
                                       f32_4 %521 = OpLoad %520 
                                       f32_3 %522 = OpVectorShuffle %521 %521 0 1 2 
                                       f32_3 %523 = OpLoad %199 
                                       f32_3 %524 = OpVectorShuffle %523 %523 0 0 0 
                                       f32_3 %525 = OpFMul %522 %524 
                                       f32_3 %526 = OpLoad %493 
                                       f32_3 %527 = OpFAdd %525 %526 
                                                      OpStore %199 %527 
                                Private f32* %529 = OpAccessChain %153 %528 
                                                      OpStore %529 %77 
                              Uniform f32_4* %530 = OpAccessChain %500 %70 
                                       f32_4 %531 = OpLoad %530 
                                       f32_4 %532 = OpLoad %153 
                                         f32 %533 = OpDot %531 %532 
                                Private f32* %534 = OpAccessChain %493 %16 
                                                      OpStore %534 %533 
                              Uniform f32_4* %535 = OpAccessChain %500 %339 
                                       f32_4 %536 = OpLoad %535 
                                       f32_4 %537 = OpLoad %153 
                                         f32 %538 = OpDot %536 %537 
                                Private f32* %539 = OpAccessChain %493 %309 
                                                      OpStore %539 %538 
                              Uniform f32_4* %540 = OpAccessChain %500 %126 
                                       f32_4 %541 = OpLoad %540 
                                       f32_4 %542 = OpLoad %153 
                                         f32 %543 = OpDot %541 %542 
                                Private f32* %544 = OpAccessChain %493 %496 
                                                      OpStore %544 %543 
                                       f32_3 %545 = OpLoad %199 
                                       f32_3 %546 = OpLoad %493 
                                       f32_3 %547 = OpFAdd %545 %546 
                                                      OpStore %199 %547 
                                       f32_3 %548 = OpLoad %199 
                                       f32_3 %550 = OpExtInst %1 40 %548 %549 
                                                      OpStore %199 %550 
                                       f32_3 %551 = OpLoad %117 
                                       f32_3 %552 = OpLoad %199 
                                       f32_3 %553 = OpFMul %551 %552 
                                                      OpStore %112 %553 
                                       f32_3 %554 = OpLoad %41 
                                       f32_3 %555 = OpFNegate %554 
                                       f32_4 %556 = OpLoad %153 
                                       f32_3 %557 = OpVectorShuffle %556 %556 0 1 2 
                                         f32 %558 = OpDot %555 %557 
                                                      OpStore %58 %558 
                                         f32 %559 = OpLoad %58 
                                         f32 %560 = OpLoad %58 
                                         f32 %561 = OpFAdd %559 %560 
                                                      OpStore %58 %561 
                                       f32_4 %562 = OpLoad %153 
                                       f32_3 %563 = OpVectorShuffle %562 %562 0 1 2 
                                         f32 %564 = OpLoad %58 
                                       f32_3 %565 = OpCompositeConstruct %564 %564 %564 
                                       f32_3 %566 = OpFNegate %565 
                                       f32_3 %567 = OpFMul %563 %566 
                                       f32_3 %568 = OpLoad %41 
                                       f32_3 %569 = OpFNegate %568 
                                       f32_3 %570 = OpFAdd %567 %569 
                                                      OpStore %41 %570 
                                         f32 %571 = OpLoad %354 
                                         f32 %572 = OpFNegate %571 
                                         f32 %574 = OpFMul %572 %573 
                                         f32 %576 = OpFAdd %574 %575 
                                Private f32* %577 = OpAccessChain %199 %16 
                                                      OpStore %577 %576 
                                         f32 %578 = OpLoad %354 
                                Private f32* %579 = OpAccessChain %199 %16 
                                         f32 %580 = OpLoad %579 
                                         f32 %581 = OpFMul %578 %580 
                                                      OpStore %354 %581 
                                         f32 %582 = OpLoad %354 
                                         f32 %584 = OpFMul %582 %583 
                                                      OpStore %354 %584 
                       read_only TextureCube %589 = OpLoad %588 
                                     sampler %591 = OpLoad %590 
                read_only TextureCubeSampled %593 = OpSampledImage %589 %591 
                                       f32_3 %594 = OpLoad %41 
                                         f32 %595 = OpLoad %354 
                                       f32_4 %596 = OpImageSampleExplicitLod %593 %594 Lod %28 
                                                      OpStore %585 %596 
                                Private f32* %597 = OpAccessChain %585 %528 
                                         f32 %598 = OpLoad %597 
                                         f32 %599 = OpFAdd %598 %121 
                                                      OpStore %354 %599 
                                Uniform f32* %601 = OpAccessChain %500 %600 %528 
                                         f32 %602 = OpLoad %601 
                                         f32 %603 = OpLoad %354 
                                         f32 %604 = OpFMul %602 %603 
                                         f32 %605 = OpFAdd %604 %77 
                                                      OpStore %354 %605 
                                         f32 %606 = OpLoad %354 
                                         f32 %607 = OpExtInst %1 40 %606 %384 
                                                      OpStore %354 %607 
                                         f32 %608 = OpLoad %354 
                                         f32 %609 = OpExtInst %1 30 %608 
                                                      OpStore %354 %609 
                                         f32 %610 = OpLoad %354 
                                Uniform f32* %611 = OpAccessChain %500 %600 %309 
                                         f32 %612 = OpLoad %611 
                                         f32 %613 = OpFMul %610 %612 
                                                      OpStore %354 %613 
                                         f32 %614 = OpLoad %354 
                                         f32 %615 = OpExtInst %1 29 %614 
                                                      OpStore %354 %615 
                                         f32 %616 = OpLoad %354 
                                Uniform f32* %617 = OpAccessChain %500 %600 %16 
                                         f32 %618 = OpLoad %617 
                                         f32 %619 = OpFMul %616 %618 
                                                      OpStore %354 %619 
                                       f32_4 %620 = OpLoad %585 
                                       f32_3 %621 = OpVectorShuffle %620 %620 0 1 2 
                                         f32 %622 = OpLoad %354 
                                       f32_3 %623 = OpCompositeConstruct %622 %622 %622 
                                       f32_3 %624 = OpFMul %621 %623 
                                                      OpStore %199 %624 
                                       f32_3 %625 = OpLoad %117 
                                       f32_3 %626 = OpLoad %199 
                                       f32_3 %627 = OpFMul %625 %626 
                                                      OpStore %117 %627 
                                       f32_3 %628 = OpLoad %112 
                                Uniform f32* %629 = OpAccessChain %69 %35 
                                         f32 %630 = OpLoad %629 
                                       f32_3 %631 = OpCompositeConstruct %630 %630 %630 
                                       f32_3 %632 = OpFMul %628 %631 
                                       f32_3 %633 = OpLoad %117 
                                       f32_3 %634 = OpFAdd %632 %633 
                                                      OpStore %117 %634 
                                       f32_3 %635 = OpLoad %9 
                                       f32_3 %636 = OpLoad %117 
                                       f32_3 %637 = OpFAdd %635 %636 
                                                      OpStore %9 %637 
                              Uniform f32_4* %638 = OpAccessChain %33 %155 %86 
                                       f32_4 %639 = OpLoad %638 
                                       f32_3 %640 = OpVectorShuffle %639 %639 0 1 2 
                              Uniform f32_3* %643 = OpAccessChain %69 %641 
                                       f32_3 %644 = OpLoad %643 
                                       f32_3 %645 = OpVectorShuffle %644 %644 1 1 1 
                                       f32_3 %646 = OpFMul %640 %645 
                                                      OpStore %41 %646 
                              Uniform f32_4* %647 = OpAccessChain %33 %155 %35 
                                       f32_4 %648 = OpLoad %647 
                                       f32_3 %649 = OpVectorShuffle %648 %648 0 1 2 
                              Uniform f32_3* %650 = OpAccessChain %69 %641 
                                       f32_3 %651 = OpLoad %650 
                                       f32_3 %652 = OpVectorShuffle %651 %651 0 0 0 
                                       f32_3 %653 = OpFMul %649 %652 
                                       f32_3 %654 = OpLoad %41 
                                       f32_3 %655 = OpFAdd %653 %654 
                                                      OpStore %41 %655 
                              Uniform f32_4* %656 = OpAccessChain %33 %155 %155 
                                       f32_4 %657 = OpLoad %656 
                                       f32_3 %658 = OpVectorShuffle %657 %657 0 1 2 
                                Uniform f32* %659 = OpAccessChain %69 %641 %496 
                                         f32 %660 = OpLoad %659 
                                Uniform f32* %661 = OpAccessChain %69 %641 %496 
                                         f32 %662 = OpLoad %661 
                                Uniform f32* %663 = OpAccessChain %69 %641 %496 
                                         f32 %664 = OpLoad %663 
                                       f32_3 %665 = OpCompositeConstruct %660 %662 %664 
                                       f32_3 %666 = OpFMul %658 %665 
                                       f32_3 %667 = OpLoad %41 
                                       f32_3 %668 = OpFAdd %666 %667 
                                                      OpStore %41 %668 
                                       f32_3 %669 = OpLoad %41 
                                       f32_3 %670 = OpLoad %41 
                                         f32 %671 = OpDot %669 %670 
                                                      OpStore %58 %671 
                                         f32 %672 = OpLoad %58 
                                         f32 %673 = OpExtInst %1 32 %672 
                                                      OpStore %58 %673 
                                         f32 %674 = OpLoad %58 
                                       f32_3 %675 = OpCompositeConstruct %674 %674 %674 
                                       f32_3 %676 = OpLoad %41 
                                       f32_3 %677 = OpFMul %675 %676 
                                                      OpStore %41 %677 
                                       f32_4 %678 = OpLoad %153 
                                       f32_3 %679 = OpVectorShuffle %678 %678 0 1 2 
                                       f32_3 %680 = OpLoad %41 
                                         f32 %681 = OpDot %679 %680 
                                                      OpStore %58 %681 
                                         f32 %682 = OpLoad %58 
                                         f32 %684 = OpFMul %682 %683 
                                         f32 %685 = OpFAdd %684 %683 
                                                      OpStore %58 %685 
                                         f32 %686 = OpLoad %58 
                                Uniform f32* %688 = OpAccessChain %69 %687 
                                         f32 %689 = OpLoad %688 
                                         f32 %690 = OpFNegate %689 
                                         f32 %691 = OpFAdd %686 %690 
                                                      OpStore %58 %691 
                                         f32 %692 = OpLoad %58 
                                Uniform f32* %693 = OpAccessChain %69 %600 
                                         f32 %694 = OpLoad %693 
                                         f32 %695 = OpFMul %692 %694 
                                                      OpStore %58 %695 
                                         f32 %696 = OpLoad %58 
                                         f32 %697 = OpExtInst %1 43 %696 %384 %77 
                                                      OpStore %58 %697 
                                         f32 %698 = OpLoad %58 
                                       f32_3 %699 = OpCompositeConstruct %698 %698 %698 
                              Uniform f32_4* %701 = OpAccessChain %69 %700 
                                       f32_4 %702 = OpLoad %701 
                                       f32_3 %703 = OpVectorShuffle %702 %702 0 1 2 
                                       f32_3 %704 = OpFMul %699 %703 
                                                      OpStore %117 %704 
                                       f32_3 %705 = OpLoad %117 
                                Uniform f32* %707 = OpAccessChain %69 %706 
                                         f32 %708 = OpLoad %707 
                                Uniform f32* %709 = OpAccessChain %69 %706 
                                         f32 %710 = OpLoad %709 
                                Uniform f32* %711 = OpAccessChain %69 %706 
                                         f32 %712 = OpLoad %711 
                                       f32_3 %713 = OpCompositeConstruct %708 %710 %712 
                                         f32 %714 = OpCompositeExtract %713 0 
                                         f32 %715 = OpCompositeExtract %713 1 
                                         f32 %716 = OpCompositeExtract %713 2 
                                       f32_3 %717 = OpCompositeConstruct %714 %715 %716 
                                       f32_3 %718 = OpFMul %705 %717 
                                                      OpStore %41 %718 
                                       f32_3 %719 = OpLoad %81 
                                       f32_3 %720 = OpVectorShuffle %719 %719 0 0 0 
                                       f32_3 %721 = OpLoad %41 
                                       f32_3 %722 = OpFMul %720 %721 
                                                      OpStore %81 %722 
                                       f32_3 %723 = OpLoad %81 
                                       f32_3 %725 = OpFMul %723 %724 
                                                      OpStore %81 %725 
                                       f32_3 %726 = OpLoad %41 
                                       f32_3 %729 = OpFMul %726 %728 
                                       f32_3 %730 = OpLoad %81 
                                       f32_3 %731 = OpFAdd %729 %730 
                                                      OpStore %41 %731 
                                       f32_3 %732 = OpLoad %9 
                                       f32_3 %733 = OpLoad %41 
                                       f32_3 %734 = OpFAdd %732 %733 
                                                      OpStore %9 %734 
                                       f32_3 %735 = OpLoad %9 
                                       f32_3 %736 = OpExtInst %1 40 %735 %549 
                                                      OpStore %117 %736 
                                       f32_3 %737 = OpLoad %117 
                                       f32_3 %738 = OpExtInst %1 30 %737 
                                                      OpStore %117 %738 
                                       f32_3 %739 = OpLoad %117 
                                       f32_3 %742 = OpFMul %739 %741 
                                                      OpStore %117 %742 
                                       f32_3 %743 = OpLoad %117 
                                       f32_3 %744 = OpExtInst %1 29 %743 
                                                      OpStore %117 %744 
                                       f32_3 %747 = OpLoad %117 
                                       f32_3 %748 = OpExtInst %1 31 %747 
                                       f32_4 %749 = OpLoad %746 
                                       f32_4 %750 = OpVectorShuffle %749 %748 4 5 6 3 
                                                      OpStore %746 %750 
                                 Output f32* %752 = OpAccessChain %746 %528 
                                                      OpStore %752 %77 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS_VERTEX" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec3 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = max(u_xlat9, 1.17549435e-38);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = max(u_xlat9, 1.17549435e-38);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD4.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _Expond;
	UNITY_UNIFORM vec4 _MREA_ST;
	UNITY_UNIFORM vec4 _MainTex_ST;
	UNITY_UNIFORM vec4 _Maincolor;
	UNITY_UNIFORM float _Roughness;
	UNITY_UNIFORM vec3 _rimlightdir;
	UNITY_UNIFORM vec4 _rimcolor;
	UNITY_UNIFORM float _rimhardness;
	UNITY_UNIFORM float _rimthreshold;
	UNITY_UNIFORM float _rimintensity;
	UNITY_UNIFORM float _anisotropic;
	UNITY_UNIFORM vec4 _anisocolor;
	UNITY_UNIFORM float _anisooffest;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(2) uniform mediump sampler2D _Normal;
UNITY_LOCATION(3) uniform mediump sampler2D _MREA;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
vec3 u_xlat10;
float u_xlat18;
float u_xlat24;
float u_xlat25;
float u_xlat26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat8.xyz = vs_TEXCOORD2.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat24 = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat25 = (-_anisotropic) * 0.899999976 + 1.0;
    u_xlat25 = sqrt(u_xlat25);
    u_xlat2.xy = vs_TEXCOORD0.xy * _MREA_ST.xy + _MREA_ST.zw;
    u_xlat16_2 = texture(_MREA, u_xlat2.xy).x;
    u_xlat10.x = u_xlat16_2 * u_xlat16_2;
    u_xlat16_3.x = u_xlat16_2 * 2.0 + -1.0;
    u_xlat2.x = u_xlat16_3.x + _anisooffest;
    u_xlat18 = u_xlat10.x / u_xlat25;
    u_xlat25 = u_xlat25 * u_xlat10.x;
    u_xlat10.x = u_xlat18 * u_xlat18;
    u_xlat24 = u_xlat24 / u_xlat10.x;
    u_xlat10.x = u_xlat25 * u_xlat25;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat16_5.xyz = texture(_Normal, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_MainTex, u_xlat4.xy).xyz;
    u_xlat4.xyz = u_xlat16_4.xyz * _Maincolor.xyz;
    u_xlat16_3.xyz = u_xlat4.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
    u_xlat16_6.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = u_xlat16_6.yyy * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = u_xlat16_6.xxx * vs_TEXCOORD3.xyz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat16_6.zzz * vs_TEXCOORD1.xyz + u_xlat4.xyz;
    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat4.xyz = vec3(u_xlat26) * u_xlat4.xyz;
    u_xlat5.xyz = u_xlat4.xyz * u_xlat2.xxx + vs_TEXCOORD4.xyz;
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat2.x = u_xlat2.x / u_xlat10.x;
    u_xlat24 = u_xlat24 + u_xlat2.x;
    u_xlat2.x = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    u_xlat0.y = u_xlat2.x * u_xlat2.x + u_xlat24;
    u_xlat0.xy = u_xlat0.xy * u_xlat0.xy;
    u_xlat8.x = u_xlat18 * u_xlat0.y;
    u_xlat8.x = u_xlat25 * u_xlat8.x;
    u_xlat8.x = u_xlat8.x * 3.14159274;
    u_xlat8.x = float(1.0) / u_xlat8.x;
    u_xlat8.xyz = u_xlat8.xxx * _anisocolor.xyz;
    u_xlat8.xyz = u_xlat8.xyz * _anisocolor.www;
    u_xlat25 = (-_Roughness) + 1.0;
    u_xlat16_27 = (-u_xlat25) + 1.0;
    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
    u_xlat16_27 = max(u_xlat16_27, 0.00200000009);
    u_xlat25 = u_xlat16_27 + u_xlat16_27;
    u_xlat0.x = u_xlat0.x * u_xlat25 + -0.5;
    u_xlat25 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat25 = max(u_xlat25, 9.99999975e-06);
    u_xlat25 = (-u_xlat25) + 1.0;
    u_xlat25 = max(u_xlat25, 0.0);
    u_xlat2.x = u_xlat25 * u_xlat25;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat25 = u_xlat25 * u_xlat2.x;
    u_xlat25 = u_xlat0.x * u_xlat25 + 1.0;
    u_xlat2.x = dot(u_xlat4.xyz, _MainLightPosition.xyz);
    u_xlat2.x = max(u_xlat2.x, 9.99999975e-06);
    u_xlat10.x = (-u_xlat2.x) + 1.0;
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlat18 = u_xlat10.x * u_xlat10.x;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat10.x = u_xlat10.x * u_xlat18;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + 1.0;
    u_xlat0.x = u_xlat25 * u_xlat0.x;
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat10.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
    u_xlat0.xyz = u_xlat10.xyz * _MainLightColor.xyz + u_xlat8.xyz;
    u_xlat16_6.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_6.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_6.x);
    u_xlat16_5 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_6.xyz = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;
    u_xlat4.w = 1.0;
    u_xlat16_7.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_7.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_7.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat10.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
    u_xlat24 = dot((-u_xlat1.xyz), u_xlat4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat1.xyz = u_xlat4.xyz * (-vec3(u_xlat24)) + (-u_xlat1.xyz);
    u_xlat16_6.x = (-u_xlat16_27) * 0.699999988 + 1.70000005;
    u_xlat16_27 = u_xlat16_27 * u_xlat16_6.x;
    u_xlat16_27 = u_xlat16_27 * 6.0;
    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat1.xyz, u_xlat16_27);
    u_xlat16_27 = u_xlat16_1.w + -1.0;
    u_xlat16_27 = unity_SpecCube0_HDR.w * u_xlat16_27 + 1.0;
    u_xlat16_27 = max(u_xlat16_27, 0.0);
    u_xlat16_27 = log2(u_xlat16_27);
    u_xlat16_27 = u_xlat16_27 * unity_SpecCube0_HDR.y;
    u_xlat16_27 = exp2(u_xlat16_27);
    u_xlat16_27 = u_xlat16_27 * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_1.xyz * vec3(u_xlat16_27);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
    u_xlat16_3.xyz = u_xlat10.xyz * vec3(_Expond) + u_xlat16_3.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixInvV[1].xyz * _rimlightdir.xxyz.zzz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixInvV[0].xyz * _rimlightdir.xxyz.yyy + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixInvV[2].xyz * vec3(_rimlightdir.z, _rimlightdir.z, _rimlightdir.z) + u_xlat1.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat24 = u_xlat24 * 0.5 + 0.5;
    u_xlat24 = u_xlat24 + (-_rimthreshold);
    u_xlat24 = u_xlat24 * _rimhardness;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = vec3(u_xlat24) * _rimcolor.xyz;
    u_xlat1.xyz = u_xlat16_3.xyz * vec3(vec3(_rimintensity, _rimintensity, _rimintensity));
    u_xlat2.xyz = u_xlat2.xxx * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat16_3.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(2.20000005, 2.20000005, 2.20000005);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    SV_Target0.xyz = sqrt(u_xlat16_3.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 222
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %84 %93 %95 %98 %138 %141 %148 %150 %184 %208 %213 %214 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 RelaxedPrecision 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 RelaxedPrecision 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 RelaxedPrecision 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 RelaxedPrecision 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 RelaxedPrecision 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 RelaxedPrecision 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpMemberDecorate %21 16 RelaxedPrecision 
                                                      OpMemberDecorate %21 16 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpDecorate %59 ArrayStride 59 
                                                      OpMemberDecorate %60 0 Offset 60 
                                                      OpMemberDecorate %60 1 Offset 60 
                                                      OpDecorate %60 Block 
                                                      OpDecorate %62 DescriptorSet 62 
                                                      OpDecorate %62 Binding 62 
                                                      OpMemberDecorate %82 0 BuiltIn 82 
                                                      OpMemberDecorate %82 1 BuiltIn 82 
                                                      OpMemberDecorate %82 2 BuiltIn 82 
                                                      OpDecorate %82 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 93 
                                                      OpDecorate %95 Location 95 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate vs_TEXCOORD1 Location 138 
                                                      OpDecorate vs_TEXCOORD2 Location 141 
                                                      OpDecorate vs_TEXCOORD5 Location 148 
                                                      OpDecorate %150 Location 150 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 208 
                                                      OpDecorate vs_TEXCOORD6 Location 213 
                                                      OpDecorate %214 Location 214 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %10 %16 
                                              %18 = OpTypeArray %10 %16 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypeArray %10 %19 
                                              %21 = OpTypeStruct %17 %18 %10 %10 %10 %20 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4; f32_4[2]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 0 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %10 
                                          i32 %40 = OpConstant 2 
                                          i32 %50 = OpConstant 3 
                                              %55 = OpTypePointer Private %10 
                               Private f32_4* %56 = OpVariable Private 
                                              %59 = OpTypeArray %10 %16 
                                              %60 = OpTypeStruct %7 %59 
                                              %61 = OpTypePointer Uniform %60 
           Uniform struct {f32_3; f32_4[4];}* %62 = OpVariable Uniform 
                                          u32 %80 = OpConstant 1 
                                              %81 = OpTypeArray %6 %80 
                                              %82 = OpTypeStruct %10 %6 %81 
                                              %83 = OpTypePointer Output %82 
         Output struct {f32_4; f32; f32[1];}* %84 = OpVariable Output 
                                              %89 = OpTypePointer Output %10 
                                              %91 = OpTypeVector %6 2 
                                              %92 = OpTypePointer Output %91 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                              %94 = OpTypePointer Input %91 
                                 Input f32_2* %95 = OpVariable Input 
                                              %97 = OpTypePointer Input %7 
                                 Input f32_3* %98 = OpVariable Input 
                                         u32 %104 = OpConstant 0 
                                             %105 = OpTypePointer Private %6 
                                Private f32* %119 = OpVariable Private 
                                         f32 %126 = OpConstant 3.674022E-40 
                                             %137 = OpTypePointer Output %7 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %144 = OpTypePointer Uniform %7 
                       Output f32_3* vs_TEXCOORD5 = OpVariable Output 
                                Input f32_4* %150 = OpVariable Input 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                              Private f32_3* %186 = OpVariable Private 
                                         u32 %200 = OpConstant 3 
                                             %201 = OpTypePointer Input %6 
                                             %204 = OpTypePointer Uniform %6 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                Input f32_4* %214 = OpVariable Input 
                                             %216 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %12 
                                        f32_3 %14 = OpVectorShuffle %13 %13 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_3 %30 = OpVectorShuffle %29 %29 0 1 2 
                                        f32_3 %31 = OpFMul %14 %30 
                                                      OpStore %9 %31 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %25 
                                        f32_4 %33 = OpLoad %32 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                        f32_4 %35 = OpLoad %12 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 0 0 
                                        f32_3 %37 = OpFMul %34 %36 
                                        f32_3 %38 = OpLoad %9 
                                        f32_3 %39 = OpFAdd %37 %38 
                                                      OpStore %9 %39 
                               Uniform f32_4* %41 = OpAccessChain %23 %25 %40 
                                        f32_4 %42 = OpLoad %41 
                                        f32_3 %43 = OpVectorShuffle %42 %42 0 1 2 
                                        f32_4 %44 = OpLoad %12 
                                        f32_3 %45 = OpVectorShuffle %44 %44 2 2 2 
                                        f32_3 %46 = OpFMul %43 %45 
                                        f32_3 %47 = OpLoad %9 
                                        f32_3 %48 = OpFAdd %46 %47 
                                                      OpStore %9 %48 
                                        f32_3 %49 = OpLoad %9 
                               Uniform f32_4* %51 = OpAccessChain %23 %25 %50 
                                        f32_4 %52 = OpLoad %51 
                                        f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                        f32_3 %54 = OpFAdd %49 %53 
                                                      OpStore %9 %54 
                                        f32_3 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 1 1 1 1 
                               Uniform f32_4* %63 = OpAccessChain %62 %26 %26 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFMul %58 %64 
                                                      OpStore %56 %65 
                               Uniform f32_4* %66 = OpAccessChain %62 %26 %25 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpLoad %9 
                                        f32_4 %69 = OpVectorShuffle %68 %68 0 0 0 0 
                                        f32_4 %70 = OpFMul %67 %69 
                                        f32_4 %71 = OpLoad %56 
                                        f32_4 %72 = OpFAdd %70 %71 
                                                      OpStore %56 %72 
                               Uniform f32_4* %73 = OpAccessChain %62 %26 %40 
                                        f32_4 %74 = OpLoad %73 
                                        f32_3 %75 = OpLoad %9 
                                        f32_4 %76 = OpVectorShuffle %75 %75 2 2 2 2 
                                        f32_4 %77 = OpFMul %74 %76 
                                        f32_4 %78 = OpLoad %56 
                                        f32_4 %79 = OpFAdd %77 %78 
                                                      OpStore %56 %79 
                                        f32_4 %85 = OpLoad %56 
                               Uniform f32_4* %86 = OpAccessChain %62 %26 %50 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpFAdd %85 %87 
                                Output f32_4* %90 = OpAccessChain %84 %25 
                                                      OpStore %90 %88 
                                        f32_2 %96 = OpLoad %95 
                                                      OpStore vs_TEXCOORD0 %96 
                                        f32_3 %99 = OpLoad %98 
                              Uniform f32_4* %100 = OpAccessChain %23 %26 %25 
                                       f32_4 %101 = OpLoad %100 
                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 2 
                                         f32 %103 = OpDot %99 %102 
                                Private f32* %106 = OpAccessChain %56 %104 
                                                      OpStore %106 %103 
                                       f32_3 %107 = OpLoad %98 
                              Uniform f32_4* %108 = OpAccessChain %23 %26 %26 
                                       f32_4 %109 = OpLoad %108 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                         f32 %111 = OpDot %107 %110 
                                Private f32* %112 = OpAccessChain %56 %80 
                                                      OpStore %112 %111 
                                       f32_3 %113 = OpLoad %98 
                              Uniform f32_4* %114 = OpAccessChain %23 %26 %40 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                         f32 %117 = OpDot %113 %116 
                                Private f32* %118 = OpAccessChain %56 %19 
                                                      OpStore %118 %117 
                                       f32_4 %120 = OpLoad %56 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_4 %122 = OpLoad %56 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                         f32 %124 = OpDot %121 %123 
                                                      OpStore %119 %124 
                                         f32 %125 = OpLoad %119 
                                         f32 %127 = OpExtInst %1 40 %125 %126 
                                                      OpStore %119 %127 
                                         f32 %128 = OpLoad %119 
                                         f32 %129 = OpExtInst %1 32 %128 
                                                      OpStore %119 %129 
                                         f32 %130 = OpLoad %119 
                                       f32_3 %131 = OpCompositeConstruct %130 %130 %130 
                                       f32_4 %132 = OpLoad %56 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_3 %134 = OpFMul %131 %133 
                                       f32_4 %135 = OpLoad %56 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 6 3 
                                                      OpStore %56 %136 
                                       f32_4 %139 = OpLoad %56 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                                      OpStore vs_TEXCOORD1 %140 
                                       f32_3 %142 = OpLoad %9 
                                       f32_3 %143 = OpFNegate %142 
                              Uniform f32_3* %145 = OpAccessChain %62 %25 
                                       f32_3 %146 = OpLoad %145 
                                       f32_3 %147 = OpFAdd %143 %146 
                                                      OpStore vs_TEXCOORD2 %147 
                                       f32_3 %149 = OpLoad %9 
                                                      OpStore vs_TEXCOORD5 %149 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 1 1 1 
                              Uniform f32_4* %153 = OpAccessChain %23 %25 %26 
                                       f32_4 %154 = OpLoad %153 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFMul %152 %155 
                                                      OpStore %9 %156 
                              Uniform f32_4* %157 = OpAccessChain %23 %25 %25 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_4 %160 = OpLoad %150 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 0 0 
                                       f32_3 %162 = OpFMul %159 %161 
                                       f32_3 %163 = OpLoad %9 
                                       f32_3 %164 = OpFAdd %162 %163 
                                                      OpStore %9 %164 
                              Uniform f32_4* %165 = OpAccessChain %23 %25 %40 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_4 %168 = OpLoad %150 
                                       f32_3 %169 = OpVectorShuffle %168 %168 2 2 2 
                                       f32_3 %170 = OpFMul %167 %169 
                                       f32_3 %171 = OpLoad %9 
                                       f32_3 %172 = OpFAdd %170 %171 
                                                      OpStore %9 %172 
                                       f32_3 %173 = OpLoad %9 
                                       f32_3 %174 = OpLoad %9 
                                         f32 %175 = OpDot %173 %174 
                                                      OpStore %119 %175 
                                         f32 %176 = OpLoad %119 
                                         f32 %177 = OpExtInst %1 40 %176 %126 
                                                      OpStore %119 %177 
                                         f32 %178 = OpLoad %119 
                                         f32 %179 = OpExtInst %1 32 %178 
                                                      OpStore %119 %179 
                                         f32 %180 = OpLoad %119 
                                       f32_3 %181 = OpCompositeConstruct %180 %180 %180 
                                       f32_3 %182 = OpLoad %9 
                                       f32_3 %183 = OpFMul %181 %182 
                                                      OpStore %9 %183 
                                       f32_3 %185 = OpLoad %9 
                                                      OpStore vs_TEXCOORD3 %185 
                                       f32_3 %187 = OpLoad %9 
                                       f32_3 %188 = OpVectorShuffle %187 %187 1 2 0 
                                       f32_4 %189 = OpLoad %56 
                                       f32_3 %190 = OpVectorShuffle %189 %189 2 0 1 
                                       f32_3 %191 = OpFMul %188 %190 
                                                      OpStore %186 %191 
                                       f32_4 %192 = OpLoad %56 
                                       f32_3 %193 = OpVectorShuffle %192 %192 1 2 0 
                                       f32_3 %194 = OpLoad %9 
                                       f32_3 %195 = OpVectorShuffle %194 %194 2 0 1 
                                       f32_3 %196 = OpFMul %193 %195 
                                       f32_3 %197 = OpLoad %186 
                                       f32_3 %198 = OpFNegate %197 
                                       f32_3 %199 = OpFAdd %196 %198 
                                                      OpStore %9 %199 
                                  Input f32* %202 = OpAccessChain %150 %200 
                                         f32 %203 = OpLoad %202 
                                Uniform f32* %205 = OpAccessChain %23 %50 %200 
                                         f32 %206 = OpLoad %205 
                                         f32 %207 = OpFMul %203 %206 
                                                      OpStore %119 %207 
                                         f32 %209 = OpLoad %119 
                                       f32_3 %210 = OpCompositeConstruct %209 %209 %209 
                                       f32_3 %211 = OpLoad %9 
                                       f32_3 %212 = OpFMul %210 %211 
                                                      OpStore vs_TEXCOORD4 %212 
                                       f32_4 %215 = OpLoad %214 
                                                      OpStore vs_TEXCOORD6 %215 
                                 Output f32* %217 = OpAccessChain %84 %25 %80 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpFNegate %218 
                                 Output f32* %220 = OpAccessChain %84 %25 %80 
                                                      OpStore %220 %219 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 754
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %59 %84 %207 %223 %746 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %30 ArrayStride 30 
                                                      OpMemberDecorate %31 0 Offset 31 
                                                      OpMemberDecorate %31 1 RelaxedPrecision 
                                                      OpMemberDecorate %31 1 Offset 31 
                                                      OpMemberDecorate %31 2 Offset 31 
                                                      OpDecorate %31 Block 
                                                      OpDecorate %33 DescriptorSet 33 
                                                      OpDecorate %33 Binding 33 
                                                      OpDecorate vs_TEXCOORD3 Location 59 
                                                      OpMemberDecorate %67 0 Offset 67 
                                                      OpMemberDecorate %67 1 Offset 67 
                                                      OpMemberDecorate %67 2 Offset 67 
                                                      OpMemberDecorate %67 3 Offset 67 
                                                      OpMemberDecorate %67 4 Offset 67 
                                                      OpMemberDecorate %67 5 Offset 67 
                                                      OpMemberDecorate %67 6 Offset 67 
                                                      OpMemberDecorate %67 7 Offset 67 
                                                      OpMemberDecorate %67 8 Offset 67 
                                                      OpMemberDecorate %67 9 Offset 67 
                                                      OpMemberDecorate %67 10 Offset 67 
                                                      OpMemberDecorate %67 11 Offset 67 
                                                      OpMemberDecorate %67 12 Offset 67 
                                                      OpDecorate %67 Block 
                                                      OpDecorate %69 DescriptorSet 69 
                                                      OpDecorate %69 Binding 69 
                                                      OpDecorate vs_TEXCOORD0 Location 84 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %100 DescriptorSet 100 
                                                      OpDecorate %100 Binding 100 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %104 DescriptorSet 104 
                                                      OpDecorate %104 Binding 104 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %120 RelaxedPrecision 
                                                      OpDecorate %122 RelaxedPrecision 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %167 DescriptorSet 167 
                                                      OpDecorate %167 Binding 167 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %169 DescriptorSet 169 
                                                      OpDecorate %169 Binding 169 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %177 DescriptorSet 177 
                                                      OpDecorate %177 Binding 177 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %179 DescriptorSet 179 
                                                      OpDecorate %179 Binding 179 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 207 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 223 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %483 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                                      OpDecorate %487 RelaxedPrecision 
                                                      OpDecorate %493 RelaxedPrecision 
                                                      OpDecorate %494 ArrayStride 494 
                                                      OpDecorate %495 ArrayStride 495 
                                                      OpDecorate %497 ArrayStride 497 
                                                      OpMemberDecorate %498 0 Offset 498 
                                                      OpMemberDecorate %498 1 Offset 498 
                                                      OpMemberDecorate %498 2 Offset 498 
                                                      OpMemberDecorate %498 3 RelaxedPrecision 
                                                      OpMemberDecorate %498 3 Offset 498 
                                                      OpMemberDecorate %498 4 RelaxedPrecision 
                                                      OpMemberDecorate %498 4 Offset 498 
                                                      OpMemberDecorate %498 5 RelaxedPrecision 
                                                      OpMemberDecorate %498 5 Offset 498 
                                                      OpMemberDecorate %498 6 Offset 498 
                                                      OpMemberDecorate %498 7 RelaxedPrecision 
                                                      OpMemberDecorate %498 7 Offset 498 
                                                      OpMemberDecorate %498 8 Offset 498 
                                                      OpMemberDecorate %498 9 Offset 498 
                                                      OpMemberDecorate %498 10 RelaxedPrecision 
                                                      OpMemberDecorate %498 10 Offset 498 
                                                      OpMemberDecorate %498 11 RelaxedPrecision 
                                                      OpMemberDecorate %498 11 Offset 498 
                                                      OpMemberDecorate %498 12 RelaxedPrecision 
                                                      OpMemberDecorate %498 12 Offset 498 
                                                      OpMemberDecorate %498 13 RelaxedPrecision 
                                                      OpMemberDecorate %498 13 Offset 498 
                                                      OpMemberDecorate %498 14 RelaxedPrecision 
                                                      OpMemberDecorate %498 14 Offset 498 
                                                      OpMemberDecorate %498 15 RelaxedPrecision 
                                                      OpMemberDecorate %498 15 Offset 498 
                                                      OpMemberDecorate %498 16 RelaxedPrecision 
                                                      OpMemberDecorate %498 16 Offset 498 
                                                      OpDecorate %498 Block 
                                                      OpDecorate %500 DescriptorSet 500 
                                                      OpDecorate %500 Binding 500 
                                                      OpDecorate %503 RelaxedPrecision 
                                                      OpDecorate %504 RelaxedPrecision 
                                                      OpDecorate %505 RelaxedPrecision 
                                                      OpDecorate %509 RelaxedPrecision 
                                                      OpDecorate %510 RelaxedPrecision 
                                                      OpDecorate %511 RelaxedPrecision 
                                                      OpDecorate %515 RelaxedPrecision 
                                                      OpDecorate %516 RelaxedPrecision 
                                                      OpDecorate %517 RelaxedPrecision 
                                                      OpDecorate %521 RelaxedPrecision 
                                                      OpDecorate %522 RelaxedPrecision 
                                                      OpDecorate %523 RelaxedPrecision 
                                                      OpDecorate %524 RelaxedPrecision 
                                                      OpDecorate %525 RelaxedPrecision 
                                                      OpDecorate %526 RelaxedPrecision 
                                                      OpDecorate %527 RelaxedPrecision 
                                                      OpDecorate %531 RelaxedPrecision 
                                                      OpDecorate %536 RelaxedPrecision 
                                                      OpDecorate %541 RelaxedPrecision 
                                                      OpDecorate %545 RelaxedPrecision 
                                                      OpDecorate %546 RelaxedPrecision 
                                                      OpDecorate %547 RelaxedPrecision 
                                                      OpDecorate %548 RelaxedPrecision 
                                                      OpDecorate %550 RelaxedPrecision 
                                                      OpDecorate %551 RelaxedPrecision 
                                                      OpDecorate %552 RelaxedPrecision 
                                                      OpDecorate %553 RelaxedPrecision 
                                                      OpDecorate %571 RelaxedPrecision 
                                                      OpDecorate %572 RelaxedPrecision 
                                                      OpDecorate %574 RelaxedPrecision 
                                                      OpDecorate %576 RelaxedPrecision 
                                                      OpDecorate %578 RelaxedPrecision 
                                                      OpDecorate %580 RelaxedPrecision 
                                                      OpDecorate %581 RelaxedPrecision 
                                                      OpDecorate %582 RelaxedPrecision 
                                                      OpDecorate %584 RelaxedPrecision 
                                                      OpDecorate %585 RelaxedPrecision 
                                                      OpDecorate %588 RelaxedPrecision 
                                                      OpDecorate %588 DescriptorSet 588 
                                                      OpDecorate %588 Binding 588 
                                                      OpDecorate %589 RelaxedPrecision 
                                                      OpDecorate %590 RelaxedPrecision 
                                                      OpDecorate %590 DescriptorSet 590 
                                                      OpDecorate %590 Binding 590 
                                                      OpDecorate %591 RelaxedPrecision 
                                                      OpDecorate %595 RelaxedPrecision 
                                                      OpDecorate %598 RelaxedPrecision 
                                                      OpDecorate %599 RelaxedPrecision 
                                                      OpDecorate %602 RelaxedPrecision 
                                                      OpDecorate %603 RelaxedPrecision 
                                                      OpDecorate %604 RelaxedPrecision 
                                                      OpDecorate %605 RelaxedPrecision 
                                                      OpDecorate %606 RelaxedPrecision 
                                                      OpDecorate %607 RelaxedPrecision 
                                                      OpDecorate %608 RelaxedPrecision 
                                                      OpDecorate %609 RelaxedPrecision 
                                                      OpDecorate %610 RelaxedPrecision 
                                                      OpDecorate %612 RelaxedPrecision 
                                                      OpDecorate %613 RelaxedPrecision 
                                                      OpDecorate %614 RelaxedPrecision 
                                                      OpDecorate %615 RelaxedPrecision 
                                                      OpDecorate %616 RelaxedPrecision 
                                                      OpDecorate %618 RelaxedPrecision 
                                                      OpDecorate %619 RelaxedPrecision 
                                                      OpDecorate %620 RelaxedPrecision 
                                                      OpDecorate %621 RelaxedPrecision 
                                                      OpDecorate %622 RelaxedPrecision 
                                                      OpDecorate %623 RelaxedPrecision 
                                                      OpDecorate %624 RelaxedPrecision 
                                                      OpDecorate %625 RelaxedPrecision 
                                                      OpDecorate %626 RelaxedPrecision 
                                                      OpDecorate %627 RelaxedPrecision 
                                                      OpDecorate %633 RelaxedPrecision 
                                                      OpDecorate %636 RelaxedPrecision 
                                                      OpDecorate %705 RelaxedPrecision 
                                                      OpDecorate %713 RelaxedPrecision 
                                                      OpDecorate %714 RelaxedPrecision 
                                                      OpDecorate %715 RelaxedPrecision 
                                                      OpDecorate %716 RelaxedPrecision 
                                                      OpDecorate %717 RelaxedPrecision 
                                                      OpDecorate %718 RelaxedPrecision 
                                                      OpDecorate %737 RelaxedPrecision 
                                                      OpDecorate %738 RelaxedPrecision 
                                                      OpDecorate %739 RelaxedPrecision 
                                                      OpDecorate %742 RelaxedPrecision 
                                                      OpDecorate %743 RelaxedPrecision 
                                                      OpDecorate %744 RelaxedPrecision 
                                                      OpDecorate %746 RelaxedPrecision 
                                                      OpDecorate %746 Location 746 
                                                      OpDecorate %747 RelaxedPrecision 
                                                      OpDecorate %748 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 0 
                                              %17 = OpTypePointer Private %6 
                               Private f32_3* %23 = OpVariable Private 
                                              %28 = OpTypeVector %6 4 
                                          u32 %29 = OpConstant 4 
                                              %30 = OpTypeArray %28 %29 
                                              %31 = OpTypeStruct %28 %28 %30 
                                              %32 = OpTypePointer Uniform %31 
    Uniform struct {f32_4; f32_4; f32_4[4];}* %33 = OpVariable Uniform 
                                              %34 = OpTypeInt 32 1 
                                          i32 %35 = OpConstant 0 
                                              %36 = OpTypePointer Uniform %28 
                               Private f32_3* %41 = OpVariable Private 
                                 Private f32* %58 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                 Private f32* %66 = OpVariable Private 
                                              %67 = OpTypeStruct %6 %28 %28 %28 %6 %7 %28 %6 %6 %6 %6 %28 %6 
                                              %68 = OpTypePointer Uniform %67 
Uniform struct {f32; f32_4; f32_4; f32_4; f32; f32_3; f32_4; f32; f32; f32; f32; f32_4; f32;}* %69 = OpVariable Uniform 
                                          i32 %70 = OpConstant 10 
                                              %71 = OpTypePointer Uniform %6 
                                          f32 %75 = OpConstant 3.674022E-40 
                                          f32 %77 = OpConstant 3.674022E-40 
                               Private f32_3* %81 = OpVariable Private 
                                              %82 = OpTypeVector %6 2 
                                              %83 = OpTypePointer Input %82 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                          i32 %86 = OpConstant 1 
                                 Private f32* %97 = OpVariable Private 
                                              %98 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %99 = OpTypePointer UniformConstant %98 
        UniformConstant read_only Texture2D* %100 = OpVariable UniformConstant 
                                             %102 = OpTypeSampler 
                                             %103 = OpTypePointer UniformConstant %102 
                    UniformConstant sampler* %104 = OpVariable UniformConstant 
                                             %106 = OpTypeSampledImage %98 
                              Private f32_3* %112 = OpVariable Private 
                              Private f32_3* %117 = OpVariable Private 
                                         f32 %119 = OpConstant 3.674022E-40 
                                         f32 %121 = OpConstant 3.674022E-40 
                                         i32 %126 = OpConstant 12 
                                Private f32* %131 = OpVariable Private 
                                             %152 = OpTypePointer Private %28 
                              Private f32_4* %153 = OpVariable Private 
                                         i32 %155 = OpConstant 2 
                              Private f32_3* %166 = OpVariable Private 
        UniformConstant read_only Texture2D* %167 = OpVariable UniformConstant 
                    UniformConstant sampler* %169 = OpVariable UniformConstant 
                              Private f32_3* %176 = OpVariable Private 
        UniformConstant read_only Texture2D* %177 = OpVariable UniformConstant 
                    UniformConstant sampler* %179 = OpVariable UniformConstant 
                                         i32 %187 = OpConstant 3 
                                         f32 %196 = OpConstant 3.674022E-40 
                                       f32_3 %197 = OpConstantComposite %196 %196 %196 
                              Private f32_3* %199 = OpVariable Private 
                                       f32_3 %201 = OpConstantComposite %119 %119 %119 
                                       f32_3 %203 = OpConstantComposite %121 %121 %121 
                        Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                Private f32* %231 = OpVariable Private 
                              Private f32_3* %246 = OpVariable Private 
                                         f32 %299 = OpConstant 3.674022E-40 
                                         u32 %309 = OpConstant 1 
                                         f32 %330 = OpConstant 3.674022E-40 
                                         i32 %339 = OpConstant 11 
                                         i32 %349 = OpConstant 4 
                                Private f32* %354 = OpVariable Private 
                                         f32 %362 = OpConstant 3.674022E-40 
                                         f32 %371 = OpConstant 3.674022E-40 
                                         f32 %384 = OpConstant 3.674022E-40 
                              Private f32_4* %487 = OpVariable Private 
                              Private f32_3* %493 = OpVariable Private 
                                             %494 = OpTypeArray %28 %29 
                                             %495 = OpTypeArray %28 %29 
                                         u32 %496 = OpConstant 2 
                                             %497 = OpTypeArray %28 %496 
                                             %498 = OpTypeStruct %494 %495 %28 %28 %28 %497 %28 %28 %28 %28 %28 %28 %28 %28 %28 %28 %28 
                                             %499 = OpTypePointer Uniform %498 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4; f32_4[2]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %500 = OpVariable Uniform 
                                         i32 %501 = OpConstant 13 
                                         i32 %507 = OpConstant 14 
                                         i32 %513 = OpConstant 15 
                                         i32 %519 = OpConstant 16 
                                         u32 %528 = OpConstant 3 
                                       f32_3 %549 = OpConstantComposite %384 %384 %384 
                                         f32 %573 = OpConstant 3.674022E-40 
                                         f32 %575 = OpConstant 3.674022E-40 
                                         f32 %583 = OpConstant 3.674022E-40 
                              Private f32_4* %585 = OpVariable Private 
                                             %586 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %587 = OpTypePointer UniformConstant %586 
      UniformConstant read_only TextureCube* %588 = OpVariable UniformConstant 
                    UniformConstant sampler* %590 = OpVariable UniformConstant 
                                             %592 = OpTypeSampledImage %586 
                                         i32 %600 = OpConstant 7 
                                         i32 %641 = OpConstant 5 
                                             %642 = OpTypePointer Uniform %7 
                                         f32 %683 = OpConstant 3.674022E-40 
                                         i32 %687 = OpConstant 8 
                                         i32 %700 = OpConstant 6 
                                         i32 %706 = OpConstant 9 
                                       f32_3 %724 = OpConstantComposite %573 %573 %573 
                                         f32 %727 = OpConstant 3.674022E-40 
                                       f32_3 %728 = OpConstantComposite %727 %727 %727 
                                         f32 %740 = OpConstant 3.674022E-40 
                                       f32_3 %741 = OpConstantComposite %740 %740 %740 
                                             %745 = OpTypePointer Output %28 
                               Output f32_4* %746 = OpVariable Output 
                                             %751 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                                          f32 %14 = OpDot %12 %13 
                                 Private f32* %18 = OpAccessChain %9 %16 
                                                      OpStore %18 %14 
                                 Private f32* %19 = OpAccessChain %9 %16 
                                          f32 %20 = OpLoad %19 
                                          f32 %21 = OpExtInst %1 32 %20 
                                 Private f32* %22 = OpAccessChain %9 %16 
                                                      OpStore %22 %21 
                                        f32_3 %24 = OpLoad vs_TEXCOORD2 
                                        f32_3 %25 = OpLoad %9 
                                        f32_3 %26 = OpVectorShuffle %25 %25 0 0 0 
                                        f32_3 %27 = OpFMul %24 %26 
                               Uniform f32_4* %37 = OpAccessChain %33 %35 
                                        f32_4 %38 = OpLoad %37 
                                        f32_3 %39 = OpVectorShuffle %38 %38 0 1 2 
                                        f32_3 %40 = OpFAdd %27 %39 
                                                      OpStore %23 %40 
                                        f32_3 %42 = OpLoad %9 
                                        f32_3 %43 = OpVectorShuffle %42 %42 0 0 0 
                                        f32_3 %44 = OpLoad vs_TEXCOORD2 
                                        f32_3 %45 = OpFMul %43 %44 
                                                      OpStore %41 %45 
                                        f32_3 %46 = OpLoad %23 
                                        f32_3 %47 = OpLoad %23 
                                          f32 %48 = OpDot %46 %47 
                                 Private f32* %49 = OpAccessChain %9 %16 
                                                      OpStore %49 %48 
                                 Private f32* %50 = OpAccessChain %9 %16 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpExtInst %1 32 %51 
                                 Private f32* %53 = OpAccessChain %9 %16 
                                                      OpStore %53 %52 
                                        f32_3 %54 = OpLoad %9 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 0 0 
                                        f32_3 %56 = OpLoad %23 
                                        f32_3 %57 = OpFMul %55 %56 
                                                      OpStore %9 %57 
                                        f32_3 %60 = OpLoad vs_TEXCOORD3 
                                        f32_3 %61 = OpLoad %9 
                                          f32 %62 = OpDot %60 %61 
                                                      OpStore %58 %62 
                                          f32 %63 = OpLoad %58 
                                          f32 %64 = OpLoad %58 
                                          f32 %65 = OpFMul %63 %64 
                                                      OpStore %58 %65 
                                 Uniform f32* %72 = OpAccessChain %69 %70 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFNegate %73 
                                          f32 %76 = OpFMul %74 %75 
                                          f32 %78 = OpFAdd %76 %77 
                                                      OpStore %66 %78 
                                          f32 %79 = OpLoad %66 
                                          f32 %80 = OpExtInst %1 31 %79 
                                                      OpStore %66 %80 
                                        f32_2 %85 = OpLoad vs_TEXCOORD0 
                               Uniform f32_4* %87 = OpAccessChain %69 %86 
                                        f32_4 %88 = OpLoad %87 
                                        f32_2 %89 = OpVectorShuffle %88 %88 0 1 
                                        f32_2 %90 = OpFMul %85 %89 
                               Uniform f32_4* %91 = OpAccessChain %69 %86 
                                        f32_4 %92 = OpLoad %91 
                                        f32_2 %93 = OpVectorShuffle %92 %92 2 3 
                                        f32_2 %94 = OpFAdd %90 %93 
                                        f32_3 %95 = OpLoad %81 
                                        f32_3 %96 = OpVectorShuffle %95 %94 3 4 2 
                                                      OpStore %81 %96 
                         read_only Texture2D %101 = OpLoad %100 
                                     sampler %105 = OpLoad %104 
                  read_only Texture2DSampled %107 = OpSampledImage %101 %105 
                                       f32_3 %108 = OpLoad %81 
                                       f32_2 %109 = OpVectorShuffle %108 %108 0 1 
                                       f32_4 %110 = OpImageSampleImplicitLod %107 %109 
                                         f32 %111 = OpCompositeExtract %110 0 
                                                      OpStore %97 %111 
                                         f32 %113 = OpLoad %97 
                                         f32 %114 = OpLoad %97 
                                         f32 %115 = OpFMul %113 %114 
                                Private f32* %116 = OpAccessChain %112 %16 
                                                      OpStore %116 %115 
                                         f32 %118 = OpLoad %97 
                                         f32 %120 = OpFMul %118 %119 
                                         f32 %122 = OpFAdd %120 %121 
                                Private f32* %123 = OpAccessChain %117 %16 
                                                      OpStore %123 %122 
                                Private f32* %124 = OpAccessChain %117 %16 
                                         f32 %125 = OpLoad %124 
                                Uniform f32* %127 = OpAccessChain %69 %126 
                                         f32 %128 = OpLoad %127 
                                         f32 %129 = OpFAdd %125 %128 
                                Private f32* %130 = OpAccessChain %81 %16 
                                                      OpStore %130 %129 
                                Private f32* %132 = OpAccessChain %112 %16 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpLoad %66 
                                         f32 %135 = OpFDiv %133 %134 
                                                      OpStore %131 %135 
                                         f32 %136 = OpLoad %66 
                                Private f32* %137 = OpAccessChain %112 %16 
                                         f32 %138 = OpLoad %137 
                                         f32 %139 = OpFMul %136 %138 
                                                      OpStore %66 %139 
                                         f32 %140 = OpLoad %131 
                                         f32 %141 = OpLoad %131 
                                         f32 %142 = OpFMul %140 %141 
                                Private f32* %143 = OpAccessChain %112 %16 
                                                      OpStore %143 %142 
                                         f32 %144 = OpLoad %58 
                                Private f32* %145 = OpAccessChain %112 %16 
                                         f32 %146 = OpLoad %145 
                                         f32 %147 = OpFDiv %144 %146 
                                                      OpStore %58 %147 
                                         f32 %148 = OpLoad %66 
                                         f32 %149 = OpLoad %66 
                                         f32 %150 = OpFMul %148 %149 
                                Private f32* %151 = OpAccessChain %112 %16 
                                                      OpStore %151 %150 
                                       f32_2 %154 = OpLoad vs_TEXCOORD0 
                              Uniform f32_4* %156 = OpAccessChain %69 %155 
                                       f32_4 %157 = OpLoad %156 
                                       f32_2 %158 = OpVectorShuffle %157 %157 0 1 
                                       f32_2 %159 = OpFMul %154 %158 
                              Uniform f32_4* %160 = OpAccessChain %69 %155 
                                       f32_4 %161 = OpLoad %160 
                                       f32_2 %162 = OpVectorShuffle %161 %161 2 3 
                                       f32_2 %163 = OpFAdd %159 %162 
                                       f32_4 %164 = OpLoad %153 
                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 2 3 
                                                      OpStore %153 %165 
                         read_only Texture2D %168 = OpLoad %167 
                                     sampler %170 = OpLoad %169 
                  read_only Texture2DSampled %171 = OpSampledImage %168 %170 
                                       f32_4 %172 = OpLoad %153 
                                       f32_2 %173 = OpVectorShuffle %172 %172 0 1 
                                       f32_4 %174 = OpImageSampleImplicitLod %171 %173 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                                                      OpStore %166 %175 
                         read_only Texture2D %178 = OpLoad %177 
                                     sampler %180 = OpLoad %179 
                  read_only Texture2DSampled %181 = OpSampledImage %178 %180 
                                       f32_4 %182 = OpLoad %153 
                                       f32_2 %183 = OpVectorShuffle %182 %182 0 1 
                                       f32_4 %184 = OpImageSampleImplicitLod %181 %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                                      OpStore %176 %185 
                                       f32_3 %186 = OpLoad %176 
                              Uniform f32_4* %188 = OpAccessChain %69 %187 
                                       f32_4 %189 = OpLoad %188 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_3 %191 = OpFMul %186 %190 
                                       f32_4 %192 = OpLoad %153 
                                       f32_4 %193 = OpVectorShuffle %192 %191 4 5 6 3 
                                                      OpStore %153 %193 
                                       f32_4 %194 = OpLoad %153 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_3 %198 = OpFMul %195 %197 
                                                      OpStore %117 %198 
                                       f32_3 %200 = OpLoad %166 
                                       f32_3 %202 = OpFMul %200 %201 
                                       f32_3 %204 = OpFAdd %202 %203 
                                                      OpStore %199 %204 
                                       f32_3 %205 = OpLoad %199 
                                       f32_3 %206 = OpVectorShuffle %205 %205 1 1 1 
                                       f32_3 %208 = OpLoad vs_TEXCOORD4 
                                       f32_3 %209 = OpFMul %206 %208 
                                       f32_4 %210 = OpLoad %153 
                                       f32_4 %211 = OpVectorShuffle %210 %209 4 5 6 3 
                                                      OpStore %153 %211 
                                       f32_3 %212 = OpLoad %199 
                                       f32_3 %213 = OpVectorShuffle %212 %212 0 0 0 
                                       f32_3 %214 = OpLoad vs_TEXCOORD3 
                                       f32_3 %215 = OpFMul %213 %214 
                                       f32_4 %216 = OpLoad %153 
                                       f32_3 %217 = OpVectorShuffle %216 %216 0 1 2 
                                       f32_3 %218 = OpFAdd %215 %217 
                                       f32_4 %219 = OpLoad %153 
                                       f32_4 %220 = OpVectorShuffle %219 %218 4 5 6 3 
                                                      OpStore %153 %220 
                                       f32_3 %221 = OpLoad %199 
                                       f32_3 %222 = OpVectorShuffle %221 %221 2 2 2 
                                       f32_3 %224 = OpLoad vs_TEXCOORD1 
                                       f32_3 %225 = OpFMul %222 %224 
                                       f32_4 %226 = OpLoad %153 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_3 %228 = OpFAdd %225 %227 
                                       f32_4 %229 = OpLoad %153 
                                       f32_4 %230 = OpVectorShuffle %229 %228 4 5 6 3 
                                                      OpStore %153 %230 
                                       f32_4 %232 = OpLoad %153 
                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
                                       f32_4 %234 = OpLoad %153 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
                                         f32 %236 = OpDot %233 %235 
                                                      OpStore %231 %236 
                                         f32 %237 = OpLoad %231 
                                         f32 %238 = OpExtInst %1 32 %237 
                                                      OpStore %231 %238 
                                         f32 %239 = OpLoad %231 
                                       f32_3 %240 = OpCompositeConstruct %239 %239 %239 
                                       f32_4 %241 = OpLoad %153 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 1 2 
                                       f32_3 %243 = OpFMul %240 %242 
                                       f32_4 %244 = OpLoad %153 
                                       f32_4 %245 = OpVectorShuffle %244 %243 4 5 6 3 
                                                      OpStore %153 %245 
                                       f32_4 %247 = OpLoad %153 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                       f32_3 %249 = OpLoad %81 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 0 0 
                                       f32_3 %251 = OpFMul %248 %250 
                                       f32_3 %252 = OpLoad vs_TEXCOORD4 
                                       f32_3 %253 = OpFAdd %251 %252 
                                                      OpStore %246 %253 
                                       f32_3 %254 = OpLoad %246 
                                       f32_3 %255 = OpLoad %246 
                                         f32 %256 = OpDot %254 %255 
                                Private f32* %257 = OpAccessChain %81 %16 
                                                      OpStore %257 %256 
                                Private f32* %258 = OpAccessChain %81 %16 
                                         f32 %259 = OpLoad %258 
                                         f32 %260 = OpExtInst %1 32 %259 
                                Private f32* %261 = OpAccessChain %81 %16 
                                                      OpStore %261 %260 
                                       f32_3 %262 = OpLoad %81 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 0 0 
                                       f32_3 %264 = OpLoad %246 
                                       f32_3 %265 = OpFMul %263 %264 
                                                      OpStore %246 %265 
                                       f32_3 %266 = OpLoad %246 
                                       f32_3 %267 = OpLoad %9 
                                         f32 %268 = OpDot %266 %267 
                                Private f32* %269 = OpAccessChain %81 %16 
                                                      OpStore %269 %268 
                                Private f32* %270 = OpAccessChain %81 %16 
                                         f32 %271 = OpLoad %270 
                                Private f32* %272 = OpAccessChain %81 %16 
                                         f32 %273 = OpLoad %272 
                                         f32 %274 = OpFMul %271 %273 
                                Private f32* %275 = OpAccessChain %81 %16 
                                                      OpStore %275 %274 
                                Private f32* %276 = OpAccessChain %81 %16 
                                         f32 %277 = OpLoad %276 
                                Private f32* %278 = OpAccessChain %112 %16 
                                         f32 %279 = OpLoad %278 
                                         f32 %280 = OpFDiv %277 %279 
                                Private f32* %281 = OpAccessChain %81 %16 
                                                      OpStore %281 %280 
                                         f32 %282 = OpLoad %58 
                                Private f32* %283 = OpAccessChain %81 %16 
                                         f32 %284 = OpLoad %283 
                                         f32 %285 = OpFAdd %282 %284 
                                                      OpStore %58 %285 
                                       f32_4 %286 = OpLoad %153 
                                       f32_3 %287 = OpVectorShuffle %286 %286 0 1 2 
                                       f32_3 %288 = OpLoad %9 
                                         f32 %289 = OpDot %287 %288 
                                Private f32* %290 = OpAccessChain %81 %16 
                                                      OpStore %290 %289 
                              Uniform f32_4* %291 = OpAccessChain %33 %35 
                                       f32_4 %292 = OpLoad %291 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
                                       f32_3 %294 = OpLoad %9 
                                         f32 %295 = OpDot %293 %294 
                                Private f32* %296 = OpAccessChain %9 %16 
                                                      OpStore %296 %295 
                                Private f32* %297 = OpAccessChain %9 %16 
                                         f32 %298 = OpLoad %297 
                                         f32 %300 = OpExtInst %1 40 %298 %299 
                                Private f32* %301 = OpAccessChain %9 %16 
                                                      OpStore %301 %300 
                                Private f32* %302 = OpAccessChain %81 %16 
                                         f32 %303 = OpLoad %302 
                                Private f32* %304 = OpAccessChain %81 %16 
                                         f32 %305 = OpLoad %304 
                                         f32 %306 = OpFMul %303 %305 
                                         f32 %307 = OpLoad %58 
                                         f32 %308 = OpFAdd %306 %307 
                                Private f32* %310 = OpAccessChain %9 %309 
                                                      OpStore %310 %308 
                                       f32_3 %311 = OpLoad %9 
                                       f32_2 %312 = OpVectorShuffle %311 %311 0 1 
                                       f32_3 %313 = OpLoad %9 
                                       f32_2 %314 = OpVectorShuffle %313 %313 0 1 
                                       f32_2 %315 = OpFMul %312 %314 
                                       f32_3 %316 = OpLoad %9 
                                       f32_3 %317 = OpVectorShuffle %316 %315 3 4 2 
                                                      OpStore %9 %317 
                                         f32 %318 = OpLoad %131 
                                Private f32* %319 = OpAccessChain %9 %309 
                                         f32 %320 = OpLoad %319 
                                         f32 %321 = OpFMul %318 %320 
                                Private f32* %322 = OpAccessChain %23 %16 
                                                      OpStore %322 %321 
                                         f32 %323 = OpLoad %66 
                                Private f32* %324 = OpAccessChain %23 %16 
                                         f32 %325 = OpLoad %324 
                                         f32 %326 = OpFMul %323 %325 
                                Private f32* %327 = OpAccessChain %23 %16 
                                                      OpStore %327 %326 
                                Private f32* %328 = OpAccessChain %23 %16 
                                         f32 %329 = OpLoad %328 
                                         f32 %331 = OpFMul %329 %330 
                                Private f32* %332 = OpAccessChain %23 %16 
                                                      OpStore %332 %331 
                                Private f32* %333 = OpAccessChain %23 %16 
                                         f32 %334 = OpLoad %333 
                                         f32 %335 = OpFDiv %77 %334 
                                Private f32* %336 = OpAccessChain %23 %16 
                                                      OpStore %336 %335 
                                       f32_3 %337 = OpLoad %23 
                                       f32_3 %338 = OpVectorShuffle %337 %337 0 0 0 
                              Uniform f32_4* %340 = OpAccessChain %69 %339 
                                       f32_4 %341 = OpLoad %340 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                                       f32_3 %343 = OpFMul %338 %342 
                                                      OpStore %23 %343 
                                       f32_3 %344 = OpLoad %23 
                              Uniform f32_4* %345 = OpAccessChain %69 %339 
                                       f32_4 %346 = OpLoad %345 
                                       f32_3 %347 = OpVectorShuffle %346 %346 3 3 3 
                                       f32_3 %348 = OpFMul %344 %347 
                                                      OpStore %23 %348 
                                Uniform f32* %350 = OpAccessChain %69 %349 
                                         f32 %351 = OpLoad %350 
                                         f32 %352 = OpFNegate %351 
                                         f32 %353 = OpFAdd %352 %77 
                                                      OpStore %66 %353 
                                         f32 %355 = OpLoad %66 
                                         f32 %356 = OpFNegate %355 
                                         f32 %357 = OpFAdd %356 %77 
                                                      OpStore %354 %357 
                                         f32 %358 = OpLoad %354 
                                         f32 %359 = OpLoad %354 
                                         f32 %360 = OpFMul %358 %359 
                                                      OpStore %354 %360 
                                         f32 %361 = OpLoad %354 
                                         f32 %363 = OpExtInst %1 40 %361 %362 
                                                      OpStore %354 %363 
                                         f32 %364 = OpLoad %354 
                                         f32 %365 = OpLoad %354 
                                         f32 %366 = OpFAdd %364 %365 
                                                      OpStore %66 %366 
                                Private f32* %367 = OpAccessChain %9 %16 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpLoad %66 
                                         f32 %370 = OpFMul %368 %369 
                                         f32 %372 = OpFAdd %370 %371 
                                Private f32* %373 = OpAccessChain %9 %16 
                                                      OpStore %373 %372 
                                       f32_4 %374 = OpLoad %153 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                                       f32_3 %376 = OpLoad %41 
                                         f32 %377 = OpDot %375 %376 
                                                      OpStore %66 %377 
                                         f32 %378 = OpLoad %66 
                                         f32 %379 = OpExtInst %1 40 %378 %299 
                                                      OpStore %66 %379 
                                         f32 %380 = OpLoad %66 
                                         f32 %381 = OpFNegate %380 
                                         f32 %382 = OpFAdd %381 %77 
                                                      OpStore %66 %382 
                                         f32 %383 = OpLoad %66 
                                         f32 %385 = OpExtInst %1 40 %383 %384 
                                                      OpStore %66 %385 
                                         f32 %386 = OpLoad %66 
                                         f32 %387 = OpLoad %66 
                                         f32 %388 = OpFMul %386 %387 
                                Private f32* %389 = OpAccessChain %81 %16 
                                                      OpStore %389 %388 
                                Private f32* %390 = OpAccessChain %81 %16 
                                         f32 %391 = OpLoad %390 
                                Private f32* %392 = OpAccessChain %81 %16 
                                         f32 %393 = OpLoad %392 
                                         f32 %394 = OpFMul %391 %393 
                                Private f32* %395 = OpAccessChain %81 %16 
                                                      OpStore %395 %394 
                                         f32 %396 = OpLoad %66 
                                Private f32* %397 = OpAccessChain %81 %16 
                                         f32 %398 = OpLoad %397 
                                         f32 %399 = OpFMul %396 %398 
                                                      OpStore %66 %399 
                                Private f32* %400 = OpAccessChain %9 %16 
                                         f32 %401 = OpLoad %400 
                                         f32 %402 = OpLoad %66 
                                         f32 %403 = OpFMul %401 %402 
                                         f32 %404 = OpFAdd %403 %77 
                                                      OpStore %66 %404 
                                       f32_4 %405 = OpLoad %153 
                                       f32_3 %406 = OpVectorShuffle %405 %405 0 1 2 
                              Uniform f32_4* %407 = OpAccessChain %33 %35 
                                       f32_4 %408 = OpLoad %407 
                                       f32_3 %409 = OpVectorShuffle %408 %408 0 1 2 
                                         f32 %410 = OpDot %406 %409 
                                Private f32* %411 = OpAccessChain %81 %16 
                                                      OpStore %411 %410 
                                Private f32* %412 = OpAccessChain %81 %16 
                                         f32 %413 = OpLoad %412 
                                         f32 %414 = OpExtInst %1 40 %413 %299 
                                Private f32* %415 = OpAccessChain %81 %16 
                                                      OpStore %415 %414 
                                Private f32* %416 = OpAccessChain %81 %16 
                                         f32 %417 = OpLoad %416 
                                         f32 %418 = OpFNegate %417 
                                         f32 %419 = OpFAdd %418 %77 
                                Private f32* %420 = OpAccessChain %112 %16 
                                                      OpStore %420 %419 
                                Private f32* %421 = OpAccessChain %112 %16 
                                         f32 %422 = OpLoad %421 
                                         f32 %423 = OpExtInst %1 40 %422 %384 
                                Private f32* %424 = OpAccessChain %112 %16 
                                                      OpStore %424 %423 
                                Private f32* %425 = OpAccessChain %112 %16 
                                         f32 %426 = OpLoad %425 
                                Private f32* %427 = OpAccessChain %112 %16 
                                         f32 %428 = OpLoad %427 
                                         f32 %429 = OpFMul %426 %428 
                                                      OpStore %131 %429 
                                         f32 %430 = OpLoad %131 
                                         f32 %431 = OpLoad %131 
                                         f32 %432 = OpFMul %430 %431 
                                                      OpStore %131 %432 
                                Private f32* %433 = OpAccessChain %112 %16 
                                         f32 %434 = OpLoad %433 
                                         f32 %435 = OpLoad %131 
                                         f32 %436 = OpFMul %434 %435 
                                Private f32* %437 = OpAccessChain %112 %16 
                                                      OpStore %437 %436 
                                Private f32* %438 = OpAccessChain %9 %16 
                                         f32 %439 = OpLoad %438 
                                Private f32* %440 = OpAccessChain %112 %16 
                                         f32 %441 = OpLoad %440 
                                         f32 %442 = OpFMul %439 %441 
                                         f32 %443 = OpFAdd %442 %77 
                                Private f32* %444 = OpAccessChain %9 %16 
                                                      OpStore %444 %443 
                                         f32 %445 = OpLoad %66 
                                Private f32* %446 = OpAccessChain %9 %16 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpFMul %445 %447 
                                Private f32* %449 = OpAccessChain %9 %16 
                                                      OpStore %449 %448 
                                Private f32* %450 = OpAccessChain %81 %16 
                                         f32 %451 = OpLoad %450 
                                Private f32* %452 = OpAccessChain %9 %16 
                                         f32 %453 = OpLoad %452 
                                         f32 %454 = OpFMul %451 %453 
                                Private f32* %455 = OpAccessChain %9 %16 
                                                      OpStore %455 %454 
                                Private f32* %456 = OpAccessChain %9 %16 
                                         f32 %457 = OpLoad %456 
                                         f32 %458 = OpExtInst %1 37 %457 %77 
                                Private f32* %459 = OpAccessChain %9 %16 
                                                      OpStore %459 %458 
                                       f32_3 %460 = OpLoad %9 
                                       f32_3 %461 = OpVectorShuffle %460 %460 0 0 0 
                                       f32_3 %462 = OpLoad %117 
                                       f32_3 %463 = OpFMul %461 %462 
                                                      OpStore %112 %463 
                                       f32_3 %464 = OpLoad %112 
                              Uniform f32_4* %465 = OpAccessChain %33 %86 
                                       f32_4 %466 = OpLoad %465 
                                       f32_3 %467 = OpVectorShuffle %466 %466 0 1 2 
                                       f32_3 %468 = OpFMul %464 %467 
                                       f32_3 %469 = OpLoad %23 
                                       f32_3 %470 = OpFAdd %468 %469 
                                                      OpStore %9 %470 
                                Private f32* %471 = OpAccessChain %153 %309 
                                         f32 %472 = OpLoad %471 
                                Private f32* %473 = OpAccessChain %153 %309 
                                         f32 %474 = OpLoad %473 
                                         f32 %475 = OpFMul %472 %474 
                                Private f32* %476 = OpAccessChain %199 %16 
                                                      OpStore %476 %475 
                                Private f32* %477 = OpAccessChain %153 %16 
                                         f32 %478 = OpLoad %477 
                                Private f32* %479 = OpAccessChain %153 %16 
                                         f32 %480 = OpLoad %479 
                                         f32 %481 = OpFMul %478 %480 
                                Private f32* %482 = OpAccessChain %199 %16 
                                         f32 %483 = OpLoad %482 
                                         f32 %484 = OpFNegate %483 
                                         f32 %485 = OpFAdd %481 %484 
                                Private f32* %486 = OpAccessChain %199 %16 
                                                      OpStore %486 %485 
                                       f32_4 %488 = OpLoad %153 
                                       f32_4 %489 = OpVectorShuffle %488 %488 1 2 2 0 
                                       f32_4 %490 = OpLoad %153 
                                       f32_4 %491 = OpVectorShuffle %490 %490 0 1 2 2 
                                       f32_4 %492 = OpFMul %489 %491 
                                                      OpStore %487 %492 
                              Uniform f32_4* %502 = OpAccessChain %500 %501 
                                       f32_4 %503 = OpLoad %502 
                                       f32_4 %504 = OpLoad %487 
                                         f32 %505 = OpDot %503 %504 
                                Private f32* %506 = OpAccessChain %493 %16 
                                                      OpStore %506 %505 
                              Uniform f32_4* %508 = OpAccessChain %500 %507 
                                       f32_4 %509 = OpLoad %508 
                                       f32_4 %510 = OpLoad %487 
                                         f32 %511 = OpDot %509 %510 
                                Private f32* %512 = OpAccessChain %493 %309 
                                                      OpStore %512 %511 
                              Uniform f32_4* %514 = OpAccessChain %500 %513 
                                       f32_4 %515 = OpLoad %514 
                                       f32_4 %516 = OpLoad %487 
                                         f32 %517 = OpDot %515 %516 
                                Private f32* %518 = OpAccessChain %493 %496 
                                                      OpStore %518 %517 
                              Uniform f32_4* %520 = OpAccessChain %500 %519 
                                       f32_4 %521 = OpLoad %520 
                                       f32_3 %522 = OpVectorShuffle %521 %521 0 1 2 
                                       f32_3 %523 = OpLoad %199 
                                       f32_3 %524 = OpVectorShuffle %523 %523 0 0 0 
                                       f32_3 %525 = OpFMul %522 %524 
                                       f32_3 %526 = OpLoad %493 
                                       f32_3 %527 = OpFAdd %525 %526 
                                                      OpStore %199 %527 
                                Private f32* %529 = OpAccessChain %153 %528 
                                                      OpStore %529 %77 
                              Uniform f32_4* %530 = OpAccessChain %500 %70 
                                       f32_4 %531 = OpLoad %530 
                                       f32_4 %532 = OpLoad %153 
                                         f32 %533 = OpDot %531 %532 
                                Private f32* %534 = OpAccessChain %493 %16 
                                                      OpStore %534 %533 
                              Uniform f32_4* %535 = OpAccessChain %500 %339 
                                       f32_4 %536 = OpLoad %535 
                                       f32_4 %537 = OpLoad %153 
                                         f32 %538 = OpDot %536 %537 
                                Private f32* %539 = OpAccessChain %493 %309 
                                                      OpStore %539 %538 
                              Uniform f32_4* %540 = OpAccessChain %500 %126 
                                       f32_4 %541 = OpLoad %540 
                                       f32_4 %542 = OpLoad %153 
                                         f32 %543 = OpDot %541 %542 
                                Private f32* %544 = OpAccessChain %493 %496 
                                                      OpStore %544 %543 
                                       f32_3 %545 = OpLoad %199 
                                       f32_3 %546 = OpLoad %493 
                                       f32_3 %547 = OpFAdd %545 %546 
                                                      OpStore %199 %547 
                                       f32_3 %548 = OpLoad %199 
                                       f32_3 %550 = OpExtInst %1 40 %548 %549 
                                                      OpStore %199 %550 
                                       f32_3 %551 = OpLoad %117 
                                       f32_3 %552 = OpLoad %199 
                                       f32_3 %553 = OpFMul %551 %552 
                                                      OpStore %112 %553 
                                       f32_3 %554 = OpLoad %41 
                                       f32_3 %555 = OpFNegate %554 
                                       f32_4 %556 = OpLoad %153 
                                       f32_3 %557 = OpVectorShuffle %556 %556 0 1 2 
                                         f32 %558 = OpDot %555 %557 
                                                      OpStore %58 %558 
                                         f32 %559 = OpLoad %58 
                                         f32 %560 = OpLoad %58 
                                         f32 %561 = OpFAdd %559 %560 
                                                      OpStore %58 %561 
                                       f32_4 %562 = OpLoad %153 
                                       f32_3 %563 = OpVectorShuffle %562 %562 0 1 2 
                                         f32 %564 = OpLoad %58 
                                       f32_3 %565 = OpCompositeConstruct %564 %564 %564 
                                       f32_3 %566 = OpFNegate %565 
                                       f32_3 %567 = OpFMul %563 %566 
                                       f32_3 %568 = OpLoad %41 
                                       f32_3 %569 = OpFNegate %568 
                                       f32_3 %570 = OpFAdd %567 %569 
                                                      OpStore %41 %570 
                                         f32 %571 = OpLoad %354 
                                         f32 %572 = OpFNegate %571 
                                         f32 %574 = OpFMul %572 %573 
                                         f32 %576 = OpFAdd %574 %575 
                                Private f32* %577 = OpAccessChain %199 %16 
                                                      OpStore %577 %576 
                                         f32 %578 = OpLoad %354 
                                Private f32* %579 = OpAccessChain %199 %16 
                                         f32 %580 = OpLoad %579 
                                         f32 %581 = OpFMul %578 %580 
                                                      OpStore %354 %581 
                                         f32 %582 = OpLoad %354 
                                         f32 %584 = OpFMul %582 %583 
                                                      OpStore %354 %584 
                       read_only TextureCube %589 = OpLoad %588 
                                     sampler %591 = OpLoad %590 
                read_only TextureCubeSampled %593 = OpSampledImage %589 %591 
                                       f32_3 %594 = OpLoad %41 
                                         f32 %595 = OpLoad %354 
                                       f32_4 %596 = OpImageSampleExplicitLod %593 %594 Lod %28 
                                                      OpStore %585 %596 
                                Private f32* %597 = OpAccessChain %585 %528 
                                         f32 %598 = OpLoad %597 
                                         f32 %599 = OpFAdd %598 %121 
                                                      OpStore %354 %599 
                                Uniform f32* %601 = OpAccessChain %500 %600 %528 
                                         f32 %602 = OpLoad %601 
                                         f32 %603 = OpLoad %354 
                                         f32 %604 = OpFMul %602 %603 
                                         f32 %605 = OpFAdd %604 %77 
                                                      OpStore %354 %605 
                                         f32 %606 = OpLoad %354 
                                         f32 %607 = OpExtInst %1 40 %606 %384 
                                                      OpStore %354 %607 
                                         f32 %608 = OpLoad %354 
                                         f32 %609 = OpExtInst %1 30 %608 
                                                      OpStore %354 %609 
                                         f32 %610 = OpLoad %354 
                                Uniform f32* %611 = OpAccessChain %500 %600 %309 
                                         f32 %612 = OpLoad %611 
                                         f32 %613 = OpFMul %610 %612 
                                                      OpStore %354 %613 
                                         f32 %614 = OpLoad %354 
                                         f32 %615 = OpExtInst %1 29 %614 
                                                      OpStore %354 %615 
                                         f32 %616 = OpLoad %354 
                                Uniform f32* %617 = OpAccessChain %500 %600 %16 
                                         f32 %618 = OpLoad %617 
                                         f32 %619 = OpFMul %616 %618 
                                                      OpStore %354 %619 
                                       f32_4 %620 = OpLoad %585 
                                       f32_3 %621 = OpVectorShuffle %620 %620 0 1 2 
                                         f32 %622 = OpLoad %354 
                                       f32_3 %623 = OpCompositeConstruct %622 %622 %622 
                                       f32_3 %624 = OpFMul %621 %623 
                                                      OpStore %199 %624 
                                       f32_3 %625 = OpLoad %117 
                                       f32_3 %626 = OpLoad %199 
                                       f32_3 %627 = OpFMul %625 %626 
                                                      OpStore %117 %627 
                                       f32_3 %628 = OpLoad %112 
                                Uniform f32* %629 = OpAccessChain %69 %35 
                                         f32 %630 = OpLoad %629 
                                       f32_3 %631 = OpCompositeConstruct %630 %630 %630 
                                       f32_3 %632 = OpFMul %628 %631 
                                       f32_3 %633 = OpLoad %117 
                                       f32_3 %634 = OpFAdd %632 %633 
                                                      OpStore %117 %634 
                                       f32_3 %635 = OpLoad %9 
                                       f32_3 %636 = OpLoad %117 
                                       f32_3 %637 = OpFAdd %635 %636 
                                                      OpStore %9 %637 
                              Uniform f32_4* %638 = OpAccessChain %33 %155 %86 
                                       f32_4 %639 = OpLoad %638 
                                       f32_3 %640 = OpVectorShuffle %639 %639 0 1 2 
                              Uniform f32_3* %643 = OpAccessChain %69 %641 
                                       f32_3 %644 = OpLoad %643 
                                       f32_3 %645 = OpVectorShuffle %644 %644 1 1 1 
                                       f32_3 %646 = OpFMul %640 %645 
                                                      OpStore %41 %646 
                              Uniform f32_4* %647 = OpAccessChain %33 %155 %35 
                                       f32_4 %648 = OpLoad %647 
                                       f32_3 %649 = OpVectorShuffle %648 %648 0 1 2 
                              Uniform f32_3* %650 = OpAccessChain %69 %641 
                                       f32_3 %651 = OpLoad %650 
                                       f32_3 %652 = OpVectorShuffle %651 %651 0 0 0 
                                       f32_3 %653 = OpFMul %649 %652 
                                       f32_3 %654 = OpLoad %41 
                                       f32_3 %655 = OpFAdd %653 %654 
                                                      OpStore %41 %655 
                              Uniform f32_4* %656 = OpAccessChain %33 %155 %155 
                                       f32_4 %657 = OpLoad %656 
                                       f32_3 %658 = OpVectorShuffle %657 %657 0 1 2 
                                Uniform f32* %659 = OpAccessChain %69 %641 %496 
                                         f32 %660 = OpLoad %659 
                                Uniform f32* %661 = OpAccessChain %69 %641 %496 
                                         f32 %662 = OpLoad %661 
                                Uniform f32* %663 = OpAccessChain %69 %641 %496 
                                         f32 %664 = OpLoad %663 
                                       f32_3 %665 = OpCompositeConstruct %660 %662 %664 
                                       f32_3 %666 = OpFMul %658 %665 
                                       f32_3 %667 = OpLoad %41 
                                       f32_3 %668 = OpFAdd %666 %667 
                                                      OpStore %41 %668 
                                       f32_3 %669 = OpLoad %41 
                                       f32_3 %670 = OpLoad %41 
                                         f32 %671 = OpDot %669 %670 
                                                      OpStore %58 %671 
                                         f32 %672 = OpLoad %58 
                                         f32 %673 = OpExtInst %1 32 %672 
                                                      OpStore %58 %673 
                                         f32 %674 = OpLoad %58 
                                       f32_3 %675 = OpCompositeConstruct %674 %674 %674 
                                       f32_3 %676 = OpLoad %41 
                                       f32_3 %677 = OpFMul %675 %676 
                                                      OpStore %41 %677 
                                       f32_4 %678 = OpLoad %153 
                                       f32_3 %679 = OpVectorShuffle %678 %678 0 1 2 
                                       f32_3 %680 = OpLoad %41 
                                         f32 %681 = OpDot %679 %680 
                                                      OpStore %58 %681 
                                         f32 %682 = OpLoad %58 
                                         f32 %684 = OpFMul %682 %683 
                                         f32 %685 = OpFAdd %684 %683 
                                                      OpStore %58 %685 
                                         f32 %686 = OpLoad %58 
                                Uniform f32* %688 = OpAccessChain %69 %687 
                                         f32 %689 = OpLoad %688 
                                         f32 %690 = OpFNegate %689 
                                         f32 %691 = OpFAdd %686 %690 
                                                      OpStore %58 %691 
                                         f32 %692 = OpLoad %58 
                                Uniform f32* %693 = OpAccessChain %69 %600 
                                         f32 %694 = OpLoad %693 
                                         f32 %695 = OpFMul %692 %694 
                                                      OpStore %58 %695 
                                         f32 %696 = OpLoad %58 
                                         f32 %697 = OpExtInst %1 43 %696 %384 %77 
                                                      OpStore %58 %697 
                                         f32 %698 = OpLoad %58 
                                       f32_3 %699 = OpCompositeConstruct %698 %698 %698 
                              Uniform f32_4* %701 = OpAccessChain %69 %700 
                                       f32_4 %702 = OpLoad %701 
                                       f32_3 %703 = OpVectorShuffle %702 %702 0 1 2 
                                       f32_3 %704 = OpFMul %699 %703 
                                                      OpStore %117 %704 
                                       f32_3 %705 = OpLoad %117 
                                Uniform f32* %707 = OpAccessChain %69 %706 
                                         f32 %708 = OpLoad %707 
                                Uniform f32* %709 = OpAccessChain %69 %706 
                                         f32 %710 = OpLoad %709 
                                Uniform f32* %711 = OpAccessChain %69 %706 
                                         f32 %712 = OpLoad %711 
                                       f32_3 %713 = OpCompositeConstruct %708 %710 %712 
                                         f32 %714 = OpCompositeExtract %713 0 
                                         f32 %715 = OpCompositeExtract %713 1 
                                         f32 %716 = OpCompositeExtract %713 2 
                                       f32_3 %717 = OpCompositeConstruct %714 %715 %716 
                                       f32_3 %718 = OpFMul %705 %717 
                                                      OpStore %41 %718 
                                       f32_3 %719 = OpLoad %81 
                                       f32_3 %720 = OpVectorShuffle %719 %719 0 0 0 
                                       f32_3 %721 = OpLoad %41 
                                       f32_3 %722 = OpFMul %720 %721 
                                                      OpStore %81 %722 
                                       f32_3 %723 = OpLoad %81 
                                       f32_3 %725 = OpFMul %723 %724 
                                                      OpStore %81 %725 
                                       f32_3 %726 = OpLoad %41 
                                       f32_3 %729 = OpFMul %726 %728 
                                       f32_3 %730 = OpLoad %81 
                                       f32_3 %731 = OpFAdd %729 %730 
                                                      OpStore %41 %731 
                                       f32_3 %732 = OpLoad %9 
                                       f32_3 %733 = OpLoad %41 
                                       f32_3 %734 = OpFAdd %732 %733 
                                                      OpStore %9 %734 
                                       f32_3 %735 = OpLoad %9 
                                       f32_3 %736 = OpExtInst %1 40 %735 %549 
                                                      OpStore %117 %736 
                                       f32_3 %737 = OpLoad %117 
                                       f32_3 %738 = OpExtInst %1 30 %737 
                                                      OpStore %117 %738 
                                       f32_3 %739 = OpLoad %117 
                                       f32_3 %742 = OpFMul %739 %741 
                                                      OpStore %117 %742 
                                       f32_3 %743 = OpLoad %117 
                                       f32_3 %744 = OpExtInst %1 29 %743 
                                                      OpStore %117 %744 
                                       f32_3 %747 = OpLoad %117 
                                       f32_3 %748 = OpExtInst %1 31 %747 
                                       f32_4 %749 = OpLoad %746 
                                       f32_4 %750 = OpVectorShuffle %749 %748 4 5 6 3 
                                                      OpStore %746 %750 
                                 Output f32* %752 = OpAccessChain %746 %528 
                                                      OpStore %752 %77 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec3 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = max(u_xlat9, 1.17549435e-38);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = max(u_xlat9, 1.17549435e-38);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD4.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _Expond;
	UNITY_UNIFORM vec4 _MREA_ST;
	UNITY_UNIFORM vec4 _MainTex_ST;
	UNITY_UNIFORM vec4 _Maincolor;
	UNITY_UNIFORM float _Roughness;
	UNITY_UNIFORM vec3 _rimlightdir;
	UNITY_UNIFORM vec4 _rimcolor;
	UNITY_UNIFORM float _rimhardness;
	UNITY_UNIFORM float _rimthreshold;
	UNITY_UNIFORM float _rimintensity;
	UNITY_UNIFORM float _anisotropic;
	UNITY_UNIFORM vec4 _anisocolor;
	UNITY_UNIFORM float _anisooffest;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(2) uniform mediump sampler2D _Normal;
UNITY_LOCATION(3) uniform mediump sampler2D _MREA;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
vec3 u_xlat10;
float u_xlat18;
float u_xlat24;
float u_xlat25;
float u_xlat26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat8.xyz = vs_TEXCOORD2.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat24 = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat25 = (-_anisotropic) * 0.899999976 + 1.0;
    u_xlat25 = sqrt(u_xlat25);
    u_xlat2.xy = vs_TEXCOORD0.xy * _MREA_ST.xy + _MREA_ST.zw;
    u_xlat16_2 = texture(_MREA, u_xlat2.xy).x;
    u_xlat10.x = u_xlat16_2 * u_xlat16_2;
    u_xlat16_3.x = u_xlat16_2 * 2.0 + -1.0;
    u_xlat2.x = u_xlat16_3.x + _anisooffest;
    u_xlat18 = u_xlat10.x / u_xlat25;
    u_xlat25 = u_xlat25 * u_xlat10.x;
    u_xlat10.x = u_xlat18 * u_xlat18;
    u_xlat24 = u_xlat24 / u_xlat10.x;
    u_xlat10.x = u_xlat25 * u_xlat25;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat16_5.xyz = texture(_Normal, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_MainTex, u_xlat4.xy).xyz;
    u_xlat4.xyz = u_xlat16_4.xyz * _Maincolor.xyz;
    u_xlat16_3.xyz = u_xlat4.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
    u_xlat16_6.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = u_xlat16_6.yyy * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = u_xlat16_6.xxx * vs_TEXCOORD3.xyz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat16_6.zzz * vs_TEXCOORD1.xyz + u_xlat4.xyz;
    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat4.xyz = vec3(u_xlat26) * u_xlat4.xyz;
    u_xlat5.xyz = u_xlat4.xyz * u_xlat2.xxx + vs_TEXCOORD4.xyz;
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat2.x = u_xlat2.x / u_xlat10.x;
    u_xlat24 = u_xlat24 + u_xlat2.x;
    u_xlat2.x = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    u_xlat0.y = u_xlat2.x * u_xlat2.x + u_xlat24;
    u_xlat0.xy = u_xlat0.xy * u_xlat0.xy;
    u_xlat8.x = u_xlat18 * u_xlat0.y;
    u_xlat8.x = u_xlat25 * u_xlat8.x;
    u_xlat8.x = u_xlat8.x * 3.14159274;
    u_xlat8.x = float(1.0) / u_xlat8.x;
    u_xlat8.xyz = u_xlat8.xxx * _anisocolor.xyz;
    u_xlat8.xyz = u_xlat8.xyz * _anisocolor.www;
    u_xlat25 = (-_Roughness) + 1.0;
    u_xlat16_27 = (-u_xlat25) + 1.0;
    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
    u_xlat16_27 = max(u_xlat16_27, 0.00200000009);
    u_xlat25 = u_xlat16_27 + u_xlat16_27;
    u_xlat0.x = u_xlat0.x * u_xlat25 + -0.5;
    u_xlat25 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat25 = max(u_xlat25, 9.99999975e-06);
    u_xlat25 = (-u_xlat25) + 1.0;
    u_xlat25 = max(u_xlat25, 0.0);
    u_xlat2.x = u_xlat25 * u_xlat25;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat25 = u_xlat25 * u_xlat2.x;
    u_xlat25 = u_xlat0.x * u_xlat25 + 1.0;
    u_xlat2.x = dot(u_xlat4.xyz, _MainLightPosition.xyz);
    u_xlat2.x = max(u_xlat2.x, 9.99999975e-06);
    u_xlat10.x = (-u_xlat2.x) + 1.0;
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlat18 = u_xlat10.x * u_xlat10.x;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat10.x = u_xlat10.x * u_xlat18;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + 1.0;
    u_xlat0.x = u_xlat25 * u_xlat0.x;
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat10.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
    u_xlat0.xyz = u_xlat10.xyz * _MainLightColor.xyz + u_xlat8.xyz;
    u_xlat16_6.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_6.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_6.x);
    u_xlat16_5 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_6.xyz = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;
    u_xlat4.w = 1.0;
    u_xlat16_7.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_7.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_7.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat10.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
    u_xlat24 = dot((-u_xlat1.xyz), u_xlat4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat1.xyz = u_xlat4.xyz * (-vec3(u_xlat24)) + (-u_xlat1.xyz);
    u_xlat16_6.x = (-u_xlat16_27) * 0.699999988 + 1.70000005;
    u_xlat16_27 = u_xlat16_27 * u_xlat16_6.x;
    u_xlat16_27 = u_xlat16_27 * 6.0;
    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat1.xyz, u_xlat16_27);
    u_xlat16_27 = u_xlat16_1.w + -1.0;
    u_xlat16_27 = unity_SpecCube0_HDR.w * u_xlat16_27 + 1.0;
    u_xlat16_27 = max(u_xlat16_27, 0.0);
    u_xlat16_27 = log2(u_xlat16_27);
    u_xlat16_27 = u_xlat16_27 * unity_SpecCube0_HDR.y;
    u_xlat16_27 = exp2(u_xlat16_27);
    u_xlat16_27 = u_xlat16_27 * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_1.xyz * vec3(u_xlat16_27);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
    u_xlat16_3.xyz = u_xlat10.xyz * vec3(_Expond) + u_xlat16_3.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixInvV[1].xyz * _rimlightdir.xxyz.zzz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixInvV[0].xyz * _rimlightdir.xxyz.yyy + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixInvV[2].xyz * vec3(_rimlightdir.z, _rimlightdir.z, _rimlightdir.z) + u_xlat1.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat24 = u_xlat24 * 0.5 + 0.5;
    u_xlat24 = u_xlat24 + (-_rimthreshold);
    u_xlat24 = u_xlat24 * _rimhardness;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = vec3(u_xlat24) * _rimcolor.xyz;
    u_xlat1.xyz = u_xlat16_3.xyz * vec3(vec3(_rimintensity, _rimintensity, _rimintensity));
    u_xlat2.xyz = u_xlat2.xxx * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat16_3.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(2.20000005, 2.20000005, 2.20000005);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    SV_Target0.xyz = sqrt(u_xlat16_3.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "_ADDITIONAL_LIGHTS_VERTEX" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 222
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %84 %93 %95 %98 %138 %141 %148 %150 %184 %208 %213 %214 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 RelaxedPrecision 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 RelaxedPrecision 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 RelaxedPrecision 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 RelaxedPrecision 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 RelaxedPrecision 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 RelaxedPrecision 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpMemberDecorate %21 16 RelaxedPrecision 
                                                      OpMemberDecorate %21 16 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpDecorate %59 ArrayStride 59 
                                                      OpMemberDecorate %60 0 Offset 60 
                                                      OpMemberDecorate %60 1 Offset 60 
                                                      OpDecorate %60 Block 
                                                      OpDecorate %62 DescriptorSet 62 
                                                      OpDecorate %62 Binding 62 
                                                      OpMemberDecorate %82 0 BuiltIn 82 
                                                      OpMemberDecorate %82 1 BuiltIn 82 
                                                      OpMemberDecorate %82 2 BuiltIn 82 
                                                      OpDecorate %82 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 93 
                                                      OpDecorate %95 Location 95 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate vs_TEXCOORD1 Location 138 
                                                      OpDecorate vs_TEXCOORD2 Location 141 
                                                      OpDecorate vs_TEXCOORD5 Location 148 
                                                      OpDecorate %150 Location 150 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 208 
                                                      OpDecorate vs_TEXCOORD6 Location 213 
                                                      OpDecorate %214 Location 214 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %10 %16 
                                              %18 = OpTypeArray %10 %16 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypeArray %10 %19 
                                              %21 = OpTypeStruct %17 %18 %10 %10 %10 %20 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4; f32_4[2]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 0 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %10 
                                          i32 %40 = OpConstant 2 
                                          i32 %50 = OpConstant 3 
                                              %55 = OpTypePointer Private %10 
                               Private f32_4* %56 = OpVariable Private 
                                              %59 = OpTypeArray %10 %16 
                                              %60 = OpTypeStruct %7 %59 
                                              %61 = OpTypePointer Uniform %60 
           Uniform struct {f32_3; f32_4[4];}* %62 = OpVariable Uniform 
                                          u32 %80 = OpConstant 1 
                                              %81 = OpTypeArray %6 %80 
                                              %82 = OpTypeStruct %10 %6 %81 
                                              %83 = OpTypePointer Output %82 
         Output struct {f32_4; f32; f32[1];}* %84 = OpVariable Output 
                                              %89 = OpTypePointer Output %10 
                                              %91 = OpTypeVector %6 2 
                                              %92 = OpTypePointer Output %91 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                              %94 = OpTypePointer Input %91 
                                 Input f32_2* %95 = OpVariable Input 
                                              %97 = OpTypePointer Input %7 
                                 Input f32_3* %98 = OpVariable Input 
                                         u32 %104 = OpConstant 0 
                                             %105 = OpTypePointer Private %6 
                                Private f32* %119 = OpVariable Private 
                                         f32 %126 = OpConstant 3.674022E-40 
                                             %137 = OpTypePointer Output %7 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %144 = OpTypePointer Uniform %7 
                       Output f32_3* vs_TEXCOORD5 = OpVariable Output 
                                Input f32_4* %150 = OpVariable Input 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                              Private f32_3* %186 = OpVariable Private 
                                         u32 %200 = OpConstant 3 
                                             %201 = OpTypePointer Input %6 
                                             %204 = OpTypePointer Uniform %6 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                Input f32_4* %214 = OpVariable Input 
                                             %216 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %12 
                                        f32_3 %14 = OpVectorShuffle %13 %13 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_3 %30 = OpVectorShuffle %29 %29 0 1 2 
                                        f32_3 %31 = OpFMul %14 %30 
                                                      OpStore %9 %31 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %25 
                                        f32_4 %33 = OpLoad %32 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                        f32_4 %35 = OpLoad %12 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 0 0 
                                        f32_3 %37 = OpFMul %34 %36 
                                        f32_3 %38 = OpLoad %9 
                                        f32_3 %39 = OpFAdd %37 %38 
                                                      OpStore %9 %39 
                               Uniform f32_4* %41 = OpAccessChain %23 %25 %40 
                                        f32_4 %42 = OpLoad %41 
                                        f32_3 %43 = OpVectorShuffle %42 %42 0 1 2 
                                        f32_4 %44 = OpLoad %12 
                                        f32_3 %45 = OpVectorShuffle %44 %44 2 2 2 
                                        f32_3 %46 = OpFMul %43 %45 
                                        f32_3 %47 = OpLoad %9 
                                        f32_3 %48 = OpFAdd %46 %47 
                                                      OpStore %9 %48 
                                        f32_3 %49 = OpLoad %9 
                               Uniform f32_4* %51 = OpAccessChain %23 %25 %50 
                                        f32_4 %52 = OpLoad %51 
                                        f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                        f32_3 %54 = OpFAdd %49 %53 
                                                      OpStore %9 %54 
                                        f32_3 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 1 1 1 1 
                               Uniform f32_4* %63 = OpAccessChain %62 %26 %26 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFMul %58 %64 
                                                      OpStore %56 %65 
                               Uniform f32_4* %66 = OpAccessChain %62 %26 %25 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpLoad %9 
                                        f32_4 %69 = OpVectorShuffle %68 %68 0 0 0 0 
                                        f32_4 %70 = OpFMul %67 %69 
                                        f32_4 %71 = OpLoad %56 
                                        f32_4 %72 = OpFAdd %70 %71 
                                                      OpStore %56 %72 
                               Uniform f32_4* %73 = OpAccessChain %62 %26 %40 
                                        f32_4 %74 = OpLoad %73 
                                        f32_3 %75 = OpLoad %9 
                                        f32_4 %76 = OpVectorShuffle %75 %75 2 2 2 2 
                                        f32_4 %77 = OpFMul %74 %76 
                                        f32_4 %78 = OpLoad %56 
                                        f32_4 %79 = OpFAdd %77 %78 
                                                      OpStore %56 %79 
                                        f32_4 %85 = OpLoad %56 
                               Uniform f32_4* %86 = OpAccessChain %62 %26 %50 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpFAdd %85 %87 
                                Output f32_4* %90 = OpAccessChain %84 %25 
                                                      OpStore %90 %88 
                                        f32_2 %96 = OpLoad %95 
                                                      OpStore vs_TEXCOORD0 %96 
                                        f32_3 %99 = OpLoad %98 
                              Uniform f32_4* %100 = OpAccessChain %23 %26 %25 
                                       f32_4 %101 = OpLoad %100 
                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 2 
                                         f32 %103 = OpDot %99 %102 
                                Private f32* %106 = OpAccessChain %56 %104 
                                                      OpStore %106 %103 
                                       f32_3 %107 = OpLoad %98 
                              Uniform f32_4* %108 = OpAccessChain %23 %26 %26 
                                       f32_4 %109 = OpLoad %108 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                         f32 %111 = OpDot %107 %110 
                                Private f32* %112 = OpAccessChain %56 %80 
                                                      OpStore %112 %111 
                                       f32_3 %113 = OpLoad %98 
                              Uniform f32_4* %114 = OpAccessChain %23 %26 %40 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                         f32 %117 = OpDot %113 %116 
                                Private f32* %118 = OpAccessChain %56 %19 
                                                      OpStore %118 %117 
                                       f32_4 %120 = OpLoad %56 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_4 %122 = OpLoad %56 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                         f32 %124 = OpDot %121 %123 
                                                      OpStore %119 %124 
                                         f32 %125 = OpLoad %119 
                                         f32 %127 = OpExtInst %1 40 %125 %126 
                                                      OpStore %119 %127 
                                         f32 %128 = OpLoad %119 
                                         f32 %129 = OpExtInst %1 32 %128 
                                                      OpStore %119 %129 
                                         f32 %130 = OpLoad %119 
                                       f32_3 %131 = OpCompositeConstruct %130 %130 %130 
                                       f32_4 %132 = OpLoad %56 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_3 %134 = OpFMul %131 %133 
                                       f32_4 %135 = OpLoad %56 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 6 3 
                                                      OpStore %56 %136 
                                       f32_4 %139 = OpLoad %56 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                                      OpStore vs_TEXCOORD1 %140 
                                       f32_3 %142 = OpLoad %9 
                                       f32_3 %143 = OpFNegate %142 
                              Uniform f32_3* %145 = OpAccessChain %62 %25 
                                       f32_3 %146 = OpLoad %145 
                                       f32_3 %147 = OpFAdd %143 %146 
                                                      OpStore vs_TEXCOORD2 %147 
                                       f32_3 %149 = OpLoad %9 
                                                      OpStore vs_TEXCOORD5 %149 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 1 1 1 
                              Uniform f32_4* %153 = OpAccessChain %23 %25 %26 
                                       f32_4 %154 = OpLoad %153 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFMul %152 %155 
                                                      OpStore %9 %156 
                              Uniform f32_4* %157 = OpAccessChain %23 %25 %25 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_4 %160 = OpLoad %150 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 0 0 
                                       f32_3 %162 = OpFMul %159 %161 
                                       f32_3 %163 = OpLoad %9 
                                       f32_3 %164 = OpFAdd %162 %163 
                                                      OpStore %9 %164 
                              Uniform f32_4* %165 = OpAccessChain %23 %25 %40 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_4 %168 = OpLoad %150 
                                       f32_3 %169 = OpVectorShuffle %168 %168 2 2 2 
                                       f32_3 %170 = OpFMul %167 %169 
                                       f32_3 %171 = OpLoad %9 
                                       f32_3 %172 = OpFAdd %170 %171 
                                                      OpStore %9 %172 
                                       f32_3 %173 = OpLoad %9 
                                       f32_3 %174 = OpLoad %9 
                                         f32 %175 = OpDot %173 %174 
                                                      OpStore %119 %175 
                                         f32 %176 = OpLoad %119 
                                         f32 %177 = OpExtInst %1 40 %176 %126 
                                                      OpStore %119 %177 
                                         f32 %178 = OpLoad %119 
                                         f32 %179 = OpExtInst %1 32 %178 
                                                      OpStore %119 %179 
                                         f32 %180 = OpLoad %119 
                                       f32_3 %181 = OpCompositeConstruct %180 %180 %180 
                                       f32_3 %182 = OpLoad %9 
                                       f32_3 %183 = OpFMul %181 %182 
                                                      OpStore %9 %183 
                                       f32_3 %185 = OpLoad %9 
                                                      OpStore vs_TEXCOORD3 %185 
                                       f32_3 %187 = OpLoad %9 
                                       f32_3 %188 = OpVectorShuffle %187 %187 1 2 0 
                                       f32_4 %189 = OpLoad %56 
                                       f32_3 %190 = OpVectorShuffle %189 %189 2 0 1 
                                       f32_3 %191 = OpFMul %188 %190 
                                                      OpStore %186 %191 
                                       f32_4 %192 = OpLoad %56 
                                       f32_3 %193 = OpVectorShuffle %192 %192 1 2 0 
                                       f32_3 %194 = OpLoad %9 
                                       f32_3 %195 = OpVectorShuffle %194 %194 2 0 1 
                                       f32_3 %196 = OpFMul %193 %195 
                                       f32_3 %197 = OpLoad %186 
                                       f32_3 %198 = OpFNegate %197 
                                       f32_3 %199 = OpFAdd %196 %198 
                                                      OpStore %9 %199 
                                  Input f32* %202 = OpAccessChain %150 %200 
                                         f32 %203 = OpLoad %202 
                                Uniform f32* %205 = OpAccessChain %23 %50 %200 
                                         f32 %206 = OpLoad %205 
                                         f32 %207 = OpFMul %203 %206 
                                                      OpStore %119 %207 
                                         f32 %209 = OpLoad %119 
                                       f32_3 %210 = OpCompositeConstruct %209 %209 %209 
                                       f32_3 %211 = OpLoad %9 
                                       f32_3 %212 = OpFMul %210 %211 
                                                      OpStore vs_TEXCOORD4 %212 
                                       f32_4 %215 = OpLoad %214 
                                                      OpStore vs_TEXCOORD6 %215 
                                 Output f32* %217 = OpAccessChain %84 %25 %80 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpFNegate %218 
                                 Output f32* %220 = OpAccessChain %84 %25 %80 
                                                      OpStore %220 %219 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 754
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %59 %84 %207 %223 %746 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %30 ArrayStride 30 
                                                      OpMemberDecorate %31 0 Offset 31 
                                                      OpMemberDecorate %31 1 RelaxedPrecision 
                                                      OpMemberDecorate %31 1 Offset 31 
                                                      OpMemberDecorate %31 2 Offset 31 
                                                      OpDecorate %31 Block 
                                                      OpDecorate %33 DescriptorSet 33 
                                                      OpDecorate %33 Binding 33 
                                                      OpDecorate vs_TEXCOORD3 Location 59 
                                                      OpMemberDecorate %67 0 Offset 67 
                                                      OpMemberDecorate %67 1 Offset 67 
                                                      OpMemberDecorate %67 2 Offset 67 
                                                      OpMemberDecorate %67 3 Offset 67 
                                                      OpMemberDecorate %67 4 Offset 67 
                                                      OpMemberDecorate %67 5 Offset 67 
                                                      OpMemberDecorate %67 6 Offset 67 
                                                      OpMemberDecorate %67 7 Offset 67 
                                                      OpMemberDecorate %67 8 Offset 67 
                                                      OpMemberDecorate %67 9 Offset 67 
                                                      OpMemberDecorate %67 10 Offset 67 
                                                      OpMemberDecorate %67 11 Offset 67 
                                                      OpMemberDecorate %67 12 Offset 67 
                                                      OpDecorate %67 Block 
                                                      OpDecorate %69 DescriptorSet 69 
                                                      OpDecorate %69 Binding 69 
                                                      OpDecorate vs_TEXCOORD0 Location 84 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %100 DescriptorSet 100 
                                                      OpDecorate %100 Binding 100 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %104 DescriptorSet 104 
                                                      OpDecorate %104 Binding 104 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %120 RelaxedPrecision 
                                                      OpDecorate %122 RelaxedPrecision 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %167 DescriptorSet 167 
                                                      OpDecorate %167 Binding 167 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %169 DescriptorSet 169 
                                                      OpDecorate %169 Binding 169 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %177 DescriptorSet 177 
                                                      OpDecorate %177 Binding 177 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %179 DescriptorSet 179 
                                                      OpDecorate %179 Binding 179 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 207 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 223 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %483 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                                      OpDecorate %487 RelaxedPrecision 
                                                      OpDecorate %493 RelaxedPrecision 
                                                      OpDecorate %494 ArrayStride 494 
                                                      OpDecorate %495 ArrayStride 495 
                                                      OpDecorate %497 ArrayStride 497 
                                                      OpMemberDecorate %498 0 Offset 498 
                                                      OpMemberDecorate %498 1 Offset 498 
                                                      OpMemberDecorate %498 2 Offset 498 
                                                      OpMemberDecorate %498 3 RelaxedPrecision 
                                                      OpMemberDecorate %498 3 Offset 498 
                                                      OpMemberDecorate %498 4 RelaxedPrecision 
                                                      OpMemberDecorate %498 4 Offset 498 
                                                      OpMemberDecorate %498 5 RelaxedPrecision 
                                                      OpMemberDecorate %498 5 Offset 498 
                                                      OpMemberDecorate %498 6 Offset 498 
                                                      OpMemberDecorate %498 7 RelaxedPrecision 
                                                      OpMemberDecorate %498 7 Offset 498 
                                                      OpMemberDecorate %498 8 Offset 498 
                                                      OpMemberDecorate %498 9 Offset 498 
                                                      OpMemberDecorate %498 10 RelaxedPrecision 
                                                      OpMemberDecorate %498 10 Offset 498 
                                                      OpMemberDecorate %498 11 RelaxedPrecision 
                                                      OpMemberDecorate %498 11 Offset 498 
                                                      OpMemberDecorate %498 12 RelaxedPrecision 
                                                      OpMemberDecorate %498 12 Offset 498 
                                                      OpMemberDecorate %498 13 RelaxedPrecision 
                                                      OpMemberDecorate %498 13 Offset 498 
                                                      OpMemberDecorate %498 14 RelaxedPrecision 
                                                      OpMemberDecorate %498 14 Offset 498 
                                                      OpMemberDecorate %498 15 RelaxedPrecision 
                                                      OpMemberDecorate %498 15 Offset 498 
                                                      OpMemberDecorate %498 16 RelaxedPrecision 
                                                      OpMemberDecorate %498 16 Offset 498 
                                                      OpDecorate %498 Block 
                                                      OpDecorate %500 DescriptorSet 500 
                                                      OpDecorate %500 Binding 500 
                                                      OpDecorate %503 RelaxedPrecision 
                                                      OpDecorate %504 RelaxedPrecision 
                                                      OpDecorate %505 RelaxedPrecision 
                                                      OpDecorate %509 RelaxedPrecision 
                                                      OpDecorate %510 RelaxedPrecision 
                                                      OpDecorate %511 RelaxedPrecision 
                                                      OpDecorate %515 RelaxedPrecision 
                                                      OpDecorate %516 RelaxedPrecision 
                                                      OpDecorate %517 RelaxedPrecision 
                                                      OpDecorate %521 RelaxedPrecision 
                                                      OpDecorate %522 RelaxedPrecision 
                                                      OpDecorate %523 RelaxedPrecision 
                                                      OpDecorate %524 RelaxedPrecision 
                                                      OpDecorate %525 RelaxedPrecision 
                                                      OpDecorate %526 RelaxedPrecision 
                                                      OpDecorate %527 RelaxedPrecision 
                                                      OpDecorate %531 RelaxedPrecision 
                                                      OpDecorate %536 RelaxedPrecision 
                                                      OpDecorate %541 RelaxedPrecision 
                                                      OpDecorate %545 RelaxedPrecision 
                                                      OpDecorate %546 RelaxedPrecision 
                                                      OpDecorate %547 RelaxedPrecision 
                                                      OpDecorate %548 RelaxedPrecision 
                                                      OpDecorate %550 RelaxedPrecision 
                                                      OpDecorate %551 RelaxedPrecision 
                                                      OpDecorate %552 RelaxedPrecision 
                                                      OpDecorate %553 RelaxedPrecision 
                                                      OpDecorate %571 RelaxedPrecision 
                                                      OpDecorate %572 RelaxedPrecision 
                                                      OpDecorate %574 RelaxedPrecision 
                                                      OpDecorate %576 RelaxedPrecision 
                                                      OpDecorate %578 RelaxedPrecision 
                                                      OpDecorate %580 RelaxedPrecision 
                                                      OpDecorate %581 RelaxedPrecision 
                                                      OpDecorate %582 RelaxedPrecision 
                                                      OpDecorate %584 RelaxedPrecision 
                                                      OpDecorate %585 RelaxedPrecision 
                                                      OpDecorate %588 RelaxedPrecision 
                                                      OpDecorate %588 DescriptorSet 588 
                                                      OpDecorate %588 Binding 588 
                                                      OpDecorate %589 RelaxedPrecision 
                                                      OpDecorate %590 RelaxedPrecision 
                                                      OpDecorate %590 DescriptorSet 590 
                                                      OpDecorate %590 Binding 590 
                                                      OpDecorate %591 RelaxedPrecision 
                                                      OpDecorate %595 RelaxedPrecision 
                                                      OpDecorate %598 RelaxedPrecision 
                                                      OpDecorate %599 RelaxedPrecision 
                                                      OpDecorate %602 RelaxedPrecision 
                                                      OpDecorate %603 RelaxedPrecision 
                                                      OpDecorate %604 RelaxedPrecision 
                                                      OpDecorate %605 RelaxedPrecision 
                                                      OpDecorate %606 RelaxedPrecision 
                                                      OpDecorate %607 RelaxedPrecision 
                                                      OpDecorate %608 RelaxedPrecision 
                                                      OpDecorate %609 RelaxedPrecision 
                                                      OpDecorate %610 RelaxedPrecision 
                                                      OpDecorate %612 RelaxedPrecision 
                                                      OpDecorate %613 RelaxedPrecision 
                                                      OpDecorate %614 RelaxedPrecision 
                                                      OpDecorate %615 RelaxedPrecision 
                                                      OpDecorate %616 RelaxedPrecision 
                                                      OpDecorate %618 RelaxedPrecision 
                                                      OpDecorate %619 RelaxedPrecision 
                                                      OpDecorate %620 RelaxedPrecision 
                                                      OpDecorate %621 RelaxedPrecision 
                                                      OpDecorate %622 RelaxedPrecision 
                                                      OpDecorate %623 RelaxedPrecision 
                                                      OpDecorate %624 RelaxedPrecision 
                                                      OpDecorate %625 RelaxedPrecision 
                                                      OpDecorate %626 RelaxedPrecision 
                                                      OpDecorate %627 RelaxedPrecision 
                                                      OpDecorate %633 RelaxedPrecision 
                                                      OpDecorate %636 RelaxedPrecision 
                                                      OpDecorate %705 RelaxedPrecision 
                                                      OpDecorate %713 RelaxedPrecision 
                                                      OpDecorate %714 RelaxedPrecision 
                                                      OpDecorate %715 RelaxedPrecision 
                                                      OpDecorate %716 RelaxedPrecision 
                                                      OpDecorate %717 RelaxedPrecision 
                                                      OpDecorate %718 RelaxedPrecision 
                                                      OpDecorate %737 RelaxedPrecision 
                                                      OpDecorate %738 RelaxedPrecision 
                                                      OpDecorate %739 RelaxedPrecision 
                                                      OpDecorate %742 RelaxedPrecision 
                                                      OpDecorate %743 RelaxedPrecision 
                                                      OpDecorate %744 RelaxedPrecision 
                                                      OpDecorate %746 RelaxedPrecision 
                                                      OpDecorate %746 Location 746 
                                                      OpDecorate %747 RelaxedPrecision 
                                                      OpDecorate %748 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 0 
                                              %17 = OpTypePointer Private %6 
                               Private f32_3* %23 = OpVariable Private 
                                              %28 = OpTypeVector %6 4 
                                          u32 %29 = OpConstant 4 
                                              %30 = OpTypeArray %28 %29 
                                              %31 = OpTypeStruct %28 %28 %30 
                                              %32 = OpTypePointer Uniform %31 
    Uniform struct {f32_4; f32_4; f32_4[4];}* %33 = OpVariable Uniform 
                                              %34 = OpTypeInt 32 1 
                                          i32 %35 = OpConstant 0 
                                              %36 = OpTypePointer Uniform %28 
                               Private f32_3* %41 = OpVariable Private 
                                 Private f32* %58 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                 Private f32* %66 = OpVariable Private 
                                              %67 = OpTypeStruct %6 %28 %28 %28 %6 %7 %28 %6 %6 %6 %6 %28 %6 
                                              %68 = OpTypePointer Uniform %67 
Uniform struct {f32; f32_4; f32_4; f32_4; f32; f32_3; f32_4; f32; f32; f32; f32; f32_4; f32;}* %69 = OpVariable Uniform 
                                          i32 %70 = OpConstant 10 
                                              %71 = OpTypePointer Uniform %6 
                                          f32 %75 = OpConstant 3.674022E-40 
                                          f32 %77 = OpConstant 3.674022E-40 
                               Private f32_3* %81 = OpVariable Private 
                                              %82 = OpTypeVector %6 2 
                                              %83 = OpTypePointer Input %82 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                          i32 %86 = OpConstant 1 
                                 Private f32* %97 = OpVariable Private 
                                              %98 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %99 = OpTypePointer UniformConstant %98 
        UniformConstant read_only Texture2D* %100 = OpVariable UniformConstant 
                                             %102 = OpTypeSampler 
                                             %103 = OpTypePointer UniformConstant %102 
                    UniformConstant sampler* %104 = OpVariable UniformConstant 
                                             %106 = OpTypeSampledImage %98 
                              Private f32_3* %112 = OpVariable Private 
                              Private f32_3* %117 = OpVariable Private 
                                         f32 %119 = OpConstant 3.674022E-40 
                                         f32 %121 = OpConstant 3.674022E-40 
                                         i32 %126 = OpConstant 12 
                                Private f32* %131 = OpVariable Private 
                                             %152 = OpTypePointer Private %28 
                              Private f32_4* %153 = OpVariable Private 
                                         i32 %155 = OpConstant 2 
                              Private f32_3* %166 = OpVariable Private 
        UniformConstant read_only Texture2D* %167 = OpVariable UniformConstant 
                    UniformConstant sampler* %169 = OpVariable UniformConstant 
                              Private f32_3* %176 = OpVariable Private 
        UniformConstant read_only Texture2D* %177 = OpVariable UniformConstant 
                    UniformConstant sampler* %179 = OpVariable UniformConstant 
                                         i32 %187 = OpConstant 3 
                                         f32 %196 = OpConstant 3.674022E-40 
                                       f32_3 %197 = OpConstantComposite %196 %196 %196 
                              Private f32_3* %199 = OpVariable Private 
                                       f32_3 %201 = OpConstantComposite %119 %119 %119 
                                       f32_3 %203 = OpConstantComposite %121 %121 %121 
                        Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                Private f32* %231 = OpVariable Private 
                              Private f32_3* %246 = OpVariable Private 
                                         f32 %299 = OpConstant 3.674022E-40 
                                         u32 %309 = OpConstant 1 
                                         f32 %330 = OpConstant 3.674022E-40 
                                         i32 %339 = OpConstant 11 
                                         i32 %349 = OpConstant 4 
                                Private f32* %354 = OpVariable Private 
                                         f32 %362 = OpConstant 3.674022E-40 
                                         f32 %371 = OpConstant 3.674022E-40 
                                         f32 %384 = OpConstant 3.674022E-40 
                              Private f32_4* %487 = OpVariable Private 
                              Private f32_3* %493 = OpVariable Private 
                                             %494 = OpTypeArray %28 %29 
                                             %495 = OpTypeArray %28 %29 
                                         u32 %496 = OpConstant 2 
                                             %497 = OpTypeArray %28 %496 
                                             %498 = OpTypeStruct %494 %495 %28 %28 %28 %497 %28 %28 %28 %28 %28 %28 %28 %28 %28 %28 %28 
                                             %499 = OpTypePointer Uniform %498 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4; f32_4[2]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %500 = OpVariable Uniform 
                                         i32 %501 = OpConstant 13 
                                         i32 %507 = OpConstant 14 
                                         i32 %513 = OpConstant 15 
                                         i32 %519 = OpConstant 16 
                                         u32 %528 = OpConstant 3 
                                       f32_3 %549 = OpConstantComposite %384 %384 %384 
                                         f32 %573 = OpConstant 3.674022E-40 
                                         f32 %575 = OpConstant 3.674022E-40 
                                         f32 %583 = OpConstant 3.674022E-40 
                              Private f32_4* %585 = OpVariable Private 
                                             %586 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %587 = OpTypePointer UniformConstant %586 
      UniformConstant read_only TextureCube* %588 = OpVariable UniformConstant 
                    UniformConstant sampler* %590 = OpVariable UniformConstant 
                                             %592 = OpTypeSampledImage %586 
                                         i32 %600 = OpConstant 7 
                                         i32 %641 = OpConstant 5 
                                             %642 = OpTypePointer Uniform %7 
                                         f32 %683 = OpConstant 3.674022E-40 
                                         i32 %687 = OpConstant 8 
                                         i32 %700 = OpConstant 6 
                                         i32 %706 = OpConstant 9 
                                       f32_3 %724 = OpConstantComposite %573 %573 %573 
                                         f32 %727 = OpConstant 3.674022E-40 
                                       f32_3 %728 = OpConstantComposite %727 %727 %727 
                                         f32 %740 = OpConstant 3.674022E-40 
                                       f32_3 %741 = OpConstantComposite %740 %740 %740 
                                             %745 = OpTypePointer Output %28 
                               Output f32_4* %746 = OpVariable Output 
                                             %751 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                                          f32 %14 = OpDot %12 %13 
                                 Private f32* %18 = OpAccessChain %9 %16 
                                                      OpStore %18 %14 
                                 Private f32* %19 = OpAccessChain %9 %16 
                                          f32 %20 = OpLoad %19 
                                          f32 %21 = OpExtInst %1 32 %20 
                                 Private f32* %22 = OpAccessChain %9 %16 
                                                      OpStore %22 %21 
                                        f32_3 %24 = OpLoad vs_TEXCOORD2 
                                        f32_3 %25 = OpLoad %9 
                                        f32_3 %26 = OpVectorShuffle %25 %25 0 0 0 
                                        f32_3 %27 = OpFMul %24 %26 
                               Uniform f32_4* %37 = OpAccessChain %33 %35 
                                        f32_4 %38 = OpLoad %37 
                                        f32_3 %39 = OpVectorShuffle %38 %38 0 1 2 
                                        f32_3 %40 = OpFAdd %27 %39 
                                                      OpStore %23 %40 
                                        f32_3 %42 = OpLoad %9 
                                        f32_3 %43 = OpVectorShuffle %42 %42 0 0 0 
                                        f32_3 %44 = OpLoad vs_TEXCOORD2 
                                        f32_3 %45 = OpFMul %43 %44 
                                                      OpStore %41 %45 
                                        f32_3 %46 = OpLoad %23 
                                        f32_3 %47 = OpLoad %23 
                                          f32 %48 = OpDot %46 %47 
                                 Private f32* %49 = OpAccessChain %9 %16 
                                                      OpStore %49 %48 
                                 Private f32* %50 = OpAccessChain %9 %16 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpExtInst %1 32 %51 
                                 Private f32* %53 = OpAccessChain %9 %16 
                                                      OpStore %53 %52 
                                        f32_3 %54 = OpLoad %9 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 0 0 
                                        f32_3 %56 = OpLoad %23 
                                        f32_3 %57 = OpFMul %55 %56 
                                                      OpStore %9 %57 
                                        f32_3 %60 = OpLoad vs_TEXCOORD3 
                                        f32_3 %61 = OpLoad %9 
                                          f32 %62 = OpDot %60 %61 
                                                      OpStore %58 %62 
                                          f32 %63 = OpLoad %58 
                                          f32 %64 = OpLoad %58 
                                          f32 %65 = OpFMul %63 %64 
                                                      OpStore %58 %65 
                                 Uniform f32* %72 = OpAccessChain %69 %70 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFNegate %73 
                                          f32 %76 = OpFMul %74 %75 
                                          f32 %78 = OpFAdd %76 %77 
                                                      OpStore %66 %78 
                                          f32 %79 = OpLoad %66 
                                          f32 %80 = OpExtInst %1 31 %79 
                                                      OpStore %66 %80 
                                        f32_2 %85 = OpLoad vs_TEXCOORD0 
                               Uniform f32_4* %87 = OpAccessChain %69 %86 
                                        f32_4 %88 = OpLoad %87 
                                        f32_2 %89 = OpVectorShuffle %88 %88 0 1 
                                        f32_2 %90 = OpFMul %85 %89 
                               Uniform f32_4* %91 = OpAccessChain %69 %86 
                                        f32_4 %92 = OpLoad %91 
                                        f32_2 %93 = OpVectorShuffle %92 %92 2 3 
                                        f32_2 %94 = OpFAdd %90 %93 
                                        f32_3 %95 = OpLoad %81 
                                        f32_3 %96 = OpVectorShuffle %95 %94 3 4 2 
                                                      OpStore %81 %96 
                         read_only Texture2D %101 = OpLoad %100 
                                     sampler %105 = OpLoad %104 
                  read_only Texture2DSampled %107 = OpSampledImage %101 %105 
                                       f32_3 %108 = OpLoad %81 
                                       f32_2 %109 = OpVectorShuffle %108 %108 0 1 
                                       f32_4 %110 = OpImageSampleImplicitLod %107 %109 
                                         f32 %111 = OpCompositeExtract %110 0 
                                                      OpStore %97 %111 
                                         f32 %113 = OpLoad %97 
                                         f32 %114 = OpLoad %97 
                                         f32 %115 = OpFMul %113 %114 
                                Private f32* %116 = OpAccessChain %112 %16 
                                                      OpStore %116 %115 
                                         f32 %118 = OpLoad %97 
                                         f32 %120 = OpFMul %118 %119 
                                         f32 %122 = OpFAdd %120 %121 
                                Private f32* %123 = OpAccessChain %117 %16 
                                                      OpStore %123 %122 
                                Private f32* %124 = OpAccessChain %117 %16 
                                         f32 %125 = OpLoad %124 
                                Uniform f32* %127 = OpAccessChain %69 %126 
                                         f32 %128 = OpLoad %127 
                                         f32 %129 = OpFAdd %125 %128 
                                Private f32* %130 = OpAccessChain %81 %16 
                                                      OpStore %130 %129 
                                Private f32* %132 = OpAccessChain %112 %16 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpLoad %66 
                                         f32 %135 = OpFDiv %133 %134 
                                                      OpStore %131 %135 
                                         f32 %136 = OpLoad %66 
                                Private f32* %137 = OpAccessChain %112 %16 
                                         f32 %138 = OpLoad %137 
                                         f32 %139 = OpFMul %136 %138 
                                                      OpStore %66 %139 
                                         f32 %140 = OpLoad %131 
                                         f32 %141 = OpLoad %131 
                                         f32 %142 = OpFMul %140 %141 
                                Private f32* %143 = OpAccessChain %112 %16 
                                                      OpStore %143 %142 
                                         f32 %144 = OpLoad %58 
                                Private f32* %145 = OpAccessChain %112 %16 
                                         f32 %146 = OpLoad %145 
                                         f32 %147 = OpFDiv %144 %146 
                                                      OpStore %58 %147 
                                         f32 %148 = OpLoad %66 
                                         f32 %149 = OpLoad %66 
                                         f32 %150 = OpFMul %148 %149 
                                Private f32* %151 = OpAccessChain %112 %16 
                                                      OpStore %151 %150 
                                       f32_2 %154 = OpLoad vs_TEXCOORD0 
                              Uniform f32_4* %156 = OpAccessChain %69 %155 
                                       f32_4 %157 = OpLoad %156 
                                       f32_2 %158 = OpVectorShuffle %157 %157 0 1 
                                       f32_2 %159 = OpFMul %154 %158 
                              Uniform f32_4* %160 = OpAccessChain %69 %155 
                                       f32_4 %161 = OpLoad %160 
                                       f32_2 %162 = OpVectorShuffle %161 %161 2 3 
                                       f32_2 %163 = OpFAdd %159 %162 
                                       f32_4 %164 = OpLoad %153 
                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 2 3 
                                                      OpStore %153 %165 
                         read_only Texture2D %168 = OpLoad %167 
                                     sampler %170 = OpLoad %169 
                  read_only Texture2DSampled %171 = OpSampledImage %168 %170 
                                       f32_4 %172 = OpLoad %153 
                                       f32_2 %173 = OpVectorShuffle %172 %172 0 1 
                                       f32_4 %174 = OpImageSampleImplicitLod %171 %173 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                                                      OpStore %166 %175 
                         read_only Texture2D %178 = OpLoad %177 
                                     sampler %180 = OpLoad %179 
                  read_only Texture2DSampled %181 = OpSampledImage %178 %180 
                                       f32_4 %182 = OpLoad %153 
                                       f32_2 %183 = OpVectorShuffle %182 %182 0 1 
                                       f32_4 %184 = OpImageSampleImplicitLod %181 %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                                      OpStore %176 %185 
                                       f32_3 %186 = OpLoad %176 
                              Uniform f32_4* %188 = OpAccessChain %69 %187 
                                       f32_4 %189 = OpLoad %188 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_3 %191 = OpFMul %186 %190 
                                       f32_4 %192 = OpLoad %153 
                                       f32_4 %193 = OpVectorShuffle %192 %191 4 5 6 3 
                                                      OpStore %153 %193 
                                       f32_4 %194 = OpLoad %153 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_3 %198 = OpFMul %195 %197 
                                                      OpStore %117 %198 
                                       f32_3 %200 = OpLoad %166 
                                       f32_3 %202 = OpFMul %200 %201 
                                       f32_3 %204 = OpFAdd %202 %203 
                                                      OpStore %199 %204 
                                       f32_3 %205 = OpLoad %199 
                                       f32_3 %206 = OpVectorShuffle %205 %205 1 1 1 
                                       f32_3 %208 = OpLoad vs_TEXCOORD4 
                                       f32_3 %209 = OpFMul %206 %208 
                                       f32_4 %210 = OpLoad %153 
                                       f32_4 %211 = OpVectorShuffle %210 %209 4 5 6 3 
                                                      OpStore %153 %211 
                                       f32_3 %212 = OpLoad %199 
                                       f32_3 %213 = OpVectorShuffle %212 %212 0 0 0 
                                       f32_3 %214 = OpLoad vs_TEXCOORD3 
                                       f32_3 %215 = OpFMul %213 %214 
                                       f32_4 %216 = OpLoad %153 
                                       f32_3 %217 = OpVectorShuffle %216 %216 0 1 2 
                                       f32_3 %218 = OpFAdd %215 %217 
                                       f32_4 %219 = OpLoad %153 
                                       f32_4 %220 = OpVectorShuffle %219 %218 4 5 6 3 
                                                      OpStore %153 %220 
                                       f32_3 %221 = OpLoad %199 
                                       f32_3 %222 = OpVectorShuffle %221 %221 2 2 2 
                                       f32_3 %224 = OpLoad vs_TEXCOORD1 
                                       f32_3 %225 = OpFMul %222 %224 
                                       f32_4 %226 = OpLoad %153 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_3 %228 = OpFAdd %225 %227 
                                       f32_4 %229 = OpLoad %153 
                                       f32_4 %230 = OpVectorShuffle %229 %228 4 5 6 3 
                                                      OpStore %153 %230 
                                       f32_4 %232 = OpLoad %153 
                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
                                       f32_4 %234 = OpLoad %153 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
                                         f32 %236 = OpDot %233 %235 
                                                      OpStore %231 %236 
                                         f32 %237 = OpLoad %231 
                                         f32 %238 = OpExtInst %1 32 %237 
                                                      OpStore %231 %238 
                                         f32 %239 = OpLoad %231 
                                       f32_3 %240 = OpCompositeConstruct %239 %239 %239 
                                       f32_4 %241 = OpLoad %153 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 1 2 
                                       f32_3 %243 = OpFMul %240 %242 
                                       f32_4 %244 = OpLoad %153 
                                       f32_4 %245 = OpVectorShuffle %244 %243 4 5 6 3 
                                                      OpStore %153 %245 
                                       f32_4 %247 = OpLoad %153 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                       f32_3 %249 = OpLoad %81 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 0 0 
                                       f32_3 %251 = OpFMul %248 %250 
                                       f32_3 %252 = OpLoad vs_TEXCOORD4 
                                       f32_3 %253 = OpFAdd %251 %252 
                                                      OpStore %246 %253 
                                       f32_3 %254 = OpLoad %246 
                                       f32_3 %255 = OpLoad %246 
                                         f32 %256 = OpDot %254 %255 
                                Private f32* %257 = OpAccessChain %81 %16 
                                                      OpStore %257 %256 
                                Private f32* %258 = OpAccessChain %81 %16 
                                         f32 %259 = OpLoad %258 
                                         f32 %260 = OpExtInst %1 32 %259 
                                Private f32* %261 = OpAccessChain %81 %16 
                                                      OpStore %261 %260 
                                       f32_3 %262 = OpLoad %81 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 0 0 
                                       f32_3 %264 = OpLoad %246 
                                       f32_3 %265 = OpFMul %263 %264 
                                                      OpStore %246 %265 
                                       f32_3 %266 = OpLoad %246 
                                       f32_3 %267 = OpLoad %9 
                                         f32 %268 = OpDot %266 %267 
                                Private f32* %269 = OpAccessChain %81 %16 
                                                      OpStore %269 %268 
                                Private f32* %270 = OpAccessChain %81 %16 
                                         f32 %271 = OpLoad %270 
                                Private f32* %272 = OpAccessChain %81 %16 
                                         f32 %273 = OpLoad %272 
                                         f32 %274 = OpFMul %271 %273 
                                Private f32* %275 = OpAccessChain %81 %16 
                                                      OpStore %275 %274 
                                Private f32* %276 = OpAccessChain %81 %16 
                                         f32 %277 = OpLoad %276 
                                Private f32* %278 = OpAccessChain %112 %16 
                                         f32 %279 = OpLoad %278 
                                         f32 %280 = OpFDiv %277 %279 
                                Private f32* %281 = OpAccessChain %81 %16 
                                                      OpStore %281 %280 
                                         f32 %282 = OpLoad %58 
                                Private f32* %283 = OpAccessChain %81 %16 
                                         f32 %284 = OpLoad %283 
                                         f32 %285 = OpFAdd %282 %284 
                                                      OpStore %58 %285 
                                       f32_4 %286 = OpLoad %153 
                                       f32_3 %287 = OpVectorShuffle %286 %286 0 1 2 
                                       f32_3 %288 = OpLoad %9 
                                         f32 %289 = OpDot %287 %288 
                                Private f32* %290 = OpAccessChain %81 %16 
                                                      OpStore %290 %289 
                              Uniform f32_4* %291 = OpAccessChain %33 %35 
                                       f32_4 %292 = OpLoad %291 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
                                       f32_3 %294 = OpLoad %9 
                                         f32 %295 = OpDot %293 %294 
                                Private f32* %296 = OpAccessChain %9 %16 
                                                      OpStore %296 %295 
                                Private f32* %297 = OpAccessChain %9 %16 
                                         f32 %298 = OpLoad %297 
                                         f32 %300 = OpExtInst %1 40 %298 %299 
                                Private f32* %301 = OpAccessChain %9 %16 
                                                      OpStore %301 %300 
                                Private f32* %302 = OpAccessChain %81 %16 
                                         f32 %303 = OpLoad %302 
                                Private f32* %304 = OpAccessChain %81 %16 
                                         f32 %305 = OpLoad %304 
                                         f32 %306 = OpFMul %303 %305 
                                         f32 %307 = OpLoad %58 
                                         f32 %308 = OpFAdd %306 %307 
                                Private f32* %310 = OpAccessChain %9 %309 
                                                      OpStore %310 %308 
                                       f32_3 %311 = OpLoad %9 
                                       f32_2 %312 = OpVectorShuffle %311 %311 0 1 
                                       f32_3 %313 = OpLoad %9 
                                       f32_2 %314 = OpVectorShuffle %313 %313 0 1 
                                       f32_2 %315 = OpFMul %312 %314 
                                       f32_3 %316 = OpLoad %9 
                                       f32_3 %317 = OpVectorShuffle %316 %315 3 4 2 
                                                      OpStore %9 %317 
                                         f32 %318 = OpLoad %131 
                                Private f32* %319 = OpAccessChain %9 %309 
                                         f32 %320 = OpLoad %319 
                                         f32 %321 = OpFMul %318 %320 
                                Private f32* %322 = OpAccessChain %23 %16 
                                                      OpStore %322 %321 
                                         f32 %323 = OpLoad %66 
                                Private f32* %324 = OpAccessChain %23 %16 
                                         f32 %325 = OpLoad %324 
                                         f32 %326 = OpFMul %323 %325 
                                Private f32* %327 = OpAccessChain %23 %16 
                                                      OpStore %327 %326 
                                Private f32* %328 = OpAccessChain %23 %16 
                                         f32 %329 = OpLoad %328 
                                         f32 %331 = OpFMul %329 %330 
                                Private f32* %332 = OpAccessChain %23 %16 
                                                      OpStore %332 %331 
                                Private f32* %333 = OpAccessChain %23 %16 
                                         f32 %334 = OpLoad %333 
                                         f32 %335 = OpFDiv %77 %334 
                                Private f32* %336 = OpAccessChain %23 %16 
                                                      OpStore %336 %335 
                                       f32_3 %337 = OpLoad %23 
                                       f32_3 %338 = OpVectorShuffle %337 %337 0 0 0 
                              Uniform f32_4* %340 = OpAccessChain %69 %339 
                                       f32_4 %341 = OpLoad %340 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                                       f32_3 %343 = OpFMul %338 %342 
                                                      OpStore %23 %343 
                                       f32_3 %344 = OpLoad %23 
                              Uniform f32_4* %345 = OpAccessChain %69 %339 
                                       f32_4 %346 = OpLoad %345 
                                       f32_3 %347 = OpVectorShuffle %346 %346 3 3 3 
                                       f32_3 %348 = OpFMul %344 %347 
                                                      OpStore %23 %348 
                                Uniform f32* %350 = OpAccessChain %69 %349 
                                         f32 %351 = OpLoad %350 
                                         f32 %352 = OpFNegate %351 
                                         f32 %353 = OpFAdd %352 %77 
                                                      OpStore %66 %353 
                                         f32 %355 = OpLoad %66 
                                         f32 %356 = OpFNegate %355 
                                         f32 %357 = OpFAdd %356 %77 
                                                      OpStore %354 %357 
                                         f32 %358 = OpLoad %354 
                                         f32 %359 = OpLoad %354 
                                         f32 %360 = OpFMul %358 %359 
                                                      OpStore %354 %360 
                                         f32 %361 = OpLoad %354 
                                         f32 %363 = OpExtInst %1 40 %361 %362 
                                                      OpStore %354 %363 
                                         f32 %364 = OpLoad %354 
                                         f32 %365 = OpLoad %354 
                                         f32 %366 = OpFAdd %364 %365 
                                                      OpStore %66 %366 
                                Private f32* %367 = OpAccessChain %9 %16 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpLoad %66 
                                         f32 %370 = OpFMul %368 %369 
                                         f32 %372 = OpFAdd %370 %371 
                                Private f32* %373 = OpAccessChain %9 %16 
                                                      OpStore %373 %372 
                                       f32_4 %374 = OpLoad %153 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                                       f32_3 %376 = OpLoad %41 
                                         f32 %377 = OpDot %375 %376 
                                                      OpStore %66 %377 
                                         f32 %378 = OpLoad %66 
                                         f32 %379 = OpExtInst %1 40 %378 %299 
                                                      OpStore %66 %379 
                                         f32 %380 = OpLoad %66 
                                         f32 %381 = OpFNegate %380 
                                         f32 %382 = OpFAdd %381 %77 
                                                      OpStore %66 %382 
                                         f32 %383 = OpLoad %66 
                                         f32 %385 = OpExtInst %1 40 %383 %384 
                                                      OpStore %66 %385 
                                         f32 %386 = OpLoad %66 
                                         f32 %387 = OpLoad %66 
                                         f32 %388 = OpFMul %386 %387 
                                Private f32* %389 = OpAccessChain %81 %16 
                                                      OpStore %389 %388 
                                Private f32* %390 = OpAccessChain %81 %16 
                                         f32 %391 = OpLoad %390 
                                Private f32* %392 = OpAccessChain %81 %16 
                                         f32 %393 = OpLoad %392 
                                         f32 %394 = OpFMul %391 %393 
                                Private f32* %395 = OpAccessChain %81 %16 
                                                      OpStore %395 %394 
                                         f32 %396 = OpLoad %66 
                                Private f32* %397 = OpAccessChain %81 %16 
                                         f32 %398 = OpLoad %397 
                                         f32 %399 = OpFMul %396 %398 
                                                      OpStore %66 %399 
                                Private f32* %400 = OpAccessChain %9 %16 
                                         f32 %401 = OpLoad %400 
                                         f32 %402 = OpLoad %66 
                                         f32 %403 = OpFMul %401 %402 
                                         f32 %404 = OpFAdd %403 %77 
                                                      OpStore %66 %404 
                                       f32_4 %405 = OpLoad %153 
                                       f32_3 %406 = OpVectorShuffle %405 %405 0 1 2 
                              Uniform f32_4* %407 = OpAccessChain %33 %35 
                                       f32_4 %408 = OpLoad %407 
                                       f32_3 %409 = OpVectorShuffle %408 %408 0 1 2 
                                         f32 %410 = OpDot %406 %409 
                                Private f32* %411 = OpAccessChain %81 %16 
                                                      OpStore %411 %410 
                                Private f32* %412 = OpAccessChain %81 %16 
                                         f32 %413 = OpLoad %412 
                                         f32 %414 = OpExtInst %1 40 %413 %299 
                                Private f32* %415 = OpAccessChain %81 %16 
                                                      OpStore %415 %414 
                                Private f32* %416 = OpAccessChain %81 %16 
                                         f32 %417 = OpLoad %416 
                                         f32 %418 = OpFNegate %417 
                                         f32 %419 = OpFAdd %418 %77 
                                Private f32* %420 = OpAccessChain %112 %16 
                                                      OpStore %420 %419 
                                Private f32* %421 = OpAccessChain %112 %16 
                                         f32 %422 = OpLoad %421 
                                         f32 %423 = OpExtInst %1 40 %422 %384 
                                Private f32* %424 = OpAccessChain %112 %16 
                                                      OpStore %424 %423 
                                Private f32* %425 = OpAccessChain %112 %16 
                                         f32 %426 = OpLoad %425 
                                Private f32* %427 = OpAccessChain %112 %16 
                                         f32 %428 = OpLoad %427 
                                         f32 %429 = OpFMul %426 %428 
                                                      OpStore %131 %429 
                                         f32 %430 = OpLoad %131 
                                         f32 %431 = OpLoad %131 
                                         f32 %432 = OpFMul %430 %431 
                                                      OpStore %131 %432 
                                Private f32* %433 = OpAccessChain %112 %16 
                                         f32 %434 = OpLoad %433 
                                         f32 %435 = OpLoad %131 
                                         f32 %436 = OpFMul %434 %435 
                                Private f32* %437 = OpAccessChain %112 %16 
                                                      OpStore %437 %436 
                                Private f32* %438 = OpAccessChain %9 %16 
                                         f32 %439 = OpLoad %438 
                                Private f32* %440 = OpAccessChain %112 %16 
                                         f32 %441 = OpLoad %440 
                                         f32 %442 = OpFMul %439 %441 
                                         f32 %443 = OpFAdd %442 %77 
                                Private f32* %444 = OpAccessChain %9 %16 
                                                      OpStore %444 %443 
                                         f32 %445 = OpLoad %66 
                                Private f32* %446 = OpAccessChain %9 %16 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpFMul %445 %447 
                                Private f32* %449 = OpAccessChain %9 %16 
                                                      OpStore %449 %448 
                                Private f32* %450 = OpAccessChain %81 %16 
                                         f32 %451 = OpLoad %450 
                                Private f32* %452 = OpAccessChain %9 %16 
                                         f32 %453 = OpLoad %452 
                                         f32 %454 = OpFMul %451 %453 
                                Private f32* %455 = OpAccessChain %9 %16 
                                                      OpStore %455 %454 
                                Private f32* %456 = OpAccessChain %9 %16 
                                         f32 %457 = OpLoad %456 
                                         f32 %458 = OpExtInst %1 37 %457 %77 
                                Private f32* %459 = OpAccessChain %9 %16 
                                                      OpStore %459 %458 
                                       f32_3 %460 = OpLoad %9 
                                       f32_3 %461 = OpVectorShuffle %460 %460 0 0 0 
                                       f32_3 %462 = OpLoad %117 
                                       f32_3 %463 = OpFMul %461 %462 
                                                      OpStore %112 %463 
                                       f32_3 %464 = OpLoad %112 
                              Uniform f32_4* %465 = OpAccessChain %33 %86 
                                       f32_4 %466 = OpLoad %465 
                                       f32_3 %467 = OpVectorShuffle %466 %466 0 1 2 
                                       f32_3 %468 = OpFMul %464 %467 
                                       f32_3 %469 = OpLoad %23 
                                       f32_3 %470 = OpFAdd %468 %469 
                                                      OpStore %9 %470 
                                Private f32* %471 = OpAccessChain %153 %309 
                                         f32 %472 = OpLoad %471 
                                Private f32* %473 = OpAccessChain %153 %309 
                                         f32 %474 = OpLoad %473 
                                         f32 %475 = OpFMul %472 %474 
                                Private f32* %476 = OpAccessChain %199 %16 
                                                      OpStore %476 %475 
                                Private f32* %477 = OpAccessChain %153 %16 
                                         f32 %478 = OpLoad %477 
                                Private f32* %479 = OpAccessChain %153 %16 
                                         f32 %480 = OpLoad %479 
                                         f32 %481 = OpFMul %478 %480 
                                Private f32* %482 = OpAccessChain %199 %16 
                                         f32 %483 = OpLoad %482 
                                         f32 %484 = OpFNegate %483 
                                         f32 %485 = OpFAdd %481 %484 
                                Private f32* %486 = OpAccessChain %199 %16 
                                                      OpStore %486 %485 
                                       f32_4 %488 = OpLoad %153 
                                       f32_4 %489 = OpVectorShuffle %488 %488 1 2 2 0 
                                       f32_4 %490 = OpLoad %153 
                                       f32_4 %491 = OpVectorShuffle %490 %490 0 1 2 2 
                                       f32_4 %492 = OpFMul %489 %491 
                                                      OpStore %487 %492 
                              Uniform f32_4* %502 = OpAccessChain %500 %501 
                                       f32_4 %503 = OpLoad %502 
                                       f32_4 %504 = OpLoad %487 
                                         f32 %505 = OpDot %503 %504 
                                Private f32* %506 = OpAccessChain %493 %16 
                                                      OpStore %506 %505 
                              Uniform f32_4* %508 = OpAccessChain %500 %507 
                                       f32_4 %509 = OpLoad %508 
                                       f32_4 %510 = OpLoad %487 
                                         f32 %511 = OpDot %509 %510 
                                Private f32* %512 = OpAccessChain %493 %309 
                                                      OpStore %512 %511 
                              Uniform f32_4* %514 = OpAccessChain %500 %513 
                                       f32_4 %515 = OpLoad %514 
                                       f32_4 %516 = OpLoad %487 
                                         f32 %517 = OpDot %515 %516 
                                Private f32* %518 = OpAccessChain %493 %496 
                                                      OpStore %518 %517 
                              Uniform f32_4* %520 = OpAccessChain %500 %519 
                                       f32_4 %521 = OpLoad %520 
                                       f32_3 %522 = OpVectorShuffle %521 %521 0 1 2 
                                       f32_3 %523 = OpLoad %199 
                                       f32_3 %524 = OpVectorShuffle %523 %523 0 0 0 
                                       f32_3 %525 = OpFMul %522 %524 
                                       f32_3 %526 = OpLoad %493 
                                       f32_3 %527 = OpFAdd %525 %526 
                                                      OpStore %199 %527 
                                Private f32* %529 = OpAccessChain %153 %528 
                                                      OpStore %529 %77 
                              Uniform f32_4* %530 = OpAccessChain %500 %70 
                                       f32_4 %531 = OpLoad %530 
                                       f32_4 %532 = OpLoad %153 
                                         f32 %533 = OpDot %531 %532 
                                Private f32* %534 = OpAccessChain %493 %16 
                                                      OpStore %534 %533 
                              Uniform f32_4* %535 = OpAccessChain %500 %339 
                                       f32_4 %536 = OpLoad %535 
                                       f32_4 %537 = OpLoad %153 
                                         f32 %538 = OpDot %536 %537 
                                Private f32* %539 = OpAccessChain %493 %309 
                                                      OpStore %539 %538 
                              Uniform f32_4* %540 = OpAccessChain %500 %126 
                                       f32_4 %541 = OpLoad %540 
                                       f32_4 %542 = OpLoad %153 
                                         f32 %543 = OpDot %541 %542 
                                Private f32* %544 = OpAccessChain %493 %496 
                                                      OpStore %544 %543 
                                       f32_3 %545 = OpLoad %199 
                                       f32_3 %546 = OpLoad %493 
                                       f32_3 %547 = OpFAdd %545 %546 
                                                      OpStore %199 %547 
                                       f32_3 %548 = OpLoad %199 
                                       f32_3 %550 = OpExtInst %1 40 %548 %549 
                                                      OpStore %199 %550 
                                       f32_3 %551 = OpLoad %117 
                                       f32_3 %552 = OpLoad %199 
                                       f32_3 %553 = OpFMul %551 %552 
                                                      OpStore %112 %553 
                                       f32_3 %554 = OpLoad %41 
                                       f32_3 %555 = OpFNegate %554 
                                       f32_4 %556 = OpLoad %153 
                                       f32_3 %557 = OpVectorShuffle %556 %556 0 1 2 
                                         f32 %558 = OpDot %555 %557 
                                                      OpStore %58 %558 
                                         f32 %559 = OpLoad %58 
                                         f32 %560 = OpLoad %58 
                                         f32 %561 = OpFAdd %559 %560 
                                                      OpStore %58 %561 
                                       f32_4 %562 = OpLoad %153 
                                       f32_3 %563 = OpVectorShuffle %562 %562 0 1 2 
                                         f32 %564 = OpLoad %58 
                                       f32_3 %565 = OpCompositeConstruct %564 %564 %564 
                                       f32_3 %566 = OpFNegate %565 
                                       f32_3 %567 = OpFMul %563 %566 
                                       f32_3 %568 = OpLoad %41 
                                       f32_3 %569 = OpFNegate %568 
                                       f32_3 %570 = OpFAdd %567 %569 
                                                      OpStore %41 %570 
                                         f32 %571 = OpLoad %354 
                                         f32 %572 = OpFNegate %571 
                                         f32 %574 = OpFMul %572 %573 
                                         f32 %576 = OpFAdd %574 %575 
                                Private f32* %577 = OpAccessChain %199 %16 
                                                      OpStore %577 %576 
                                         f32 %578 = OpLoad %354 
                                Private f32* %579 = OpAccessChain %199 %16 
                                         f32 %580 = OpLoad %579 
                                         f32 %581 = OpFMul %578 %580 
                                                      OpStore %354 %581 
                                         f32 %582 = OpLoad %354 
                                         f32 %584 = OpFMul %582 %583 
                                                      OpStore %354 %584 
                       read_only TextureCube %589 = OpLoad %588 
                                     sampler %591 = OpLoad %590 
                read_only TextureCubeSampled %593 = OpSampledImage %589 %591 
                                       f32_3 %594 = OpLoad %41 
                                         f32 %595 = OpLoad %354 
                                       f32_4 %596 = OpImageSampleExplicitLod %593 %594 Lod %28 
                                                      OpStore %585 %596 
                                Private f32* %597 = OpAccessChain %585 %528 
                                         f32 %598 = OpLoad %597 
                                         f32 %599 = OpFAdd %598 %121 
                                                      OpStore %354 %599 
                                Uniform f32* %601 = OpAccessChain %500 %600 %528 
                                         f32 %602 = OpLoad %601 
                                         f32 %603 = OpLoad %354 
                                         f32 %604 = OpFMul %602 %603 
                                         f32 %605 = OpFAdd %604 %77 
                                                      OpStore %354 %605 
                                         f32 %606 = OpLoad %354 
                                         f32 %607 = OpExtInst %1 40 %606 %384 
                                                      OpStore %354 %607 
                                         f32 %608 = OpLoad %354 
                                         f32 %609 = OpExtInst %1 30 %608 
                                                      OpStore %354 %609 
                                         f32 %610 = OpLoad %354 
                                Uniform f32* %611 = OpAccessChain %500 %600 %309 
                                         f32 %612 = OpLoad %611 
                                         f32 %613 = OpFMul %610 %612 
                                                      OpStore %354 %613 
                                         f32 %614 = OpLoad %354 
                                         f32 %615 = OpExtInst %1 29 %614 
                                                      OpStore %354 %615 
                                         f32 %616 = OpLoad %354 
                                Uniform f32* %617 = OpAccessChain %500 %600 %16 
                                         f32 %618 = OpLoad %617 
                                         f32 %619 = OpFMul %616 %618 
                                                      OpStore %354 %619 
                                       f32_4 %620 = OpLoad %585 
                                       f32_3 %621 = OpVectorShuffle %620 %620 0 1 2 
                                         f32 %622 = OpLoad %354 
                                       f32_3 %623 = OpCompositeConstruct %622 %622 %622 
                                       f32_3 %624 = OpFMul %621 %623 
                                                      OpStore %199 %624 
                                       f32_3 %625 = OpLoad %117 
                                       f32_3 %626 = OpLoad %199 
                                       f32_3 %627 = OpFMul %625 %626 
                                                      OpStore %117 %627 
                                       f32_3 %628 = OpLoad %112 
                                Uniform f32* %629 = OpAccessChain %69 %35 
                                         f32 %630 = OpLoad %629 
                                       f32_3 %631 = OpCompositeConstruct %630 %630 %630 
                                       f32_3 %632 = OpFMul %628 %631 
                                       f32_3 %633 = OpLoad %117 
                                       f32_3 %634 = OpFAdd %632 %633 
                                                      OpStore %117 %634 
                                       f32_3 %635 = OpLoad %9 
                                       f32_3 %636 = OpLoad %117 
                                       f32_3 %637 = OpFAdd %635 %636 
                                                      OpStore %9 %637 
                              Uniform f32_4* %638 = OpAccessChain %33 %155 %86 
                                       f32_4 %639 = OpLoad %638 
                                       f32_3 %640 = OpVectorShuffle %639 %639 0 1 2 
                              Uniform f32_3* %643 = OpAccessChain %69 %641 
                                       f32_3 %644 = OpLoad %643 
                                       f32_3 %645 = OpVectorShuffle %644 %644 1 1 1 
                                       f32_3 %646 = OpFMul %640 %645 
                                                      OpStore %41 %646 
                              Uniform f32_4* %647 = OpAccessChain %33 %155 %35 
                                       f32_4 %648 = OpLoad %647 
                                       f32_3 %649 = OpVectorShuffle %648 %648 0 1 2 
                              Uniform f32_3* %650 = OpAccessChain %69 %641 
                                       f32_3 %651 = OpLoad %650 
                                       f32_3 %652 = OpVectorShuffle %651 %651 0 0 0 
                                       f32_3 %653 = OpFMul %649 %652 
                                       f32_3 %654 = OpLoad %41 
                                       f32_3 %655 = OpFAdd %653 %654 
                                                      OpStore %41 %655 
                              Uniform f32_4* %656 = OpAccessChain %33 %155 %155 
                                       f32_4 %657 = OpLoad %656 
                                       f32_3 %658 = OpVectorShuffle %657 %657 0 1 2 
                                Uniform f32* %659 = OpAccessChain %69 %641 %496 
                                         f32 %660 = OpLoad %659 
                                Uniform f32* %661 = OpAccessChain %69 %641 %496 
                                         f32 %662 = OpLoad %661 
                                Uniform f32* %663 = OpAccessChain %69 %641 %496 
                                         f32 %664 = OpLoad %663 
                                       f32_3 %665 = OpCompositeConstruct %660 %662 %664 
                                       f32_3 %666 = OpFMul %658 %665 
                                       f32_3 %667 = OpLoad %41 
                                       f32_3 %668 = OpFAdd %666 %667 
                                                      OpStore %41 %668 
                                       f32_3 %669 = OpLoad %41 
                                       f32_3 %670 = OpLoad %41 
                                         f32 %671 = OpDot %669 %670 
                                                      OpStore %58 %671 
                                         f32 %672 = OpLoad %58 
                                         f32 %673 = OpExtInst %1 32 %672 
                                                      OpStore %58 %673 
                                         f32 %674 = OpLoad %58 
                                       f32_3 %675 = OpCompositeConstruct %674 %674 %674 
                                       f32_3 %676 = OpLoad %41 
                                       f32_3 %677 = OpFMul %675 %676 
                                                      OpStore %41 %677 
                                       f32_4 %678 = OpLoad %153 
                                       f32_3 %679 = OpVectorShuffle %678 %678 0 1 2 
                                       f32_3 %680 = OpLoad %41 
                                         f32 %681 = OpDot %679 %680 
                                                      OpStore %58 %681 
                                         f32 %682 = OpLoad %58 
                                         f32 %684 = OpFMul %682 %683 
                                         f32 %685 = OpFAdd %684 %683 
                                                      OpStore %58 %685 
                                         f32 %686 = OpLoad %58 
                                Uniform f32* %688 = OpAccessChain %69 %687 
                                         f32 %689 = OpLoad %688 
                                         f32 %690 = OpFNegate %689 
                                         f32 %691 = OpFAdd %686 %690 
                                                      OpStore %58 %691 
                                         f32 %692 = OpLoad %58 
                                Uniform f32* %693 = OpAccessChain %69 %600 
                                         f32 %694 = OpLoad %693 
                                         f32 %695 = OpFMul %692 %694 
                                                      OpStore %58 %695 
                                         f32 %696 = OpLoad %58 
                                         f32 %697 = OpExtInst %1 43 %696 %384 %77 
                                                      OpStore %58 %697 
                                         f32 %698 = OpLoad %58 
                                       f32_3 %699 = OpCompositeConstruct %698 %698 %698 
                              Uniform f32_4* %701 = OpAccessChain %69 %700 
                                       f32_4 %702 = OpLoad %701 
                                       f32_3 %703 = OpVectorShuffle %702 %702 0 1 2 
                                       f32_3 %704 = OpFMul %699 %703 
                                                      OpStore %117 %704 
                                       f32_3 %705 = OpLoad %117 
                                Uniform f32* %707 = OpAccessChain %69 %706 
                                         f32 %708 = OpLoad %707 
                                Uniform f32* %709 = OpAccessChain %69 %706 
                                         f32 %710 = OpLoad %709 
                                Uniform f32* %711 = OpAccessChain %69 %706 
                                         f32 %712 = OpLoad %711 
                                       f32_3 %713 = OpCompositeConstruct %708 %710 %712 
                                         f32 %714 = OpCompositeExtract %713 0 
                                         f32 %715 = OpCompositeExtract %713 1 
                                         f32 %716 = OpCompositeExtract %713 2 
                                       f32_3 %717 = OpCompositeConstruct %714 %715 %716 
                                       f32_3 %718 = OpFMul %705 %717 
                                                      OpStore %41 %718 
                                       f32_3 %719 = OpLoad %81 
                                       f32_3 %720 = OpVectorShuffle %719 %719 0 0 0 
                                       f32_3 %721 = OpLoad %41 
                                       f32_3 %722 = OpFMul %720 %721 
                                                      OpStore %81 %722 
                                       f32_3 %723 = OpLoad %81 
                                       f32_3 %725 = OpFMul %723 %724 
                                                      OpStore %81 %725 
                                       f32_3 %726 = OpLoad %41 
                                       f32_3 %729 = OpFMul %726 %728 
                                       f32_3 %730 = OpLoad %81 
                                       f32_3 %731 = OpFAdd %729 %730 
                                                      OpStore %41 %731 
                                       f32_3 %732 = OpLoad %9 
                                       f32_3 %733 = OpLoad %41 
                                       f32_3 %734 = OpFAdd %732 %733 
                                                      OpStore %9 %734 
                                       f32_3 %735 = OpLoad %9 
                                       f32_3 %736 = OpExtInst %1 40 %735 %549 
                                                      OpStore %117 %736 
                                       f32_3 %737 = OpLoad %117 
                                       f32_3 %738 = OpExtInst %1 30 %737 
                                                      OpStore %117 %738 
                                       f32_3 %739 = OpLoad %117 
                                       f32_3 %742 = OpFMul %739 %741 
                                                      OpStore %117 %742 
                                       f32_3 %743 = OpLoad %117 
                                       f32_3 %744 = OpExtInst %1 29 %743 
                                                      OpStore %117 %744 
                                       f32_3 %747 = OpLoad %117 
                                       f32_3 %748 = OpExtInst %1 31 %747 
                                       f32_4 %749 = OpLoad %746 
                                       f32_4 %750 = OpVectorShuffle %749 %748 4 5 6 3 
                                                      OpStore %746 %750 
                                 Output f32* %752 = OpAccessChain %746 %528 
                                                      OpStore %752 %77 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec3 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = max(u_xlat9, 1.17549435e-38);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = max(u_xlat9, 1.17549435e-38);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD4.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _Expond;
	UNITY_UNIFORM vec4 _MREA_ST;
	UNITY_UNIFORM vec4 _MainTex_ST;
	UNITY_UNIFORM vec4 _Maincolor;
	UNITY_UNIFORM float _Roughness;
	UNITY_UNIFORM vec3 _rimlightdir;
	UNITY_UNIFORM vec4 _rimcolor;
	UNITY_UNIFORM float _rimhardness;
	UNITY_UNIFORM float _rimthreshold;
	UNITY_UNIFORM float _rimintensity;
	UNITY_UNIFORM float _anisotropic;
	UNITY_UNIFORM vec4 _anisocolor;
	UNITY_UNIFORM float _anisooffest;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(2) uniform mediump sampler2D _Normal;
UNITY_LOCATION(3) uniform mediump sampler2D _MREA;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
vec3 u_xlat10;
float u_xlat18;
float u_xlat24;
float u_xlat25;
float u_xlat26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat8.xyz = vs_TEXCOORD2.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat24 = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat25 = (-_anisotropic) * 0.899999976 + 1.0;
    u_xlat25 = sqrt(u_xlat25);
    u_xlat2.xy = vs_TEXCOORD0.xy * _MREA_ST.xy + _MREA_ST.zw;
    u_xlat16_2 = texture(_MREA, u_xlat2.xy).x;
    u_xlat10.x = u_xlat16_2 * u_xlat16_2;
    u_xlat16_3.x = u_xlat16_2 * 2.0 + -1.0;
    u_xlat2.x = u_xlat16_3.x + _anisooffest;
    u_xlat18 = u_xlat10.x / u_xlat25;
    u_xlat25 = u_xlat25 * u_xlat10.x;
    u_xlat10.x = u_xlat18 * u_xlat18;
    u_xlat24 = u_xlat24 / u_xlat10.x;
    u_xlat10.x = u_xlat25 * u_xlat25;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat16_5.xyz = texture(_Normal, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_MainTex, u_xlat4.xy).xyz;
    u_xlat4.xyz = u_xlat16_4.xyz * _Maincolor.xyz;
    u_xlat16_3.xyz = u_xlat4.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
    u_xlat16_6.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = u_xlat16_6.yyy * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = u_xlat16_6.xxx * vs_TEXCOORD3.xyz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat16_6.zzz * vs_TEXCOORD1.xyz + u_xlat4.xyz;
    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat4.xyz = vec3(u_xlat26) * u_xlat4.xyz;
    u_xlat5.xyz = u_xlat4.xyz * u_xlat2.xxx + vs_TEXCOORD4.xyz;
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat2.x = u_xlat2.x / u_xlat10.x;
    u_xlat24 = u_xlat24 + u_xlat2.x;
    u_xlat2.x = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    u_xlat0.y = u_xlat2.x * u_xlat2.x + u_xlat24;
    u_xlat0.xy = u_xlat0.xy * u_xlat0.xy;
    u_xlat8.x = u_xlat18 * u_xlat0.y;
    u_xlat8.x = u_xlat25 * u_xlat8.x;
    u_xlat8.x = u_xlat8.x * 3.14159274;
    u_xlat8.x = float(1.0) / u_xlat8.x;
    u_xlat8.xyz = u_xlat8.xxx * _anisocolor.xyz;
    u_xlat8.xyz = u_xlat8.xyz * _anisocolor.www;
    u_xlat25 = (-_Roughness) + 1.0;
    u_xlat16_27 = (-u_xlat25) + 1.0;
    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
    u_xlat16_27 = max(u_xlat16_27, 0.00200000009);
    u_xlat25 = u_xlat16_27 + u_xlat16_27;
    u_xlat0.x = u_xlat0.x * u_xlat25 + -0.5;
    u_xlat25 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat25 = max(u_xlat25, 9.99999975e-06);
    u_xlat25 = (-u_xlat25) + 1.0;
    u_xlat25 = max(u_xlat25, 0.0);
    u_xlat2.x = u_xlat25 * u_xlat25;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat25 = u_xlat25 * u_xlat2.x;
    u_xlat25 = u_xlat0.x * u_xlat25 + 1.0;
    u_xlat2.x = dot(u_xlat4.xyz, _MainLightPosition.xyz);
    u_xlat2.x = max(u_xlat2.x, 9.99999975e-06);
    u_xlat10.x = (-u_xlat2.x) + 1.0;
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlat18 = u_xlat10.x * u_xlat10.x;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat10.x = u_xlat10.x * u_xlat18;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + 1.0;
    u_xlat0.x = u_xlat25 * u_xlat0.x;
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat10.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
    u_xlat0.xyz = u_xlat10.xyz * _MainLightColor.xyz + u_xlat8.xyz;
    u_xlat16_6.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_6.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_6.x);
    u_xlat16_5 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_6.xyz = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;
    u_xlat4.w = 1.0;
    u_xlat16_7.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_7.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_7.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat10.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
    u_xlat24 = dot((-u_xlat1.xyz), u_xlat4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat1.xyz = u_xlat4.xyz * (-vec3(u_xlat24)) + (-u_xlat1.xyz);
    u_xlat16_6.x = (-u_xlat16_27) * 0.699999988 + 1.70000005;
    u_xlat16_27 = u_xlat16_27 * u_xlat16_6.x;
    u_xlat16_27 = u_xlat16_27 * 6.0;
    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat1.xyz, u_xlat16_27);
    u_xlat16_27 = u_xlat16_1.w + -1.0;
    u_xlat16_27 = unity_SpecCube0_HDR.w * u_xlat16_27 + 1.0;
    u_xlat16_27 = max(u_xlat16_27, 0.0);
    u_xlat16_27 = log2(u_xlat16_27);
    u_xlat16_27 = u_xlat16_27 * unity_SpecCube0_HDR.y;
    u_xlat16_27 = exp2(u_xlat16_27);
    u_xlat16_27 = u_xlat16_27 * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_1.xyz * vec3(u_xlat16_27);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
    u_xlat16_3.xyz = u_xlat10.xyz * vec3(_Expond) + u_xlat16_3.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixInvV[1].xyz * _rimlightdir.xxyz.zzz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixInvV[0].xyz * _rimlightdir.xxyz.yyy + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixInvV[2].xyz * vec3(_rimlightdir.z, _rimlightdir.z, _rimlightdir.z) + u_xlat1.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat24 = u_xlat24 * 0.5 + 0.5;
    u_xlat24 = u_xlat24 + (-_rimthreshold);
    u_xlat24 = u_xlat24 * _rimhardness;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = vec3(u_xlat24) * _rimcolor.xyz;
    u_xlat1.xyz = u_xlat16_3.xyz * vec3(vec3(_rimintensity, _rimintensity, _rimintensity));
    u_xlat2.xyz = u_xlat2.xxx * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat16_3.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(2.20000005, 2.20000005, 2.20000005);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    SV_Target0.xyz = sqrt(u_xlat16_3.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 222
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %84 %93 %95 %98 %138 %141 %148 %150 %184 %208 %213 %214 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 RelaxedPrecision 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 RelaxedPrecision 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 RelaxedPrecision 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 RelaxedPrecision 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 RelaxedPrecision 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 RelaxedPrecision 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpMemberDecorate %21 16 RelaxedPrecision 
                                                      OpMemberDecorate %21 16 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpDecorate %59 ArrayStride 59 
                                                      OpMemberDecorate %60 0 Offset 60 
                                                      OpMemberDecorate %60 1 Offset 60 
                                                      OpDecorate %60 Block 
                                                      OpDecorate %62 DescriptorSet 62 
                                                      OpDecorate %62 Binding 62 
                                                      OpMemberDecorate %82 0 BuiltIn 82 
                                                      OpMemberDecorate %82 1 BuiltIn 82 
                                                      OpMemberDecorate %82 2 BuiltIn 82 
                                                      OpDecorate %82 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 93 
                                                      OpDecorate %95 Location 95 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate vs_TEXCOORD1 Location 138 
                                                      OpDecorate vs_TEXCOORD2 Location 141 
                                                      OpDecorate vs_TEXCOORD5 Location 148 
                                                      OpDecorate %150 Location 150 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 208 
                                                      OpDecorate vs_TEXCOORD6 Location 213 
                                                      OpDecorate %214 Location 214 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %10 %16 
                                              %18 = OpTypeArray %10 %16 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypeArray %10 %19 
                                              %21 = OpTypeStruct %17 %18 %10 %10 %10 %20 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4; f32_4[2]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 0 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %10 
                                          i32 %40 = OpConstant 2 
                                          i32 %50 = OpConstant 3 
                                              %55 = OpTypePointer Private %10 
                               Private f32_4* %56 = OpVariable Private 
                                              %59 = OpTypeArray %10 %16 
                                              %60 = OpTypeStruct %7 %59 
                                              %61 = OpTypePointer Uniform %60 
           Uniform struct {f32_3; f32_4[4];}* %62 = OpVariable Uniform 
                                          u32 %80 = OpConstant 1 
                                              %81 = OpTypeArray %6 %80 
                                              %82 = OpTypeStruct %10 %6 %81 
                                              %83 = OpTypePointer Output %82 
         Output struct {f32_4; f32; f32[1];}* %84 = OpVariable Output 
                                              %89 = OpTypePointer Output %10 
                                              %91 = OpTypeVector %6 2 
                                              %92 = OpTypePointer Output %91 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                              %94 = OpTypePointer Input %91 
                                 Input f32_2* %95 = OpVariable Input 
                                              %97 = OpTypePointer Input %7 
                                 Input f32_3* %98 = OpVariable Input 
                                         u32 %104 = OpConstant 0 
                                             %105 = OpTypePointer Private %6 
                                Private f32* %119 = OpVariable Private 
                                         f32 %126 = OpConstant 3.674022E-40 
                                             %137 = OpTypePointer Output %7 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %144 = OpTypePointer Uniform %7 
                       Output f32_3* vs_TEXCOORD5 = OpVariable Output 
                                Input f32_4* %150 = OpVariable Input 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                              Private f32_3* %186 = OpVariable Private 
                                         u32 %200 = OpConstant 3 
                                             %201 = OpTypePointer Input %6 
                                             %204 = OpTypePointer Uniform %6 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                Input f32_4* %214 = OpVariable Input 
                                             %216 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %12 
                                        f32_3 %14 = OpVectorShuffle %13 %13 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_3 %30 = OpVectorShuffle %29 %29 0 1 2 
                                        f32_3 %31 = OpFMul %14 %30 
                                                      OpStore %9 %31 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %25 
                                        f32_4 %33 = OpLoad %32 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                        f32_4 %35 = OpLoad %12 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 0 0 
                                        f32_3 %37 = OpFMul %34 %36 
                                        f32_3 %38 = OpLoad %9 
                                        f32_3 %39 = OpFAdd %37 %38 
                                                      OpStore %9 %39 
                               Uniform f32_4* %41 = OpAccessChain %23 %25 %40 
                                        f32_4 %42 = OpLoad %41 
                                        f32_3 %43 = OpVectorShuffle %42 %42 0 1 2 
                                        f32_4 %44 = OpLoad %12 
                                        f32_3 %45 = OpVectorShuffle %44 %44 2 2 2 
                                        f32_3 %46 = OpFMul %43 %45 
                                        f32_3 %47 = OpLoad %9 
                                        f32_3 %48 = OpFAdd %46 %47 
                                                      OpStore %9 %48 
                                        f32_3 %49 = OpLoad %9 
                               Uniform f32_4* %51 = OpAccessChain %23 %25 %50 
                                        f32_4 %52 = OpLoad %51 
                                        f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                        f32_3 %54 = OpFAdd %49 %53 
                                                      OpStore %9 %54 
                                        f32_3 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 1 1 1 1 
                               Uniform f32_4* %63 = OpAccessChain %62 %26 %26 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFMul %58 %64 
                                                      OpStore %56 %65 
                               Uniform f32_4* %66 = OpAccessChain %62 %26 %25 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpLoad %9 
                                        f32_4 %69 = OpVectorShuffle %68 %68 0 0 0 0 
                                        f32_4 %70 = OpFMul %67 %69 
                                        f32_4 %71 = OpLoad %56 
                                        f32_4 %72 = OpFAdd %70 %71 
                                                      OpStore %56 %72 
                               Uniform f32_4* %73 = OpAccessChain %62 %26 %40 
                                        f32_4 %74 = OpLoad %73 
                                        f32_3 %75 = OpLoad %9 
                                        f32_4 %76 = OpVectorShuffle %75 %75 2 2 2 2 
                                        f32_4 %77 = OpFMul %74 %76 
                                        f32_4 %78 = OpLoad %56 
                                        f32_4 %79 = OpFAdd %77 %78 
                                                      OpStore %56 %79 
                                        f32_4 %85 = OpLoad %56 
                               Uniform f32_4* %86 = OpAccessChain %62 %26 %50 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpFAdd %85 %87 
                                Output f32_4* %90 = OpAccessChain %84 %25 
                                                      OpStore %90 %88 
                                        f32_2 %96 = OpLoad %95 
                                                      OpStore vs_TEXCOORD0 %96 
                                        f32_3 %99 = OpLoad %98 
                              Uniform f32_4* %100 = OpAccessChain %23 %26 %25 
                                       f32_4 %101 = OpLoad %100 
                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 2 
                                         f32 %103 = OpDot %99 %102 
                                Private f32* %106 = OpAccessChain %56 %104 
                                                      OpStore %106 %103 
                                       f32_3 %107 = OpLoad %98 
                              Uniform f32_4* %108 = OpAccessChain %23 %26 %26 
                                       f32_4 %109 = OpLoad %108 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                         f32 %111 = OpDot %107 %110 
                                Private f32* %112 = OpAccessChain %56 %80 
                                                      OpStore %112 %111 
                                       f32_3 %113 = OpLoad %98 
                              Uniform f32_4* %114 = OpAccessChain %23 %26 %40 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                         f32 %117 = OpDot %113 %116 
                                Private f32* %118 = OpAccessChain %56 %19 
                                                      OpStore %118 %117 
                                       f32_4 %120 = OpLoad %56 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_4 %122 = OpLoad %56 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                         f32 %124 = OpDot %121 %123 
                                                      OpStore %119 %124 
                                         f32 %125 = OpLoad %119 
                                         f32 %127 = OpExtInst %1 40 %125 %126 
                                                      OpStore %119 %127 
                                         f32 %128 = OpLoad %119 
                                         f32 %129 = OpExtInst %1 32 %128 
                                                      OpStore %119 %129 
                                         f32 %130 = OpLoad %119 
                                       f32_3 %131 = OpCompositeConstruct %130 %130 %130 
                                       f32_4 %132 = OpLoad %56 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_3 %134 = OpFMul %131 %133 
                                       f32_4 %135 = OpLoad %56 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 6 3 
                                                      OpStore %56 %136 
                                       f32_4 %139 = OpLoad %56 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                                      OpStore vs_TEXCOORD1 %140 
                                       f32_3 %142 = OpLoad %9 
                                       f32_3 %143 = OpFNegate %142 
                              Uniform f32_3* %145 = OpAccessChain %62 %25 
                                       f32_3 %146 = OpLoad %145 
                                       f32_3 %147 = OpFAdd %143 %146 
                                                      OpStore vs_TEXCOORD2 %147 
                                       f32_3 %149 = OpLoad %9 
                                                      OpStore vs_TEXCOORD5 %149 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 1 1 1 
                              Uniform f32_4* %153 = OpAccessChain %23 %25 %26 
                                       f32_4 %154 = OpLoad %153 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFMul %152 %155 
                                                      OpStore %9 %156 
                              Uniform f32_4* %157 = OpAccessChain %23 %25 %25 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_4 %160 = OpLoad %150 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 0 0 
                                       f32_3 %162 = OpFMul %159 %161 
                                       f32_3 %163 = OpLoad %9 
                                       f32_3 %164 = OpFAdd %162 %163 
                                                      OpStore %9 %164 
                              Uniform f32_4* %165 = OpAccessChain %23 %25 %40 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_4 %168 = OpLoad %150 
                                       f32_3 %169 = OpVectorShuffle %168 %168 2 2 2 
                                       f32_3 %170 = OpFMul %167 %169 
                                       f32_3 %171 = OpLoad %9 
                                       f32_3 %172 = OpFAdd %170 %171 
                                                      OpStore %9 %172 
                                       f32_3 %173 = OpLoad %9 
                                       f32_3 %174 = OpLoad %9 
                                         f32 %175 = OpDot %173 %174 
                                                      OpStore %119 %175 
                                         f32 %176 = OpLoad %119 
                                         f32 %177 = OpExtInst %1 40 %176 %126 
                                                      OpStore %119 %177 
                                         f32 %178 = OpLoad %119 
                                         f32 %179 = OpExtInst %1 32 %178 
                                                      OpStore %119 %179 
                                         f32 %180 = OpLoad %119 
                                       f32_3 %181 = OpCompositeConstruct %180 %180 %180 
                                       f32_3 %182 = OpLoad %9 
                                       f32_3 %183 = OpFMul %181 %182 
                                                      OpStore %9 %183 
                                       f32_3 %185 = OpLoad %9 
                                                      OpStore vs_TEXCOORD3 %185 
                                       f32_3 %187 = OpLoad %9 
                                       f32_3 %188 = OpVectorShuffle %187 %187 1 2 0 
                                       f32_4 %189 = OpLoad %56 
                                       f32_3 %190 = OpVectorShuffle %189 %189 2 0 1 
                                       f32_3 %191 = OpFMul %188 %190 
                                                      OpStore %186 %191 
                                       f32_4 %192 = OpLoad %56 
                                       f32_3 %193 = OpVectorShuffle %192 %192 1 2 0 
                                       f32_3 %194 = OpLoad %9 
                                       f32_3 %195 = OpVectorShuffle %194 %194 2 0 1 
                                       f32_3 %196 = OpFMul %193 %195 
                                       f32_3 %197 = OpLoad %186 
                                       f32_3 %198 = OpFNegate %197 
                                       f32_3 %199 = OpFAdd %196 %198 
                                                      OpStore %9 %199 
                                  Input f32* %202 = OpAccessChain %150 %200 
                                         f32 %203 = OpLoad %202 
                                Uniform f32* %205 = OpAccessChain %23 %50 %200 
                                         f32 %206 = OpLoad %205 
                                         f32 %207 = OpFMul %203 %206 
                                                      OpStore %119 %207 
                                         f32 %209 = OpLoad %119 
                                       f32_3 %210 = OpCompositeConstruct %209 %209 %209 
                                       f32_3 %211 = OpLoad %9 
                                       f32_3 %212 = OpFMul %210 %211 
                                                      OpStore vs_TEXCOORD4 %212 
                                       f32_4 %215 = OpLoad %214 
                                                      OpStore vs_TEXCOORD6 %215 
                                 Output f32* %217 = OpAccessChain %84 %25 %80 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpFNegate %218 
                                 Output f32* %220 = OpAccessChain %84 %25 %80 
                                                      OpStore %220 %219 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 754
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %59 %84 %207 %223 %746 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %30 ArrayStride 30 
                                                      OpMemberDecorate %31 0 Offset 31 
                                                      OpMemberDecorate %31 1 RelaxedPrecision 
                                                      OpMemberDecorate %31 1 Offset 31 
                                                      OpMemberDecorate %31 2 Offset 31 
                                                      OpDecorate %31 Block 
                                                      OpDecorate %33 DescriptorSet 33 
                                                      OpDecorate %33 Binding 33 
                                                      OpDecorate vs_TEXCOORD3 Location 59 
                                                      OpMemberDecorate %67 0 Offset 67 
                                                      OpMemberDecorate %67 1 Offset 67 
                                                      OpMemberDecorate %67 2 Offset 67 
                                                      OpMemberDecorate %67 3 Offset 67 
                                                      OpMemberDecorate %67 4 Offset 67 
                                                      OpMemberDecorate %67 5 Offset 67 
                                                      OpMemberDecorate %67 6 Offset 67 
                                                      OpMemberDecorate %67 7 Offset 67 
                                                      OpMemberDecorate %67 8 Offset 67 
                                                      OpMemberDecorate %67 9 Offset 67 
                                                      OpMemberDecorate %67 10 Offset 67 
                                                      OpMemberDecorate %67 11 Offset 67 
                                                      OpMemberDecorate %67 12 Offset 67 
                                                      OpDecorate %67 Block 
                                                      OpDecorate %69 DescriptorSet 69 
                                                      OpDecorate %69 Binding 69 
                                                      OpDecorate vs_TEXCOORD0 Location 84 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %100 DescriptorSet 100 
                                                      OpDecorate %100 Binding 100 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %104 DescriptorSet 104 
                                                      OpDecorate %104 Binding 104 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %120 RelaxedPrecision 
                                                      OpDecorate %122 RelaxedPrecision 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %167 DescriptorSet 167 
                                                      OpDecorate %167 Binding 167 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %169 DescriptorSet 169 
                                                      OpDecorate %169 Binding 169 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %177 DescriptorSet 177 
                                                      OpDecorate %177 Binding 177 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %179 DescriptorSet 179 
                                                      OpDecorate %179 Binding 179 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 207 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 223 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %483 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                                      OpDecorate %487 RelaxedPrecision 
                                                      OpDecorate %493 RelaxedPrecision 
                                                      OpDecorate %494 ArrayStride 494 
                                                      OpDecorate %495 ArrayStride 495 
                                                      OpDecorate %497 ArrayStride 497 
                                                      OpMemberDecorate %498 0 Offset 498 
                                                      OpMemberDecorate %498 1 Offset 498 
                                                      OpMemberDecorate %498 2 Offset 498 
                                                      OpMemberDecorate %498 3 RelaxedPrecision 
                                                      OpMemberDecorate %498 3 Offset 498 
                                                      OpMemberDecorate %498 4 RelaxedPrecision 
                                                      OpMemberDecorate %498 4 Offset 498 
                                                      OpMemberDecorate %498 5 RelaxedPrecision 
                                                      OpMemberDecorate %498 5 Offset 498 
                                                      OpMemberDecorate %498 6 Offset 498 
                                                      OpMemberDecorate %498 7 RelaxedPrecision 
                                                      OpMemberDecorate %498 7 Offset 498 
                                                      OpMemberDecorate %498 8 Offset 498 
                                                      OpMemberDecorate %498 9 Offset 498 
                                                      OpMemberDecorate %498 10 RelaxedPrecision 
                                                      OpMemberDecorate %498 10 Offset 498 
                                                      OpMemberDecorate %498 11 RelaxedPrecision 
                                                      OpMemberDecorate %498 11 Offset 498 
                                                      OpMemberDecorate %498 12 RelaxedPrecision 
                                                      OpMemberDecorate %498 12 Offset 498 
                                                      OpMemberDecorate %498 13 RelaxedPrecision 
                                                      OpMemberDecorate %498 13 Offset 498 
                                                      OpMemberDecorate %498 14 RelaxedPrecision 
                                                      OpMemberDecorate %498 14 Offset 498 
                                                      OpMemberDecorate %498 15 RelaxedPrecision 
                                                      OpMemberDecorate %498 15 Offset 498 
                                                      OpMemberDecorate %498 16 RelaxedPrecision 
                                                      OpMemberDecorate %498 16 Offset 498 
                                                      OpDecorate %498 Block 
                                                      OpDecorate %500 DescriptorSet 500 
                                                      OpDecorate %500 Binding 500 
                                                      OpDecorate %503 RelaxedPrecision 
                                                      OpDecorate %504 RelaxedPrecision 
                                                      OpDecorate %505 RelaxedPrecision 
                                                      OpDecorate %509 RelaxedPrecision 
                                                      OpDecorate %510 RelaxedPrecision 
                                                      OpDecorate %511 RelaxedPrecision 
                                                      OpDecorate %515 RelaxedPrecision 
                                                      OpDecorate %516 RelaxedPrecision 
                                                      OpDecorate %517 RelaxedPrecision 
                                                      OpDecorate %521 RelaxedPrecision 
                                                      OpDecorate %522 RelaxedPrecision 
                                                      OpDecorate %523 RelaxedPrecision 
                                                      OpDecorate %524 RelaxedPrecision 
                                                      OpDecorate %525 RelaxedPrecision 
                                                      OpDecorate %526 RelaxedPrecision 
                                                      OpDecorate %527 RelaxedPrecision 
                                                      OpDecorate %531 RelaxedPrecision 
                                                      OpDecorate %536 RelaxedPrecision 
                                                      OpDecorate %541 RelaxedPrecision 
                                                      OpDecorate %545 RelaxedPrecision 
                                                      OpDecorate %546 RelaxedPrecision 
                                                      OpDecorate %547 RelaxedPrecision 
                                                      OpDecorate %548 RelaxedPrecision 
                                                      OpDecorate %550 RelaxedPrecision 
                                                      OpDecorate %551 RelaxedPrecision 
                                                      OpDecorate %552 RelaxedPrecision 
                                                      OpDecorate %553 RelaxedPrecision 
                                                      OpDecorate %571 RelaxedPrecision 
                                                      OpDecorate %572 RelaxedPrecision 
                                                      OpDecorate %574 RelaxedPrecision 
                                                      OpDecorate %576 RelaxedPrecision 
                                                      OpDecorate %578 RelaxedPrecision 
                                                      OpDecorate %580 RelaxedPrecision 
                                                      OpDecorate %581 RelaxedPrecision 
                                                      OpDecorate %582 RelaxedPrecision 
                                                      OpDecorate %584 RelaxedPrecision 
                                                      OpDecorate %585 RelaxedPrecision 
                                                      OpDecorate %588 RelaxedPrecision 
                                                      OpDecorate %588 DescriptorSet 588 
                                                      OpDecorate %588 Binding 588 
                                                      OpDecorate %589 RelaxedPrecision 
                                                      OpDecorate %590 RelaxedPrecision 
                                                      OpDecorate %590 DescriptorSet 590 
                                                      OpDecorate %590 Binding 590 
                                                      OpDecorate %591 RelaxedPrecision 
                                                      OpDecorate %595 RelaxedPrecision 
                                                      OpDecorate %598 RelaxedPrecision 
                                                      OpDecorate %599 RelaxedPrecision 
                                                      OpDecorate %602 RelaxedPrecision 
                                                      OpDecorate %603 RelaxedPrecision 
                                                      OpDecorate %604 RelaxedPrecision 
                                                      OpDecorate %605 RelaxedPrecision 
                                                      OpDecorate %606 RelaxedPrecision 
                                                      OpDecorate %607 RelaxedPrecision 
                                                      OpDecorate %608 RelaxedPrecision 
                                                      OpDecorate %609 RelaxedPrecision 
                                                      OpDecorate %610 RelaxedPrecision 
                                                      OpDecorate %612 RelaxedPrecision 
                                                      OpDecorate %613 RelaxedPrecision 
                                                      OpDecorate %614 RelaxedPrecision 
                                                      OpDecorate %615 RelaxedPrecision 
                                                      OpDecorate %616 RelaxedPrecision 
                                                      OpDecorate %618 RelaxedPrecision 
                                                      OpDecorate %619 RelaxedPrecision 
                                                      OpDecorate %620 RelaxedPrecision 
                                                      OpDecorate %621 RelaxedPrecision 
                                                      OpDecorate %622 RelaxedPrecision 
                                                      OpDecorate %623 RelaxedPrecision 
                                                      OpDecorate %624 RelaxedPrecision 
                                                      OpDecorate %625 RelaxedPrecision 
                                                      OpDecorate %626 RelaxedPrecision 
                                                      OpDecorate %627 RelaxedPrecision 
                                                      OpDecorate %633 RelaxedPrecision 
                                                      OpDecorate %636 RelaxedPrecision 
                                                      OpDecorate %705 RelaxedPrecision 
                                                      OpDecorate %713 RelaxedPrecision 
                                                      OpDecorate %714 RelaxedPrecision 
                                                      OpDecorate %715 RelaxedPrecision 
                                                      OpDecorate %716 RelaxedPrecision 
                                                      OpDecorate %717 RelaxedPrecision 
                                                      OpDecorate %718 RelaxedPrecision 
                                                      OpDecorate %737 RelaxedPrecision 
                                                      OpDecorate %738 RelaxedPrecision 
                                                      OpDecorate %739 RelaxedPrecision 
                                                      OpDecorate %742 RelaxedPrecision 
                                                      OpDecorate %743 RelaxedPrecision 
                                                      OpDecorate %744 RelaxedPrecision 
                                                      OpDecorate %746 RelaxedPrecision 
                                                      OpDecorate %746 Location 746 
                                                      OpDecorate %747 RelaxedPrecision 
                                                      OpDecorate %748 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 0 
                                              %17 = OpTypePointer Private %6 
                               Private f32_3* %23 = OpVariable Private 
                                              %28 = OpTypeVector %6 4 
                                          u32 %29 = OpConstant 4 
                                              %30 = OpTypeArray %28 %29 
                                              %31 = OpTypeStruct %28 %28 %30 
                                              %32 = OpTypePointer Uniform %31 
    Uniform struct {f32_4; f32_4; f32_4[4];}* %33 = OpVariable Uniform 
                                              %34 = OpTypeInt 32 1 
                                          i32 %35 = OpConstant 0 
                                              %36 = OpTypePointer Uniform %28 
                               Private f32_3* %41 = OpVariable Private 
                                 Private f32* %58 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                 Private f32* %66 = OpVariable Private 
                                              %67 = OpTypeStruct %6 %28 %28 %28 %6 %7 %28 %6 %6 %6 %6 %28 %6 
                                              %68 = OpTypePointer Uniform %67 
Uniform struct {f32; f32_4; f32_4; f32_4; f32; f32_3; f32_4; f32; f32; f32; f32; f32_4; f32;}* %69 = OpVariable Uniform 
                                          i32 %70 = OpConstant 10 
                                              %71 = OpTypePointer Uniform %6 
                                          f32 %75 = OpConstant 3.674022E-40 
                                          f32 %77 = OpConstant 3.674022E-40 
                               Private f32_3* %81 = OpVariable Private 
                                              %82 = OpTypeVector %6 2 
                                              %83 = OpTypePointer Input %82 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                          i32 %86 = OpConstant 1 
                                 Private f32* %97 = OpVariable Private 
                                              %98 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %99 = OpTypePointer UniformConstant %98 
        UniformConstant read_only Texture2D* %100 = OpVariable UniformConstant 
                                             %102 = OpTypeSampler 
                                             %103 = OpTypePointer UniformConstant %102 
                    UniformConstant sampler* %104 = OpVariable UniformConstant 
                                             %106 = OpTypeSampledImage %98 
                              Private f32_3* %112 = OpVariable Private 
                              Private f32_3* %117 = OpVariable Private 
                                         f32 %119 = OpConstant 3.674022E-40 
                                         f32 %121 = OpConstant 3.674022E-40 
                                         i32 %126 = OpConstant 12 
                                Private f32* %131 = OpVariable Private 
                                             %152 = OpTypePointer Private %28 
                              Private f32_4* %153 = OpVariable Private 
                                         i32 %155 = OpConstant 2 
                              Private f32_3* %166 = OpVariable Private 
        UniformConstant read_only Texture2D* %167 = OpVariable UniformConstant 
                    UniformConstant sampler* %169 = OpVariable UniformConstant 
                              Private f32_3* %176 = OpVariable Private 
        UniformConstant read_only Texture2D* %177 = OpVariable UniformConstant 
                    UniformConstant sampler* %179 = OpVariable UniformConstant 
                                         i32 %187 = OpConstant 3 
                                         f32 %196 = OpConstant 3.674022E-40 
                                       f32_3 %197 = OpConstantComposite %196 %196 %196 
                              Private f32_3* %199 = OpVariable Private 
                                       f32_3 %201 = OpConstantComposite %119 %119 %119 
                                       f32_3 %203 = OpConstantComposite %121 %121 %121 
                        Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                Private f32* %231 = OpVariable Private 
                              Private f32_3* %246 = OpVariable Private 
                                         f32 %299 = OpConstant 3.674022E-40 
                                         u32 %309 = OpConstant 1 
                                         f32 %330 = OpConstant 3.674022E-40 
                                         i32 %339 = OpConstant 11 
                                         i32 %349 = OpConstant 4 
                                Private f32* %354 = OpVariable Private 
                                         f32 %362 = OpConstant 3.674022E-40 
                                         f32 %371 = OpConstant 3.674022E-40 
                                         f32 %384 = OpConstant 3.674022E-40 
                              Private f32_4* %487 = OpVariable Private 
                              Private f32_3* %493 = OpVariable Private 
                                             %494 = OpTypeArray %28 %29 
                                             %495 = OpTypeArray %28 %29 
                                         u32 %496 = OpConstant 2 
                                             %497 = OpTypeArray %28 %496 
                                             %498 = OpTypeStruct %494 %495 %28 %28 %28 %497 %28 %28 %28 %28 %28 %28 %28 %28 %28 %28 %28 
                                             %499 = OpTypePointer Uniform %498 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4; f32_4[2]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %500 = OpVariable Uniform 
                                         i32 %501 = OpConstant 13 
                                         i32 %507 = OpConstant 14 
                                         i32 %513 = OpConstant 15 
                                         i32 %519 = OpConstant 16 
                                         u32 %528 = OpConstant 3 
                                       f32_3 %549 = OpConstantComposite %384 %384 %384 
                                         f32 %573 = OpConstant 3.674022E-40 
                                         f32 %575 = OpConstant 3.674022E-40 
                                         f32 %583 = OpConstant 3.674022E-40 
                              Private f32_4* %585 = OpVariable Private 
                                             %586 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %587 = OpTypePointer UniformConstant %586 
      UniformConstant read_only TextureCube* %588 = OpVariable UniformConstant 
                    UniformConstant sampler* %590 = OpVariable UniformConstant 
                                             %592 = OpTypeSampledImage %586 
                                         i32 %600 = OpConstant 7 
                                         i32 %641 = OpConstant 5 
                                             %642 = OpTypePointer Uniform %7 
                                         f32 %683 = OpConstant 3.674022E-40 
                                         i32 %687 = OpConstant 8 
                                         i32 %700 = OpConstant 6 
                                         i32 %706 = OpConstant 9 
                                       f32_3 %724 = OpConstantComposite %573 %573 %573 
                                         f32 %727 = OpConstant 3.674022E-40 
                                       f32_3 %728 = OpConstantComposite %727 %727 %727 
                                         f32 %740 = OpConstant 3.674022E-40 
                                       f32_3 %741 = OpConstantComposite %740 %740 %740 
                                             %745 = OpTypePointer Output %28 
                               Output f32_4* %746 = OpVariable Output 
                                             %751 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                                          f32 %14 = OpDot %12 %13 
                                 Private f32* %18 = OpAccessChain %9 %16 
                                                      OpStore %18 %14 
                                 Private f32* %19 = OpAccessChain %9 %16 
                                          f32 %20 = OpLoad %19 
                                          f32 %21 = OpExtInst %1 32 %20 
                                 Private f32* %22 = OpAccessChain %9 %16 
                                                      OpStore %22 %21 
                                        f32_3 %24 = OpLoad vs_TEXCOORD2 
                                        f32_3 %25 = OpLoad %9 
                                        f32_3 %26 = OpVectorShuffle %25 %25 0 0 0 
                                        f32_3 %27 = OpFMul %24 %26 
                               Uniform f32_4* %37 = OpAccessChain %33 %35 
                                        f32_4 %38 = OpLoad %37 
                                        f32_3 %39 = OpVectorShuffle %38 %38 0 1 2 
                                        f32_3 %40 = OpFAdd %27 %39 
                                                      OpStore %23 %40 
                                        f32_3 %42 = OpLoad %9 
                                        f32_3 %43 = OpVectorShuffle %42 %42 0 0 0 
                                        f32_3 %44 = OpLoad vs_TEXCOORD2 
                                        f32_3 %45 = OpFMul %43 %44 
                                                      OpStore %41 %45 
                                        f32_3 %46 = OpLoad %23 
                                        f32_3 %47 = OpLoad %23 
                                          f32 %48 = OpDot %46 %47 
                                 Private f32* %49 = OpAccessChain %9 %16 
                                                      OpStore %49 %48 
                                 Private f32* %50 = OpAccessChain %9 %16 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpExtInst %1 32 %51 
                                 Private f32* %53 = OpAccessChain %9 %16 
                                                      OpStore %53 %52 
                                        f32_3 %54 = OpLoad %9 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 0 0 
                                        f32_3 %56 = OpLoad %23 
                                        f32_3 %57 = OpFMul %55 %56 
                                                      OpStore %9 %57 
                                        f32_3 %60 = OpLoad vs_TEXCOORD3 
                                        f32_3 %61 = OpLoad %9 
                                          f32 %62 = OpDot %60 %61 
                                                      OpStore %58 %62 
                                          f32 %63 = OpLoad %58 
                                          f32 %64 = OpLoad %58 
                                          f32 %65 = OpFMul %63 %64 
                                                      OpStore %58 %65 
                                 Uniform f32* %72 = OpAccessChain %69 %70 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFNegate %73 
                                          f32 %76 = OpFMul %74 %75 
                                          f32 %78 = OpFAdd %76 %77 
                                                      OpStore %66 %78 
                                          f32 %79 = OpLoad %66 
                                          f32 %80 = OpExtInst %1 31 %79 
                                                      OpStore %66 %80 
                                        f32_2 %85 = OpLoad vs_TEXCOORD0 
                               Uniform f32_4* %87 = OpAccessChain %69 %86 
                                        f32_4 %88 = OpLoad %87 
                                        f32_2 %89 = OpVectorShuffle %88 %88 0 1 
                                        f32_2 %90 = OpFMul %85 %89 
                               Uniform f32_4* %91 = OpAccessChain %69 %86 
                                        f32_4 %92 = OpLoad %91 
                                        f32_2 %93 = OpVectorShuffle %92 %92 2 3 
                                        f32_2 %94 = OpFAdd %90 %93 
                                        f32_3 %95 = OpLoad %81 
                                        f32_3 %96 = OpVectorShuffle %95 %94 3 4 2 
                                                      OpStore %81 %96 
                         read_only Texture2D %101 = OpLoad %100 
                                     sampler %105 = OpLoad %104 
                  read_only Texture2DSampled %107 = OpSampledImage %101 %105 
                                       f32_3 %108 = OpLoad %81 
                                       f32_2 %109 = OpVectorShuffle %108 %108 0 1 
                                       f32_4 %110 = OpImageSampleImplicitLod %107 %109 
                                         f32 %111 = OpCompositeExtract %110 0 
                                                      OpStore %97 %111 
                                         f32 %113 = OpLoad %97 
                                         f32 %114 = OpLoad %97 
                                         f32 %115 = OpFMul %113 %114 
                                Private f32* %116 = OpAccessChain %112 %16 
                                                      OpStore %116 %115 
                                         f32 %118 = OpLoad %97 
                                         f32 %120 = OpFMul %118 %119 
                                         f32 %122 = OpFAdd %120 %121 
                                Private f32* %123 = OpAccessChain %117 %16 
                                                      OpStore %123 %122 
                                Private f32* %124 = OpAccessChain %117 %16 
                                         f32 %125 = OpLoad %124 
                                Uniform f32* %127 = OpAccessChain %69 %126 
                                         f32 %128 = OpLoad %127 
                                         f32 %129 = OpFAdd %125 %128 
                                Private f32* %130 = OpAccessChain %81 %16 
                                                      OpStore %130 %129 
                                Private f32* %132 = OpAccessChain %112 %16 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpLoad %66 
                                         f32 %135 = OpFDiv %133 %134 
                                                      OpStore %131 %135 
                                         f32 %136 = OpLoad %66 
                                Private f32* %137 = OpAccessChain %112 %16 
                                         f32 %138 = OpLoad %137 
                                         f32 %139 = OpFMul %136 %138 
                                                      OpStore %66 %139 
                                         f32 %140 = OpLoad %131 
                                         f32 %141 = OpLoad %131 
                                         f32 %142 = OpFMul %140 %141 
                                Private f32* %143 = OpAccessChain %112 %16 
                                                      OpStore %143 %142 
                                         f32 %144 = OpLoad %58 
                                Private f32* %145 = OpAccessChain %112 %16 
                                         f32 %146 = OpLoad %145 
                                         f32 %147 = OpFDiv %144 %146 
                                                      OpStore %58 %147 
                                         f32 %148 = OpLoad %66 
                                         f32 %149 = OpLoad %66 
                                         f32 %150 = OpFMul %148 %149 
                                Private f32* %151 = OpAccessChain %112 %16 
                                                      OpStore %151 %150 
                                       f32_2 %154 = OpLoad vs_TEXCOORD0 
                              Uniform f32_4* %156 = OpAccessChain %69 %155 
                                       f32_4 %157 = OpLoad %156 
                                       f32_2 %158 = OpVectorShuffle %157 %157 0 1 
                                       f32_2 %159 = OpFMul %154 %158 
                              Uniform f32_4* %160 = OpAccessChain %69 %155 
                                       f32_4 %161 = OpLoad %160 
                                       f32_2 %162 = OpVectorShuffle %161 %161 2 3 
                                       f32_2 %163 = OpFAdd %159 %162 
                                       f32_4 %164 = OpLoad %153 
                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 2 3 
                                                      OpStore %153 %165 
                         read_only Texture2D %168 = OpLoad %167 
                                     sampler %170 = OpLoad %169 
                  read_only Texture2DSampled %171 = OpSampledImage %168 %170 
                                       f32_4 %172 = OpLoad %153 
                                       f32_2 %173 = OpVectorShuffle %172 %172 0 1 
                                       f32_4 %174 = OpImageSampleImplicitLod %171 %173 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                                                      OpStore %166 %175 
                         read_only Texture2D %178 = OpLoad %177 
                                     sampler %180 = OpLoad %179 
                  read_only Texture2DSampled %181 = OpSampledImage %178 %180 
                                       f32_4 %182 = OpLoad %153 
                                       f32_2 %183 = OpVectorShuffle %182 %182 0 1 
                                       f32_4 %184 = OpImageSampleImplicitLod %181 %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                                      OpStore %176 %185 
                                       f32_3 %186 = OpLoad %176 
                              Uniform f32_4* %188 = OpAccessChain %69 %187 
                                       f32_4 %189 = OpLoad %188 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_3 %191 = OpFMul %186 %190 
                                       f32_4 %192 = OpLoad %153 
                                       f32_4 %193 = OpVectorShuffle %192 %191 4 5 6 3 
                                                      OpStore %153 %193 
                                       f32_4 %194 = OpLoad %153 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_3 %198 = OpFMul %195 %197 
                                                      OpStore %117 %198 
                                       f32_3 %200 = OpLoad %166 
                                       f32_3 %202 = OpFMul %200 %201 
                                       f32_3 %204 = OpFAdd %202 %203 
                                                      OpStore %199 %204 
                                       f32_3 %205 = OpLoad %199 
                                       f32_3 %206 = OpVectorShuffle %205 %205 1 1 1 
                                       f32_3 %208 = OpLoad vs_TEXCOORD4 
                                       f32_3 %209 = OpFMul %206 %208 
                                       f32_4 %210 = OpLoad %153 
                                       f32_4 %211 = OpVectorShuffle %210 %209 4 5 6 3 
                                                      OpStore %153 %211 
                                       f32_3 %212 = OpLoad %199 
                                       f32_3 %213 = OpVectorShuffle %212 %212 0 0 0 
                                       f32_3 %214 = OpLoad vs_TEXCOORD3 
                                       f32_3 %215 = OpFMul %213 %214 
                                       f32_4 %216 = OpLoad %153 
                                       f32_3 %217 = OpVectorShuffle %216 %216 0 1 2 
                                       f32_3 %218 = OpFAdd %215 %217 
                                       f32_4 %219 = OpLoad %153 
                                       f32_4 %220 = OpVectorShuffle %219 %218 4 5 6 3 
                                                      OpStore %153 %220 
                                       f32_3 %221 = OpLoad %199 
                                       f32_3 %222 = OpVectorShuffle %221 %221 2 2 2 
                                       f32_3 %224 = OpLoad vs_TEXCOORD1 
                                       f32_3 %225 = OpFMul %222 %224 
                                       f32_4 %226 = OpLoad %153 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_3 %228 = OpFAdd %225 %227 
                                       f32_4 %229 = OpLoad %153 
                                       f32_4 %230 = OpVectorShuffle %229 %228 4 5 6 3 
                                                      OpStore %153 %230 
                                       f32_4 %232 = OpLoad %153 
                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
                                       f32_4 %234 = OpLoad %153 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
                                         f32 %236 = OpDot %233 %235 
                                                      OpStore %231 %236 
                                         f32 %237 = OpLoad %231 
                                         f32 %238 = OpExtInst %1 32 %237 
                                                      OpStore %231 %238 
                                         f32 %239 = OpLoad %231 
                                       f32_3 %240 = OpCompositeConstruct %239 %239 %239 
                                       f32_4 %241 = OpLoad %153 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 1 2 
                                       f32_3 %243 = OpFMul %240 %242 
                                       f32_4 %244 = OpLoad %153 
                                       f32_4 %245 = OpVectorShuffle %244 %243 4 5 6 3 
                                                      OpStore %153 %245 
                                       f32_4 %247 = OpLoad %153 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                       f32_3 %249 = OpLoad %81 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 0 0 
                                       f32_3 %251 = OpFMul %248 %250 
                                       f32_3 %252 = OpLoad vs_TEXCOORD4 
                                       f32_3 %253 = OpFAdd %251 %252 
                                                      OpStore %246 %253 
                                       f32_3 %254 = OpLoad %246 
                                       f32_3 %255 = OpLoad %246 
                                         f32 %256 = OpDot %254 %255 
                                Private f32* %257 = OpAccessChain %81 %16 
                                                      OpStore %257 %256 
                                Private f32* %258 = OpAccessChain %81 %16 
                                         f32 %259 = OpLoad %258 
                                         f32 %260 = OpExtInst %1 32 %259 
                                Private f32* %261 = OpAccessChain %81 %16 
                                                      OpStore %261 %260 
                                       f32_3 %262 = OpLoad %81 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 0 0 
                                       f32_3 %264 = OpLoad %246 
                                       f32_3 %265 = OpFMul %263 %264 
                                                      OpStore %246 %265 
                                       f32_3 %266 = OpLoad %246 
                                       f32_3 %267 = OpLoad %9 
                                         f32 %268 = OpDot %266 %267 
                                Private f32* %269 = OpAccessChain %81 %16 
                                                      OpStore %269 %268 
                                Private f32* %270 = OpAccessChain %81 %16 
                                         f32 %271 = OpLoad %270 
                                Private f32* %272 = OpAccessChain %81 %16 
                                         f32 %273 = OpLoad %272 
                                         f32 %274 = OpFMul %271 %273 
                                Private f32* %275 = OpAccessChain %81 %16 
                                                      OpStore %275 %274 
                                Private f32* %276 = OpAccessChain %81 %16 
                                         f32 %277 = OpLoad %276 
                                Private f32* %278 = OpAccessChain %112 %16 
                                         f32 %279 = OpLoad %278 
                                         f32 %280 = OpFDiv %277 %279 
                                Private f32* %281 = OpAccessChain %81 %16 
                                                      OpStore %281 %280 
                                         f32 %282 = OpLoad %58 
                                Private f32* %283 = OpAccessChain %81 %16 
                                         f32 %284 = OpLoad %283 
                                         f32 %285 = OpFAdd %282 %284 
                                                      OpStore %58 %285 
                                       f32_4 %286 = OpLoad %153 
                                       f32_3 %287 = OpVectorShuffle %286 %286 0 1 2 
                                       f32_3 %288 = OpLoad %9 
                                         f32 %289 = OpDot %287 %288 
                                Private f32* %290 = OpAccessChain %81 %16 
                                                      OpStore %290 %289 
                              Uniform f32_4* %291 = OpAccessChain %33 %35 
                                       f32_4 %292 = OpLoad %291 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
                                       f32_3 %294 = OpLoad %9 
                                         f32 %295 = OpDot %293 %294 
                                Private f32* %296 = OpAccessChain %9 %16 
                                                      OpStore %296 %295 
                                Private f32* %297 = OpAccessChain %9 %16 
                                         f32 %298 = OpLoad %297 
                                         f32 %300 = OpExtInst %1 40 %298 %299 
                                Private f32* %301 = OpAccessChain %9 %16 
                                                      OpStore %301 %300 
                                Private f32* %302 = OpAccessChain %81 %16 
                                         f32 %303 = OpLoad %302 
                                Private f32* %304 = OpAccessChain %81 %16 
                                         f32 %305 = OpLoad %304 
                                         f32 %306 = OpFMul %303 %305 
                                         f32 %307 = OpLoad %58 
                                         f32 %308 = OpFAdd %306 %307 
                                Private f32* %310 = OpAccessChain %9 %309 
                                                      OpStore %310 %308 
                                       f32_3 %311 = OpLoad %9 
                                       f32_2 %312 = OpVectorShuffle %311 %311 0 1 
                                       f32_3 %313 = OpLoad %9 
                                       f32_2 %314 = OpVectorShuffle %313 %313 0 1 
                                       f32_2 %315 = OpFMul %312 %314 
                                       f32_3 %316 = OpLoad %9 
                                       f32_3 %317 = OpVectorShuffle %316 %315 3 4 2 
                                                      OpStore %9 %317 
                                         f32 %318 = OpLoad %131 
                                Private f32* %319 = OpAccessChain %9 %309 
                                         f32 %320 = OpLoad %319 
                                         f32 %321 = OpFMul %318 %320 
                                Private f32* %322 = OpAccessChain %23 %16 
                                                      OpStore %322 %321 
                                         f32 %323 = OpLoad %66 
                                Private f32* %324 = OpAccessChain %23 %16 
                                         f32 %325 = OpLoad %324 
                                         f32 %326 = OpFMul %323 %325 
                                Private f32* %327 = OpAccessChain %23 %16 
                                                      OpStore %327 %326 
                                Private f32* %328 = OpAccessChain %23 %16 
                                         f32 %329 = OpLoad %328 
                                         f32 %331 = OpFMul %329 %330 
                                Private f32* %332 = OpAccessChain %23 %16 
                                                      OpStore %332 %331 
                                Private f32* %333 = OpAccessChain %23 %16 
                                         f32 %334 = OpLoad %333 
                                         f32 %335 = OpFDiv %77 %334 
                                Private f32* %336 = OpAccessChain %23 %16 
                                                      OpStore %336 %335 
                                       f32_3 %337 = OpLoad %23 
                                       f32_3 %338 = OpVectorShuffle %337 %337 0 0 0 
                              Uniform f32_4* %340 = OpAccessChain %69 %339 
                                       f32_4 %341 = OpLoad %340 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                                       f32_3 %343 = OpFMul %338 %342 
                                                      OpStore %23 %343 
                                       f32_3 %344 = OpLoad %23 
                              Uniform f32_4* %345 = OpAccessChain %69 %339 
                                       f32_4 %346 = OpLoad %345 
                                       f32_3 %347 = OpVectorShuffle %346 %346 3 3 3 
                                       f32_3 %348 = OpFMul %344 %347 
                                                      OpStore %23 %348 
                                Uniform f32* %350 = OpAccessChain %69 %349 
                                         f32 %351 = OpLoad %350 
                                         f32 %352 = OpFNegate %351 
                                         f32 %353 = OpFAdd %352 %77 
                                                      OpStore %66 %353 
                                         f32 %355 = OpLoad %66 
                                         f32 %356 = OpFNegate %355 
                                         f32 %357 = OpFAdd %356 %77 
                                                      OpStore %354 %357 
                                         f32 %358 = OpLoad %354 
                                         f32 %359 = OpLoad %354 
                                         f32 %360 = OpFMul %358 %359 
                                                      OpStore %354 %360 
                                         f32 %361 = OpLoad %354 
                                         f32 %363 = OpExtInst %1 40 %361 %362 
                                                      OpStore %354 %363 
                                         f32 %364 = OpLoad %354 
                                         f32 %365 = OpLoad %354 
                                         f32 %366 = OpFAdd %364 %365 
                                                      OpStore %66 %366 
                                Private f32* %367 = OpAccessChain %9 %16 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpLoad %66 
                                         f32 %370 = OpFMul %368 %369 
                                         f32 %372 = OpFAdd %370 %371 
                                Private f32* %373 = OpAccessChain %9 %16 
                                                      OpStore %373 %372 
                                       f32_4 %374 = OpLoad %153 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                                       f32_3 %376 = OpLoad %41 
                                         f32 %377 = OpDot %375 %376 
                                                      OpStore %66 %377 
                                         f32 %378 = OpLoad %66 
                                         f32 %379 = OpExtInst %1 40 %378 %299 
                                                      OpStore %66 %379 
                                         f32 %380 = OpLoad %66 
                                         f32 %381 = OpFNegate %380 
                                         f32 %382 = OpFAdd %381 %77 
                                                      OpStore %66 %382 
                                         f32 %383 = OpLoad %66 
                                         f32 %385 = OpExtInst %1 40 %383 %384 
                                                      OpStore %66 %385 
                                         f32 %386 = OpLoad %66 
                                         f32 %387 = OpLoad %66 
                                         f32 %388 = OpFMul %386 %387 
                                Private f32* %389 = OpAccessChain %81 %16 
                                                      OpStore %389 %388 
                                Private f32* %390 = OpAccessChain %81 %16 
                                         f32 %391 = OpLoad %390 
                                Private f32* %392 = OpAccessChain %81 %16 
                                         f32 %393 = OpLoad %392 
                                         f32 %394 = OpFMul %391 %393 
                                Private f32* %395 = OpAccessChain %81 %16 
                                                      OpStore %395 %394 
                                         f32 %396 = OpLoad %66 
                                Private f32* %397 = OpAccessChain %81 %16 
                                         f32 %398 = OpLoad %397 
                                         f32 %399 = OpFMul %396 %398 
                                                      OpStore %66 %399 
                                Private f32* %400 = OpAccessChain %9 %16 
                                         f32 %401 = OpLoad %400 
                                         f32 %402 = OpLoad %66 
                                         f32 %403 = OpFMul %401 %402 
                                         f32 %404 = OpFAdd %403 %77 
                                                      OpStore %66 %404 
                                       f32_4 %405 = OpLoad %153 
                                       f32_3 %406 = OpVectorShuffle %405 %405 0 1 2 
                              Uniform f32_4* %407 = OpAccessChain %33 %35 
                                       f32_4 %408 = OpLoad %407 
                                       f32_3 %409 = OpVectorShuffle %408 %408 0 1 2 
                                         f32 %410 = OpDot %406 %409 
                                Private f32* %411 = OpAccessChain %81 %16 
                                                      OpStore %411 %410 
                                Private f32* %412 = OpAccessChain %81 %16 
                                         f32 %413 = OpLoad %412 
                                         f32 %414 = OpExtInst %1 40 %413 %299 
                                Private f32* %415 = OpAccessChain %81 %16 
                                                      OpStore %415 %414 
                                Private f32* %416 = OpAccessChain %81 %16 
                                         f32 %417 = OpLoad %416 
                                         f32 %418 = OpFNegate %417 
                                         f32 %419 = OpFAdd %418 %77 
                                Private f32* %420 = OpAccessChain %112 %16 
                                                      OpStore %420 %419 
                                Private f32* %421 = OpAccessChain %112 %16 
                                         f32 %422 = OpLoad %421 
                                         f32 %423 = OpExtInst %1 40 %422 %384 
                                Private f32* %424 = OpAccessChain %112 %16 
                                                      OpStore %424 %423 
                                Private f32* %425 = OpAccessChain %112 %16 
                                         f32 %426 = OpLoad %425 
                                Private f32* %427 = OpAccessChain %112 %16 
                                         f32 %428 = OpLoad %427 
                                         f32 %429 = OpFMul %426 %428 
                                                      OpStore %131 %429 
                                         f32 %430 = OpLoad %131 
                                         f32 %431 = OpLoad %131 
                                         f32 %432 = OpFMul %430 %431 
                                                      OpStore %131 %432 
                                Private f32* %433 = OpAccessChain %112 %16 
                                         f32 %434 = OpLoad %433 
                                         f32 %435 = OpLoad %131 
                                         f32 %436 = OpFMul %434 %435 
                                Private f32* %437 = OpAccessChain %112 %16 
                                                      OpStore %437 %436 
                                Private f32* %438 = OpAccessChain %9 %16 
                                         f32 %439 = OpLoad %438 
                                Private f32* %440 = OpAccessChain %112 %16 
                                         f32 %441 = OpLoad %440 
                                         f32 %442 = OpFMul %439 %441 
                                         f32 %443 = OpFAdd %442 %77 
                                Private f32* %444 = OpAccessChain %9 %16 
                                                      OpStore %444 %443 
                                         f32 %445 = OpLoad %66 
                                Private f32* %446 = OpAccessChain %9 %16 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpFMul %445 %447 
                                Private f32* %449 = OpAccessChain %9 %16 
                                                      OpStore %449 %448 
                                Private f32* %450 = OpAccessChain %81 %16 
                                         f32 %451 = OpLoad %450 
                                Private f32* %452 = OpAccessChain %9 %16 
                                         f32 %453 = OpLoad %452 
                                         f32 %454 = OpFMul %451 %453 
                                Private f32* %455 = OpAccessChain %9 %16 
                                                      OpStore %455 %454 
                                Private f32* %456 = OpAccessChain %9 %16 
                                         f32 %457 = OpLoad %456 
                                         f32 %458 = OpExtInst %1 37 %457 %77 
                                Private f32* %459 = OpAccessChain %9 %16 
                                                      OpStore %459 %458 
                                       f32_3 %460 = OpLoad %9 
                                       f32_3 %461 = OpVectorShuffle %460 %460 0 0 0 
                                       f32_3 %462 = OpLoad %117 
                                       f32_3 %463 = OpFMul %461 %462 
                                                      OpStore %112 %463 
                                       f32_3 %464 = OpLoad %112 
                              Uniform f32_4* %465 = OpAccessChain %33 %86 
                                       f32_4 %466 = OpLoad %465 
                                       f32_3 %467 = OpVectorShuffle %466 %466 0 1 2 
                                       f32_3 %468 = OpFMul %464 %467 
                                       f32_3 %469 = OpLoad %23 
                                       f32_3 %470 = OpFAdd %468 %469 
                                                      OpStore %9 %470 
                                Private f32* %471 = OpAccessChain %153 %309 
                                         f32 %472 = OpLoad %471 
                                Private f32* %473 = OpAccessChain %153 %309 
                                         f32 %474 = OpLoad %473 
                                         f32 %475 = OpFMul %472 %474 
                                Private f32* %476 = OpAccessChain %199 %16 
                                                      OpStore %476 %475 
                                Private f32* %477 = OpAccessChain %153 %16 
                                         f32 %478 = OpLoad %477 
                                Private f32* %479 = OpAccessChain %153 %16 
                                         f32 %480 = OpLoad %479 
                                         f32 %481 = OpFMul %478 %480 
                                Private f32* %482 = OpAccessChain %199 %16 
                                         f32 %483 = OpLoad %482 
                                         f32 %484 = OpFNegate %483 
                                         f32 %485 = OpFAdd %481 %484 
                                Private f32* %486 = OpAccessChain %199 %16 
                                                      OpStore %486 %485 
                                       f32_4 %488 = OpLoad %153 
                                       f32_4 %489 = OpVectorShuffle %488 %488 1 2 2 0 
                                       f32_4 %490 = OpLoad %153 
                                       f32_4 %491 = OpVectorShuffle %490 %490 0 1 2 2 
                                       f32_4 %492 = OpFMul %489 %491 
                                                      OpStore %487 %492 
                              Uniform f32_4* %502 = OpAccessChain %500 %501 
                                       f32_4 %503 = OpLoad %502 
                                       f32_4 %504 = OpLoad %487 
                                         f32 %505 = OpDot %503 %504 
                                Private f32* %506 = OpAccessChain %493 %16 
                                                      OpStore %506 %505 
                              Uniform f32_4* %508 = OpAccessChain %500 %507 
                                       f32_4 %509 = OpLoad %508 
                                       f32_4 %510 = OpLoad %487 
                                         f32 %511 = OpDot %509 %510 
                                Private f32* %512 = OpAccessChain %493 %309 
                                                      OpStore %512 %511 
                              Uniform f32_4* %514 = OpAccessChain %500 %513 
                                       f32_4 %515 = OpLoad %514 
                                       f32_4 %516 = OpLoad %487 
                                         f32 %517 = OpDot %515 %516 
                                Private f32* %518 = OpAccessChain %493 %496 
                                                      OpStore %518 %517 
                              Uniform f32_4* %520 = OpAccessChain %500 %519 
                                       f32_4 %521 = OpLoad %520 
                                       f32_3 %522 = OpVectorShuffle %521 %521 0 1 2 
                                       f32_3 %523 = OpLoad %199 
                                       f32_3 %524 = OpVectorShuffle %523 %523 0 0 0 
                                       f32_3 %525 = OpFMul %522 %524 
                                       f32_3 %526 = OpLoad %493 
                                       f32_3 %527 = OpFAdd %525 %526 
                                                      OpStore %199 %527 
                                Private f32* %529 = OpAccessChain %153 %528 
                                                      OpStore %529 %77 
                              Uniform f32_4* %530 = OpAccessChain %500 %70 
                                       f32_4 %531 = OpLoad %530 
                                       f32_4 %532 = OpLoad %153 
                                         f32 %533 = OpDot %531 %532 
                                Private f32* %534 = OpAccessChain %493 %16 
                                                      OpStore %534 %533 
                              Uniform f32_4* %535 = OpAccessChain %500 %339 
                                       f32_4 %536 = OpLoad %535 
                                       f32_4 %537 = OpLoad %153 
                                         f32 %538 = OpDot %536 %537 
                                Private f32* %539 = OpAccessChain %493 %309 
                                                      OpStore %539 %538 
                              Uniform f32_4* %540 = OpAccessChain %500 %126 
                                       f32_4 %541 = OpLoad %540 
                                       f32_4 %542 = OpLoad %153 
                                         f32 %543 = OpDot %541 %542 
                                Private f32* %544 = OpAccessChain %493 %496 
                                                      OpStore %544 %543 
                                       f32_3 %545 = OpLoad %199 
                                       f32_3 %546 = OpLoad %493 
                                       f32_3 %547 = OpFAdd %545 %546 
                                                      OpStore %199 %547 
                                       f32_3 %548 = OpLoad %199 
                                       f32_3 %550 = OpExtInst %1 40 %548 %549 
                                                      OpStore %199 %550 
                                       f32_3 %551 = OpLoad %117 
                                       f32_3 %552 = OpLoad %199 
                                       f32_3 %553 = OpFMul %551 %552 
                                                      OpStore %112 %553 
                                       f32_3 %554 = OpLoad %41 
                                       f32_3 %555 = OpFNegate %554 
                                       f32_4 %556 = OpLoad %153 
                                       f32_3 %557 = OpVectorShuffle %556 %556 0 1 2 
                                         f32 %558 = OpDot %555 %557 
                                                      OpStore %58 %558 
                                         f32 %559 = OpLoad %58 
                                         f32 %560 = OpLoad %58 
                                         f32 %561 = OpFAdd %559 %560 
                                                      OpStore %58 %561 
                                       f32_4 %562 = OpLoad %153 
                                       f32_3 %563 = OpVectorShuffle %562 %562 0 1 2 
                                         f32 %564 = OpLoad %58 
                                       f32_3 %565 = OpCompositeConstruct %564 %564 %564 
                                       f32_3 %566 = OpFNegate %565 
                                       f32_3 %567 = OpFMul %563 %566 
                                       f32_3 %568 = OpLoad %41 
                                       f32_3 %569 = OpFNegate %568 
                                       f32_3 %570 = OpFAdd %567 %569 
                                                      OpStore %41 %570 
                                         f32 %571 = OpLoad %354 
                                         f32 %572 = OpFNegate %571 
                                         f32 %574 = OpFMul %572 %573 
                                         f32 %576 = OpFAdd %574 %575 
                                Private f32* %577 = OpAccessChain %199 %16 
                                                      OpStore %577 %576 
                                         f32 %578 = OpLoad %354 
                                Private f32* %579 = OpAccessChain %199 %16 
                                         f32 %580 = OpLoad %579 
                                         f32 %581 = OpFMul %578 %580 
                                                      OpStore %354 %581 
                                         f32 %582 = OpLoad %354 
                                         f32 %584 = OpFMul %582 %583 
                                                      OpStore %354 %584 
                       read_only TextureCube %589 = OpLoad %588 
                                     sampler %591 = OpLoad %590 
                read_only TextureCubeSampled %593 = OpSampledImage %589 %591 
                                       f32_3 %594 = OpLoad %41 
                                         f32 %595 = OpLoad %354 
                                       f32_4 %596 = OpImageSampleExplicitLod %593 %594 Lod %28 
                                                      OpStore %585 %596 
                                Private f32* %597 = OpAccessChain %585 %528 
                                         f32 %598 = OpLoad %597 
                                         f32 %599 = OpFAdd %598 %121 
                                                      OpStore %354 %599 
                                Uniform f32* %601 = OpAccessChain %500 %600 %528 
                                         f32 %602 = OpLoad %601 
                                         f32 %603 = OpLoad %354 
                                         f32 %604 = OpFMul %602 %603 
                                         f32 %605 = OpFAdd %604 %77 
                                                      OpStore %354 %605 
                                         f32 %606 = OpLoad %354 
                                         f32 %607 = OpExtInst %1 40 %606 %384 
                                                      OpStore %354 %607 
                                         f32 %608 = OpLoad %354 
                                         f32 %609 = OpExtInst %1 30 %608 
                                                      OpStore %354 %609 
                                         f32 %610 = OpLoad %354 
                                Uniform f32* %611 = OpAccessChain %500 %600 %309 
                                         f32 %612 = OpLoad %611 
                                         f32 %613 = OpFMul %610 %612 
                                                      OpStore %354 %613 
                                         f32 %614 = OpLoad %354 
                                         f32 %615 = OpExtInst %1 29 %614 
                                                      OpStore %354 %615 
                                         f32 %616 = OpLoad %354 
                                Uniform f32* %617 = OpAccessChain %500 %600 %16 
                                         f32 %618 = OpLoad %617 
                                         f32 %619 = OpFMul %616 %618 
                                                      OpStore %354 %619 
                                       f32_4 %620 = OpLoad %585 
                                       f32_3 %621 = OpVectorShuffle %620 %620 0 1 2 
                                         f32 %622 = OpLoad %354 
                                       f32_3 %623 = OpCompositeConstruct %622 %622 %622 
                                       f32_3 %624 = OpFMul %621 %623 
                                                      OpStore %199 %624 
                                       f32_3 %625 = OpLoad %117 
                                       f32_3 %626 = OpLoad %199 
                                       f32_3 %627 = OpFMul %625 %626 
                                                      OpStore %117 %627 
                                       f32_3 %628 = OpLoad %112 
                                Uniform f32* %629 = OpAccessChain %69 %35 
                                         f32 %630 = OpLoad %629 
                                       f32_3 %631 = OpCompositeConstruct %630 %630 %630 
                                       f32_3 %632 = OpFMul %628 %631 
                                       f32_3 %633 = OpLoad %117 
                                       f32_3 %634 = OpFAdd %632 %633 
                                                      OpStore %117 %634 
                                       f32_3 %635 = OpLoad %9 
                                       f32_3 %636 = OpLoad %117 
                                       f32_3 %637 = OpFAdd %635 %636 
                                                      OpStore %9 %637 
                              Uniform f32_4* %638 = OpAccessChain %33 %155 %86 
                                       f32_4 %639 = OpLoad %638 
                                       f32_3 %640 = OpVectorShuffle %639 %639 0 1 2 
                              Uniform f32_3* %643 = OpAccessChain %69 %641 
                                       f32_3 %644 = OpLoad %643 
                                       f32_3 %645 = OpVectorShuffle %644 %644 1 1 1 
                                       f32_3 %646 = OpFMul %640 %645 
                                                      OpStore %41 %646 
                              Uniform f32_4* %647 = OpAccessChain %33 %155 %35 
                                       f32_4 %648 = OpLoad %647 
                                       f32_3 %649 = OpVectorShuffle %648 %648 0 1 2 
                              Uniform f32_3* %650 = OpAccessChain %69 %641 
                                       f32_3 %651 = OpLoad %650 
                                       f32_3 %652 = OpVectorShuffle %651 %651 0 0 0 
                                       f32_3 %653 = OpFMul %649 %652 
                                       f32_3 %654 = OpLoad %41 
                                       f32_3 %655 = OpFAdd %653 %654 
                                                      OpStore %41 %655 
                              Uniform f32_4* %656 = OpAccessChain %33 %155 %155 
                                       f32_4 %657 = OpLoad %656 
                                       f32_3 %658 = OpVectorShuffle %657 %657 0 1 2 
                                Uniform f32* %659 = OpAccessChain %69 %641 %496 
                                         f32 %660 = OpLoad %659 
                                Uniform f32* %661 = OpAccessChain %69 %641 %496 
                                         f32 %662 = OpLoad %661 
                                Uniform f32* %663 = OpAccessChain %69 %641 %496 
                                         f32 %664 = OpLoad %663 
                                       f32_3 %665 = OpCompositeConstruct %660 %662 %664 
                                       f32_3 %666 = OpFMul %658 %665 
                                       f32_3 %667 = OpLoad %41 
                                       f32_3 %668 = OpFAdd %666 %667 
                                                      OpStore %41 %668 
                                       f32_3 %669 = OpLoad %41 
                                       f32_3 %670 = OpLoad %41 
                                         f32 %671 = OpDot %669 %670 
                                                      OpStore %58 %671 
                                         f32 %672 = OpLoad %58 
                                         f32 %673 = OpExtInst %1 32 %672 
                                                      OpStore %58 %673 
                                         f32 %674 = OpLoad %58 
                                       f32_3 %675 = OpCompositeConstruct %674 %674 %674 
                                       f32_3 %676 = OpLoad %41 
                                       f32_3 %677 = OpFMul %675 %676 
                                                      OpStore %41 %677 
                                       f32_4 %678 = OpLoad %153 
                                       f32_3 %679 = OpVectorShuffle %678 %678 0 1 2 
                                       f32_3 %680 = OpLoad %41 
                                         f32 %681 = OpDot %679 %680 
                                                      OpStore %58 %681 
                                         f32 %682 = OpLoad %58 
                                         f32 %684 = OpFMul %682 %683 
                                         f32 %685 = OpFAdd %684 %683 
                                                      OpStore %58 %685 
                                         f32 %686 = OpLoad %58 
                                Uniform f32* %688 = OpAccessChain %69 %687 
                                         f32 %689 = OpLoad %688 
                                         f32 %690 = OpFNegate %689 
                                         f32 %691 = OpFAdd %686 %690 
                                                      OpStore %58 %691 
                                         f32 %692 = OpLoad %58 
                                Uniform f32* %693 = OpAccessChain %69 %600 
                                         f32 %694 = OpLoad %693 
                                         f32 %695 = OpFMul %692 %694 
                                                      OpStore %58 %695 
                                         f32 %696 = OpLoad %58 
                                         f32 %697 = OpExtInst %1 43 %696 %384 %77 
                                                      OpStore %58 %697 
                                         f32 %698 = OpLoad %58 
                                       f32_3 %699 = OpCompositeConstruct %698 %698 %698 
                              Uniform f32_4* %701 = OpAccessChain %69 %700 
                                       f32_4 %702 = OpLoad %701 
                                       f32_3 %703 = OpVectorShuffle %702 %702 0 1 2 
                                       f32_3 %704 = OpFMul %699 %703 
                                                      OpStore %117 %704 
                                       f32_3 %705 = OpLoad %117 
                                Uniform f32* %707 = OpAccessChain %69 %706 
                                         f32 %708 = OpLoad %707 
                                Uniform f32* %709 = OpAccessChain %69 %706 
                                         f32 %710 = OpLoad %709 
                                Uniform f32* %711 = OpAccessChain %69 %706 
                                         f32 %712 = OpLoad %711 
                                       f32_3 %713 = OpCompositeConstruct %708 %710 %712 
                                         f32 %714 = OpCompositeExtract %713 0 
                                         f32 %715 = OpCompositeExtract %713 1 
                                         f32 %716 = OpCompositeExtract %713 2 
                                       f32_3 %717 = OpCompositeConstruct %714 %715 %716 
                                       f32_3 %718 = OpFMul %705 %717 
                                                      OpStore %41 %718 
                                       f32_3 %719 = OpLoad %81 
                                       f32_3 %720 = OpVectorShuffle %719 %719 0 0 0 
                                       f32_3 %721 = OpLoad %41 
                                       f32_3 %722 = OpFMul %720 %721 
                                                      OpStore %81 %722 
                                       f32_3 %723 = OpLoad %81 
                                       f32_3 %725 = OpFMul %723 %724 
                                                      OpStore %81 %725 
                                       f32_3 %726 = OpLoad %41 
                                       f32_3 %729 = OpFMul %726 %728 
                                       f32_3 %730 = OpLoad %81 
                                       f32_3 %731 = OpFAdd %729 %730 
                                                      OpStore %41 %731 
                                       f32_3 %732 = OpLoad %9 
                                       f32_3 %733 = OpLoad %41 
                                       f32_3 %734 = OpFAdd %732 %733 
                                                      OpStore %9 %734 
                                       f32_3 %735 = OpLoad %9 
                                       f32_3 %736 = OpExtInst %1 40 %735 %549 
                                                      OpStore %117 %736 
                                       f32_3 %737 = OpLoad %117 
                                       f32_3 %738 = OpExtInst %1 30 %737 
                                                      OpStore %117 %738 
                                       f32_3 %739 = OpLoad %117 
                                       f32_3 %742 = OpFMul %739 %741 
                                                      OpStore %117 %742 
                                       f32_3 %743 = OpLoad %117 
                                       f32_3 %744 = OpExtInst %1 29 %743 
                                                      OpStore %117 %744 
                                       f32_3 %747 = OpLoad %117 
                                       f32_3 %748 = OpExtInst %1 31 %747 
                                       f32_4 %749 = OpLoad %746 
                                       f32_4 %750 = OpVectorShuffle %749 %748 4 5 6 3 
                                                      OpStore %746 %750 
                                 Output f32* %752 = OpAccessChain %746 %528 
                                                      OpStore %752 %77 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec3 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = max(u_xlat9, 1.17549435e-38);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = max(u_xlat9, 1.17549435e-38);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD4.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _Expond;
	UNITY_UNIFORM vec4 _MREA_ST;
	UNITY_UNIFORM vec4 _MainTex_ST;
	UNITY_UNIFORM vec4 _Maincolor;
	UNITY_UNIFORM float _Roughness;
	UNITY_UNIFORM vec3 _rimlightdir;
	UNITY_UNIFORM vec4 _rimcolor;
	UNITY_UNIFORM float _rimhardness;
	UNITY_UNIFORM float _rimthreshold;
	UNITY_UNIFORM float _rimintensity;
	UNITY_UNIFORM float _anisotropic;
	UNITY_UNIFORM vec4 _anisocolor;
	UNITY_UNIFORM float _anisooffest;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(2) uniform mediump sampler2D _Normal;
UNITY_LOCATION(3) uniform mediump sampler2D _MREA;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
vec3 u_xlat10;
float u_xlat18;
float u_xlat24;
float u_xlat25;
float u_xlat26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat8.xyz = vs_TEXCOORD2.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat24 = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat25 = (-_anisotropic) * 0.899999976 + 1.0;
    u_xlat25 = sqrt(u_xlat25);
    u_xlat2.xy = vs_TEXCOORD0.xy * _MREA_ST.xy + _MREA_ST.zw;
    u_xlat16_2 = texture(_MREA, u_xlat2.xy).x;
    u_xlat10.x = u_xlat16_2 * u_xlat16_2;
    u_xlat16_3.x = u_xlat16_2 * 2.0 + -1.0;
    u_xlat2.x = u_xlat16_3.x + _anisooffest;
    u_xlat18 = u_xlat10.x / u_xlat25;
    u_xlat25 = u_xlat25 * u_xlat10.x;
    u_xlat10.x = u_xlat18 * u_xlat18;
    u_xlat24 = u_xlat24 / u_xlat10.x;
    u_xlat10.x = u_xlat25 * u_xlat25;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat16_5.xyz = texture(_Normal, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_MainTex, u_xlat4.xy).xyz;
    u_xlat4.xyz = u_xlat16_4.xyz * _Maincolor.xyz;
    u_xlat16_3.xyz = u_xlat4.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
    u_xlat16_6.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = u_xlat16_6.yyy * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = u_xlat16_6.xxx * vs_TEXCOORD3.xyz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat16_6.zzz * vs_TEXCOORD1.xyz + u_xlat4.xyz;
    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat4.xyz = vec3(u_xlat26) * u_xlat4.xyz;
    u_xlat5.xyz = u_xlat4.xyz * u_xlat2.xxx + vs_TEXCOORD4.xyz;
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat2.x = u_xlat2.x / u_xlat10.x;
    u_xlat24 = u_xlat24 + u_xlat2.x;
    u_xlat2.x = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    u_xlat0.y = u_xlat2.x * u_xlat2.x + u_xlat24;
    u_xlat0.xy = u_xlat0.xy * u_xlat0.xy;
    u_xlat8.x = u_xlat18 * u_xlat0.y;
    u_xlat8.x = u_xlat25 * u_xlat8.x;
    u_xlat8.x = u_xlat8.x * 3.14159274;
    u_xlat8.x = float(1.0) / u_xlat8.x;
    u_xlat8.xyz = u_xlat8.xxx * _anisocolor.xyz;
    u_xlat8.xyz = u_xlat8.xyz * _anisocolor.www;
    u_xlat25 = (-_Roughness) + 1.0;
    u_xlat16_27 = (-u_xlat25) + 1.0;
    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
    u_xlat16_27 = max(u_xlat16_27, 0.00200000009);
    u_xlat25 = u_xlat16_27 + u_xlat16_27;
    u_xlat0.x = u_xlat0.x * u_xlat25 + -0.5;
    u_xlat25 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat25 = max(u_xlat25, 9.99999975e-06);
    u_xlat25 = (-u_xlat25) + 1.0;
    u_xlat25 = max(u_xlat25, 0.0);
    u_xlat2.x = u_xlat25 * u_xlat25;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat25 = u_xlat25 * u_xlat2.x;
    u_xlat25 = u_xlat0.x * u_xlat25 + 1.0;
    u_xlat2.x = dot(u_xlat4.xyz, _MainLightPosition.xyz);
    u_xlat2.x = max(u_xlat2.x, 9.99999975e-06);
    u_xlat10.x = (-u_xlat2.x) + 1.0;
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlat18 = u_xlat10.x * u_xlat10.x;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat10.x = u_xlat10.x * u_xlat18;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + 1.0;
    u_xlat0.x = u_xlat25 * u_xlat0.x;
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat10.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
    u_xlat0.xyz = u_xlat10.xyz * _MainLightColor.xyz + u_xlat8.xyz;
    u_xlat16_6.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_6.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_6.x);
    u_xlat16_5 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_6.xyz = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;
    u_xlat4.w = 1.0;
    u_xlat16_7.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_7.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_7.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat10.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
    u_xlat24 = dot((-u_xlat1.xyz), u_xlat4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat1.xyz = u_xlat4.xyz * (-vec3(u_xlat24)) + (-u_xlat1.xyz);
    u_xlat16_6.x = (-u_xlat16_27) * 0.699999988 + 1.70000005;
    u_xlat16_27 = u_xlat16_27 * u_xlat16_6.x;
    u_xlat16_27 = u_xlat16_27 * 6.0;
    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat1.xyz, u_xlat16_27);
    u_xlat16_27 = u_xlat16_1.w + -1.0;
    u_xlat16_27 = unity_SpecCube0_HDR.w * u_xlat16_27 + 1.0;
    u_xlat16_27 = max(u_xlat16_27, 0.0);
    u_xlat16_27 = log2(u_xlat16_27);
    u_xlat16_27 = u_xlat16_27 * unity_SpecCube0_HDR.y;
    u_xlat16_27 = exp2(u_xlat16_27);
    u_xlat16_27 = u_xlat16_27 * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_1.xyz * vec3(u_xlat16_27);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
    u_xlat16_3.xyz = u_xlat10.xyz * vec3(_Expond) + u_xlat16_3.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixInvV[1].xyz * _rimlightdir.xxyz.zzz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixInvV[0].xyz * _rimlightdir.xxyz.yyy + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixInvV[2].xyz * vec3(_rimlightdir.z, _rimlightdir.z, _rimlightdir.z) + u_xlat1.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat24 = u_xlat24 * 0.5 + 0.5;
    u_xlat24 = u_xlat24 + (-_rimthreshold);
    u_xlat24 = u_xlat24 * _rimhardness;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = vec3(u_xlat24) * _rimcolor.xyz;
    u_xlat1.xyz = u_xlat16_3.xyz * vec3(vec3(_rimintensity, _rimintensity, _rimintensity));
    u_xlat2.xyz = u_xlat2.xxx * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat16_3.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(2.20000005, 2.20000005, 2.20000005);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    SV_Target0.xyz = sqrt(u_xlat16_3.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "_MAIN_LIGHT_SHADOWS" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 222
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %84 %93 %95 %98 %138 %141 %148 %150 %184 %208 %213 %214 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 RelaxedPrecision 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 RelaxedPrecision 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 RelaxedPrecision 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 RelaxedPrecision 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 RelaxedPrecision 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 RelaxedPrecision 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpMemberDecorate %21 16 RelaxedPrecision 
                                                      OpMemberDecorate %21 16 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpDecorate %59 ArrayStride 59 
                                                      OpMemberDecorate %60 0 Offset 60 
                                                      OpMemberDecorate %60 1 Offset 60 
                                                      OpDecorate %60 Block 
                                                      OpDecorate %62 DescriptorSet 62 
                                                      OpDecorate %62 Binding 62 
                                                      OpMemberDecorate %82 0 BuiltIn 82 
                                                      OpMemberDecorate %82 1 BuiltIn 82 
                                                      OpMemberDecorate %82 2 BuiltIn 82 
                                                      OpDecorate %82 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 93 
                                                      OpDecorate %95 Location 95 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate vs_TEXCOORD1 Location 138 
                                                      OpDecorate vs_TEXCOORD2 Location 141 
                                                      OpDecorate vs_TEXCOORD5 Location 148 
                                                      OpDecorate %150 Location 150 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 208 
                                                      OpDecorate vs_TEXCOORD6 Location 213 
                                                      OpDecorate %214 Location 214 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %10 %16 
                                              %18 = OpTypeArray %10 %16 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypeArray %10 %19 
                                              %21 = OpTypeStruct %17 %18 %10 %10 %10 %20 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4; f32_4[2]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 0 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %10 
                                          i32 %40 = OpConstant 2 
                                          i32 %50 = OpConstant 3 
                                              %55 = OpTypePointer Private %10 
                               Private f32_4* %56 = OpVariable Private 
                                              %59 = OpTypeArray %10 %16 
                                              %60 = OpTypeStruct %7 %59 
                                              %61 = OpTypePointer Uniform %60 
           Uniform struct {f32_3; f32_4[4];}* %62 = OpVariable Uniform 
                                          u32 %80 = OpConstant 1 
                                              %81 = OpTypeArray %6 %80 
                                              %82 = OpTypeStruct %10 %6 %81 
                                              %83 = OpTypePointer Output %82 
         Output struct {f32_4; f32; f32[1];}* %84 = OpVariable Output 
                                              %89 = OpTypePointer Output %10 
                                              %91 = OpTypeVector %6 2 
                                              %92 = OpTypePointer Output %91 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                              %94 = OpTypePointer Input %91 
                                 Input f32_2* %95 = OpVariable Input 
                                              %97 = OpTypePointer Input %7 
                                 Input f32_3* %98 = OpVariable Input 
                                         u32 %104 = OpConstant 0 
                                             %105 = OpTypePointer Private %6 
                                Private f32* %119 = OpVariable Private 
                                         f32 %126 = OpConstant 3.674022E-40 
                                             %137 = OpTypePointer Output %7 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %144 = OpTypePointer Uniform %7 
                       Output f32_3* vs_TEXCOORD5 = OpVariable Output 
                                Input f32_4* %150 = OpVariable Input 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                              Private f32_3* %186 = OpVariable Private 
                                         u32 %200 = OpConstant 3 
                                             %201 = OpTypePointer Input %6 
                                             %204 = OpTypePointer Uniform %6 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                Input f32_4* %214 = OpVariable Input 
                                             %216 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %12 
                                        f32_3 %14 = OpVectorShuffle %13 %13 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_3 %30 = OpVectorShuffle %29 %29 0 1 2 
                                        f32_3 %31 = OpFMul %14 %30 
                                                      OpStore %9 %31 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %25 
                                        f32_4 %33 = OpLoad %32 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                        f32_4 %35 = OpLoad %12 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 0 0 
                                        f32_3 %37 = OpFMul %34 %36 
                                        f32_3 %38 = OpLoad %9 
                                        f32_3 %39 = OpFAdd %37 %38 
                                                      OpStore %9 %39 
                               Uniform f32_4* %41 = OpAccessChain %23 %25 %40 
                                        f32_4 %42 = OpLoad %41 
                                        f32_3 %43 = OpVectorShuffle %42 %42 0 1 2 
                                        f32_4 %44 = OpLoad %12 
                                        f32_3 %45 = OpVectorShuffle %44 %44 2 2 2 
                                        f32_3 %46 = OpFMul %43 %45 
                                        f32_3 %47 = OpLoad %9 
                                        f32_3 %48 = OpFAdd %46 %47 
                                                      OpStore %9 %48 
                                        f32_3 %49 = OpLoad %9 
                               Uniform f32_4* %51 = OpAccessChain %23 %25 %50 
                                        f32_4 %52 = OpLoad %51 
                                        f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                        f32_3 %54 = OpFAdd %49 %53 
                                                      OpStore %9 %54 
                                        f32_3 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 1 1 1 1 
                               Uniform f32_4* %63 = OpAccessChain %62 %26 %26 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFMul %58 %64 
                                                      OpStore %56 %65 
                               Uniform f32_4* %66 = OpAccessChain %62 %26 %25 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpLoad %9 
                                        f32_4 %69 = OpVectorShuffle %68 %68 0 0 0 0 
                                        f32_4 %70 = OpFMul %67 %69 
                                        f32_4 %71 = OpLoad %56 
                                        f32_4 %72 = OpFAdd %70 %71 
                                                      OpStore %56 %72 
                               Uniform f32_4* %73 = OpAccessChain %62 %26 %40 
                                        f32_4 %74 = OpLoad %73 
                                        f32_3 %75 = OpLoad %9 
                                        f32_4 %76 = OpVectorShuffle %75 %75 2 2 2 2 
                                        f32_4 %77 = OpFMul %74 %76 
                                        f32_4 %78 = OpLoad %56 
                                        f32_4 %79 = OpFAdd %77 %78 
                                                      OpStore %56 %79 
                                        f32_4 %85 = OpLoad %56 
                               Uniform f32_4* %86 = OpAccessChain %62 %26 %50 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpFAdd %85 %87 
                                Output f32_4* %90 = OpAccessChain %84 %25 
                                                      OpStore %90 %88 
                                        f32_2 %96 = OpLoad %95 
                                                      OpStore vs_TEXCOORD0 %96 
                                        f32_3 %99 = OpLoad %98 
                              Uniform f32_4* %100 = OpAccessChain %23 %26 %25 
                                       f32_4 %101 = OpLoad %100 
                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 2 
                                         f32 %103 = OpDot %99 %102 
                                Private f32* %106 = OpAccessChain %56 %104 
                                                      OpStore %106 %103 
                                       f32_3 %107 = OpLoad %98 
                              Uniform f32_4* %108 = OpAccessChain %23 %26 %26 
                                       f32_4 %109 = OpLoad %108 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                         f32 %111 = OpDot %107 %110 
                                Private f32* %112 = OpAccessChain %56 %80 
                                                      OpStore %112 %111 
                                       f32_3 %113 = OpLoad %98 
                              Uniform f32_4* %114 = OpAccessChain %23 %26 %40 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                         f32 %117 = OpDot %113 %116 
                                Private f32* %118 = OpAccessChain %56 %19 
                                                      OpStore %118 %117 
                                       f32_4 %120 = OpLoad %56 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_4 %122 = OpLoad %56 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                         f32 %124 = OpDot %121 %123 
                                                      OpStore %119 %124 
                                         f32 %125 = OpLoad %119 
                                         f32 %127 = OpExtInst %1 40 %125 %126 
                                                      OpStore %119 %127 
                                         f32 %128 = OpLoad %119 
                                         f32 %129 = OpExtInst %1 32 %128 
                                                      OpStore %119 %129 
                                         f32 %130 = OpLoad %119 
                                       f32_3 %131 = OpCompositeConstruct %130 %130 %130 
                                       f32_4 %132 = OpLoad %56 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_3 %134 = OpFMul %131 %133 
                                       f32_4 %135 = OpLoad %56 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 6 3 
                                                      OpStore %56 %136 
                                       f32_4 %139 = OpLoad %56 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                                      OpStore vs_TEXCOORD1 %140 
                                       f32_3 %142 = OpLoad %9 
                                       f32_3 %143 = OpFNegate %142 
                              Uniform f32_3* %145 = OpAccessChain %62 %25 
                                       f32_3 %146 = OpLoad %145 
                                       f32_3 %147 = OpFAdd %143 %146 
                                                      OpStore vs_TEXCOORD2 %147 
                                       f32_3 %149 = OpLoad %9 
                                                      OpStore vs_TEXCOORD5 %149 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 1 1 1 
                              Uniform f32_4* %153 = OpAccessChain %23 %25 %26 
                                       f32_4 %154 = OpLoad %153 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFMul %152 %155 
                                                      OpStore %9 %156 
                              Uniform f32_4* %157 = OpAccessChain %23 %25 %25 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_4 %160 = OpLoad %150 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 0 0 
                                       f32_3 %162 = OpFMul %159 %161 
                                       f32_3 %163 = OpLoad %9 
                                       f32_3 %164 = OpFAdd %162 %163 
                                                      OpStore %9 %164 
                              Uniform f32_4* %165 = OpAccessChain %23 %25 %40 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_4 %168 = OpLoad %150 
                                       f32_3 %169 = OpVectorShuffle %168 %168 2 2 2 
                                       f32_3 %170 = OpFMul %167 %169 
                                       f32_3 %171 = OpLoad %9 
                                       f32_3 %172 = OpFAdd %170 %171 
                                                      OpStore %9 %172 
                                       f32_3 %173 = OpLoad %9 
                                       f32_3 %174 = OpLoad %9 
                                         f32 %175 = OpDot %173 %174 
                                                      OpStore %119 %175 
                                         f32 %176 = OpLoad %119 
                                         f32 %177 = OpExtInst %1 40 %176 %126 
                                                      OpStore %119 %177 
                                         f32 %178 = OpLoad %119 
                                         f32 %179 = OpExtInst %1 32 %178 
                                                      OpStore %119 %179 
                                         f32 %180 = OpLoad %119 
                                       f32_3 %181 = OpCompositeConstruct %180 %180 %180 
                                       f32_3 %182 = OpLoad %9 
                                       f32_3 %183 = OpFMul %181 %182 
                                                      OpStore %9 %183 
                                       f32_3 %185 = OpLoad %9 
                                                      OpStore vs_TEXCOORD3 %185 
                                       f32_3 %187 = OpLoad %9 
                                       f32_3 %188 = OpVectorShuffle %187 %187 1 2 0 
                                       f32_4 %189 = OpLoad %56 
                                       f32_3 %190 = OpVectorShuffle %189 %189 2 0 1 
                                       f32_3 %191 = OpFMul %188 %190 
                                                      OpStore %186 %191 
                                       f32_4 %192 = OpLoad %56 
                                       f32_3 %193 = OpVectorShuffle %192 %192 1 2 0 
                                       f32_3 %194 = OpLoad %9 
                                       f32_3 %195 = OpVectorShuffle %194 %194 2 0 1 
                                       f32_3 %196 = OpFMul %193 %195 
                                       f32_3 %197 = OpLoad %186 
                                       f32_3 %198 = OpFNegate %197 
                                       f32_3 %199 = OpFAdd %196 %198 
                                                      OpStore %9 %199 
                                  Input f32* %202 = OpAccessChain %150 %200 
                                         f32 %203 = OpLoad %202 
                                Uniform f32* %205 = OpAccessChain %23 %50 %200 
                                         f32 %206 = OpLoad %205 
                                         f32 %207 = OpFMul %203 %206 
                                                      OpStore %119 %207 
                                         f32 %209 = OpLoad %119 
                                       f32_3 %210 = OpCompositeConstruct %209 %209 %209 
                                       f32_3 %211 = OpLoad %9 
                                       f32_3 %212 = OpFMul %210 %211 
                                                      OpStore vs_TEXCOORD4 %212 
                                       f32_4 %215 = OpLoad %214 
                                                      OpStore vs_TEXCOORD6 %215 
                                 Output f32* %217 = OpAccessChain %84 %25 %80 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpFNegate %218 
                                 Output f32* %220 = OpAccessChain %84 %25 %80 
                                                      OpStore %220 %219 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 754
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %59 %84 %207 %223 %746 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %30 ArrayStride 30 
                                                      OpMemberDecorate %31 0 Offset 31 
                                                      OpMemberDecorate %31 1 RelaxedPrecision 
                                                      OpMemberDecorate %31 1 Offset 31 
                                                      OpMemberDecorate %31 2 Offset 31 
                                                      OpDecorate %31 Block 
                                                      OpDecorate %33 DescriptorSet 33 
                                                      OpDecorate %33 Binding 33 
                                                      OpDecorate vs_TEXCOORD3 Location 59 
                                                      OpMemberDecorate %67 0 Offset 67 
                                                      OpMemberDecorate %67 1 Offset 67 
                                                      OpMemberDecorate %67 2 Offset 67 
                                                      OpMemberDecorate %67 3 Offset 67 
                                                      OpMemberDecorate %67 4 Offset 67 
                                                      OpMemberDecorate %67 5 Offset 67 
                                                      OpMemberDecorate %67 6 Offset 67 
                                                      OpMemberDecorate %67 7 Offset 67 
                                                      OpMemberDecorate %67 8 Offset 67 
                                                      OpMemberDecorate %67 9 Offset 67 
                                                      OpMemberDecorate %67 10 Offset 67 
                                                      OpMemberDecorate %67 11 Offset 67 
                                                      OpMemberDecorate %67 12 Offset 67 
                                                      OpDecorate %67 Block 
                                                      OpDecorate %69 DescriptorSet 69 
                                                      OpDecorate %69 Binding 69 
                                                      OpDecorate vs_TEXCOORD0 Location 84 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %100 DescriptorSet 100 
                                                      OpDecorate %100 Binding 100 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %104 DescriptorSet 104 
                                                      OpDecorate %104 Binding 104 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %120 RelaxedPrecision 
                                                      OpDecorate %122 RelaxedPrecision 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %167 DescriptorSet 167 
                                                      OpDecorate %167 Binding 167 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %169 DescriptorSet 169 
                                                      OpDecorate %169 Binding 169 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %177 DescriptorSet 177 
                                                      OpDecorate %177 Binding 177 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %179 DescriptorSet 179 
                                                      OpDecorate %179 Binding 179 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 207 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 223 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %483 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                                      OpDecorate %487 RelaxedPrecision 
                                                      OpDecorate %493 RelaxedPrecision 
                                                      OpDecorate %494 ArrayStride 494 
                                                      OpDecorate %495 ArrayStride 495 
                                                      OpDecorate %497 ArrayStride 497 
                                                      OpMemberDecorate %498 0 Offset 498 
                                                      OpMemberDecorate %498 1 Offset 498 
                                                      OpMemberDecorate %498 2 Offset 498 
                                                      OpMemberDecorate %498 3 RelaxedPrecision 
                                                      OpMemberDecorate %498 3 Offset 498 
                                                      OpMemberDecorate %498 4 RelaxedPrecision 
                                                      OpMemberDecorate %498 4 Offset 498 
                                                      OpMemberDecorate %498 5 RelaxedPrecision 
                                                      OpMemberDecorate %498 5 Offset 498 
                                                      OpMemberDecorate %498 6 Offset 498 
                                                      OpMemberDecorate %498 7 RelaxedPrecision 
                                                      OpMemberDecorate %498 7 Offset 498 
                                                      OpMemberDecorate %498 8 Offset 498 
                                                      OpMemberDecorate %498 9 Offset 498 
                                                      OpMemberDecorate %498 10 RelaxedPrecision 
                                                      OpMemberDecorate %498 10 Offset 498 
                                                      OpMemberDecorate %498 11 RelaxedPrecision 
                                                      OpMemberDecorate %498 11 Offset 498 
                                                      OpMemberDecorate %498 12 RelaxedPrecision 
                                                      OpMemberDecorate %498 12 Offset 498 
                                                      OpMemberDecorate %498 13 RelaxedPrecision 
                                                      OpMemberDecorate %498 13 Offset 498 
                                                      OpMemberDecorate %498 14 RelaxedPrecision 
                                                      OpMemberDecorate %498 14 Offset 498 
                                                      OpMemberDecorate %498 15 RelaxedPrecision 
                                                      OpMemberDecorate %498 15 Offset 498 
                                                      OpMemberDecorate %498 16 RelaxedPrecision 
                                                      OpMemberDecorate %498 16 Offset 498 
                                                      OpDecorate %498 Block 
                                                      OpDecorate %500 DescriptorSet 500 
                                                      OpDecorate %500 Binding 500 
                                                      OpDecorate %503 RelaxedPrecision 
                                                      OpDecorate %504 RelaxedPrecision 
                                                      OpDecorate %505 RelaxedPrecision 
                                                      OpDecorate %509 RelaxedPrecision 
                                                      OpDecorate %510 RelaxedPrecision 
                                                      OpDecorate %511 RelaxedPrecision 
                                                      OpDecorate %515 RelaxedPrecision 
                                                      OpDecorate %516 RelaxedPrecision 
                                                      OpDecorate %517 RelaxedPrecision 
                                                      OpDecorate %521 RelaxedPrecision 
                                                      OpDecorate %522 RelaxedPrecision 
                                                      OpDecorate %523 RelaxedPrecision 
                                                      OpDecorate %524 RelaxedPrecision 
                                                      OpDecorate %525 RelaxedPrecision 
                                                      OpDecorate %526 RelaxedPrecision 
                                                      OpDecorate %527 RelaxedPrecision 
                                                      OpDecorate %531 RelaxedPrecision 
                                                      OpDecorate %536 RelaxedPrecision 
                                                      OpDecorate %541 RelaxedPrecision 
                                                      OpDecorate %545 RelaxedPrecision 
                                                      OpDecorate %546 RelaxedPrecision 
                                                      OpDecorate %547 RelaxedPrecision 
                                                      OpDecorate %548 RelaxedPrecision 
                                                      OpDecorate %550 RelaxedPrecision 
                                                      OpDecorate %551 RelaxedPrecision 
                                                      OpDecorate %552 RelaxedPrecision 
                                                      OpDecorate %553 RelaxedPrecision 
                                                      OpDecorate %571 RelaxedPrecision 
                                                      OpDecorate %572 RelaxedPrecision 
                                                      OpDecorate %574 RelaxedPrecision 
                                                      OpDecorate %576 RelaxedPrecision 
                                                      OpDecorate %578 RelaxedPrecision 
                                                      OpDecorate %580 RelaxedPrecision 
                                                      OpDecorate %581 RelaxedPrecision 
                                                      OpDecorate %582 RelaxedPrecision 
                                                      OpDecorate %584 RelaxedPrecision 
                                                      OpDecorate %585 RelaxedPrecision 
                                                      OpDecorate %588 RelaxedPrecision 
                                                      OpDecorate %588 DescriptorSet 588 
                                                      OpDecorate %588 Binding 588 
                                                      OpDecorate %589 RelaxedPrecision 
                                                      OpDecorate %590 RelaxedPrecision 
                                                      OpDecorate %590 DescriptorSet 590 
                                                      OpDecorate %590 Binding 590 
                                                      OpDecorate %591 RelaxedPrecision 
                                                      OpDecorate %595 RelaxedPrecision 
                                                      OpDecorate %598 RelaxedPrecision 
                                                      OpDecorate %599 RelaxedPrecision 
                                                      OpDecorate %602 RelaxedPrecision 
                                                      OpDecorate %603 RelaxedPrecision 
                                                      OpDecorate %604 RelaxedPrecision 
                                                      OpDecorate %605 RelaxedPrecision 
                                                      OpDecorate %606 RelaxedPrecision 
                                                      OpDecorate %607 RelaxedPrecision 
                                                      OpDecorate %608 RelaxedPrecision 
                                                      OpDecorate %609 RelaxedPrecision 
                                                      OpDecorate %610 RelaxedPrecision 
                                                      OpDecorate %612 RelaxedPrecision 
                                                      OpDecorate %613 RelaxedPrecision 
                                                      OpDecorate %614 RelaxedPrecision 
                                                      OpDecorate %615 RelaxedPrecision 
                                                      OpDecorate %616 RelaxedPrecision 
                                                      OpDecorate %618 RelaxedPrecision 
                                                      OpDecorate %619 RelaxedPrecision 
                                                      OpDecorate %620 RelaxedPrecision 
                                                      OpDecorate %621 RelaxedPrecision 
                                                      OpDecorate %622 RelaxedPrecision 
                                                      OpDecorate %623 RelaxedPrecision 
                                                      OpDecorate %624 RelaxedPrecision 
                                                      OpDecorate %625 RelaxedPrecision 
                                                      OpDecorate %626 RelaxedPrecision 
                                                      OpDecorate %627 RelaxedPrecision 
                                                      OpDecorate %633 RelaxedPrecision 
                                                      OpDecorate %636 RelaxedPrecision 
                                                      OpDecorate %705 RelaxedPrecision 
                                                      OpDecorate %713 RelaxedPrecision 
                                                      OpDecorate %714 RelaxedPrecision 
                                                      OpDecorate %715 RelaxedPrecision 
                                                      OpDecorate %716 RelaxedPrecision 
                                                      OpDecorate %717 RelaxedPrecision 
                                                      OpDecorate %718 RelaxedPrecision 
                                                      OpDecorate %737 RelaxedPrecision 
                                                      OpDecorate %738 RelaxedPrecision 
                                                      OpDecorate %739 RelaxedPrecision 
                                                      OpDecorate %742 RelaxedPrecision 
                                                      OpDecorate %743 RelaxedPrecision 
                                                      OpDecorate %744 RelaxedPrecision 
                                                      OpDecorate %746 RelaxedPrecision 
                                                      OpDecorate %746 Location 746 
                                                      OpDecorate %747 RelaxedPrecision 
                                                      OpDecorate %748 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 0 
                                              %17 = OpTypePointer Private %6 
                               Private f32_3* %23 = OpVariable Private 
                                              %28 = OpTypeVector %6 4 
                                          u32 %29 = OpConstant 4 
                                              %30 = OpTypeArray %28 %29 
                                              %31 = OpTypeStruct %28 %28 %30 
                                              %32 = OpTypePointer Uniform %31 
    Uniform struct {f32_4; f32_4; f32_4[4];}* %33 = OpVariable Uniform 
                                              %34 = OpTypeInt 32 1 
                                          i32 %35 = OpConstant 0 
                                              %36 = OpTypePointer Uniform %28 
                               Private f32_3* %41 = OpVariable Private 
                                 Private f32* %58 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                 Private f32* %66 = OpVariable Private 
                                              %67 = OpTypeStruct %6 %28 %28 %28 %6 %7 %28 %6 %6 %6 %6 %28 %6 
                                              %68 = OpTypePointer Uniform %67 
Uniform struct {f32; f32_4; f32_4; f32_4; f32; f32_3; f32_4; f32; f32; f32; f32; f32_4; f32;}* %69 = OpVariable Uniform 
                                          i32 %70 = OpConstant 10 
                                              %71 = OpTypePointer Uniform %6 
                                          f32 %75 = OpConstant 3.674022E-40 
                                          f32 %77 = OpConstant 3.674022E-40 
                               Private f32_3* %81 = OpVariable Private 
                                              %82 = OpTypeVector %6 2 
                                              %83 = OpTypePointer Input %82 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                          i32 %86 = OpConstant 1 
                                 Private f32* %97 = OpVariable Private 
                                              %98 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %99 = OpTypePointer UniformConstant %98 
        UniformConstant read_only Texture2D* %100 = OpVariable UniformConstant 
                                             %102 = OpTypeSampler 
                                             %103 = OpTypePointer UniformConstant %102 
                    UniformConstant sampler* %104 = OpVariable UniformConstant 
                                             %106 = OpTypeSampledImage %98 
                              Private f32_3* %112 = OpVariable Private 
                              Private f32_3* %117 = OpVariable Private 
                                         f32 %119 = OpConstant 3.674022E-40 
                                         f32 %121 = OpConstant 3.674022E-40 
                                         i32 %126 = OpConstant 12 
                                Private f32* %131 = OpVariable Private 
                                             %152 = OpTypePointer Private %28 
                              Private f32_4* %153 = OpVariable Private 
                                         i32 %155 = OpConstant 2 
                              Private f32_3* %166 = OpVariable Private 
        UniformConstant read_only Texture2D* %167 = OpVariable UniformConstant 
                    UniformConstant sampler* %169 = OpVariable UniformConstant 
                              Private f32_3* %176 = OpVariable Private 
        UniformConstant read_only Texture2D* %177 = OpVariable UniformConstant 
                    UniformConstant sampler* %179 = OpVariable UniformConstant 
                                         i32 %187 = OpConstant 3 
                                         f32 %196 = OpConstant 3.674022E-40 
                                       f32_3 %197 = OpConstantComposite %196 %196 %196 
                              Private f32_3* %199 = OpVariable Private 
                                       f32_3 %201 = OpConstantComposite %119 %119 %119 
                                       f32_3 %203 = OpConstantComposite %121 %121 %121 
                        Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                Private f32* %231 = OpVariable Private 
                              Private f32_3* %246 = OpVariable Private 
                                         f32 %299 = OpConstant 3.674022E-40 
                                         u32 %309 = OpConstant 1 
                                         f32 %330 = OpConstant 3.674022E-40 
                                         i32 %339 = OpConstant 11 
                                         i32 %349 = OpConstant 4 
                                Private f32* %354 = OpVariable Private 
                                         f32 %362 = OpConstant 3.674022E-40 
                                         f32 %371 = OpConstant 3.674022E-40 
                                         f32 %384 = OpConstant 3.674022E-40 
                              Private f32_4* %487 = OpVariable Private 
                              Private f32_3* %493 = OpVariable Private 
                                             %494 = OpTypeArray %28 %29 
                                             %495 = OpTypeArray %28 %29 
                                         u32 %496 = OpConstant 2 
                                             %497 = OpTypeArray %28 %496 
                                             %498 = OpTypeStruct %494 %495 %28 %28 %28 %497 %28 %28 %28 %28 %28 %28 %28 %28 %28 %28 %28 
                                             %499 = OpTypePointer Uniform %498 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4; f32_4[2]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %500 = OpVariable Uniform 
                                         i32 %501 = OpConstant 13 
                                         i32 %507 = OpConstant 14 
                                         i32 %513 = OpConstant 15 
                                         i32 %519 = OpConstant 16 
                                         u32 %528 = OpConstant 3 
                                       f32_3 %549 = OpConstantComposite %384 %384 %384 
                                         f32 %573 = OpConstant 3.674022E-40 
                                         f32 %575 = OpConstant 3.674022E-40 
                                         f32 %583 = OpConstant 3.674022E-40 
                              Private f32_4* %585 = OpVariable Private 
                                             %586 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %587 = OpTypePointer UniformConstant %586 
      UniformConstant read_only TextureCube* %588 = OpVariable UniformConstant 
                    UniformConstant sampler* %590 = OpVariable UniformConstant 
                                             %592 = OpTypeSampledImage %586 
                                         i32 %600 = OpConstant 7 
                                         i32 %641 = OpConstant 5 
                                             %642 = OpTypePointer Uniform %7 
                                         f32 %683 = OpConstant 3.674022E-40 
                                         i32 %687 = OpConstant 8 
                                         i32 %700 = OpConstant 6 
                                         i32 %706 = OpConstant 9 
                                       f32_3 %724 = OpConstantComposite %573 %573 %573 
                                         f32 %727 = OpConstant 3.674022E-40 
                                       f32_3 %728 = OpConstantComposite %727 %727 %727 
                                         f32 %740 = OpConstant 3.674022E-40 
                                       f32_3 %741 = OpConstantComposite %740 %740 %740 
                                             %745 = OpTypePointer Output %28 
                               Output f32_4* %746 = OpVariable Output 
                                             %751 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                                          f32 %14 = OpDot %12 %13 
                                 Private f32* %18 = OpAccessChain %9 %16 
                                                      OpStore %18 %14 
                                 Private f32* %19 = OpAccessChain %9 %16 
                                          f32 %20 = OpLoad %19 
                                          f32 %21 = OpExtInst %1 32 %20 
                                 Private f32* %22 = OpAccessChain %9 %16 
                                                      OpStore %22 %21 
                                        f32_3 %24 = OpLoad vs_TEXCOORD2 
                                        f32_3 %25 = OpLoad %9 
                                        f32_3 %26 = OpVectorShuffle %25 %25 0 0 0 
                                        f32_3 %27 = OpFMul %24 %26 
                               Uniform f32_4* %37 = OpAccessChain %33 %35 
                                        f32_4 %38 = OpLoad %37 
                                        f32_3 %39 = OpVectorShuffle %38 %38 0 1 2 
                                        f32_3 %40 = OpFAdd %27 %39 
                                                      OpStore %23 %40 
                                        f32_3 %42 = OpLoad %9 
                                        f32_3 %43 = OpVectorShuffle %42 %42 0 0 0 
                                        f32_3 %44 = OpLoad vs_TEXCOORD2 
                                        f32_3 %45 = OpFMul %43 %44 
                                                      OpStore %41 %45 
                                        f32_3 %46 = OpLoad %23 
                                        f32_3 %47 = OpLoad %23 
                                          f32 %48 = OpDot %46 %47 
                                 Private f32* %49 = OpAccessChain %9 %16 
                                                      OpStore %49 %48 
                                 Private f32* %50 = OpAccessChain %9 %16 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpExtInst %1 32 %51 
                                 Private f32* %53 = OpAccessChain %9 %16 
                                                      OpStore %53 %52 
                                        f32_3 %54 = OpLoad %9 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 0 0 
                                        f32_3 %56 = OpLoad %23 
                                        f32_3 %57 = OpFMul %55 %56 
                                                      OpStore %9 %57 
                                        f32_3 %60 = OpLoad vs_TEXCOORD3 
                                        f32_3 %61 = OpLoad %9 
                                          f32 %62 = OpDot %60 %61 
                                                      OpStore %58 %62 
                                          f32 %63 = OpLoad %58 
                                          f32 %64 = OpLoad %58 
                                          f32 %65 = OpFMul %63 %64 
                                                      OpStore %58 %65 
                                 Uniform f32* %72 = OpAccessChain %69 %70 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFNegate %73 
                                          f32 %76 = OpFMul %74 %75 
                                          f32 %78 = OpFAdd %76 %77 
                                                      OpStore %66 %78 
                                          f32 %79 = OpLoad %66 
                                          f32 %80 = OpExtInst %1 31 %79 
                                                      OpStore %66 %80 
                                        f32_2 %85 = OpLoad vs_TEXCOORD0 
                               Uniform f32_4* %87 = OpAccessChain %69 %86 
                                        f32_4 %88 = OpLoad %87 
                                        f32_2 %89 = OpVectorShuffle %88 %88 0 1 
                                        f32_2 %90 = OpFMul %85 %89 
                               Uniform f32_4* %91 = OpAccessChain %69 %86 
                                        f32_4 %92 = OpLoad %91 
                                        f32_2 %93 = OpVectorShuffle %92 %92 2 3 
                                        f32_2 %94 = OpFAdd %90 %93 
                                        f32_3 %95 = OpLoad %81 
                                        f32_3 %96 = OpVectorShuffle %95 %94 3 4 2 
                                                      OpStore %81 %96 
                         read_only Texture2D %101 = OpLoad %100 
                                     sampler %105 = OpLoad %104 
                  read_only Texture2DSampled %107 = OpSampledImage %101 %105 
                                       f32_3 %108 = OpLoad %81 
                                       f32_2 %109 = OpVectorShuffle %108 %108 0 1 
                                       f32_4 %110 = OpImageSampleImplicitLod %107 %109 
                                         f32 %111 = OpCompositeExtract %110 0 
                                                      OpStore %97 %111 
                                         f32 %113 = OpLoad %97 
                                         f32 %114 = OpLoad %97 
                                         f32 %115 = OpFMul %113 %114 
                                Private f32* %116 = OpAccessChain %112 %16 
                                                      OpStore %116 %115 
                                         f32 %118 = OpLoad %97 
                                         f32 %120 = OpFMul %118 %119 
                                         f32 %122 = OpFAdd %120 %121 
                                Private f32* %123 = OpAccessChain %117 %16 
                                                      OpStore %123 %122 
                                Private f32* %124 = OpAccessChain %117 %16 
                                         f32 %125 = OpLoad %124 
                                Uniform f32* %127 = OpAccessChain %69 %126 
                                         f32 %128 = OpLoad %127 
                                         f32 %129 = OpFAdd %125 %128 
                                Private f32* %130 = OpAccessChain %81 %16 
                                                      OpStore %130 %129 
                                Private f32* %132 = OpAccessChain %112 %16 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpLoad %66 
                                         f32 %135 = OpFDiv %133 %134 
                                                      OpStore %131 %135 
                                         f32 %136 = OpLoad %66 
                                Private f32* %137 = OpAccessChain %112 %16 
                                         f32 %138 = OpLoad %137 
                                         f32 %139 = OpFMul %136 %138 
                                                      OpStore %66 %139 
                                         f32 %140 = OpLoad %131 
                                         f32 %141 = OpLoad %131 
                                         f32 %142 = OpFMul %140 %141 
                                Private f32* %143 = OpAccessChain %112 %16 
                                                      OpStore %143 %142 
                                         f32 %144 = OpLoad %58 
                                Private f32* %145 = OpAccessChain %112 %16 
                                         f32 %146 = OpLoad %145 
                                         f32 %147 = OpFDiv %144 %146 
                                                      OpStore %58 %147 
                                         f32 %148 = OpLoad %66 
                                         f32 %149 = OpLoad %66 
                                         f32 %150 = OpFMul %148 %149 
                                Private f32* %151 = OpAccessChain %112 %16 
                                                      OpStore %151 %150 
                                       f32_2 %154 = OpLoad vs_TEXCOORD0 
                              Uniform f32_4* %156 = OpAccessChain %69 %155 
                                       f32_4 %157 = OpLoad %156 
                                       f32_2 %158 = OpVectorShuffle %157 %157 0 1 
                                       f32_2 %159 = OpFMul %154 %158 
                              Uniform f32_4* %160 = OpAccessChain %69 %155 
                                       f32_4 %161 = OpLoad %160 
                                       f32_2 %162 = OpVectorShuffle %161 %161 2 3 
                                       f32_2 %163 = OpFAdd %159 %162 
                                       f32_4 %164 = OpLoad %153 
                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 2 3 
                                                      OpStore %153 %165 
                         read_only Texture2D %168 = OpLoad %167 
                                     sampler %170 = OpLoad %169 
                  read_only Texture2DSampled %171 = OpSampledImage %168 %170 
                                       f32_4 %172 = OpLoad %153 
                                       f32_2 %173 = OpVectorShuffle %172 %172 0 1 
                                       f32_4 %174 = OpImageSampleImplicitLod %171 %173 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                                                      OpStore %166 %175 
                         read_only Texture2D %178 = OpLoad %177 
                                     sampler %180 = OpLoad %179 
                  read_only Texture2DSampled %181 = OpSampledImage %178 %180 
                                       f32_4 %182 = OpLoad %153 
                                       f32_2 %183 = OpVectorShuffle %182 %182 0 1 
                                       f32_4 %184 = OpImageSampleImplicitLod %181 %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                                      OpStore %176 %185 
                                       f32_3 %186 = OpLoad %176 
                              Uniform f32_4* %188 = OpAccessChain %69 %187 
                                       f32_4 %189 = OpLoad %188 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_3 %191 = OpFMul %186 %190 
                                       f32_4 %192 = OpLoad %153 
                                       f32_4 %193 = OpVectorShuffle %192 %191 4 5 6 3 
                                                      OpStore %153 %193 
                                       f32_4 %194 = OpLoad %153 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_3 %198 = OpFMul %195 %197 
                                                      OpStore %117 %198 
                                       f32_3 %200 = OpLoad %166 
                                       f32_3 %202 = OpFMul %200 %201 
                                       f32_3 %204 = OpFAdd %202 %203 
                                                      OpStore %199 %204 
                                       f32_3 %205 = OpLoad %199 
                                       f32_3 %206 = OpVectorShuffle %205 %205 1 1 1 
                                       f32_3 %208 = OpLoad vs_TEXCOORD4 
                                       f32_3 %209 = OpFMul %206 %208 
                                       f32_4 %210 = OpLoad %153 
                                       f32_4 %211 = OpVectorShuffle %210 %209 4 5 6 3 
                                                      OpStore %153 %211 
                                       f32_3 %212 = OpLoad %199 
                                       f32_3 %213 = OpVectorShuffle %212 %212 0 0 0 
                                       f32_3 %214 = OpLoad vs_TEXCOORD3 
                                       f32_3 %215 = OpFMul %213 %214 
                                       f32_4 %216 = OpLoad %153 
                                       f32_3 %217 = OpVectorShuffle %216 %216 0 1 2 
                                       f32_3 %218 = OpFAdd %215 %217 
                                       f32_4 %219 = OpLoad %153 
                                       f32_4 %220 = OpVectorShuffle %219 %218 4 5 6 3 
                                                      OpStore %153 %220 
                                       f32_3 %221 = OpLoad %199 
                                       f32_3 %222 = OpVectorShuffle %221 %221 2 2 2 
                                       f32_3 %224 = OpLoad vs_TEXCOORD1 
                                       f32_3 %225 = OpFMul %222 %224 
                                       f32_4 %226 = OpLoad %153 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_3 %228 = OpFAdd %225 %227 
                                       f32_4 %229 = OpLoad %153 
                                       f32_4 %230 = OpVectorShuffle %229 %228 4 5 6 3 
                                                      OpStore %153 %230 
                                       f32_4 %232 = OpLoad %153 
                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
                                       f32_4 %234 = OpLoad %153 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
                                         f32 %236 = OpDot %233 %235 
                                                      OpStore %231 %236 
                                         f32 %237 = OpLoad %231 
                                         f32 %238 = OpExtInst %1 32 %237 
                                                      OpStore %231 %238 
                                         f32 %239 = OpLoad %231 
                                       f32_3 %240 = OpCompositeConstruct %239 %239 %239 
                                       f32_4 %241 = OpLoad %153 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 1 2 
                                       f32_3 %243 = OpFMul %240 %242 
                                       f32_4 %244 = OpLoad %153 
                                       f32_4 %245 = OpVectorShuffle %244 %243 4 5 6 3 
                                                      OpStore %153 %245 
                                       f32_4 %247 = OpLoad %153 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                       f32_3 %249 = OpLoad %81 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 0 0 
                                       f32_3 %251 = OpFMul %248 %250 
                                       f32_3 %252 = OpLoad vs_TEXCOORD4 
                                       f32_3 %253 = OpFAdd %251 %252 
                                                      OpStore %246 %253 
                                       f32_3 %254 = OpLoad %246 
                                       f32_3 %255 = OpLoad %246 
                                         f32 %256 = OpDot %254 %255 
                                Private f32* %257 = OpAccessChain %81 %16 
                                                      OpStore %257 %256 
                                Private f32* %258 = OpAccessChain %81 %16 
                                         f32 %259 = OpLoad %258 
                                         f32 %260 = OpExtInst %1 32 %259 
                                Private f32* %261 = OpAccessChain %81 %16 
                                                      OpStore %261 %260 
                                       f32_3 %262 = OpLoad %81 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 0 0 
                                       f32_3 %264 = OpLoad %246 
                                       f32_3 %265 = OpFMul %263 %264 
                                                      OpStore %246 %265 
                                       f32_3 %266 = OpLoad %246 
                                       f32_3 %267 = OpLoad %9 
                                         f32 %268 = OpDot %266 %267 
                                Private f32* %269 = OpAccessChain %81 %16 
                                                      OpStore %269 %268 
                                Private f32* %270 = OpAccessChain %81 %16 
                                         f32 %271 = OpLoad %270 
                                Private f32* %272 = OpAccessChain %81 %16 
                                         f32 %273 = OpLoad %272 
                                         f32 %274 = OpFMul %271 %273 
                                Private f32* %275 = OpAccessChain %81 %16 
                                                      OpStore %275 %274 
                                Private f32* %276 = OpAccessChain %81 %16 
                                         f32 %277 = OpLoad %276 
                                Private f32* %278 = OpAccessChain %112 %16 
                                         f32 %279 = OpLoad %278 
                                         f32 %280 = OpFDiv %277 %279 
                                Private f32* %281 = OpAccessChain %81 %16 
                                                      OpStore %281 %280 
                                         f32 %282 = OpLoad %58 
                                Private f32* %283 = OpAccessChain %81 %16 
                                         f32 %284 = OpLoad %283 
                                         f32 %285 = OpFAdd %282 %284 
                                                      OpStore %58 %285 
                                       f32_4 %286 = OpLoad %153 
                                       f32_3 %287 = OpVectorShuffle %286 %286 0 1 2 
                                       f32_3 %288 = OpLoad %9 
                                         f32 %289 = OpDot %287 %288 
                                Private f32* %290 = OpAccessChain %81 %16 
                                                      OpStore %290 %289 
                              Uniform f32_4* %291 = OpAccessChain %33 %35 
                                       f32_4 %292 = OpLoad %291 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
                                       f32_3 %294 = OpLoad %9 
                                         f32 %295 = OpDot %293 %294 
                                Private f32* %296 = OpAccessChain %9 %16 
                                                      OpStore %296 %295 
                                Private f32* %297 = OpAccessChain %9 %16 
                                         f32 %298 = OpLoad %297 
                                         f32 %300 = OpExtInst %1 40 %298 %299 
                                Private f32* %301 = OpAccessChain %9 %16 
                                                      OpStore %301 %300 
                                Private f32* %302 = OpAccessChain %81 %16 
                                         f32 %303 = OpLoad %302 
                                Private f32* %304 = OpAccessChain %81 %16 
                                         f32 %305 = OpLoad %304 
                                         f32 %306 = OpFMul %303 %305 
                                         f32 %307 = OpLoad %58 
                                         f32 %308 = OpFAdd %306 %307 
                                Private f32* %310 = OpAccessChain %9 %309 
                                                      OpStore %310 %308 
                                       f32_3 %311 = OpLoad %9 
                                       f32_2 %312 = OpVectorShuffle %311 %311 0 1 
                                       f32_3 %313 = OpLoad %9 
                                       f32_2 %314 = OpVectorShuffle %313 %313 0 1 
                                       f32_2 %315 = OpFMul %312 %314 
                                       f32_3 %316 = OpLoad %9 
                                       f32_3 %317 = OpVectorShuffle %316 %315 3 4 2 
                                                      OpStore %9 %317 
                                         f32 %318 = OpLoad %131 
                                Private f32* %319 = OpAccessChain %9 %309 
                                         f32 %320 = OpLoad %319 
                                         f32 %321 = OpFMul %318 %320 
                                Private f32* %322 = OpAccessChain %23 %16 
                                                      OpStore %322 %321 
                                         f32 %323 = OpLoad %66 
                                Private f32* %324 = OpAccessChain %23 %16 
                                         f32 %325 = OpLoad %324 
                                         f32 %326 = OpFMul %323 %325 
                                Private f32* %327 = OpAccessChain %23 %16 
                                                      OpStore %327 %326 
                                Private f32* %328 = OpAccessChain %23 %16 
                                         f32 %329 = OpLoad %328 
                                         f32 %331 = OpFMul %329 %330 
                                Private f32* %332 = OpAccessChain %23 %16 
                                                      OpStore %332 %331 
                                Private f32* %333 = OpAccessChain %23 %16 
                                         f32 %334 = OpLoad %333 
                                         f32 %335 = OpFDiv %77 %334 
                                Private f32* %336 = OpAccessChain %23 %16 
                                                      OpStore %336 %335 
                                       f32_3 %337 = OpLoad %23 
                                       f32_3 %338 = OpVectorShuffle %337 %337 0 0 0 
                              Uniform f32_4* %340 = OpAccessChain %69 %339 
                                       f32_4 %341 = OpLoad %340 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                                       f32_3 %343 = OpFMul %338 %342 
                                                      OpStore %23 %343 
                                       f32_3 %344 = OpLoad %23 
                              Uniform f32_4* %345 = OpAccessChain %69 %339 
                                       f32_4 %346 = OpLoad %345 
                                       f32_3 %347 = OpVectorShuffle %346 %346 3 3 3 
                                       f32_3 %348 = OpFMul %344 %347 
                                                      OpStore %23 %348 
                                Uniform f32* %350 = OpAccessChain %69 %349 
                                         f32 %351 = OpLoad %350 
                                         f32 %352 = OpFNegate %351 
                                         f32 %353 = OpFAdd %352 %77 
                                                      OpStore %66 %353 
                                         f32 %355 = OpLoad %66 
                                         f32 %356 = OpFNegate %355 
                                         f32 %357 = OpFAdd %356 %77 
                                                      OpStore %354 %357 
                                         f32 %358 = OpLoad %354 
                                         f32 %359 = OpLoad %354 
                                         f32 %360 = OpFMul %358 %359 
                                                      OpStore %354 %360 
                                         f32 %361 = OpLoad %354 
                                         f32 %363 = OpExtInst %1 40 %361 %362 
                                                      OpStore %354 %363 
                                         f32 %364 = OpLoad %354 
                                         f32 %365 = OpLoad %354 
                                         f32 %366 = OpFAdd %364 %365 
                                                      OpStore %66 %366 
                                Private f32* %367 = OpAccessChain %9 %16 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpLoad %66 
                                         f32 %370 = OpFMul %368 %369 
                                         f32 %372 = OpFAdd %370 %371 
                                Private f32* %373 = OpAccessChain %9 %16 
                                                      OpStore %373 %372 
                                       f32_4 %374 = OpLoad %153 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                                       f32_3 %376 = OpLoad %41 
                                         f32 %377 = OpDot %375 %376 
                                                      OpStore %66 %377 
                                         f32 %378 = OpLoad %66 
                                         f32 %379 = OpExtInst %1 40 %378 %299 
                                                      OpStore %66 %379 
                                         f32 %380 = OpLoad %66 
                                         f32 %381 = OpFNegate %380 
                                         f32 %382 = OpFAdd %381 %77 
                                                      OpStore %66 %382 
                                         f32 %383 = OpLoad %66 
                                         f32 %385 = OpExtInst %1 40 %383 %384 
                                                      OpStore %66 %385 
                                         f32 %386 = OpLoad %66 
                                         f32 %387 = OpLoad %66 
                                         f32 %388 = OpFMul %386 %387 
                                Private f32* %389 = OpAccessChain %81 %16 
                                                      OpStore %389 %388 
                                Private f32* %390 = OpAccessChain %81 %16 
                                         f32 %391 = OpLoad %390 
                                Private f32* %392 = OpAccessChain %81 %16 
                                         f32 %393 = OpLoad %392 
                                         f32 %394 = OpFMul %391 %393 
                                Private f32* %395 = OpAccessChain %81 %16 
                                                      OpStore %395 %394 
                                         f32 %396 = OpLoad %66 
                                Private f32* %397 = OpAccessChain %81 %16 
                                         f32 %398 = OpLoad %397 
                                         f32 %399 = OpFMul %396 %398 
                                                      OpStore %66 %399 
                                Private f32* %400 = OpAccessChain %9 %16 
                                         f32 %401 = OpLoad %400 
                                         f32 %402 = OpLoad %66 
                                         f32 %403 = OpFMul %401 %402 
                                         f32 %404 = OpFAdd %403 %77 
                                                      OpStore %66 %404 
                                       f32_4 %405 = OpLoad %153 
                                       f32_3 %406 = OpVectorShuffle %405 %405 0 1 2 
                              Uniform f32_4* %407 = OpAccessChain %33 %35 
                                       f32_4 %408 = OpLoad %407 
                                       f32_3 %409 = OpVectorShuffle %408 %408 0 1 2 
                                         f32 %410 = OpDot %406 %409 
                                Private f32* %411 = OpAccessChain %81 %16 
                                                      OpStore %411 %410 
                                Private f32* %412 = OpAccessChain %81 %16 
                                         f32 %413 = OpLoad %412 
                                         f32 %414 = OpExtInst %1 40 %413 %299 
                                Private f32* %415 = OpAccessChain %81 %16 
                                                      OpStore %415 %414 
                                Private f32* %416 = OpAccessChain %81 %16 
                                         f32 %417 = OpLoad %416 
                                         f32 %418 = OpFNegate %417 
                                         f32 %419 = OpFAdd %418 %77 
                                Private f32* %420 = OpAccessChain %112 %16 
                                                      OpStore %420 %419 
                                Private f32* %421 = OpAccessChain %112 %16 
                                         f32 %422 = OpLoad %421 
                                         f32 %423 = OpExtInst %1 40 %422 %384 
                                Private f32* %424 = OpAccessChain %112 %16 
                                                      OpStore %424 %423 
                                Private f32* %425 = OpAccessChain %112 %16 
                                         f32 %426 = OpLoad %425 
                                Private f32* %427 = OpAccessChain %112 %16 
                                         f32 %428 = OpLoad %427 
                                         f32 %429 = OpFMul %426 %428 
                                                      OpStore %131 %429 
                                         f32 %430 = OpLoad %131 
                                         f32 %431 = OpLoad %131 
                                         f32 %432 = OpFMul %430 %431 
                                                      OpStore %131 %432 
                                Private f32* %433 = OpAccessChain %112 %16 
                                         f32 %434 = OpLoad %433 
                                         f32 %435 = OpLoad %131 
                                         f32 %436 = OpFMul %434 %435 
                                Private f32* %437 = OpAccessChain %112 %16 
                                                      OpStore %437 %436 
                                Private f32* %438 = OpAccessChain %9 %16 
                                         f32 %439 = OpLoad %438 
                                Private f32* %440 = OpAccessChain %112 %16 
                                         f32 %441 = OpLoad %440 
                                         f32 %442 = OpFMul %439 %441 
                                         f32 %443 = OpFAdd %442 %77 
                                Private f32* %444 = OpAccessChain %9 %16 
                                                      OpStore %444 %443 
                                         f32 %445 = OpLoad %66 
                                Private f32* %446 = OpAccessChain %9 %16 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpFMul %445 %447 
                                Private f32* %449 = OpAccessChain %9 %16 
                                                      OpStore %449 %448 
                                Private f32* %450 = OpAccessChain %81 %16 
                                         f32 %451 = OpLoad %450 
                                Private f32* %452 = OpAccessChain %9 %16 
                                         f32 %453 = OpLoad %452 
                                         f32 %454 = OpFMul %451 %453 
                                Private f32* %455 = OpAccessChain %9 %16 
                                                      OpStore %455 %454 
                                Private f32* %456 = OpAccessChain %9 %16 
                                         f32 %457 = OpLoad %456 
                                         f32 %458 = OpExtInst %1 37 %457 %77 
                                Private f32* %459 = OpAccessChain %9 %16 
                                                      OpStore %459 %458 
                                       f32_3 %460 = OpLoad %9 
                                       f32_3 %461 = OpVectorShuffle %460 %460 0 0 0 
                                       f32_3 %462 = OpLoad %117 
                                       f32_3 %463 = OpFMul %461 %462 
                                                      OpStore %112 %463 
                                       f32_3 %464 = OpLoad %112 
                              Uniform f32_4* %465 = OpAccessChain %33 %86 
                                       f32_4 %466 = OpLoad %465 
                                       f32_3 %467 = OpVectorShuffle %466 %466 0 1 2 
                                       f32_3 %468 = OpFMul %464 %467 
                                       f32_3 %469 = OpLoad %23 
                                       f32_3 %470 = OpFAdd %468 %469 
                                                      OpStore %9 %470 
                                Private f32* %471 = OpAccessChain %153 %309 
                                         f32 %472 = OpLoad %471 
                                Private f32* %473 = OpAccessChain %153 %309 
                                         f32 %474 = OpLoad %473 
                                         f32 %475 = OpFMul %472 %474 
                                Private f32* %476 = OpAccessChain %199 %16 
                                                      OpStore %476 %475 
                                Private f32* %477 = OpAccessChain %153 %16 
                                         f32 %478 = OpLoad %477 
                                Private f32* %479 = OpAccessChain %153 %16 
                                         f32 %480 = OpLoad %479 
                                         f32 %481 = OpFMul %478 %480 
                                Private f32* %482 = OpAccessChain %199 %16 
                                         f32 %483 = OpLoad %482 
                                         f32 %484 = OpFNegate %483 
                                         f32 %485 = OpFAdd %481 %484 
                                Private f32* %486 = OpAccessChain %199 %16 
                                                      OpStore %486 %485 
                                       f32_4 %488 = OpLoad %153 
                                       f32_4 %489 = OpVectorShuffle %488 %488 1 2 2 0 
                                       f32_4 %490 = OpLoad %153 
                                       f32_4 %491 = OpVectorShuffle %490 %490 0 1 2 2 
                                       f32_4 %492 = OpFMul %489 %491 
                                                      OpStore %487 %492 
                              Uniform f32_4* %502 = OpAccessChain %500 %501 
                                       f32_4 %503 = OpLoad %502 
                                       f32_4 %504 = OpLoad %487 
                                         f32 %505 = OpDot %503 %504 
                                Private f32* %506 = OpAccessChain %493 %16 
                                                      OpStore %506 %505 
                              Uniform f32_4* %508 = OpAccessChain %500 %507 
                                       f32_4 %509 = OpLoad %508 
                                       f32_4 %510 = OpLoad %487 
                                         f32 %511 = OpDot %509 %510 
                                Private f32* %512 = OpAccessChain %493 %309 
                                                      OpStore %512 %511 
                              Uniform f32_4* %514 = OpAccessChain %500 %513 
                                       f32_4 %515 = OpLoad %514 
                                       f32_4 %516 = OpLoad %487 
                                         f32 %517 = OpDot %515 %516 
                                Private f32* %518 = OpAccessChain %493 %496 
                                                      OpStore %518 %517 
                              Uniform f32_4* %520 = OpAccessChain %500 %519 
                                       f32_4 %521 = OpLoad %520 
                                       f32_3 %522 = OpVectorShuffle %521 %521 0 1 2 
                                       f32_3 %523 = OpLoad %199 
                                       f32_3 %524 = OpVectorShuffle %523 %523 0 0 0 
                                       f32_3 %525 = OpFMul %522 %524 
                                       f32_3 %526 = OpLoad %493 
                                       f32_3 %527 = OpFAdd %525 %526 
                                                      OpStore %199 %527 
                                Private f32* %529 = OpAccessChain %153 %528 
                                                      OpStore %529 %77 
                              Uniform f32_4* %530 = OpAccessChain %500 %70 
                                       f32_4 %531 = OpLoad %530 
                                       f32_4 %532 = OpLoad %153 
                                         f32 %533 = OpDot %531 %532 
                                Private f32* %534 = OpAccessChain %493 %16 
                                                      OpStore %534 %533 
                              Uniform f32_4* %535 = OpAccessChain %500 %339 
                                       f32_4 %536 = OpLoad %535 
                                       f32_4 %537 = OpLoad %153 
                                         f32 %538 = OpDot %536 %537 
                                Private f32* %539 = OpAccessChain %493 %309 
                                                      OpStore %539 %538 
                              Uniform f32_4* %540 = OpAccessChain %500 %126 
                                       f32_4 %541 = OpLoad %540 
                                       f32_4 %542 = OpLoad %153 
                                         f32 %543 = OpDot %541 %542 
                                Private f32* %544 = OpAccessChain %493 %496 
                                                      OpStore %544 %543 
                                       f32_3 %545 = OpLoad %199 
                                       f32_3 %546 = OpLoad %493 
                                       f32_3 %547 = OpFAdd %545 %546 
                                                      OpStore %199 %547 
                                       f32_3 %548 = OpLoad %199 
                                       f32_3 %550 = OpExtInst %1 40 %548 %549 
                                                      OpStore %199 %550 
                                       f32_3 %551 = OpLoad %117 
                                       f32_3 %552 = OpLoad %199 
                                       f32_3 %553 = OpFMul %551 %552 
                                                      OpStore %112 %553 
                                       f32_3 %554 = OpLoad %41 
                                       f32_3 %555 = OpFNegate %554 
                                       f32_4 %556 = OpLoad %153 
                                       f32_3 %557 = OpVectorShuffle %556 %556 0 1 2 
                                         f32 %558 = OpDot %555 %557 
                                                      OpStore %58 %558 
                                         f32 %559 = OpLoad %58 
                                         f32 %560 = OpLoad %58 
                                         f32 %561 = OpFAdd %559 %560 
                                                      OpStore %58 %561 
                                       f32_4 %562 = OpLoad %153 
                                       f32_3 %563 = OpVectorShuffle %562 %562 0 1 2 
                                         f32 %564 = OpLoad %58 
                                       f32_3 %565 = OpCompositeConstruct %564 %564 %564 
                                       f32_3 %566 = OpFNegate %565 
                                       f32_3 %567 = OpFMul %563 %566 
                                       f32_3 %568 = OpLoad %41 
                                       f32_3 %569 = OpFNegate %568 
                                       f32_3 %570 = OpFAdd %567 %569 
                                                      OpStore %41 %570 
                                         f32 %571 = OpLoad %354 
                                         f32 %572 = OpFNegate %571 
                                         f32 %574 = OpFMul %572 %573 
                                         f32 %576 = OpFAdd %574 %575 
                                Private f32* %577 = OpAccessChain %199 %16 
                                                      OpStore %577 %576 
                                         f32 %578 = OpLoad %354 
                                Private f32* %579 = OpAccessChain %199 %16 
                                         f32 %580 = OpLoad %579 
                                         f32 %581 = OpFMul %578 %580 
                                                      OpStore %354 %581 
                                         f32 %582 = OpLoad %354 
                                         f32 %584 = OpFMul %582 %583 
                                                      OpStore %354 %584 
                       read_only TextureCube %589 = OpLoad %588 
                                     sampler %591 = OpLoad %590 
                read_only TextureCubeSampled %593 = OpSampledImage %589 %591 
                                       f32_3 %594 = OpLoad %41 
                                         f32 %595 = OpLoad %354 
                                       f32_4 %596 = OpImageSampleExplicitLod %593 %594 Lod %28 
                                                      OpStore %585 %596 
                                Private f32* %597 = OpAccessChain %585 %528 
                                         f32 %598 = OpLoad %597 
                                         f32 %599 = OpFAdd %598 %121 
                                                      OpStore %354 %599 
                                Uniform f32* %601 = OpAccessChain %500 %600 %528 
                                         f32 %602 = OpLoad %601 
                                         f32 %603 = OpLoad %354 
                                         f32 %604 = OpFMul %602 %603 
                                         f32 %605 = OpFAdd %604 %77 
                                                      OpStore %354 %605 
                                         f32 %606 = OpLoad %354 
                                         f32 %607 = OpExtInst %1 40 %606 %384 
                                                      OpStore %354 %607 
                                         f32 %608 = OpLoad %354 
                                         f32 %609 = OpExtInst %1 30 %608 
                                                      OpStore %354 %609 
                                         f32 %610 = OpLoad %354 
                                Uniform f32* %611 = OpAccessChain %500 %600 %309 
                                         f32 %612 = OpLoad %611 
                                         f32 %613 = OpFMul %610 %612 
                                                      OpStore %354 %613 
                                         f32 %614 = OpLoad %354 
                                         f32 %615 = OpExtInst %1 29 %614 
                                                      OpStore %354 %615 
                                         f32 %616 = OpLoad %354 
                                Uniform f32* %617 = OpAccessChain %500 %600 %16 
                                         f32 %618 = OpLoad %617 
                                         f32 %619 = OpFMul %616 %618 
                                                      OpStore %354 %619 
                                       f32_4 %620 = OpLoad %585 
                                       f32_3 %621 = OpVectorShuffle %620 %620 0 1 2 
                                         f32 %622 = OpLoad %354 
                                       f32_3 %623 = OpCompositeConstruct %622 %622 %622 
                                       f32_3 %624 = OpFMul %621 %623 
                                                      OpStore %199 %624 
                                       f32_3 %625 = OpLoad %117 
                                       f32_3 %626 = OpLoad %199 
                                       f32_3 %627 = OpFMul %625 %626 
                                                      OpStore %117 %627 
                                       f32_3 %628 = OpLoad %112 
                                Uniform f32* %629 = OpAccessChain %69 %35 
                                         f32 %630 = OpLoad %629 
                                       f32_3 %631 = OpCompositeConstruct %630 %630 %630 
                                       f32_3 %632 = OpFMul %628 %631 
                                       f32_3 %633 = OpLoad %117 
                                       f32_3 %634 = OpFAdd %632 %633 
                                                      OpStore %117 %634 
                                       f32_3 %635 = OpLoad %9 
                                       f32_3 %636 = OpLoad %117 
                                       f32_3 %637 = OpFAdd %635 %636 
                                                      OpStore %9 %637 
                              Uniform f32_4* %638 = OpAccessChain %33 %155 %86 
                                       f32_4 %639 = OpLoad %638 
                                       f32_3 %640 = OpVectorShuffle %639 %639 0 1 2 
                              Uniform f32_3* %643 = OpAccessChain %69 %641 
                                       f32_3 %644 = OpLoad %643 
                                       f32_3 %645 = OpVectorShuffle %644 %644 1 1 1 
                                       f32_3 %646 = OpFMul %640 %645 
                                                      OpStore %41 %646 
                              Uniform f32_4* %647 = OpAccessChain %33 %155 %35 
                                       f32_4 %648 = OpLoad %647 
                                       f32_3 %649 = OpVectorShuffle %648 %648 0 1 2 
                              Uniform f32_3* %650 = OpAccessChain %69 %641 
                                       f32_3 %651 = OpLoad %650 
                                       f32_3 %652 = OpVectorShuffle %651 %651 0 0 0 
                                       f32_3 %653 = OpFMul %649 %652 
                                       f32_3 %654 = OpLoad %41 
                                       f32_3 %655 = OpFAdd %653 %654 
                                                      OpStore %41 %655 
                              Uniform f32_4* %656 = OpAccessChain %33 %155 %155 
                                       f32_4 %657 = OpLoad %656 
                                       f32_3 %658 = OpVectorShuffle %657 %657 0 1 2 
                                Uniform f32* %659 = OpAccessChain %69 %641 %496 
                                         f32 %660 = OpLoad %659 
                                Uniform f32* %661 = OpAccessChain %69 %641 %496 
                                         f32 %662 = OpLoad %661 
                                Uniform f32* %663 = OpAccessChain %69 %641 %496 
                                         f32 %664 = OpLoad %663 
                                       f32_3 %665 = OpCompositeConstruct %660 %662 %664 
                                       f32_3 %666 = OpFMul %658 %665 
                                       f32_3 %667 = OpLoad %41 
                                       f32_3 %668 = OpFAdd %666 %667 
                                                      OpStore %41 %668 
                                       f32_3 %669 = OpLoad %41 
                                       f32_3 %670 = OpLoad %41 
                                         f32 %671 = OpDot %669 %670 
                                                      OpStore %58 %671 
                                         f32 %672 = OpLoad %58 
                                         f32 %673 = OpExtInst %1 32 %672 
                                                      OpStore %58 %673 
                                         f32 %674 = OpLoad %58 
                                       f32_3 %675 = OpCompositeConstruct %674 %674 %674 
                                       f32_3 %676 = OpLoad %41 
                                       f32_3 %677 = OpFMul %675 %676 
                                                      OpStore %41 %677 
                                       f32_4 %678 = OpLoad %153 
                                       f32_3 %679 = OpVectorShuffle %678 %678 0 1 2 
                                       f32_3 %680 = OpLoad %41 
                                         f32 %681 = OpDot %679 %680 
                                                      OpStore %58 %681 
                                         f32 %682 = OpLoad %58 
                                         f32 %684 = OpFMul %682 %683 
                                         f32 %685 = OpFAdd %684 %683 
                                                      OpStore %58 %685 
                                         f32 %686 = OpLoad %58 
                                Uniform f32* %688 = OpAccessChain %69 %687 
                                         f32 %689 = OpLoad %688 
                                         f32 %690 = OpFNegate %689 
                                         f32 %691 = OpFAdd %686 %690 
                                                      OpStore %58 %691 
                                         f32 %692 = OpLoad %58 
                                Uniform f32* %693 = OpAccessChain %69 %600 
                                         f32 %694 = OpLoad %693 
                                         f32 %695 = OpFMul %692 %694 
                                                      OpStore %58 %695 
                                         f32 %696 = OpLoad %58 
                                         f32 %697 = OpExtInst %1 43 %696 %384 %77 
                                                      OpStore %58 %697 
                                         f32 %698 = OpLoad %58 
                                       f32_3 %699 = OpCompositeConstruct %698 %698 %698 
                              Uniform f32_4* %701 = OpAccessChain %69 %700 
                                       f32_4 %702 = OpLoad %701 
                                       f32_3 %703 = OpVectorShuffle %702 %702 0 1 2 
                                       f32_3 %704 = OpFMul %699 %703 
                                                      OpStore %117 %704 
                                       f32_3 %705 = OpLoad %117 
                                Uniform f32* %707 = OpAccessChain %69 %706 
                                         f32 %708 = OpLoad %707 
                                Uniform f32* %709 = OpAccessChain %69 %706 
                                         f32 %710 = OpLoad %709 
                                Uniform f32* %711 = OpAccessChain %69 %706 
                                         f32 %712 = OpLoad %711 
                                       f32_3 %713 = OpCompositeConstruct %708 %710 %712 
                                         f32 %714 = OpCompositeExtract %713 0 
                                         f32 %715 = OpCompositeExtract %713 1 
                                         f32 %716 = OpCompositeExtract %713 2 
                                       f32_3 %717 = OpCompositeConstruct %714 %715 %716 
                                       f32_3 %718 = OpFMul %705 %717 
                                                      OpStore %41 %718 
                                       f32_3 %719 = OpLoad %81 
                                       f32_3 %720 = OpVectorShuffle %719 %719 0 0 0 
                                       f32_3 %721 = OpLoad %41 
                                       f32_3 %722 = OpFMul %720 %721 
                                                      OpStore %81 %722 
                                       f32_3 %723 = OpLoad %81 
                                       f32_3 %725 = OpFMul %723 %724 
                                                      OpStore %81 %725 
                                       f32_3 %726 = OpLoad %41 
                                       f32_3 %729 = OpFMul %726 %728 
                                       f32_3 %730 = OpLoad %81 
                                       f32_3 %731 = OpFAdd %729 %730 
                                                      OpStore %41 %731 
                                       f32_3 %732 = OpLoad %9 
                                       f32_3 %733 = OpLoad %41 
                                       f32_3 %734 = OpFAdd %732 %733 
                                                      OpStore %9 %734 
                                       f32_3 %735 = OpLoad %9 
                                       f32_3 %736 = OpExtInst %1 40 %735 %549 
                                                      OpStore %117 %736 
                                       f32_3 %737 = OpLoad %117 
                                       f32_3 %738 = OpExtInst %1 30 %737 
                                                      OpStore %117 %738 
                                       f32_3 %739 = OpLoad %117 
                                       f32_3 %742 = OpFMul %739 %741 
                                                      OpStore %117 %742 
                                       f32_3 %743 = OpLoad %117 
                                       f32_3 %744 = OpExtInst %1 29 %743 
                                                      OpStore %117 %744 
                                       f32_3 %747 = OpLoad %117 
                                       f32_3 %748 = OpExtInst %1 31 %747 
                                       f32_4 %749 = OpLoad %746 
                                       f32_4 %750 = OpVectorShuffle %749 %748 4 5 6 3 
                                                      OpStore %746 %750 
                                 Output f32* %752 = OpAccessChain %746 %528 
                                                      OpStore %752 %77 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec3 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = max(u_xlat9, 1.17549435e-38);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = max(u_xlat9, 1.17549435e-38);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD4.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _Expond;
	UNITY_UNIFORM vec4 _MREA_ST;
	UNITY_UNIFORM vec4 _MainTex_ST;
	UNITY_UNIFORM vec4 _Maincolor;
	UNITY_UNIFORM float _Roughness;
	UNITY_UNIFORM vec3 _rimlightdir;
	UNITY_UNIFORM vec4 _rimcolor;
	UNITY_UNIFORM float _rimhardness;
	UNITY_UNIFORM float _rimthreshold;
	UNITY_UNIFORM float _rimintensity;
	UNITY_UNIFORM float _anisotropic;
	UNITY_UNIFORM vec4 _anisocolor;
	UNITY_UNIFORM float _anisooffest;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(2) uniform mediump sampler2D _Normal;
UNITY_LOCATION(3) uniform mediump sampler2D _MREA;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
vec3 u_xlat10;
float u_xlat18;
float u_xlat24;
float u_xlat25;
float u_xlat26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat8.xyz = vs_TEXCOORD2.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat24 = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat25 = (-_anisotropic) * 0.899999976 + 1.0;
    u_xlat25 = sqrt(u_xlat25);
    u_xlat2.xy = vs_TEXCOORD0.xy * _MREA_ST.xy + _MREA_ST.zw;
    u_xlat16_2 = texture(_MREA, u_xlat2.xy).x;
    u_xlat10.x = u_xlat16_2 * u_xlat16_2;
    u_xlat16_3.x = u_xlat16_2 * 2.0 + -1.0;
    u_xlat2.x = u_xlat16_3.x + _anisooffest;
    u_xlat18 = u_xlat10.x / u_xlat25;
    u_xlat25 = u_xlat25 * u_xlat10.x;
    u_xlat10.x = u_xlat18 * u_xlat18;
    u_xlat24 = u_xlat24 / u_xlat10.x;
    u_xlat10.x = u_xlat25 * u_xlat25;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat16_5.xyz = texture(_Normal, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_MainTex, u_xlat4.xy).xyz;
    u_xlat4.xyz = u_xlat16_4.xyz * _Maincolor.xyz;
    u_xlat16_3.xyz = u_xlat4.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
    u_xlat16_6.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = u_xlat16_6.yyy * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = u_xlat16_6.xxx * vs_TEXCOORD3.xyz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat16_6.zzz * vs_TEXCOORD1.xyz + u_xlat4.xyz;
    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat4.xyz = vec3(u_xlat26) * u_xlat4.xyz;
    u_xlat5.xyz = u_xlat4.xyz * u_xlat2.xxx + vs_TEXCOORD4.xyz;
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat2.x = u_xlat2.x / u_xlat10.x;
    u_xlat24 = u_xlat24 + u_xlat2.x;
    u_xlat2.x = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    u_xlat0.y = u_xlat2.x * u_xlat2.x + u_xlat24;
    u_xlat0.xy = u_xlat0.xy * u_xlat0.xy;
    u_xlat8.x = u_xlat18 * u_xlat0.y;
    u_xlat8.x = u_xlat25 * u_xlat8.x;
    u_xlat8.x = u_xlat8.x * 3.14159274;
    u_xlat8.x = float(1.0) / u_xlat8.x;
    u_xlat8.xyz = u_xlat8.xxx * _anisocolor.xyz;
    u_xlat8.xyz = u_xlat8.xyz * _anisocolor.www;
    u_xlat25 = (-_Roughness) + 1.0;
    u_xlat16_27 = (-u_xlat25) + 1.0;
    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
    u_xlat16_27 = max(u_xlat16_27, 0.00200000009);
    u_xlat25 = u_xlat16_27 + u_xlat16_27;
    u_xlat0.x = u_xlat0.x * u_xlat25 + -0.5;
    u_xlat25 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat25 = max(u_xlat25, 9.99999975e-06);
    u_xlat25 = (-u_xlat25) + 1.0;
    u_xlat25 = max(u_xlat25, 0.0);
    u_xlat2.x = u_xlat25 * u_xlat25;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat25 = u_xlat25 * u_xlat2.x;
    u_xlat25 = u_xlat0.x * u_xlat25 + 1.0;
    u_xlat2.x = dot(u_xlat4.xyz, _MainLightPosition.xyz);
    u_xlat2.x = max(u_xlat2.x, 9.99999975e-06);
    u_xlat10.x = (-u_xlat2.x) + 1.0;
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlat18 = u_xlat10.x * u_xlat10.x;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat10.x = u_xlat10.x * u_xlat18;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + 1.0;
    u_xlat0.x = u_xlat25 * u_xlat0.x;
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat10.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
    u_xlat0.xyz = u_xlat10.xyz * _MainLightColor.xyz + u_xlat8.xyz;
    u_xlat16_6.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_6.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_6.x);
    u_xlat16_5 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_6.xyz = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;
    u_xlat4.w = 1.0;
    u_xlat16_7.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_7.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_7.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat10.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
    u_xlat24 = dot((-u_xlat1.xyz), u_xlat4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat1.xyz = u_xlat4.xyz * (-vec3(u_xlat24)) + (-u_xlat1.xyz);
    u_xlat16_6.x = (-u_xlat16_27) * 0.699999988 + 1.70000005;
    u_xlat16_27 = u_xlat16_27 * u_xlat16_6.x;
    u_xlat16_27 = u_xlat16_27 * 6.0;
    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat1.xyz, u_xlat16_27);
    u_xlat16_27 = u_xlat16_1.w + -1.0;
    u_xlat16_27 = unity_SpecCube0_HDR.w * u_xlat16_27 + 1.0;
    u_xlat16_27 = max(u_xlat16_27, 0.0);
    u_xlat16_27 = log2(u_xlat16_27);
    u_xlat16_27 = u_xlat16_27 * unity_SpecCube0_HDR.y;
    u_xlat16_27 = exp2(u_xlat16_27);
    u_xlat16_27 = u_xlat16_27 * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_1.xyz * vec3(u_xlat16_27);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
    u_xlat16_3.xyz = u_xlat10.xyz * vec3(_Expond) + u_xlat16_3.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixInvV[1].xyz * _rimlightdir.xxyz.zzz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixInvV[0].xyz * _rimlightdir.xxyz.yyy + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixInvV[2].xyz * vec3(_rimlightdir.z, _rimlightdir.z, _rimlightdir.z) + u_xlat1.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat24 = u_xlat24 * 0.5 + 0.5;
    u_xlat24 = u_xlat24 + (-_rimthreshold);
    u_xlat24 = u_xlat24 * _rimhardness;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = vec3(u_xlat24) * _rimcolor.xyz;
    u_xlat1.xyz = u_xlat16_3.xyz * vec3(vec3(_rimintensity, _rimintensity, _rimintensity));
    u_xlat2.xyz = u_xlat2.xxx * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat16_3.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(2.20000005, 2.20000005, 2.20000005);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    SV_Target0.xyz = sqrt(u_xlat16_3.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 222
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %84 %93 %95 %98 %138 %141 %148 %150 %184 %208 %213 %214 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 RelaxedPrecision 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 RelaxedPrecision 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 RelaxedPrecision 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 RelaxedPrecision 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 RelaxedPrecision 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 RelaxedPrecision 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpMemberDecorate %21 16 RelaxedPrecision 
                                                      OpMemberDecorate %21 16 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpDecorate %59 ArrayStride 59 
                                                      OpMemberDecorate %60 0 Offset 60 
                                                      OpMemberDecorate %60 1 Offset 60 
                                                      OpDecorate %60 Block 
                                                      OpDecorate %62 DescriptorSet 62 
                                                      OpDecorate %62 Binding 62 
                                                      OpMemberDecorate %82 0 BuiltIn 82 
                                                      OpMemberDecorate %82 1 BuiltIn 82 
                                                      OpMemberDecorate %82 2 BuiltIn 82 
                                                      OpDecorate %82 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 93 
                                                      OpDecorate %95 Location 95 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate vs_TEXCOORD1 Location 138 
                                                      OpDecorate vs_TEXCOORD2 Location 141 
                                                      OpDecorate vs_TEXCOORD5 Location 148 
                                                      OpDecorate %150 Location 150 
                                                      OpDecorate vs_TEXCOORD3 Location 184 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 208 
                                                      OpDecorate vs_TEXCOORD6 Location 213 
                                                      OpDecorate %214 Location 214 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %10 %16 
                                              %18 = OpTypeArray %10 %16 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypeArray %10 %19 
                                              %21 = OpTypeStruct %17 %18 %10 %10 %10 %20 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4; f32_4[2]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 0 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %10 
                                          i32 %40 = OpConstant 2 
                                          i32 %50 = OpConstant 3 
                                              %55 = OpTypePointer Private %10 
                               Private f32_4* %56 = OpVariable Private 
                                              %59 = OpTypeArray %10 %16 
                                              %60 = OpTypeStruct %7 %59 
                                              %61 = OpTypePointer Uniform %60 
           Uniform struct {f32_3; f32_4[4];}* %62 = OpVariable Uniform 
                                          u32 %80 = OpConstant 1 
                                              %81 = OpTypeArray %6 %80 
                                              %82 = OpTypeStruct %10 %6 %81 
                                              %83 = OpTypePointer Output %82 
         Output struct {f32_4; f32; f32[1];}* %84 = OpVariable Output 
                                              %89 = OpTypePointer Output %10 
                                              %91 = OpTypeVector %6 2 
                                              %92 = OpTypePointer Output %91 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                              %94 = OpTypePointer Input %91 
                                 Input f32_2* %95 = OpVariable Input 
                                              %97 = OpTypePointer Input %7 
                                 Input f32_3* %98 = OpVariable Input 
                                         u32 %104 = OpConstant 0 
                                             %105 = OpTypePointer Private %6 
                                Private f32* %119 = OpVariable Private 
                                         f32 %126 = OpConstant 3.674022E-40 
                                             %137 = OpTypePointer Output %7 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %144 = OpTypePointer Uniform %7 
                       Output f32_3* vs_TEXCOORD5 = OpVariable Output 
                                Input f32_4* %150 = OpVariable Input 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                              Private f32_3* %186 = OpVariable Private 
                                         u32 %200 = OpConstant 3 
                                             %201 = OpTypePointer Input %6 
                                             %204 = OpTypePointer Uniform %6 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                Input f32_4* %214 = OpVariable Input 
                                             %216 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %12 
                                        f32_3 %14 = OpVectorShuffle %13 %13 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_3 %30 = OpVectorShuffle %29 %29 0 1 2 
                                        f32_3 %31 = OpFMul %14 %30 
                                                      OpStore %9 %31 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %25 
                                        f32_4 %33 = OpLoad %32 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                        f32_4 %35 = OpLoad %12 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 0 0 
                                        f32_3 %37 = OpFMul %34 %36 
                                        f32_3 %38 = OpLoad %9 
                                        f32_3 %39 = OpFAdd %37 %38 
                                                      OpStore %9 %39 
                               Uniform f32_4* %41 = OpAccessChain %23 %25 %40 
                                        f32_4 %42 = OpLoad %41 
                                        f32_3 %43 = OpVectorShuffle %42 %42 0 1 2 
                                        f32_4 %44 = OpLoad %12 
                                        f32_3 %45 = OpVectorShuffle %44 %44 2 2 2 
                                        f32_3 %46 = OpFMul %43 %45 
                                        f32_3 %47 = OpLoad %9 
                                        f32_3 %48 = OpFAdd %46 %47 
                                                      OpStore %9 %48 
                                        f32_3 %49 = OpLoad %9 
                               Uniform f32_4* %51 = OpAccessChain %23 %25 %50 
                                        f32_4 %52 = OpLoad %51 
                                        f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                        f32_3 %54 = OpFAdd %49 %53 
                                                      OpStore %9 %54 
                                        f32_3 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 1 1 1 1 
                               Uniform f32_4* %63 = OpAccessChain %62 %26 %26 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFMul %58 %64 
                                                      OpStore %56 %65 
                               Uniform f32_4* %66 = OpAccessChain %62 %26 %25 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpLoad %9 
                                        f32_4 %69 = OpVectorShuffle %68 %68 0 0 0 0 
                                        f32_4 %70 = OpFMul %67 %69 
                                        f32_4 %71 = OpLoad %56 
                                        f32_4 %72 = OpFAdd %70 %71 
                                                      OpStore %56 %72 
                               Uniform f32_4* %73 = OpAccessChain %62 %26 %40 
                                        f32_4 %74 = OpLoad %73 
                                        f32_3 %75 = OpLoad %9 
                                        f32_4 %76 = OpVectorShuffle %75 %75 2 2 2 2 
                                        f32_4 %77 = OpFMul %74 %76 
                                        f32_4 %78 = OpLoad %56 
                                        f32_4 %79 = OpFAdd %77 %78 
                                                      OpStore %56 %79 
                                        f32_4 %85 = OpLoad %56 
                               Uniform f32_4* %86 = OpAccessChain %62 %26 %50 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpFAdd %85 %87 
                                Output f32_4* %90 = OpAccessChain %84 %25 
                                                      OpStore %90 %88 
                                        f32_2 %96 = OpLoad %95 
                                                      OpStore vs_TEXCOORD0 %96 
                                        f32_3 %99 = OpLoad %98 
                              Uniform f32_4* %100 = OpAccessChain %23 %26 %25 
                                       f32_4 %101 = OpLoad %100 
                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 2 
                                         f32 %103 = OpDot %99 %102 
                                Private f32* %106 = OpAccessChain %56 %104 
                                                      OpStore %106 %103 
                                       f32_3 %107 = OpLoad %98 
                              Uniform f32_4* %108 = OpAccessChain %23 %26 %26 
                                       f32_4 %109 = OpLoad %108 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                         f32 %111 = OpDot %107 %110 
                                Private f32* %112 = OpAccessChain %56 %80 
                                                      OpStore %112 %111 
                                       f32_3 %113 = OpLoad %98 
                              Uniform f32_4* %114 = OpAccessChain %23 %26 %40 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                         f32 %117 = OpDot %113 %116 
                                Private f32* %118 = OpAccessChain %56 %19 
                                                      OpStore %118 %117 
                                       f32_4 %120 = OpLoad %56 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_4 %122 = OpLoad %56 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                         f32 %124 = OpDot %121 %123 
                                                      OpStore %119 %124 
                                         f32 %125 = OpLoad %119 
                                         f32 %127 = OpExtInst %1 40 %125 %126 
                                                      OpStore %119 %127 
                                         f32 %128 = OpLoad %119 
                                         f32 %129 = OpExtInst %1 32 %128 
                                                      OpStore %119 %129 
                                         f32 %130 = OpLoad %119 
                                       f32_3 %131 = OpCompositeConstruct %130 %130 %130 
                                       f32_4 %132 = OpLoad %56 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_3 %134 = OpFMul %131 %133 
                                       f32_4 %135 = OpLoad %56 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 6 3 
                                                      OpStore %56 %136 
                                       f32_4 %139 = OpLoad %56 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                                      OpStore vs_TEXCOORD1 %140 
                                       f32_3 %142 = OpLoad %9 
                                       f32_3 %143 = OpFNegate %142 
                              Uniform f32_3* %145 = OpAccessChain %62 %25 
                                       f32_3 %146 = OpLoad %145 
                                       f32_3 %147 = OpFAdd %143 %146 
                                                      OpStore vs_TEXCOORD2 %147 
                                       f32_3 %149 = OpLoad %9 
                                                      OpStore vs_TEXCOORD5 %149 
                                       f32_4 %151 = OpLoad %150 
                                       f32_3 %152 = OpVectorShuffle %151 %151 1 1 1 
                              Uniform f32_4* %153 = OpAccessChain %23 %25 %26 
                                       f32_4 %154 = OpLoad %153 
                                       f32_3 %155 = OpVectorShuffle %154 %154 0 1 2 
                                       f32_3 %156 = OpFMul %152 %155 
                                                      OpStore %9 %156 
                              Uniform f32_4* %157 = OpAccessChain %23 %25 %25 
                                       f32_4 %158 = OpLoad %157 
                                       f32_3 %159 = OpVectorShuffle %158 %158 0 1 2 
                                       f32_4 %160 = OpLoad %150 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 0 0 
                                       f32_3 %162 = OpFMul %159 %161 
                                       f32_3 %163 = OpLoad %9 
                                       f32_3 %164 = OpFAdd %162 %163 
                                                      OpStore %9 %164 
                              Uniform f32_4* %165 = OpAccessChain %23 %25 %40 
                                       f32_4 %166 = OpLoad %165 
                                       f32_3 %167 = OpVectorShuffle %166 %166 0 1 2 
                                       f32_4 %168 = OpLoad %150 
                                       f32_3 %169 = OpVectorShuffle %168 %168 2 2 2 
                                       f32_3 %170 = OpFMul %167 %169 
                                       f32_3 %171 = OpLoad %9 
                                       f32_3 %172 = OpFAdd %170 %171 
                                                      OpStore %9 %172 
                                       f32_3 %173 = OpLoad %9 
                                       f32_3 %174 = OpLoad %9 
                                         f32 %175 = OpDot %173 %174 
                                                      OpStore %119 %175 
                                         f32 %176 = OpLoad %119 
                                         f32 %177 = OpExtInst %1 40 %176 %126 
                                                      OpStore %119 %177 
                                         f32 %178 = OpLoad %119 
                                         f32 %179 = OpExtInst %1 32 %178 
                                                      OpStore %119 %179 
                                         f32 %180 = OpLoad %119 
                                       f32_3 %181 = OpCompositeConstruct %180 %180 %180 
                                       f32_3 %182 = OpLoad %9 
                                       f32_3 %183 = OpFMul %181 %182 
                                                      OpStore %9 %183 
                                       f32_3 %185 = OpLoad %9 
                                                      OpStore vs_TEXCOORD3 %185 
                                       f32_3 %187 = OpLoad %9 
                                       f32_3 %188 = OpVectorShuffle %187 %187 1 2 0 
                                       f32_4 %189 = OpLoad %56 
                                       f32_3 %190 = OpVectorShuffle %189 %189 2 0 1 
                                       f32_3 %191 = OpFMul %188 %190 
                                                      OpStore %186 %191 
                                       f32_4 %192 = OpLoad %56 
                                       f32_3 %193 = OpVectorShuffle %192 %192 1 2 0 
                                       f32_3 %194 = OpLoad %9 
                                       f32_3 %195 = OpVectorShuffle %194 %194 2 0 1 
                                       f32_3 %196 = OpFMul %193 %195 
                                       f32_3 %197 = OpLoad %186 
                                       f32_3 %198 = OpFNegate %197 
                                       f32_3 %199 = OpFAdd %196 %198 
                                                      OpStore %9 %199 
                                  Input f32* %202 = OpAccessChain %150 %200 
                                         f32 %203 = OpLoad %202 
                                Uniform f32* %205 = OpAccessChain %23 %50 %200 
                                         f32 %206 = OpLoad %205 
                                         f32 %207 = OpFMul %203 %206 
                                                      OpStore %119 %207 
                                         f32 %209 = OpLoad %119 
                                       f32_3 %210 = OpCompositeConstruct %209 %209 %209 
                                       f32_3 %211 = OpLoad %9 
                                       f32_3 %212 = OpFMul %210 %211 
                                                      OpStore vs_TEXCOORD4 %212 
                                       f32_4 %215 = OpLoad %214 
                                                      OpStore vs_TEXCOORD6 %215 
                                 Output f32* %217 = OpAccessChain %84 %25 %80 
                                         f32 %218 = OpLoad %217 
                                         f32 %219 = OpFNegate %218 
                                 Output f32* %220 = OpAccessChain %84 %25 %80 
                                                      OpStore %220 %219 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 754
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %11 %59 %84 %207 %223 %746 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpDecorate vs_TEXCOORD2 Location 11 
                                                      OpDecorate %30 ArrayStride 30 
                                                      OpMemberDecorate %31 0 Offset 31 
                                                      OpMemberDecorate %31 1 RelaxedPrecision 
                                                      OpMemberDecorate %31 1 Offset 31 
                                                      OpMemberDecorate %31 2 Offset 31 
                                                      OpDecorate %31 Block 
                                                      OpDecorate %33 DescriptorSet 33 
                                                      OpDecorate %33 Binding 33 
                                                      OpDecorate vs_TEXCOORD3 Location 59 
                                                      OpMemberDecorate %67 0 Offset 67 
                                                      OpMemberDecorate %67 1 Offset 67 
                                                      OpMemberDecorate %67 2 Offset 67 
                                                      OpMemberDecorate %67 3 Offset 67 
                                                      OpMemberDecorate %67 4 Offset 67 
                                                      OpMemberDecorate %67 5 Offset 67 
                                                      OpMemberDecorate %67 6 Offset 67 
                                                      OpMemberDecorate %67 7 Offset 67 
                                                      OpMemberDecorate %67 8 Offset 67 
                                                      OpMemberDecorate %67 9 Offset 67 
                                                      OpMemberDecorate %67 10 Offset 67 
                                                      OpMemberDecorate %67 11 Offset 67 
                                                      OpMemberDecorate %67 12 Offset 67 
                                                      OpDecorate %67 Block 
                                                      OpDecorate %69 DescriptorSet 69 
                                                      OpDecorate %69 Binding 69 
                                                      OpDecorate vs_TEXCOORD0 Location 84 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %100 DescriptorSet 100 
                                                      OpDecorate %100 Binding 100 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %104 RelaxedPrecision 
                                                      OpDecorate %104 DescriptorSet 104 
                                                      OpDecorate %104 Binding 104 
                                                      OpDecorate %105 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %113 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %120 RelaxedPrecision 
                                                      OpDecorate %122 RelaxedPrecision 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %167 DescriptorSet 167 
                                                      OpDecorate %167 Binding 167 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %169 DescriptorSet 169 
                                                      OpDecorate %169 Binding 169 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %177 DescriptorSet 177 
                                                      OpDecorate %177 Binding 177 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %179 DescriptorSet 179 
                                                      OpDecorate %179 Binding 179 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %199 RelaxedPrecision 
                                                      OpDecorate %200 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %204 RelaxedPrecision 
                                                      OpDecorate %205 RelaxedPrecision 
                                                      OpDecorate %206 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 207 
                                                      OpDecorate %212 RelaxedPrecision 
                                                      OpDecorate %213 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 223 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %358 RelaxedPrecision 
                                                      OpDecorate %359 RelaxedPrecision 
                                                      OpDecorate %360 RelaxedPrecision 
                                                      OpDecorate %361 RelaxedPrecision 
                                                      OpDecorate %363 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %365 RelaxedPrecision 
                                                      OpDecorate %366 RelaxedPrecision 
                                                      OpDecorate %462 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %467 RelaxedPrecision 
                                                      OpDecorate %483 RelaxedPrecision 
                                                      OpDecorate %484 RelaxedPrecision 
                                                      OpDecorate %487 RelaxedPrecision 
                                                      OpDecorate %493 RelaxedPrecision 
                                                      OpDecorate %494 ArrayStride 494 
                                                      OpDecorate %495 ArrayStride 495 
                                                      OpDecorate %497 ArrayStride 497 
                                                      OpMemberDecorate %498 0 Offset 498 
                                                      OpMemberDecorate %498 1 Offset 498 
                                                      OpMemberDecorate %498 2 Offset 498 
                                                      OpMemberDecorate %498 3 RelaxedPrecision 
                                                      OpMemberDecorate %498 3 Offset 498 
                                                      OpMemberDecorate %498 4 RelaxedPrecision 
                                                      OpMemberDecorate %498 4 Offset 498 
                                                      OpMemberDecorate %498 5 RelaxedPrecision 
                                                      OpMemberDecorate %498 5 Offset 498 
                                                      OpMemberDecorate %498 6 Offset 498 
                                                      OpMemberDecorate %498 7 RelaxedPrecision 
                                                      OpMemberDecorate %498 7 Offset 498 
                                                      OpMemberDecorate %498 8 Offset 498 
                                                      OpMemberDecorate %498 9 Offset 498 
                                                      OpMemberDecorate %498 10 RelaxedPrecision 
                                                      OpMemberDecorate %498 10 Offset 498 
                                                      OpMemberDecorate %498 11 RelaxedPrecision 
                                                      OpMemberDecorate %498 11 Offset 498 
                                                      OpMemberDecorate %498 12 RelaxedPrecision 
                                                      OpMemberDecorate %498 12 Offset 498 
                                                      OpMemberDecorate %498 13 RelaxedPrecision 
                                                      OpMemberDecorate %498 13 Offset 498 
                                                      OpMemberDecorate %498 14 RelaxedPrecision 
                                                      OpMemberDecorate %498 14 Offset 498 
                                                      OpMemberDecorate %498 15 RelaxedPrecision 
                                                      OpMemberDecorate %498 15 Offset 498 
                                                      OpMemberDecorate %498 16 RelaxedPrecision 
                                                      OpMemberDecorate %498 16 Offset 498 
                                                      OpDecorate %498 Block 
                                                      OpDecorate %500 DescriptorSet 500 
                                                      OpDecorate %500 Binding 500 
                                                      OpDecorate %503 RelaxedPrecision 
                                                      OpDecorate %504 RelaxedPrecision 
                                                      OpDecorate %505 RelaxedPrecision 
                                                      OpDecorate %509 RelaxedPrecision 
                                                      OpDecorate %510 RelaxedPrecision 
                                                      OpDecorate %511 RelaxedPrecision 
                                                      OpDecorate %515 RelaxedPrecision 
                                                      OpDecorate %516 RelaxedPrecision 
                                                      OpDecorate %517 RelaxedPrecision 
                                                      OpDecorate %521 RelaxedPrecision 
                                                      OpDecorate %522 RelaxedPrecision 
                                                      OpDecorate %523 RelaxedPrecision 
                                                      OpDecorate %524 RelaxedPrecision 
                                                      OpDecorate %525 RelaxedPrecision 
                                                      OpDecorate %526 RelaxedPrecision 
                                                      OpDecorate %527 RelaxedPrecision 
                                                      OpDecorate %531 RelaxedPrecision 
                                                      OpDecorate %536 RelaxedPrecision 
                                                      OpDecorate %541 RelaxedPrecision 
                                                      OpDecorate %545 RelaxedPrecision 
                                                      OpDecorate %546 RelaxedPrecision 
                                                      OpDecorate %547 RelaxedPrecision 
                                                      OpDecorate %548 RelaxedPrecision 
                                                      OpDecorate %550 RelaxedPrecision 
                                                      OpDecorate %551 RelaxedPrecision 
                                                      OpDecorate %552 RelaxedPrecision 
                                                      OpDecorate %553 RelaxedPrecision 
                                                      OpDecorate %571 RelaxedPrecision 
                                                      OpDecorate %572 RelaxedPrecision 
                                                      OpDecorate %574 RelaxedPrecision 
                                                      OpDecorate %576 RelaxedPrecision 
                                                      OpDecorate %578 RelaxedPrecision 
                                                      OpDecorate %580 RelaxedPrecision 
                                                      OpDecorate %581 RelaxedPrecision 
                                                      OpDecorate %582 RelaxedPrecision 
                                                      OpDecorate %584 RelaxedPrecision 
                                                      OpDecorate %585 RelaxedPrecision 
                                                      OpDecorate %588 RelaxedPrecision 
                                                      OpDecorate %588 DescriptorSet 588 
                                                      OpDecorate %588 Binding 588 
                                                      OpDecorate %589 RelaxedPrecision 
                                                      OpDecorate %590 RelaxedPrecision 
                                                      OpDecorate %590 DescriptorSet 590 
                                                      OpDecorate %590 Binding 590 
                                                      OpDecorate %591 RelaxedPrecision 
                                                      OpDecorate %595 RelaxedPrecision 
                                                      OpDecorate %598 RelaxedPrecision 
                                                      OpDecorate %599 RelaxedPrecision 
                                                      OpDecorate %602 RelaxedPrecision 
                                                      OpDecorate %603 RelaxedPrecision 
                                                      OpDecorate %604 RelaxedPrecision 
                                                      OpDecorate %605 RelaxedPrecision 
                                                      OpDecorate %606 RelaxedPrecision 
                                                      OpDecorate %607 RelaxedPrecision 
                                                      OpDecorate %608 RelaxedPrecision 
                                                      OpDecorate %609 RelaxedPrecision 
                                                      OpDecorate %610 RelaxedPrecision 
                                                      OpDecorate %612 RelaxedPrecision 
                                                      OpDecorate %613 RelaxedPrecision 
                                                      OpDecorate %614 RelaxedPrecision 
                                                      OpDecorate %615 RelaxedPrecision 
                                                      OpDecorate %616 RelaxedPrecision 
                                                      OpDecorate %618 RelaxedPrecision 
                                                      OpDecorate %619 RelaxedPrecision 
                                                      OpDecorate %620 RelaxedPrecision 
                                                      OpDecorate %621 RelaxedPrecision 
                                                      OpDecorate %622 RelaxedPrecision 
                                                      OpDecorate %623 RelaxedPrecision 
                                                      OpDecorate %624 RelaxedPrecision 
                                                      OpDecorate %625 RelaxedPrecision 
                                                      OpDecorate %626 RelaxedPrecision 
                                                      OpDecorate %627 RelaxedPrecision 
                                                      OpDecorate %633 RelaxedPrecision 
                                                      OpDecorate %636 RelaxedPrecision 
                                                      OpDecorate %705 RelaxedPrecision 
                                                      OpDecorate %713 RelaxedPrecision 
                                                      OpDecorate %714 RelaxedPrecision 
                                                      OpDecorate %715 RelaxedPrecision 
                                                      OpDecorate %716 RelaxedPrecision 
                                                      OpDecorate %717 RelaxedPrecision 
                                                      OpDecorate %718 RelaxedPrecision 
                                                      OpDecorate %737 RelaxedPrecision 
                                                      OpDecorate %738 RelaxedPrecision 
                                                      OpDecorate %739 RelaxedPrecision 
                                                      OpDecorate %742 RelaxedPrecision 
                                                      OpDecorate %743 RelaxedPrecision 
                                                      OpDecorate %744 RelaxedPrecision 
                                                      OpDecorate %746 RelaxedPrecision 
                                                      OpDecorate %746 Location 746 
                                                      OpDecorate %747 RelaxedPrecision 
                                                      OpDecorate %748 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 0 
                                              %17 = OpTypePointer Private %6 
                               Private f32_3* %23 = OpVariable Private 
                                              %28 = OpTypeVector %6 4 
                                          u32 %29 = OpConstant 4 
                                              %30 = OpTypeArray %28 %29 
                                              %31 = OpTypeStruct %28 %28 %30 
                                              %32 = OpTypePointer Uniform %31 
    Uniform struct {f32_4; f32_4; f32_4[4];}* %33 = OpVariable Uniform 
                                              %34 = OpTypeInt 32 1 
                                          i32 %35 = OpConstant 0 
                                              %36 = OpTypePointer Uniform %28 
                               Private f32_3* %41 = OpVariable Private 
                                 Private f32* %58 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                                 Private f32* %66 = OpVariable Private 
                                              %67 = OpTypeStruct %6 %28 %28 %28 %6 %7 %28 %6 %6 %6 %6 %28 %6 
                                              %68 = OpTypePointer Uniform %67 
Uniform struct {f32; f32_4; f32_4; f32_4; f32; f32_3; f32_4; f32; f32; f32; f32; f32_4; f32;}* %69 = OpVariable Uniform 
                                          i32 %70 = OpConstant 10 
                                              %71 = OpTypePointer Uniform %6 
                                          f32 %75 = OpConstant 3.674022E-40 
                                          f32 %77 = OpConstant 3.674022E-40 
                               Private f32_3* %81 = OpVariable Private 
                                              %82 = OpTypeVector %6 2 
                                              %83 = OpTypePointer Input %82 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                          i32 %86 = OpConstant 1 
                                 Private f32* %97 = OpVariable Private 
                                              %98 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %99 = OpTypePointer UniformConstant %98 
        UniformConstant read_only Texture2D* %100 = OpVariable UniformConstant 
                                             %102 = OpTypeSampler 
                                             %103 = OpTypePointer UniformConstant %102 
                    UniformConstant sampler* %104 = OpVariable UniformConstant 
                                             %106 = OpTypeSampledImage %98 
                              Private f32_3* %112 = OpVariable Private 
                              Private f32_3* %117 = OpVariable Private 
                                         f32 %119 = OpConstant 3.674022E-40 
                                         f32 %121 = OpConstant 3.674022E-40 
                                         i32 %126 = OpConstant 12 
                                Private f32* %131 = OpVariable Private 
                                             %152 = OpTypePointer Private %28 
                              Private f32_4* %153 = OpVariable Private 
                                         i32 %155 = OpConstant 2 
                              Private f32_3* %166 = OpVariable Private 
        UniformConstant read_only Texture2D* %167 = OpVariable UniformConstant 
                    UniformConstant sampler* %169 = OpVariable UniformConstant 
                              Private f32_3* %176 = OpVariable Private 
        UniformConstant read_only Texture2D* %177 = OpVariable UniformConstant 
                    UniformConstant sampler* %179 = OpVariable UniformConstant 
                                         i32 %187 = OpConstant 3 
                                         f32 %196 = OpConstant 3.674022E-40 
                                       f32_3 %197 = OpConstantComposite %196 %196 %196 
                              Private f32_3* %199 = OpVariable Private 
                                       f32_3 %201 = OpConstantComposite %119 %119 %119 
                                       f32_3 %203 = OpConstantComposite %121 %121 %121 
                        Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                Private f32* %231 = OpVariable Private 
                              Private f32_3* %246 = OpVariable Private 
                                         f32 %299 = OpConstant 3.674022E-40 
                                         u32 %309 = OpConstant 1 
                                         f32 %330 = OpConstant 3.674022E-40 
                                         i32 %339 = OpConstant 11 
                                         i32 %349 = OpConstant 4 
                                Private f32* %354 = OpVariable Private 
                                         f32 %362 = OpConstant 3.674022E-40 
                                         f32 %371 = OpConstant 3.674022E-40 
                                         f32 %384 = OpConstant 3.674022E-40 
                              Private f32_4* %487 = OpVariable Private 
                              Private f32_3* %493 = OpVariable Private 
                                             %494 = OpTypeArray %28 %29 
                                             %495 = OpTypeArray %28 %29 
                                         u32 %496 = OpConstant 2 
                                             %497 = OpTypeArray %28 %496 
                                             %498 = OpTypeStruct %494 %495 %28 %28 %28 %497 %28 %28 %28 %28 %28 %28 %28 %28 %28 %28 %28 
                                             %499 = OpTypePointer Uniform %498 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4; f32_4[2]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %500 = OpVariable Uniform 
                                         i32 %501 = OpConstant 13 
                                         i32 %507 = OpConstant 14 
                                         i32 %513 = OpConstant 15 
                                         i32 %519 = OpConstant 16 
                                         u32 %528 = OpConstant 3 
                                       f32_3 %549 = OpConstantComposite %384 %384 %384 
                                         f32 %573 = OpConstant 3.674022E-40 
                                         f32 %575 = OpConstant 3.674022E-40 
                                         f32 %583 = OpConstant 3.674022E-40 
                              Private f32_4* %585 = OpVariable Private 
                                             %586 = OpTypeImage %6 Cube 0 0 0 1 Unknown 
                                             %587 = OpTypePointer UniformConstant %586 
      UniformConstant read_only TextureCube* %588 = OpVariable UniformConstant 
                    UniformConstant sampler* %590 = OpVariable UniformConstant 
                                             %592 = OpTypeSampledImage %586 
                                         i32 %600 = OpConstant 7 
                                         i32 %641 = OpConstant 5 
                                             %642 = OpTypePointer Uniform %7 
                                         f32 %683 = OpConstant 3.674022E-40 
                                         i32 %687 = OpConstant 8 
                                         i32 %700 = OpConstant 6 
                                         i32 %706 = OpConstant 9 
                                       f32_3 %724 = OpConstantComposite %573 %573 %573 
                                         f32 %727 = OpConstant 3.674022E-40 
                                       f32_3 %728 = OpConstantComposite %727 %727 %727 
                                         f32 %740 = OpConstant 3.674022E-40 
                                       f32_3 %741 = OpConstantComposite %740 %740 %740 
                                             %745 = OpTypePointer Output %28 
                               Output f32_4* %746 = OpVariable Output 
                                             %751 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_3 %12 = OpLoad vs_TEXCOORD2 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                                          f32 %14 = OpDot %12 %13 
                                 Private f32* %18 = OpAccessChain %9 %16 
                                                      OpStore %18 %14 
                                 Private f32* %19 = OpAccessChain %9 %16 
                                          f32 %20 = OpLoad %19 
                                          f32 %21 = OpExtInst %1 32 %20 
                                 Private f32* %22 = OpAccessChain %9 %16 
                                                      OpStore %22 %21 
                                        f32_3 %24 = OpLoad vs_TEXCOORD2 
                                        f32_3 %25 = OpLoad %9 
                                        f32_3 %26 = OpVectorShuffle %25 %25 0 0 0 
                                        f32_3 %27 = OpFMul %24 %26 
                               Uniform f32_4* %37 = OpAccessChain %33 %35 
                                        f32_4 %38 = OpLoad %37 
                                        f32_3 %39 = OpVectorShuffle %38 %38 0 1 2 
                                        f32_3 %40 = OpFAdd %27 %39 
                                                      OpStore %23 %40 
                                        f32_3 %42 = OpLoad %9 
                                        f32_3 %43 = OpVectorShuffle %42 %42 0 0 0 
                                        f32_3 %44 = OpLoad vs_TEXCOORD2 
                                        f32_3 %45 = OpFMul %43 %44 
                                                      OpStore %41 %45 
                                        f32_3 %46 = OpLoad %23 
                                        f32_3 %47 = OpLoad %23 
                                          f32 %48 = OpDot %46 %47 
                                 Private f32* %49 = OpAccessChain %9 %16 
                                                      OpStore %49 %48 
                                 Private f32* %50 = OpAccessChain %9 %16 
                                          f32 %51 = OpLoad %50 
                                          f32 %52 = OpExtInst %1 32 %51 
                                 Private f32* %53 = OpAccessChain %9 %16 
                                                      OpStore %53 %52 
                                        f32_3 %54 = OpLoad %9 
                                        f32_3 %55 = OpVectorShuffle %54 %54 0 0 0 
                                        f32_3 %56 = OpLoad %23 
                                        f32_3 %57 = OpFMul %55 %56 
                                                      OpStore %9 %57 
                                        f32_3 %60 = OpLoad vs_TEXCOORD3 
                                        f32_3 %61 = OpLoad %9 
                                          f32 %62 = OpDot %60 %61 
                                                      OpStore %58 %62 
                                          f32 %63 = OpLoad %58 
                                          f32 %64 = OpLoad %58 
                                          f32 %65 = OpFMul %63 %64 
                                                      OpStore %58 %65 
                                 Uniform f32* %72 = OpAccessChain %69 %70 
                                          f32 %73 = OpLoad %72 
                                          f32 %74 = OpFNegate %73 
                                          f32 %76 = OpFMul %74 %75 
                                          f32 %78 = OpFAdd %76 %77 
                                                      OpStore %66 %78 
                                          f32 %79 = OpLoad %66 
                                          f32 %80 = OpExtInst %1 31 %79 
                                                      OpStore %66 %80 
                                        f32_2 %85 = OpLoad vs_TEXCOORD0 
                               Uniform f32_4* %87 = OpAccessChain %69 %86 
                                        f32_4 %88 = OpLoad %87 
                                        f32_2 %89 = OpVectorShuffle %88 %88 0 1 
                                        f32_2 %90 = OpFMul %85 %89 
                               Uniform f32_4* %91 = OpAccessChain %69 %86 
                                        f32_4 %92 = OpLoad %91 
                                        f32_2 %93 = OpVectorShuffle %92 %92 2 3 
                                        f32_2 %94 = OpFAdd %90 %93 
                                        f32_3 %95 = OpLoad %81 
                                        f32_3 %96 = OpVectorShuffle %95 %94 3 4 2 
                                                      OpStore %81 %96 
                         read_only Texture2D %101 = OpLoad %100 
                                     sampler %105 = OpLoad %104 
                  read_only Texture2DSampled %107 = OpSampledImage %101 %105 
                                       f32_3 %108 = OpLoad %81 
                                       f32_2 %109 = OpVectorShuffle %108 %108 0 1 
                                       f32_4 %110 = OpImageSampleImplicitLod %107 %109 
                                         f32 %111 = OpCompositeExtract %110 0 
                                                      OpStore %97 %111 
                                         f32 %113 = OpLoad %97 
                                         f32 %114 = OpLoad %97 
                                         f32 %115 = OpFMul %113 %114 
                                Private f32* %116 = OpAccessChain %112 %16 
                                                      OpStore %116 %115 
                                         f32 %118 = OpLoad %97 
                                         f32 %120 = OpFMul %118 %119 
                                         f32 %122 = OpFAdd %120 %121 
                                Private f32* %123 = OpAccessChain %117 %16 
                                                      OpStore %123 %122 
                                Private f32* %124 = OpAccessChain %117 %16 
                                         f32 %125 = OpLoad %124 
                                Uniform f32* %127 = OpAccessChain %69 %126 
                                         f32 %128 = OpLoad %127 
                                         f32 %129 = OpFAdd %125 %128 
                                Private f32* %130 = OpAccessChain %81 %16 
                                                      OpStore %130 %129 
                                Private f32* %132 = OpAccessChain %112 %16 
                                         f32 %133 = OpLoad %132 
                                         f32 %134 = OpLoad %66 
                                         f32 %135 = OpFDiv %133 %134 
                                                      OpStore %131 %135 
                                         f32 %136 = OpLoad %66 
                                Private f32* %137 = OpAccessChain %112 %16 
                                         f32 %138 = OpLoad %137 
                                         f32 %139 = OpFMul %136 %138 
                                                      OpStore %66 %139 
                                         f32 %140 = OpLoad %131 
                                         f32 %141 = OpLoad %131 
                                         f32 %142 = OpFMul %140 %141 
                                Private f32* %143 = OpAccessChain %112 %16 
                                                      OpStore %143 %142 
                                         f32 %144 = OpLoad %58 
                                Private f32* %145 = OpAccessChain %112 %16 
                                         f32 %146 = OpLoad %145 
                                         f32 %147 = OpFDiv %144 %146 
                                                      OpStore %58 %147 
                                         f32 %148 = OpLoad %66 
                                         f32 %149 = OpLoad %66 
                                         f32 %150 = OpFMul %148 %149 
                                Private f32* %151 = OpAccessChain %112 %16 
                                                      OpStore %151 %150 
                                       f32_2 %154 = OpLoad vs_TEXCOORD0 
                              Uniform f32_4* %156 = OpAccessChain %69 %155 
                                       f32_4 %157 = OpLoad %156 
                                       f32_2 %158 = OpVectorShuffle %157 %157 0 1 
                                       f32_2 %159 = OpFMul %154 %158 
                              Uniform f32_4* %160 = OpAccessChain %69 %155 
                                       f32_4 %161 = OpLoad %160 
                                       f32_2 %162 = OpVectorShuffle %161 %161 2 3 
                                       f32_2 %163 = OpFAdd %159 %162 
                                       f32_4 %164 = OpLoad %153 
                                       f32_4 %165 = OpVectorShuffle %164 %163 4 5 2 3 
                                                      OpStore %153 %165 
                         read_only Texture2D %168 = OpLoad %167 
                                     sampler %170 = OpLoad %169 
                  read_only Texture2DSampled %171 = OpSampledImage %168 %170 
                                       f32_4 %172 = OpLoad %153 
                                       f32_2 %173 = OpVectorShuffle %172 %172 0 1 
                                       f32_4 %174 = OpImageSampleImplicitLod %171 %173 
                                       f32_3 %175 = OpVectorShuffle %174 %174 0 1 2 
                                                      OpStore %166 %175 
                         read_only Texture2D %178 = OpLoad %177 
                                     sampler %180 = OpLoad %179 
                  read_only Texture2DSampled %181 = OpSampledImage %178 %180 
                                       f32_4 %182 = OpLoad %153 
                                       f32_2 %183 = OpVectorShuffle %182 %182 0 1 
                                       f32_4 %184 = OpImageSampleImplicitLod %181 %183 
                                       f32_3 %185 = OpVectorShuffle %184 %184 0 1 2 
                                                      OpStore %176 %185 
                                       f32_3 %186 = OpLoad %176 
                              Uniform f32_4* %188 = OpAccessChain %69 %187 
                                       f32_4 %189 = OpLoad %188 
                                       f32_3 %190 = OpVectorShuffle %189 %189 0 1 2 
                                       f32_3 %191 = OpFMul %186 %190 
                                       f32_4 %192 = OpLoad %153 
                                       f32_4 %193 = OpVectorShuffle %192 %191 4 5 6 3 
                                                      OpStore %153 %193 
                                       f32_4 %194 = OpLoad %153 
                                       f32_3 %195 = OpVectorShuffle %194 %194 0 1 2 
                                       f32_3 %198 = OpFMul %195 %197 
                                                      OpStore %117 %198 
                                       f32_3 %200 = OpLoad %166 
                                       f32_3 %202 = OpFMul %200 %201 
                                       f32_3 %204 = OpFAdd %202 %203 
                                                      OpStore %199 %204 
                                       f32_3 %205 = OpLoad %199 
                                       f32_3 %206 = OpVectorShuffle %205 %205 1 1 1 
                                       f32_3 %208 = OpLoad vs_TEXCOORD4 
                                       f32_3 %209 = OpFMul %206 %208 
                                       f32_4 %210 = OpLoad %153 
                                       f32_4 %211 = OpVectorShuffle %210 %209 4 5 6 3 
                                                      OpStore %153 %211 
                                       f32_3 %212 = OpLoad %199 
                                       f32_3 %213 = OpVectorShuffle %212 %212 0 0 0 
                                       f32_3 %214 = OpLoad vs_TEXCOORD3 
                                       f32_3 %215 = OpFMul %213 %214 
                                       f32_4 %216 = OpLoad %153 
                                       f32_3 %217 = OpVectorShuffle %216 %216 0 1 2 
                                       f32_3 %218 = OpFAdd %215 %217 
                                       f32_4 %219 = OpLoad %153 
                                       f32_4 %220 = OpVectorShuffle %219 %218 4 5 6 3 
                                                      OpStore %153 %220 
                                       f32_3 %221 = OpLoad %199 
                                       f32_3 %222 = OpVectorShuffle %221 %221 2 2 2 
                                       f32_3 %224 = OpLoad vs_TEXCOORD1 
                                       f32_3 %225 = OpFMul %222 %224 
                                       f32_4 %226 = OpLoad %153 
                                       f32_3 %227 = OpVectorShuffle %226 %226 0 1 2 
                                       f32_3 %228 = OpFAdd %225 %227 
                                       f32_4 %229 = OpLoad %153 
                                       f32_4 %230 = OpVectorShuffle %229 %228 4 5 6 3 
                                                      OpStore %153 %230 
                                       f32_4 %232 = OpLoad %153 
                                       f32_3 %233 = OpVectorShuffle %232 %232 0 1 2 
                                       f32_4 %234 = OpLoad %153 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 1 2 
                                         f32 %236 = OpDot %233 %235 
                                                      OpStore %231 %236 
                                         f32 %237 = OpLoad %231 
                                         f32 %238 = OpExtInst %1 32 %237 
                                                      OpStore %231 %238 
                                         f32 %239 = OpLoad %231 
                                       f32_3 %240 = OpCompositeConstruct %239 %239 %239 
                                       f32_4 %241 = OpLoad %153 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 1 2 
                                       f32_3 %243 = OpFMul %240 %242 
                                       f32_4 %244 = OpLoad %153 
                                       f32_4 %245 = OpVectorShuffle %244 %243 4 5 6 3 
                                                      OpStore %153 %245 
                                       f32_4 %247 = OpLoad %153 
                                       f32_3 %248 = OpVectorShuffle %247 %247 0 1 2 
                                       f32_3 %249 = OpLoad %81 
                                       f32_3 %250 = OpVectorShuffle %249 %249 0 0 0 
                                       f32_3 %251 = OpFMul %248 %250 
                                       f32_3 %252 = OpLoad vs_TEXCOORD4 
                                       f32_3 %253 = OpFAdd %251 %252 
                                                      OpStore %246 %253 
                                       f32_3 %254 = OpLoad %246 
                                       f32_3 %255 = OpLoad %246 
                                         f32 %256 = OpDot %254 %255 
                                Private f32* %257 = OpAccessChain %81 %16 
                                                      OpStore %257 %256 
                                Private f32* %258 = OpAccessChain %81 %16 
                                         f32 %259 = OpLoad %258 
                                         f32 %260 = OpExtInst %1 32 %259 
                                Private f32* %261 = OpAccessChain %81 %16 
                                                      OpStore %261 %260 
                                       f32_3 %262 = OpLoad %81 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 0 0 
                                       f32_3 %264 = OpLoad %246 
                                       f32_3 %265 = OpFMul %263 %264 
                                                      OpStore %246 %265 
                                       f32_3 %266 = OpLoad %246 
                                       f32_3 %267 = OpLoad %9 
                                         f32 %268 = OpDot %266 %267 
                                Private f32* %269 = OpAccessChain %81 %16 
                                                      OpStore %269 %268 
                                Private f32* %270 = OpAccessChain %81 %16 
                                         f32 %271 = OpLoad %270 
                                Private f32* %272 = OpAccessChain %81 %16 
                                         f32 %273 = OpLoad %272 
                                         f32 %274 = OpFMul %271 %273 
                                Private f32* %275 = OpAccessChain %81 %16 
                                                      OpStore %275 %274 
                                Private f32* %276 = OpAccessChain %81 %16 
                                         f32 %277 = OpLoad %276 
                                Private f32* %278 = OpAccessChain %112 %16 
                                         f32 %279 = OpLoad %278 
                                         f32 %280 = OpFDiv %277 %279 
                                Private f32* %281 = OpAccessChain %81 %16 
                                                      OpStore %281 %280 
                                         f32 %282 = OpLoad %58 
                                Private f32* %283 = OpAccessChain %81 %16 
                                         f32 %284 = OpLoad %283 
                                         f32 %285 = OpFAdd %282 %284 
                                                      OpStore %58 %285 
                                       f32_4 %286 = OpLoad %153 
                                       f32_3 %287 = OpVectorShuffle %286 %286 0 1 2 
                                       f32_3 %288 = OpLoad %9 
                                         f32 %289 = OpDot %287 %288 
                                Private f32* %290 = OpAccessChain %81 %16 
                                                      OpStore %290 %289 
                              Uniform f32_4* %291 = OpAccessChain %33 %35 
                                       f32_4 %292 = OpLoad %291 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
                                       f32_3 %294 = OpLoad %9 
                                         f32 %295 = OpDot %293 %294 
                                Private f32* %296 = OpAccessChain %9 %16 
                                                      OpStore %296 %295 
                                Private f32* %297 = OpAccessChain %9 %16 
                                         f32 %298 = OpLoad %297 
                                         f32 %300 = OpExtInst %1 40 %298 %299 
                                Private f32* %301 = OpAccessChain %9 %16 
                                                      OpStore %301 %300 
                                Private f32* %302 = OpAccessChain %81 %16 
                                         f32 %303 = OpLoad %302 
                                Private f32* %304 = OpAccessChain %81 %16 
                                         f32 %305 = OpLoad %304 
                                         f32 %306 = OpFMul %303 %305 
                                         f32 %307 = OpLoad %58 
                                         f32 %308 = OpFAdd %306 %307 
                                Private f32* %310 = OpAccessChain %9 %309 
                                                      OpStore %310 %308 
                                       f32_3 %311 = OpLoad %9 
                                       f32_2 %312 = OpVectorShuffle %311 %311 0 1 
                                       f32_3 %313 = OpLoad %9 
                                       f32_2 %314 = OpVectorShuffle %313 %313 0 1 
                                       f32_2 %315 = OpFMul %312 %314 
                                       f32_3 %316 = OpLoad %9 
                                       f32_3 %317 = OpVectorShuffle %316 %315 3 4 2 
                                                      OpStore %9 %317 
                                         f32 %318 = OpLoad %131 
                                Private f32* %319 = OpAccessChain %9 %309 
                                         f32 %320 = OpLoad %319 
                                         f32 %321 = OpFMul %318 %320 
                                Private f32* %322 = OpAccessChain %23 %16 
                                                      OpStore %322 %321 
                                         f32 %323 = OpLoad %66 
                                Private f32* %324 = OpAccessChain %23 %16 
                                         f32 %325 = OpLoad %324 
                                         f32 %326 = OpFMul %323 %325 
                                Private f32* %327 = OpAccessChain %23 %16 
                                                      OpStore %327 %326 
                                Private f32* %328 = OpAccessChain %23 %16 
                                         f32 %329 = OpLoad %328 
                                         f32 %331 = OpFMul %329 %330 
                                Private f32* %332 = OpAccessChain %23 %16 
                                                      OpStore %332 %331 
                                Private f32* %333 = OpAccessChain %23 %16 
                                         f32 %334 = OpLoad %333 
                                         f32 %335 = OpFDiv %77 %334 
                                Private f32* %336 = OpAccessChain %23 %16 
                                                      OpStore %336 %335 
                                       f32_3 %337 = OpLoad %23 
                                       f32_3 %338 = OpVectorShuffle %337 %337 0 0 0 
                              Uniform f32_4* %340 = OpAccessChain %69 %339 
                                       f32_4 %341 = OpLoad %340 
                                       f32_3 %342 = OpVectorShuffle %341 %341 0 1 2 
                                       f32_3 %343 = OpFMul %338 %342 
                                                      OpStore %23 %343 
                                       f32_3 %344 = OpLoad %23 
                              Uniform f32_4* %345 = OpAccessChain %69 %339 
                                       f32_4 %346 = OpLoad %345 
                                       f32_3 %347 = OpVectorShuffle %346 %346 3 3 3 
                                       f32_3 %348 = OpFMul %344 %347 
                                                      OpStore %23 %348 
                                Uniform f32* %350 = OpAccessChain %69 %349 
                                         f32 %351 = OpLoad %350 
                                         f32 %352 = OpFNegate %351 
                                         f32 %353 = OpFAdd %352 %77 
                                                      OpStore %66 %353 
                                         f32 %355 = OpLoad %66 
                                         f32 %356 = OpFNegate %355 
                                         f32 %357 = OpFAdd %356 %77 
                                                      OpStore %354 %357 
                                         f32 %358 = OpLoad %354 
                                         f32 %359 = OpLoad %354 
                                         f32 %360 = OpFMul %358 %359 
                                                      OpStore %354 %360 
                                         f32 %361 = OpLoad %354 
                                         f32 %363 = OpExtInst %1 40 %361 %362 
                                                      OpStore %354 %363 
                                         f32 %364 = OpLoad %354 
                                         f32 %365 = OpLoad %354 
                                         f32 %366 = OpFAdd %364 %365 
                                                      OpStore %66 %366 
                                Private f32* %367 = OpAccessChain %9 %16 
                                         f32 %368 = OpLoad %367 
                                         f32 %369 = OpLoad %66 
                                         f32 %370 = OpFMul %368 %369 
                                         f32 %372 = OpFAdd %370 %371 
                                Private f32* %373 = OpAccessChain %9 %16 
                                                      OpStore %373 %372 
                                       f32_4 %374 = OpLoad %153 
                                       f32_3 %375 = OpVectorShuffle %374 %374 0 1 2 
                                       f32_3 %376 = OpLoad %41 
                                         f32 %377 = OpDot %375 %376 
                                                      OpStore %66 %377 
                                         f32 %378 = OpLoad %66 
                                         f32 %379 = OpExtInst %1 40 %378 %299 
                                                      OpStore %66 %379 
                                         f32 %380 = OpLoad %66 
                                         f32 %381 = OpFNegate %380 
                                         f32 %382 = OpFAdd %381 %77 
                                                      OpStore %66 %382 
                                         f32 %383 = OpLoad %66 
                                         f32 %385 = OpExtInst %1 40 %383 %384 
                                                      OpStore %66 %385 
                                         f32 %386 = OpLoad %66 
                                         f32 %387 = OpLoad %66 
                                         f32 %388 = OpFMul %386 %387 
                                Private f32* %389 = OpAccessChain %81 %16 
                                                      OpStore %389 %388 
                                Private f32* %390 = OpAccessChain %81 %16 
                                         f32 %391 = OpLoad %390 
                                Private f32* %392 = OpAccessChain %81 %16 
                                         f32 %393 = OpLoad %392 
                                         f32 %394 = OpFMul %391 %393 
                                Private f32* %395 = OpAccessChain %81 %16 
                                                      OpStore %395 %394 
                                         f32 %396 = OpLoad %66 
                                Private f32* %397 = OpAccessChain %81 %16 
                                         f32 %398 = OpLoad %397 
                                         f32 %399 = OpFMul %396 %398 
                                                      OpStore %66 %399 
                                Private f32* %400 = OpAccessChain %9 %16 
                                         f32 %401 = OpLoad %400 
                                         f32 %402 = OpLoad %66 
                                         f32 %403 = OpFMul %401 %402 
                                         f32 %404 = OpFAdd %403 %77 
                                                      OpStore %66 %404 
                                       f32_4 %405 = OpLoad %153 
                                       f32_3 %406 = OpVectorShuffle %405 %405 0 1 2 
                              Uniform f32_4* %407 = OpAccessChain %33 %35 
                                       f32_4 %408 = OpLoad %407 
                                       f32_3 %409 = OpVectorShuffle %408 %408 0 1 2 
                                         f32 %410 = OpDot %406 %409 
                                Private f32* %411 = OpAccessChain %81 %16 
                                                      OpStore %411 %410 
                                Private f32* %412 = OpAccessChain %81 %16 
                                         f32 %413 = OpLoad %412 
                                         f32 %414 = OpExtInst %1 40 %413 %299 
                                Private f32* %415 = OpAccessChain %81 %16 
                                                      OpStore %415 %414 
                                Private f32* %416 = OpAccessChain %81 %16 
                                         f32 %417 = OpLoad %416 
                                         f32 %418 = OpFNegate %417 
                                         f32 %419 = OpFAdd %418 %77 
                                Private f32* %420 = OpAccessChain %112 %16 
                                                      OpStore %420 %419 
                                Private f32* %421 = OpAccessChain %112 %16 
                                         f32 %422 = OpLoad %421 
                                         f32 %423 = OpExtInst %1 40 %422 %384 
                                Private f32* %424 = OpAccessChain %112 %16 
                                                      OpStore %424 %423 
                                Private f32* %425 = OpAccessChain %112 %16 
                                         f32 %426 = OpLoad %425 
                                Private f32* %427 = OpAccessChain %112 %16 
                                         f32 %428 = OpLoad %427 
                                         f32 %429 = OpFMul %426 %428 
                                                      OpStore %131 %429 
                                         f32 %430 = OpLoad %131 
                                         f32 %431 = OpLoad %131 
                                         f32 %432 = OpFMul %430 %431 
                                                      OpStore %131 %432 
                                Private f32* %433 = OpAccessChain %112 %16 
                                         f32 %434 = OpLoad %433 
                                         f32 %435 = OpLoad %131 
                                         f32 %436 = OpFMul %434 %435 
                                Private f32* %437 = OpAccessChain %112 %16 
                                                      OpStore %437 %436 
                                Private f32* %438 = OpAccessChain %9 %16 
                                         f32 %439 = OpLoad %438 
                                Private f32* %440 = OpAccessChain %112 %16 
                                         f32 %441 = OpLoad %440 
                                         f32 %442 = OpFMul %439 %441 
                                         f32 %443 = OpFAdd %442 %77 
                                Private f32* %444 = OpAccessChain %9 %16 
                                                      OpStore %444 %443 
                                         f32 %445 = OpLoad %66 
                                Private f32* %446 = OpAccessChain %9 %16 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpFMul %445 %447 
                                Private f32* %449 = OpAccessChain %9 %16 
                                                      OpStore %449 %448 
                                Private f32* %450 = OpAccessChain %81 %16 
                                         f32 %451 = OpLoad %450 
                                Private f32* %452 = OpAccessChain %9 %16 
                                         f32 %453 = OpLoad %452 
                                         f32 %454 = OpFMul %451 %453 
                                Private f32* %455 = OpAccessChain %9 %16 
                                                      OpStore %455 %454 
                                Private f32* %456 = OpAccessChain %9 %16 
                                         f32 %457 = OpLoad %456 
                                         f32 %458 = OpExtInst %1 37 %457 %77 
                                Private f32* %459 = OpAccessChain %9 %16 
                                                      OpStore %459 %458 
                                       f32_3 %460 = OpLoad %9 
                                       f32_3 %461 = OpVectorShuffle %460 %460 0 0 0 
                                       f32_3 %462 = OpLoad %117 
                                       f32_3 %463 = OpFMul %461 %462 
                                                      OpStore %112 %463 
                                       f32_3 %464 = OpLoad %112 
                              Uniform f32_4* %465 = OpAccessChain %33 %86 
                                       f32_4 %466 = OpLoad %465 
                                       f32_3 %467 = OpVectorShuffle %466 %466 0 1 2 
                                       f32_3 %468 = OpFMul %464 %467 
                                       f32_3 %469 = OpLoad %23 
                                       f32_3 %470 = OpFAdd %468 %469 
                                                      OpStore %9 %470 
                                Private f32* %471 = OpAccessChain %153 %309 
                                         f32 %472 = OpLoad %471 
                                Private f32* %473 = OpAccessChain %153 %309 
                                         f32 %474 = OpLoad %473 
                                         f32 %475 = OpFMul %472 %474 
                                Private f32* %476 = OpAccessChain %199 %16 
                                                      OpStore %476 %475 
                                Private f32* %477 = OpAccessChain %153 %16 
                                         f32 %478 = OpLoad %477 
                                Private f32* %479 = OpAccessChain %153 %16 
                                         f32 %480 = OpLoad %479 
                                         f32 %481 = OpFMul %478 %480 
                                Private f32* %482 = OpAccessChain %199 %16 
                                         f32 %483 = OpLoad %482 
                                         f32 %484 = OpFNegate %483 
                                         f32 %485 = OpFAdd %481 %484 
                                Private f32* %486 = OpAccessChain %199 %16 
                                                      OpStore %486 %485 
                                       f32_4 %488 = OpLoad %153 
                                       f32_4 %489 = OpVectorShuffle %488 %488 1 2 2 0 
                                       f32_4 %490 = OpLoad %153 
                                       f32_4 %491 = OpVectorShuffle %490 %490 0 1 2 2 
                                       f32_4 %492 = OpFMul %489 %491 
                                                      OpStore %487 %492 
                              Uniform f32_4* %502 = OpAccessChain %500 %501 
                                       f32_4 %503 = OpLoad %502 
                                       f32_4 %504 = OpLoad %487 
                                         f32 %505 = OpDot %503 %504 
                                Private f32* %506 = OpAccessChain %493 %16 
                                                      OpStore %506 %505 
                              Uniform f32_4* %508 = OpAccessChain %500 %507 
                                       f32_4 %509 = OpLoad %508 
                                       f32_4 %510 = OpLoad %487 
                                         f32 %511 = OpDot %509 %510 
                                Private f32* %512 = OpAccessChain %493 %309 
                                                      OpStore %512 %511 
                              Uniform f32_4* %514 = OpAccessChain %500 %513 
                                       f32_4 %515 = OpLoad %514 
                                       f32_4 %516 = OpLoad %487 
                                         f32 %517 = OpDot %515 %516 
                                Private f32* %518 = OpAccessChain %493 %496 
                                                      OpStore %518 %517 
                              Uniform f32_4* %520 = OpAccessChain %500 %519 
                                       f32_4 %521 = OpLoad %520 
                                       f32_3 %522 = OpVectorShuffle %521 %521 0 1 2 
                                       f32_3 %523 = OpLoad %199 
                                       f32_3 %524 = OpVectorShuffle %523 %523 0 0 0 
                                       f32_3 %525 = OpFMul %522 %524 
                                       f32_3 %526 = OpLoad %493 
                                       f32_3 %527 = OpFAdd %525 %526 
                                                      OpStore %199 %527 
                                Private f32* %529 = OpAccessChain %153 %528 
                                                      OpStore %529 %77 
                              Uniform f32_4* %530 = OpAccessChain %500 %70 
                                       f32_4 %531 = OpLoad %530 
                                       f32_4 %532 = OpLoad %153 
                                         f32 %533 = OpDot %531 %532 
                                Private f32* %534 = OpAccessChain %493 %16 
                                                      OpStore %534 %533 
                              Uniform f32_4* %535 = OpAccessChain %500 %339 
                                       f32_4 %536 = OpLoad %535 
                                       f32_4 %537 = OpLoad %153 
                                         f32 %538 = OpDot %536 %537 
                                Private f32* %539 = OpAccessChain %493 %309 
                                                      OpStore %539 %538 
                              Uniform f32_4* %540 = OpAccessChain %500 %126 
                                       f32_4 %541 = OpLoad %540 
                                       f32_4 %542 = OpLoad %153 
                                         f32 %543 = OpDot %541 %542 
                                Private f32* %544 = OpAccessChain %493 %496 
                                                      OpStore %544 %543 
                                       f32_3 %545 = OpLoad %199 
                                       f32_3 %546 = OpLoad %493 
                                       f32_3 %547 = OpFAdd %545 %546 
                                                      OpStore %199 %547 
                                       f32_3 %548 = OpLoad %199 
                                       f32_3 %550 = OpExtInst %1 40 %548 %549 
                                                      OpStore %199 %550 
                                       f32_3 %551 = OpLoad %117 
                                       f32_3 %552 = OpLoad %199 
                                       f32_3 %553 = OpFMul %551 %552 
                                                      OpStore %112 %553 
                                       f32_3 %554 = OpLoad %41 
                                       f32_3 %555 = OpFNegate %554 
                                       f32_4 %556 = OpLoad %153 
                                       f32_3 %557 = OpVectorShuffle %556 %556 0 1 2 
                                         f32 %558 = OpDot %555 %557 
                                                      OpStore %58 %558 
                                         f32 %559 = OpLoad %58 
                                         f32 %560 = OpLoad %58 
                                         f32 %561 = OpFAdd %559 %560 
                                                      OpStore %58 %561 
                                       f32_4 %562 = OpLoad %153 
                                       f32_3 %563 = OpVectorShuffle %562 %562 0 1 2 
                                         f32 %564 = OpLoad %58 
                                       f32_3 %565 = OpCompositeConstruct %564 %564 %564 
                                       f32_3 %566 = OpFNegate %565 
                                       f32_3 %567 = OpFMul %563 %566 
                                       f32_3 %568 = OpLoad %41 
                                       f32_3 %569 = OpFNegate %568 
                                       f32_3 %570 = OpFAdd %567 %569 
                                                      OpStore %41 %570 
                                         f32 %571 = OpLoad %354 
                                         f32 %572 = OpFNegate %571 
                                         f32 %574 = OpFMul %572 %573 
                                         f32 %576 = OpFAdd %574 %575 
                                Private f32* %577 = OpAccessChain %199 %16 
                                                      OpStore %577 %576 
                                         f32 %578 = OpLoad %354 
                                Private f32* %579 = OpAccessChain %199 %16 
                                         f32 %580 = OpLoad %579 
                                         f32 %581 = OpFMul %578 %580 
                                                      OpStore %354 %581 
                                         f32 %582 = OpLoad %354 
                                         f32 %584 = OpFMul %582 %583 
                                                      OpStore %354 %584 
                       read_only TextureCube %589 = OpLoad %588 
                                     sampler %591 = OpLoad %590 
                read_only TextureCubeSampled %593 = OpSampledImage %589 %591 
                                       f32_3 %594 = OpLoad %41 
                                         f32 %595 = OpLoad %354 
                                       f32_4 %596 = OpImageSampleExplicitLod %593 %594 Lod %28 
                                                      OpStore %585 %596 
                                Private f32* %597 = OpAccessChain %585 %528 
                                         f32 %598 = OpLoad %597 
                                         f32 %599 = OpFAdd %598 %121 
                                                      OpStore %354 %599 
                                Uniform f32* %601 = OpAccessChain %500 %600 %528 
                                         f32 %602 = OpLoad %601 
                                         f32 %603 = OpLoad %354 
                                         f32 %604 = OpFMul %602 %603 
                                         f32 %605 = OpFAdd %604 %77 
                                                      OpStore %354 %605 
                                         f32 %606 = OpLoad %354 
                                         f32 %607 = OpExtInst %1 40 %606 %384 
                                                      OpStore %354 %607 
                                         f32 %608 = OpLoad %354 
                                         f32 %609 = OpExtInst %1 30 %608 
                                                      OpStore %354 %609 
                                         f32 %610 = OpLoad %354 
                                Uniform f32* %611 = OpAccessChain %500 %600 %309 
                                         f32 %612 = OpLoad %611 
                                         f32 %613 = OpFMul %610 %612 
                                                      OpStore %354 %613 
                                         f32 %614 = OpLoad %354 
                                         f32 %615 = OpExtInst %1 29 %614 
                                                      OpStore %354 %615 
                                         f32 %616 = OpLoad %354 
                                Uniform f32* %617 = OpAccessChain %500 %600 %16 
                                         f32 %618 = OpLoad %617 
                                         f32 %619 = OpFMul %616 %618 
                                                      OpStore %354 %619 
                                       f32_4 %620 = OpLoad %585 
                                       f32_3 %621 = OpVectorShuffle %620 %620 0 1 2 
                                         f32 %622 = OpLoad %354 
                                       f32_3 %623 = OpCompositeConstruct %622 %622 %622 
                                       f32_3 %624 = OpFMul %621 %623 
                                                      OpStore %199 %624 
                                       f32_3 %625 = OpLoad %117 
                                       f32_3 %626 = OpLoad %199 
                                       f32_3 %627 = OpFMul %625 %626 
                                                      OpStore %117 %627 
                                       f32_3 %628 = OpLoad %112 
                                Uniform f32* %629 = OpAccessChain %69 %35 
                                         f32 %630 = OpLoad %629 
                                       f32_3 %631 = OpCompositeConstruct %630 %630 %630 
                                       f32_3 %632 = OpFMul %628 %631 
                                       f32_3 %633 = OpLoad %117 
                                       f32_3 %634 = OpFAdd %632 %633 
                                                      OpStore %117 %634 
                                       f32_3 %635 = OpLoad %9 
                                       f32_3 %636 = OpLoad %117 
                                       f32_3 %637 = OpFAdd %635 %636 
                                                      OpStore %9 %637 
                              Uniform f32_4* %638 = OpAccessChain %33 %155 %86 
                                       f32_4 %639 = OpLoad %638 
                                       f32_3 %640 = OpVectorShuffle %639 %639 0 1 2 
                              Uniform f32_3* %643 = OpAccessChain %69 %641 
                                       f32_3 %644 = OpLoad %643 
                                       f32_3 %645 = OpVectorShuffle %644 %644 1 1 1 
                                       f32_3 %646 = OpFMul %640 %645 
                                                      OpStore %41 %646 
                              Uniform f32_4* %647 = OpAccessChain %33 %155 %35 
                                       f32_4 %648 = OpLoad %647 
                                       f32_3 %649 = OpVectorShuffle %648 %648 0 1 2 
                              Uniform f32_3* %650 = OpAccessChain %69 %641 
                                       f32_3 %651 = OpLoad %650 
                                       f32_3 %652 = OpVectorShuffle %651 %651 0 0 0 
                                       f32_3 %653 = OpFMul %649 %652 
                                       f32_3 %654 = OpLoad %41 
                                       f32_3 %655 = OpFAdd %653 %654 
                                                      OpStore %41 %655 
                              Uniform f32_4* %656 = OpAccessChain %33 %155 %155 
                                       f32_4 %657 = OpLoad %656 
                                       f32_3 %658 = OpVectorShuffle %657 %657 0 1 2 
                                Uniform f32* %659 = OpAccessChain %69 %641 %496 
                                         f32 %660 = OpLoad %659 
                                Uniform f32* %661 = OpAccessChain %69 %641 %496 
                                         f32 %662 = OpLoad %661 
                                Uniform f32* %663 = OpAccessChain %69 %641 %496 
                                         f32 %664 = OpLoad %663 
                                       f32_3 %665 = OpCompositeConstruct %660 %662 %664 
                                       f32_3 %666 = OpFMul %658 %665 
                                       f32_3 %667 = OpLoad %41 
                                       f32_3 %668 = OpFAdd %666 %667 
                                                      OpStore %41 %668 
                                       f32_3 %669 = OpLoad %41 
                                       f32_3 %670 = OpLoad %41 
                                         f32 %671 = OpDot %669 %670 
                                                      OpStore %58 %671 
                                         f32 %672 = OpLoad %58 
                                         f32 %673 = OpExtInst %1 32 %672 
                                                      OpStore %58 %673 
                                         f32 %674 = OpLoad %58 
                                       f32_3 %675 = OpCompositeConstruct %674 %674 %674 
                                       f32_3 %676 = OpLoad %41 
                                       f32_3 %677 = OpFMul %675 %676 
                                                      OpStore %41 %677 
                                       f32_4 %678 = OpLoad %153 
                                       f32_3 %679 = OpVectorShuffle %678 %678 0 1 2 
                                       f32_3 %680 = OpLoad %41 
                                         f32 %681 = OpDot %679 %680 
                                                      OpStore %58 %681 
                                         f32 %682 = OpLoad %58 
                                         f32 %684 = OpFMul %682 %683 
                                         f32 %685 = OpFAdd %684 %683 
                                                      OpStore %58 %685 
                                         f32 %686 = OpLoad %58 
                                Uniform f32* %688 = OpAccessChain %69 %687 
                                         f32 %689 = OpLoad %688 
                                         f32 %690 = OpFNegate %689 
                                         f32 %691 = OpFAdd %686 %690 
                                                      OpStore %58 %691 
                                         f32 %692 = OpLoad %58 
                                Uniform f32* %693 = OpAccessChain %69 %600 
                                         f32 %694 = OpLoad %693 
                                         f32 %695 = OpFMul %692 %694 
                                                      OpStore %58 %695 
                                         f32 %696 = OpLoad %58 
                                         f32 %697 = OpExtInst %1 43 %696 %384 %77 
                                                      OpStore %58 %697 
                                         f32 %698 = OpLoad %58 
                                       f32_3 %699 = OpCompositeConstruct %698 %698 %698 
                              Uniform f32_4* %701 = OpAccessChain %69 %700 
                                       f32_4 %702 = OpLoad %701 
                                       f32_3 %703 = OpVectorShuffle %702 %702 0 1 2 
                                       f32_3 %704 = OpFMul %699 %703 
                                                      OpStore %117 %704 
                                       f32_3 %705 = OpLoad %117 
                                Uniform f32* %707 = OpAccessChain %69 %706 
                                         f32 %708 = OpLoad %707 
                                Uniform f32* %709 = OpAccessChain %69 %706 
                                         f32 %710 = OpLoad %709 
                                Uniform f32* %711 = OpAccessChain %69 %706 
                                         f32 %712 = OpLoad %711 
                                       f32_3 %713 = OpCompositeConstruct %708 %710 %712 
                                         f32 %714 = OpCompositeExtract %713 0 
                                         f32 %715 = OpCompositeExtract %713 1 
                                         f32 %716 = OpCompositeExtract %713 2 
                                       f32_3 %717 = OpCompositeConstruct %714 %715 %716 
                                       f32_3 %718 = OpFMul %705 %717 
                                                      OpStore %41 %718 
                                       f32_3 %719 = OpLoad %81 
                                       f32_3 %720 = OpVectorShuffle %719 %719 0 0 0 
                                       f32_3 %721 = OpLoad %41 
                                       f32_3 %722 = OpFMul %720 %721 
                                                      OpStore %81 %722 
                                       f32_3 %723 = OpLoad %81 
                                       f32_3 %725 = OpFMul %723 %724 
                                                      OpStore %81 %725 
                                       f32_3 %726 = OpLoad %41 
                                       f32_3 %729 = OpFMul %726 %728 
                                       f32_3 %730 = OpLoad %81 
                                       f32_3 %731 = OpFAdd %729 %730 
                                                      OpStore %41 %731 
                                       f32_3 %732 = OpLoad %9 
                                       f32_3 %733 = OpLoad %41 
                                       f32_3 %734 = OpFAdd %732 %733 
                                                      OpStore %9 %734 
                                       f32_3 %735 = OpLoad %9 
                                       f32_3 %736 = OpExtInst %1 40 %735 %549 
                                                      OpStore %117 %736 
                                       f32_3 %737 = OpLoad %117 
                                       f32_3 %738 = OpExtInst %1 30 %737 
                                                      OpStore %117 %738 
                                       f32_3 %739 = OpLoad %117 
                                       f32_3 %742 = OpFMul %739 %741 
                                                      OpStore %117 %742 
                                       f32_3 %743 = OpLoad %117 
                                       f32_3 %744 = OpExtInst %1 29 %743 
                                                      OpStore %117 %744 
                                       f32_3 %747 = OpLoad %117 
                                       f32_3 %748 = OpExtInst %1 31 %747 
                                       f32_4 %749 = OpLoad %746 
                                       f32_4 %750 = OpVectorShuffle %749 %748 4 5 6 3 
                                                      OpStore %746 %750 
                                 Output f32* %752 = OpAccessChain %746 %528 
                                                      OpStore %752 %77 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
vec3 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = max(u_xlat9, 1.17549435e-38);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = max(u_xlat9, 1.17549435e-38);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yzx * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat2.xyz);
    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD4.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD6 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _Expond;
	UNITY_UNIFORM vec4 _MREA_ST;
	UNITY_UNIFORM vec4 _MainTex_ST;
	UNITY_UNIFORM vec4 _Maincolor;
	UNITY_UNIFORM float _Roughness;
	UNITY_UNIFORM vec3 _rimlightdir;
	UNITY_UNIFORM vec4 _rimcolor;
	UNITY_UNIFORM float _rimhardness;
	UNITY_UNIFORM float _rimthreshold;
	UNITY_UNIFORM float _rimintensity;
	UNITY_UNIFORM float _anisotropic;
	UNITY_UNIFORM vec4 _anisocolor;
	UNITY_UNIFORM float _anisooffest;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
UNITY_LOCATION(1) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(2) uniform mediump sampler2D _Normal;
UNITY_LOCATION(3) uniform mediump sampler2D _MREA;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
vec3 u_xlat10;
float u_xlat18;
float u_xlat24;
float u_xlat25;
float u_xlat26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat8.xyz = vs_TEXCOORD2.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat24 = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat25 = (-_anisotropic) * 0.899999976 + 1.0;
    u_xlat25 = sqrt(u_xlat25);
    u_xlat2.xy = vs_TEXCOORD0.xy * _MREA_ST.xy + _MREA_ST.zw;
    u_xlat16_2 = texture(_MREA, u_xlat2.xy).x;
    u_xlat10.x = u_xlat16_2 * u_xlat16_2;
    u_xlat16_3.x = u_xlat16_2 * 2.0 + -1.0;
    u_xlat2.x = u_xlat16_3.x + _anisooffest;
    u_xlat18 = u_xlat10.x / u_xlat25;
    u_xlat25 = u_xlat25 * u_xlat10.x;
    u_xlat10.x = u_xlat18 * u_xlat18;
    u_xlat24 = u_xlat24 / u_xlat10.x;
    u_xlat10.x = u_xlat25 * u_xlat25;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat16_5.xyz = texture(_Normal, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_MainTex, u_xlat4.xy).xyz;
    u_xlat4.xyz = u_xlat16_4.xyz * _Maincolor.xyz;
    u_xlat16_3.xyz = u_xlat4.xyz * vec3(0.959999979, 0.959999979, 0.959999979);
    u_xlat16_6.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat4.xyz = u_xlat16_6.yyy * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = u_xlat16_6.xxx * vs_TEXCOORD3.xyz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat16_6.zzz * vs_TEXCOORD1.xyz + u_xlat4.xyz;
    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat26 = inversesqrt(u_xlat26);
    u_xlat4.xyz = vec3(u_xlat26) * u_xlat4.xyz;
    u_xlat5.xyz = u_xlat4.xyz * u_xlat2.xxx + vs_TEXCOORD4.xyz;
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat2.x = u_xlat2.x / u_xlat10.x;
    u_xlat24 = u_xlat24 + u_xlat2.x;
    u_xlat2.x = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
    u_xlat0.y = u_xlat2.x * u_xlat2.x + u_xlat24;
    u_xlat0.xy = u_xlat0.xy * u_xlat0.xy;
    u_xlat8.x = u_xlat18 * u_xlat0.y;
    u_xlat8.x = u_xlat25 * u_xlat8.x;
    u_xlat8.x = u_xlat8.x * 3.14159274;
    u_xlat8.x = float(1.0) / u_xlat8.x;
    u_xlat8.xyz = u_xlat8.xxx * _anisocolor.xyz;
    u_xlat8.xyz = u_xlat8.xyz * _anisocolor.www;
    u_xlat25 = (-_Roughness) + 1.0;
    u_xlat16_27 = (-u_xlat25) + 1.0;
    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
    u_xlat16_27 = max(u_xlat16_27, 0.00200000009);
    u_xlat25 = u_xlat16_27 + u_xlat16_27;
    u_xlat0.x = u_xlat0.x * u_xlat25 + -0.5;
    u_xlat25 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat25 = max(u_xlat25, 9.99999975e-06);
    u_xlat25 = (-u_xlat25) + 1.0;
    u_xlat25 = max(u_xlat25, 0.0);
    u_xlat2.x = u_xlat25 * u_xlat25;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat25 = u_xlat25 * u_xlat2.x;
    u_xlat25 = u_xlat0.x * u_xlat25 + 1.0;
    u_xlat2.x = dot(u_xlat4.xyz, _MainLightPosition.xyz);
    u_xlat2.x = max(u_xlat2.x, 9.99999975e-06);
    u_xlat10.x = (-u_xlat2.x) + 1.0;
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlat18 = u_xlat10.x * u_xlat10.x;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat10.x = u_xlat10.x * u_xlat18;
    u_xlat0.x = u_xlat0.x * u_xlat10.x + 1.0;
    u_xlat0.x = u_xlat25 * u_xlat0.x;
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat10.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
    u_xlat0.xyz = u_xlat10.xyz * _MainLightColor.xyz + u_xlat8.xyz;
    u_xlat16_6.x = u_xlat4.y * u_xlat4.y;
    u_xlat16_6.x = u_xlat4.x * u_xlat4.x + (-u_xlat16_6.x);
    u_xlat16_5 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_6.xyz = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;
    u_xlat4.w = 1.0;
    u_xlat16_7.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_7.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_7.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat10.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
    u_xlat24 = dot((-u_xlat1.xyz), u_xlat4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat1.xyz = u_xlat4.xyz * (-vec3(u_xlat24)) + (-u_xlat1.xyz);
    u_xlat16_6.x = (-u_xlat16_27) * 0.699999988 + 1.70000005;
    u_xlat16_27 = u_xlat16_27 * u_xlat16_6.x;
    u_xlat16_27 = u_xlat16_27 * 6.0;
    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat1.xyz, u_xlat16_27);
    u_xlat16_27 = u_xlat16_1.w + -1.0;
    u_xlat16_27 = unity_SpecCube0_HDR.w * u_xlat16_27 + 1.0;
    u_xlat16_27 = max(u_xlat16_27, 0.0);
    u_xlat16_27 = log2(u_xlat16_27);
    u_xlat16_27 = u_xlat16_27 * unity_SpecCube0_HDR.y;
    u_xlat16_27 = exp2(u_xlat16_27);
    u_xlat16_27 = u_xlat16_27 * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat16_1.xyz * vec3(u_xlat16_27);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
    u_xlat16_3.xyz = u_xlat10.xyz * vec3(_Expond) + u_xlat16_3.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixInvV[1].xyz * _rimlightdir.xxyz.zzz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixInvV[0].xyz * _rimlightdir.xxyz.yyy + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixInvV[2].xyz * vec3(_rimlightdir.z, _rimlightdir.z, _rimlightdir.z) + u_xlat1.xyz;
    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat24 = u_xlat24 * 0.5 + 0.5;
    u_xlat24 = u_xlat24 + (-_rimthreshold);
    u_xlat24 = u_xlat24 * _rimhardness;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = vec3(u_xlat24) * _rimcolor.xyz;
    u_xlat1.xyz = u_xlat16_3.xyz * vec3(vec3(_rimintensity, _rimintensity, _rimintensity));
    u_xlat2.xyz = u_xlat2.xxx * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat16_3.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(2.20000005, 2.20000005, 2.20000005);
    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);
    SV_Target0.xyz = sqrt(u_xlat16_3.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
""
}
SubProgram "vulkan " {
Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
""
}
SubProgram "vulkan " {
Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
""
}
SubProgram "gles3 " {
Keywords { "_MAIN_LIGHT_SHADOWS" }
""
}
SubProgram "vulkan " {
Keywords { "_ADDITIONAL_LIGHTS" }
""
}
SubProgram "gles3 " {
Keywords { "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
""
}
SubProgram "vulkan " {
Keywords { "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
""
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS_VERTEX" }
""
}
SubProgram "vulkan " {
Keywords { "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" }
""
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" }
""
}
SubProgram "vulkan " {
Keywords { "_ADDITIONAL_LIGHTS_VERTEX" }
""
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
""
}
SubProgram "vulkan " {
Keywords { "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
""
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
""
}
SubProgram "vulkan " {
Keywords { "_MAIN_LIGHT_SHADOWS" }
""
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS" }
""
}
SubProgram "vulkan " {
""
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
""
}
}
}
 Pass {
  LOD 100
  Tags { "LIGHTMODE" = "SHADOWCASTER" "QUEUE" = "AlphaTest" "RenderType" = "Opaque" }
  GpuProgramID 67551
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ShadowBias;
uniform 	mediump vec3 _LightDirection;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _Expond;
	UNITY_UNIFORM vec4 _MREA_ST;
	UNITY_UNIFORM vec4 _MainTex_ST;
	UNITY_UNIFORM vec4 _Maincolor;
	UNITY_UNIFORM float _Roughness;
	UNITY_UNIFORM vec3 _rimlightdir;
	UNITY_UNIFORM vec4 _rimcolor;
	UNITY_UNIFORM float _rimhardness;
	UNITY_UNIFORM float _rimthreshold;
	UNITY_UNIFORM float _rimintensity;
	UNITY_UNIFORM float _anisotropic;
	UNITY_UNIFORM vec4 _anisocolor;
	UNITY_UNIFORM float _anisooffest;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.xyz = _LightDirection.xyz * _ShadowBias.xxx + u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat6 = dot(_LightDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat6 = (-u_xlat6) + 1.0;
    u_xlat6 = u_xlat6 * _ShadowBias.y;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _Cutoff;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_TARGET0;
float u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat0 = u_xlat16_0 + (-_Cutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0<0.0);
#else
    u_xlatb0 = u_xlat0<0.0;
#endif
    if(u_xlatb0){discard;}
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 203
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %84 %173 %182 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 RelaxedPrecision 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 RelaxedPrecision 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 RelaxedPrecision 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 RelaxedPrecision 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 RelaxedPrecision 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 RelaxedPrecision 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpMemberDecorate %21 16 RelaxedPrecision 
                                                      OpMemberDecorate %21 16 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpDecorate %66 ArrayStride 66 
                                                      OpMemberDecorate %67 0 Offset 67 
                                                      OpMemberDecorate %67 1 Offset 67 
                                                      OpMemberDecorate %67 2 RelaxedPrecision 
                                                      OpMemberDecorate %67 2 Offset 67 
                                                      OpDecorate %67 Block 
                                                      OpDecorate %69 DescriptorSet 69 
                                                      OpDecorate %69 Binding 69 
                                                      OpDecorate %72 RelaxedPrecision 
                                                      OpDecorate %84 Location 84 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpMemberDecorate %171 0 BuiltIn 171 
                                                      OpMemberDecorate %171 1 BuiltIn 171 
                                                      OpMemberDecorate %171 2 BuiltIn 171 
                                                      OpDecorate %171 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 182 
                                                      OpDecorate %184 Location 184 
                                                      OpMemberDecorate %186 0 Offset 186 
                                                      OpMemberDecorate %186 1 Offset 186 
                                                      OpMemberDecorate %186 2 Offset 186 
                                                      OpMemberDecorate %186 3 Offset 186 
                                                      OpMemberDecorate %186 4 Offset 186 
                                                      OpMemberDecorate %186 5 Offset 186 
                                                      OpMemberDecorate %186 6 Offset 186 
                                                      OpMemberDecorate %186 7 Offset 186 
                                                      OpMemberDecorate %186 8 Offset 186 
                                                      OpMemberDecorate %186 9 Offset 186 
                                                      OpMemberDecorate %186 10 Offset 186 
                                                      OpMemberDecorate %186 11 Offset 186 
                                                      OpMemberDecorate %186 12 Offset 186 
                                                      OpDecorate %186 Block 
                                                      OpDecorate %188 DescriptorSet 188 
                                                      OpDecorate %188 Binding 188 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 3 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeArray %7 %16 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypeArray %7 %19 
                                              %21 = OpTypeStruct %17 %18 %7 %7 %7 %20 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4; f32_4[2]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 0 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %45 = OpConstant 2 
                                          i32 %59 = OpConstant 3 
                                              %66 = OpTypeArray %7 %16 
                                              %67 = OpTypeStruct %66 %7 %12 
                                              %68 = OpTypePointer Uniform %67 
    Uniform struct {f32_4[4]; f32_4; f32_3;}* %69 = OpVariable Uniform 
                                              %70 = OpTypePointer Uniform %12 
                               Private f32_4* %82 = OpVariable Private 
                                              %83 = OpTypePointer Input %12 
                                 Input f32_3* %84 = OpVariable Input 
                                          u32 %90 = OpConstant 0 
                                              %91 = OpTypePointer Private %6 
                                          u32 %98 = OpConstant 1 
                                Private f32* %106 = OpVariable Private 
                                         f32 %113 = OpConstant 3.674022E-40 
                                         f32 %130 = OpConstant 3.674022E-40 
                                         f32 %131 = OpConstant 3.674022E-40 
                                             %137 = OpTypePointer Uniform %6 
                                             %170 = OpTypeArray %6 %98 
                                             %171 = OpTypeStruct %7 %6 %170 
                                             %172 = OpTypePointer Output %171 
        Output struct {f32_4; f32; f32[1];}* %173 = OpVariable Output 
                                             %178 = OpTypePointer Output %7 
                                             %180 = OpTypeVector %6 2 
                                             %181 = OpTypePointer Output %180 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %183 = OpTypePointer Input %180 
                                Input f32_2* %184 = OpVariable Input 
                                             %186 = OpTypeStruct %6 %7 %7 %7 %6 %12 %7 %6 %6 %6 %6 %7 %6 
                                             %187 = OpTypePointer Uniform %186 
Uniform struct {f32; f32_4; f32_4; f32_4; f32; f32_3; f32_4; f32; f32; f32; f32; f32_4; f32;}* %188 = OpVariable Uniform 
                                             %197 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %11 
                                        f32_3 %14 = OpVectorShuffle %13 %13 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_3 %30 = OpVectorShuffle %29 %29 0 1 2 
                                        f32_3 %31 = OpFMul %14 %30 
                                        f32_4 %32 = OpLoad %9 
                                        f32_4 %33 = OpVectorShuffle %32 %31 4 5 6 3 
                                                      OpStore %9 %33 
                               Uniform f32_4* %34 = OpAccessChain %23 %25 %25 
                                        f32_4 %35 = OpLoad %34 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 1 2 
                                        f32_4 %37 = OpLoad %11 
                                        f32_3 %38 = OpVectorShuffle %37 %37 0 0 0 
                                        f32_3 %39 = OpFMul %36 %38 
                                        f32_4 %40 = OpLoad %9 
                                        f32_3 %41 = OpVectorShuffle %40 %40 0 1 2 
                                        f32_3 %42 = OpFAdd %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpVectorShuffle %43 %42 4 5 6 3 
                                                      OpStore %9 %44 
                               Uniform f32_4* %46 = OpAccessChain %23 %25 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_3 %48 = OpVectorShuffle %47 %47 0 1 2 
                                        f32_4 %49 = OpLoad %11 
                                        f32_3 %50 = OpVectorShuffle %49 %49 2 2 2 
                                        f32_3 %51 = OpFMul %48 %50 
                                        f32_4 %52 = OpLoad %9 
                                        f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                        f32_3 %54 = OpFAdd %51 %53 
                                        f32_4 %55 = OpLoad %9 
                                        f32_4 %56 = OpVectorShuffle %55 %54 4 5 6 3 
                                                      OpStore %9 %56 
                                        f32_4 %57 = OpLoad %9 
                                        f32_3 %58 = OpVectorShuffle %57 %57 0 1 2 
                               Uniform f32_4* %60 = OpAccessChain %23 %25 %59 
                                        f32_4 %61 = OpLoad %60 
                                        f32_3 %62 = OpVectorShuffle %61 %61 0 1 2 
                                        f32_3 %63 = OpFAdd %58 %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %63 4 5 6 3 
                                                      OpStore %9 %65 
                               Uniform f32_3* %71 = OpAccessChain %69 %45 
                                        f32_3 %72 = OpLoad %71 
                               Uniform f32_4* %73 = OpAccessChain %69 %26 
                                        f32_4 %74 = OpLoad %73 
                                        f32_3 %75 = OpVectorShuffle %74 %74 0 0 0 
                                        f32_3 %76 = OpFMul %72 %75 
                                        f32_4 %77 = OpLoad %9 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFAdd %76 %78 
                                        f32_4 %80 = OpLoad %9 
                                        f32_4 %81 = OpVectorShuffle %80 %79 4 5 6 3 
                                                      OpStore %9 %81 
                                        f32_3 %85 = OpLoad %84 
                               Uniform f32_4* %86 = OpAccessChain %23 %26 %25 
                                        f32_4 %87 = OpLoad %86 
                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
                                          f32 %89 = OpDot %85 %88 
                                 Private f32* %92 = OpAccessChain %82 %90 
                                                      OpStore %92 %89 
                                        f32_3 %93 = OpLoad %84 
                               Uniform f32_4* %94 = OpAccessChain %23 %26 %26 
                                        f32_4 %95 = OpLoad %94 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 1 2 
                                          f32 %97 = OpDot %93 %96 
                                 Private f32* %99 = OpAccessChain %82 %98 
                                                      OpStore %99 %97 
                                       f32_3 %100 = OpLoad %84 
                              Uniform f32_4* %101 = OpAccessChain %23 %26 %45 
                                       f32_4 %102 = OpLoad %101 
                                       f32_3 %103 = OpVectorShuffle %102 %102 0 1 2 
                                         f32 %104 = OpDot %100 %103 
                                Private f32* %105 = OpAccessChain %82 %19 
                                                      OpStore %105 %104 
                                       f32_4 %107 = OpLoad %82 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                       f32_4 %109 = OpLoad %82 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                         f32 %111 = OpDot %108 %110 
                                                      OpStore %106 %111 
                                         f32 %112 = OpLoad %106 
                                         f32 %114 = OpExtInst %1 40 %112 %113 
                                                      OpStore %106 %114 
                                         f32 %115 = OpLoad %106 
                                         f32 %116 = OpExtInst %1 32 %115 
                                                      OpStore %106 %116 
                                         f32 %117 = OpLoad %106 
                                       f32_3 %118 = OpCompositeConstruct %117 %117 %117 
                                       f32_4 %119 = OpLoad %82 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_3 %121 = OpFMul %118 %120 
                                       f32_4 %122 = OpLoad %82 
                                       f32_4 %123 = OpVectorShuffle %122 %121 4 5 6 3 
                                                      OpStore %82 %123 
                              Uniform f32_3* %124 = OpAccessChain %69 %45 
                                       f32_3 %125 = OpLoad %124 
                                       f32_4 %126 = OpLoad %82 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 2 
                                         f32 %128 = OpDot %125 %127 
                                                      OpStore %106 %128 
                                         f32 %129 = OpLoad %106 
                                         f32 %132 = OpExtInst %1 43 %129 %130 %131 
                                                      OpStore %106 %132 
                                         f32 %133 = OpLoad %106 
                                         f32 %134 = OpFNegate %133 
                                         f32 %135 = OpFAdd %134 %131 
                                                      OpStore %106 %135 
                                         f32 %136 = OpLoad %106 
                                Uniform f32* %138 = OpAccessChain %69 %26 %98 
                                         f32 %139 = OpLoad %138 
                                         f32 %140 = OpFMul %136 %139 
                                                      OpStore %106 %140 
                                       f32_4 %141 = OpLoad %82 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                         f32 %143 = OpLoad %106 
                                       f32_3 %144 = OpCompositeConstruct %143 %143 %143 
                                       f32_3 %145 = OpFMul %142 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFAdd %145 %147 
                                       f32_4 %149 = OpLoad %9 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %9 %150 
                                       f32_4 %151 = OpLoad %9 
                                       f32_4 %152 = OpVectorShuffle %151 %151 1 1 1 1 
                              Uniform f32_4* %153 = OpAccessChain %69 %25 %26 
                                       f32_4 %154 = OpLoad %153 
                                       f32_4 %155 = OpFMul %152 %154 
                                                      OpStore %82 %155 
                              Uniform f32_4* %156 = OpAccessChain %69 %25 %25 
                                       f32_4 %157 = OpLoad %156 
                                       f32_4 %158 = OpLoad %9 
                                       f32_4 %159 = OpVectorShuffle %158 %158 0 0 0 0 
                                       f32_4 %160 = OpFMul %157 %159 
                                       f32_4 %161 = OpLoad %82 
                                       f32_4 %162 = OpFAdd %160 %161 
                                                      OpStore %82 %162 
                              Uniform f32_4* %163 = OpAccessChain %69 %25 %45 
                                       f32_4 %164 = OpLoad %163 
                                       f32_4 %165 = OpLoad %9 
                                       f32_4 %166 = OpVectorShuffle %165 %165 2 2 2 2 
                                       f32_4 %167 = OpFMul %164 %166 
                                       f32_4 %168 = OpLoad %82 
                                       f32_4 %169 = OpFAdd %167 %168 
                                                      OpStore %9 %169 
                                       f32_4 %174 = OpLoad %9 
                              Uniform f32_4* %175 = OpAccessChain %69 %25 %59 
                                       f32_4 %176 = OpLoad %175 
                                       f32_4 %177 = OpFAdd %174 %176 
                               Output f32_4* %179 = OpAccessChain %173 %25 
                                                      OpStore %179 %177 
                                       f32_2 %185 = OpLoad %184 
                              Uniform f32_4* %189 = OpAccessChain %188 %45 
                                       f32_4 %190 = OpLoad %189 
                                       f32_2 %191 = OpVectorShuffle %190 %190 0 1 
                                       f32_2 %192 = OpFMul %185 %191 
                              Uniform f32_4* %193 = OpAccessChain %188 %45 
                                       f32_4 %194 = OpLoad %193 
                                       f32_2 %195 = OpVectorShuffle %194 %194 2 3 
                                       f32_2 %196 = OpFAdd %192 %195 
                                                      OpStore vs_TEXCOORD0 %196 
                                 Output f32* %198 = OpAccessChain %173 %25 %98 
                                         f32 %199 = OpLoad %198 
                                         f32 %200 = OpFNegate %199 
                                 Output f32* %201 = OpAccessChain %173 %25 %98 
                                                      OpStore %201 %200 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 59
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %21 %56 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate %8 RelaxedPrecision 
                                             OpDecorate %11 RelaxedPrecision 
                                             OpDecorate %11 DescriptorSet 11 
                                             OpDecorate %11 Binding 11 
                                             OpDecorate %12 RelaxedPrecision 
                                             OpDecorate %15 RelaxedPrecision 
                                             OpDecorate %15 DescriptorSet 15 
                                             OpDecorate %15 Binding 15 
                                             OpDecorate %16 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 21 
                                             OpDecorate %27 RelaxedPrecision 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpMemberDecorate %30 0 Offset 30 
                                             OpDecorate %30 Block 
                                             OpDecorate %32 DescriptorSet 32 
                                             OpDecorate %32 Binding 32 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %56 Location 56 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypePointer Private %6 
                         Private f32* %8 = OpVariable Private 
                                      %9 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %10 = OpTypePointer UniformConstant %9 
UniformConstant read_only Texture2D* %11 = OpVariable UniformConstant 
                                     %13 = OpTypeSampler 
                                     %14 = OpTypePointer UniformConstant %13 
            UniformConstant sampler* %15 = OpVariable UniformConstant 
                                     %17 = OpTypeSampledImage %9 
                                     %19 = OpTypeVector %6 2 
                                     %20 = OpTypePointer Input %19 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %23 = OpTypeVector %6 4 
                                     %25 = OpTypeInt 32 0 
                                 u32 %26 = OpConstant 3 
                        Private f32* %28 = OpVariable Private 
                                     %30 = OpTypeStruct %6 
                                     %31 = OpTypePointer Uniform %30 
              Uniform struct {f32;}* %32 = OpVariable Uniform 
                                     %33 = OpTypeInt 32 1 
                                 i32 %34 = OpConstant 0 
                                     %35 = OpTypePointer Uniform %6 
                                     %40 = OpTypeBool 
                                     %41 = OpTypePointer Private %40 
                       Private bool* %42 = OpVariable Private 
                                 f32 %44 = OpConstant 3.674022E-40 
                                 i32 %47 = OpConstant 1 
                                 i32 %49 = OpConstant -1 
                                     %55 = OpTypePointer Output %23 
                       Output f32_4* %56 = OpVariable Output 
                               f32_4 %57 = OpConstantComposite %44 %44 %44 %44 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %12 = OpLoad %11 
                             sampler %16 = OpLoad %15 
          read_only Texture2DSampled %18 = OpSampledImage %12 %16 
                               f32_2 %22 = OpLoad vs_TEXCOORD0 
                               f32_4 %24 = OpImageSampleImplicitLod %18 %22 
                                 f32 %27 = OpCompositeExtract %24 3 
                                             OpStore %8 %27 
                                 f32 %29 = OpLoad %8 
                        Uniform f32* %36 = OpAccessChain %32 %34 
                                 f32 %37 = OpLoad %36 
                                 f32 %38 = OpFNegate %37 
                                 f32 %39 = OpFAdd %29 %38 
                                             OpStore %28 %39 
                                 f32 %43 = OpLoad %28 
                                bool %45 = OpFOrdLessThan %43 %44 
                                             OpStore %42 %45 
                                bool %46 = OpLoad %42 
                                 i32 %48 = OpSelect %46 %47 %34 
                                 i32 %50 = OpIMul %48 %49 
                                bool %51 = OpINotEqual %50 %34 
                                             OpSelectionMerge %53 None 
                                             OpBranchConditional %51 %52 %53 
                                     %52 = OpLabel 
                                             OpKill
                                     %53 = OpLabel 
                                             OpStore %56 %57 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS_VERTEX" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ShadowBias;
uniform 	mediump vec3 _LightDirection;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _Expond;
	UNITY_UNIFORM vec4 _MREA_ST;
	UNITY_UNIFORM vec4 _MainTex_ST;
	UNITY_UNIFORM vec4 _Maincolor;
	UNITY_UNIFORM float _Roughness;
	UNITY_UNIFORM vec3 _rimlightdir;
	UNITY_UNIFORM vec4 _rimcolor;
	UNITY_UNIFORM float _rimhardness;
	UNITY_UNIFORM float _rimthreshold;
	UNITY_UNIFORM float _rimintensity;
	UNITY_UNIFORM float _anisotropic;
	UNITY_UNIFORM vec4 _anisocolor;
	UNITY_UNIFORM float _anisooffest;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.xyz = _LightDirection.xyz * _ShadowBias.xxx + u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat6 = dot(_LightDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat6 = (-u_xlat6) + 1.0;
    u_xlat6 = u_xlat6 * _ShadowBias.y;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _Cutoff;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_TARGET0;
float u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat0 = u_xlat16_0 + (-_Cutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0<0.0);
#else
    u_xlatb0 = u_xlat0<0.0;
#endif
    if(u_xlatb0){discard;}
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "_ADDITIONAL_LIGHTS_VERTEX" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 203
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %84 %173 %182 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 RelaxedPrecision 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 RelaxedPrecision 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 RelaxedPrecision 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 RelaxedPrecision 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 RelaxedPrecision 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 RelaxedPrecision 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpMemberDecorate %21 16 RelaxedPrecision 
                                                      OpMemberDecorate %21 16 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpDecorate %66 ArrayStride 66 
                                                      OpMemberDecorate %67 0 Offset 67 
                                                      OpMemberDecorate %67 1 Offset 67 
                                                      OpMemberDecorate %67 2 RelaxedPrecision 
                                                      OpMemberDecorate %67 2 Offset 67 
                                                      OpDecorate %67 Block 
                                                      OpDecorate %69 DescriptorSet 69 
                                                      OpDecorate %69 Binding 69 
                                                      OpDecorate %72 RelaxedPrecision 
                                                      OpDecorate %84 Location 84 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpMemberDecorate %171 0 BuiltIn 171 
                                                      OpMemberDecorate %171 1 BuiltIn 171 
                                                      OpMemberDecorate %171 2 BuiltIn 171 
                                                      OpDecorate %171 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 182 
                                                      OpDecorate %184 Location 184 
                                                      OpMemberDecorate %186 0 Offset 186 
                                                      OpMemberDecorate %186 1 Offset 186 
                                                      OpMemberDecorate %186 2 Offset 186 
                                                      OpMemberDecorate %186 3 Offset 186 
                                                      OpMemberDecorate %186 4 Offset 186 
                                                      OpMemberDecorate %186 5 Offset 186 
                                                      OpMemberDecorate %186 6 Offset 186 
                                                      OpMemberDecorate %186 7 Offset 186 
                                                      OpMemberDecorate %186 8 Offset 186 
                                                      OpMemberDecorate %186 9 Offset 186 
                                                      OpMemberDecorate %186 10 Offset 186 
                                                      OpMemberDecorate %186 11 Offset 186 
                                                      OpMemberDecorate %186 12 Offset 186 
                                                      OpDecorate %186 Block 
                                                      OpDecorate %188 DescriptorSet 188 
                                                      OpDecorate %188 Binding 188 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 3 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeArray %7 %16 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypeArray %7 %19 
                                              %21 = OpTypeStruct %17 %18 %7 %7 %7 %20 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4; f32_4[2]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 0 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %45 = OpConstant 2 
                                          i32 %59 = OpConstant 3 
                                              %66 = OpTypeArray %7 %16 
                                              %67 = OpTypeStruct %66 %7 %12 
                                              %68 = OpTypePointer Uniform %67 
    Uniform struct {f32_4[4]; f32_4; f32_3;}* %69 = OpVariable Uniform 
                                              %70 = OpTypePointer Uniform %12 
                               Private f32_4* %82 = OpVariable Private 
                                              %83 = OpTypePointer Input %12 
                                 Input f32_3* %84 = OpVariable Input 
                                          u32 %90 = OpConstant 0 
                                              %91 = OpTypePointer Private %6 
                                          u32 %98 = OpConstant 1 
                                Private f32* %106 = OpVariable Private 
                                         f32 %113 = OpConstant 3.674022E-40 
                                         f32 %130 = OpConstant 3.674022E-40 
                                         f32 %131 = OpConstant 3.674022E-40 
                                             %137 = OpTypePointer Uniform %6 
                                             %170 = OpTypeArray %6 %98 
                                             %171 = OpTypeStruct %7 %6 %170 
                                             %172 = OpTypePointer Output %171 
        Output struct {f32_4; f32; f32[1];}* %173 = OpVariable Output 
                                             %178 = OpTypePointer Output %7 
                                             %180 = OpTypeVector %6 2 
                                             %181 = OpTypePointer Output %180 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %183 = OpTypePointer Input %180 
                                Input f32_2* %184 = OpVariable Input 
                                             %186 = OpTypeStruct %6 %7 %7 %7 %6 %12 %7 %6 %6 %6 %6 %7 %6 
                                             %187 = OpTypePointer Uniform %186 
Uniform struct {f32; f32_4; f32_4; f32_4; f32; f32_3; f32_4; f32; f32; f32; f32; f32_4; f32;}* %188 = OpVariable Uniform 
                                             %197 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %11 
                                        f32_3 %14 = OpVectorShuffle %13 %13 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_3 %30 = OpVectorShuffle %29 %29 0 1 2 
                                        f32_3 %31 = OpFMul %14 %30 
                                        f32_4 %32 = OpLoad %9 
                                        f32_4 %33 = OpVectorShuffle %32 %31 4 5 6 3 
                                                      OpStore %9 %33 
                               Uniform f32_4* %34 = OpAccessChain %23 %25 %25 
                                        f32_4 %35 = OpLoad %34 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 1 2 
                                        f32_4 %37 = OpLoad %11 
                                        f32_3 %38 = OpVectorShuffle %37 %37 0 0 0 
                                        f32_3 %39 = OpFMul %36 %38 
                                        f32_4 %40 = OpLoad %9 
                                        f32_3 %41 = OpVectorShuffle %40 %40 0 1 2 
                                        f32_3 %42 = OpFAdd %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpVectorShuffle %43 %42 4 5 6 3 
                                                      OpStore %9 %44 
                               Uniform f32_4* %46 = OpAccessChain %23 %25 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_3 %48 = OpVectorShuffle %47 %47 0 1 2 
                                        f32_4 %49 = OpLoad %11 
                                        f32_3 %50 = OpVectorShuffle %49 %49 2 2 2 
                                        f32_3 %51 = OpFMul %48 %50 
                                        f32_4 %52 = OpLoad %9 
                                        f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                        f32_3 %54 = OpFAdd %51 %53 
                                        f32_4 %55 = OpLoad %9 
                                        f32_4 %56 = OpVectorShuffle %55 %54 4 5 6 3 
                                                      OpStore %9 %56 
                                        f32_4 %57 = OpLoad %9 
                                        f32_3 %58 = OpVectorShuffle %57 %57 0 1 2 
                               Uniform f32_4* %60 = OpAccessChain %23 %25 %59 
                                        f32_4 %61 = OpLoad %60 
                                        f32_3 %62 = OpVectorShuffle %61 %61 0 1 2 
                                        f32_3 %63 = OpFAdd %58 %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %63 4 5 6 3 
                                                      OpStore %9 %65 
                               Uniform f32_3* %71 = OpAccessChain %69 %45 
                                        f32_3 %72 = OpLoad %71 
                               Uniform f32_4* %73 = OpAccessChain %69 %26 
                                        f32_4 %74 = OpLoad %73 
                                        f32_3 %75 = OpVectorShuffle %74 %74 0 0 0 
                                        f32_3 %76 = OpFMul %72 %75 
                                        f32_4 %77 = OpLoad %9 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFAdd %76 %78 
                                        f32_4 %80 = OpLoad %9 
                                        f32_4 %81 = OpVectorShuffle %80 %79 4 5 6 3 
                                                      OpStore %9 %81 
                                        f32_3 %85 = OpLoad %84 
                               Uniform f32_4* %86 = OpAccessChain %23 %26 %25 
                                        f32_4 %87 = OpLoad %86 
                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
                                          f32 %89 = OpDot %85 %88 
                                 Private f32* %92 = OpAccessChain %82 %90 
                                                      OpStore %92 %89 
                                        f32_3 %93 = OpLoad %84 
                               Uniform f32_4* %94 = OpAccessChain %23 %26 %26 
                                        f32_4 %95 = OpLoad %94 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 1 2 
                                          f32 %97 = OpDot %93 %96 
                                 Private f32* %99 = OpAccessChain %82 %98 
                                                      OpStore %99 %97 
                                       f32_3 %100 = OpLoad %84 
                              Uniform f32_4* %101 = OpAccessChain %23 %26 %45 
                                       f32_4 %102 = OpLoad %101 
                                       f32_3 %103 = OpVectorShuffle %102 %102 0 1 2 
                                         f32 %104 = OpDot %100 %103 
                                Private f32* %105 = OpAccessChain %82 %19 
                                                      OpStore %105 %104 
                                       f32_4 %107 = OpLoad %82 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                       f32_4 %109 = OpLoad %82 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                         f32 %111 = OpDot %108 %110 
                                                      OpStore %106 %111 
                                         f32 %112 = OpLoad %106 
                                         f32 %114 = OpExtInst %1 40 %112 %113 
                                                      OpStore %106 %114 
                                         f32 %115 = OpLoad %106 
                                         f32 %116 = OpExtInst %1 32 %115 
                                                      OpStore %106 %116 
                                         f32 %117 = OpLoad %106 
                                       f32_3 %118 = OpCompositeConstruct %117 %117 %117 
                                       f32_4 %119 = OpLoad %82 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_3 %121 = OpFMul %118 %120 
                                       f32_4 %122 = OpLoad %82 
                                       f32_4 %123 = OpVectorShuffle %122 %121 4 5 6 3 
                                                      OpStore %82 %123 
                              Uniform f32_3* %124 = OpAccessChain %69 %45 
                                       f32_3 %125 = OpLoad %124 
                                       f32_4 %126 = OpLoad %82 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 2 
                                         f32 %128 = OpDot %125 %127 
                                                      OpStore %106 %128 
                                         f32 %129 = OpLoad %106 
                                         f32 %132 = OpExtInst %1 43 %129 %130 %131 
                                                      OpStore %106 %132 
                                         f32 %133 = OpLoad %106 
                                         f32 %134 = OpFNegate %133 
                                         f32 %135 = OpFAdd %134 %131 
                                                      OpStore %106 %135 
                                         f32 %136 = OpLoad %106 
                                Uniform f32* %138 = OpAccessChain %69 %26 %98 
                                         f32 %139 = OpLoad %138 
                                         f32 %140 = OpFMul %136 %139 
                                                      OpStore %106 %140 
                                       f32_4 %141 = OpLoad %82 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                         f32 %143 = OpLoad %106 
                                       f32_3 %144 = OpCompositeConstruct %143 %143 %143 
                                       f32_3 %145 = OpFMul %142 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFAdd %145 %147 
                                       f32_4 %149 = OpLoad %9 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %9 %150 
                                       f32_4 %151 = OpLoad %9 
                                       f32_4 %152 = OpVectorShuffle %151 %151 1 1 1 1 
                              Uniform f32_4* %153 = OpAccessChain %69 %25 %26 
                                       f32_4 %154 = OpLoad %153 
                                       f32_4 %155 = OpFMul %152 %154 
                                                      OpStore %82 %155 
                              Uniform f32_4* %156 = OpAccessChain %69 %25 %25 
                                       f32_4 %157 = OpLoad %156 
                                       f32_4 %158 = OpLoad %9 
                                       f32_4 %159 = OpVectorShuffle %158 %158 0 0 0 0 
                                       f32_4 %160 = OpFMul %157 %159 
                                       f32_4 %161 = OpLoad %82 
                                       f32_4 %162 = OpFAdd %160 %161 
                                                      OpStore %82 %162 
                              Uniform f32_4* %163 = OpAccessChain %69 %25 %45 
                                       f32_4 %164 = OpLoad %163 
                                       f32_4 %165 = OpLoad %9 
                                       f32_4 %166 = OpVectorShuffle %165 %165 2 2 2 2 
                                       f32_4 %167 = OpFMul %164 %166 
                                       f32_4 %168 = OpLoad %82 
                                       f32_4 %169 = OpFAdd %167 %168 
                                                      OpStore %9 %169 
                                       f32_4 %174 = OpLoad %9 
                              Uniform f32_4* %175 = OpAccessChain %69 %25 %59 
                                       f32_4 %176 = OpLoad %175 
                                       f32_4 %177 = OpFAdd %174 %176 
                               Output f32_4* %179 = OpAccessChain %173 %25 
                                                      OpStore %179 %177 
                                       f32_2 %185 = OpLoad %184 
                              Uniform f32_4* %189 = OpAccessChain %188 %45 
                                       f32_4 %190 = OpLoad %189 
                                       f32_2 %191 = OpVectorShuffle %190 %190 0 1 
                                       f32_2 %192 = OpFMul %185 %191 
                              Uniform f32_4* %193 = OpAccessChain %188 %45 
                                       f32_4 %194 = OpLoad %193 
                                       f32_2 %195 = OpVectorShuffle %194 %194 2 3 
                                       f32_2 %196 = OpFAdd %192 %195 
                                                      OpStore vs_TEXCOORD0 %196 
                                 Output f32* %198 = OpAccessChain %173 %25 %98 
                                         f32 %199 = OpLoad %198 
                                         f32 %200 = OpFNegate %199 
                                 Output f32* %201 = OpAccessChain %173 %25 %98 
                                                      OpStore %201 %200 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 59
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %21 %56 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate %8 RelaxedPrecision 
                                             OpDecorate %11 RelaxedPrecision 
                                             OpDecorate %11 DescriptorSet 11 
                                             OpDecorate %11 Binding 11 
                                             OpDecorate %12 RelaxedPrecision 
                                             OpDecorate %15 RelaxedPrecision 
                                             OpDecorate %15 DescriptorSet 15 
                                             OpDecorate %15 Binding 15 
                                             OpDecorate %16 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 21 
                                             OpDecorate %27 RelaxedPrecision 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpMemberDecorate %30 0 Offset 30 
                                             OpDecorate %30 Block 
                                             OpDecorate %32 DescriptorSet 32 
                                             OpDecorate %32 Binding 32 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %56 Location 56 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypePointer Private %6 
                         Private f32* %8 = OpVariable Private 
                                      %9 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %10 = OpTypePointer UniformConstant %9 
UniformConstant read_only Texture2D* %11 = OpVariable UniformConstant 
                                     %13 = OpTypeSampler 
                                     %14 = OpTypePointer UniformConstant %13 
            UniformConstant sampler* %15 = OpVariable UniformConstant 
                                     %17 = OpTypeSampledImage %9 
                                     %19 = OpTypeVector %6 2 
                                     %20 = OpTypePointer Input %19 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %23 = OpTypeVector %6 4 
                                     %25 = OpTypeInt 32 0 
                                 u32 %26 = OpConstant 3 
                        Private f32* %28 = OpVariable Private 
                                     %30 = OpTypeStruct %6 
                                     %31 = OpTypePointer Uniform %30 
              Uniform struct {f32;}* %32 = OpVariable Uniform 
                                     %33 = OpTypeInt 32 1 
                                 i32 %34 = OpConstant 0 
                                     %35 = OpTypePointer Uniform %6 
                                     %40 = OpTypeBool 
                                     %41 = OpTypePointer Private %40 
                       Private bool* %42 = OpVariable Private 
                                 f32 %44 = OpConstant 3.674022E-40 
                                 i32 %47 = OpConstant 1 
                                 i32 %49 = OpConstant -1 
                                     %55 = OpTypePointer Output %23 
                       Output f32_4* %56 = OpVariable Output 
                               f32_4 %57 = OpConstantComposite %44 %44 %44 %44 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %12 = OpLoad %11 
                             sampler %16 = OpLoad %15 
          read_only Texture2DSampled %18 = OpSampledImage %12 %16 
                               f32_2 %22 = OpLoad vs_TEXCOORD0 
                               f32_4 %24 = OpImageSampleImplicitLod %18 %22 
                                 f32 %27 = OpCompositeExtract %24 3 
                                             OpStore %8 %27 
                                 f32 %29 = OpLoad %8 
                        Uniform f32* %36 = OpAccessChain %32 %34 
                                 f32 %37 = OpLoad %36 
                                 f32 %38 = OpFNegate %37 
                                 f32 %39 = OpFAdd %29 %38 
                                             OpStore %28 %39 
                                 f32 %43 = OpLoad %28 
                                bool %45 = OpFOrdLessThan %43 %44 
                                             OpStore %42 %45 
                                bool %46 = OpLoad %42 
                                 i32 %48 = OpSelect %46 %47 %34 
                                 i32 %50 = OpIMul %48 %49 
                                bool %51 = OpINotEqual %50 %34 
                                             OpSelectionMerge %53 None 
                                             OpBranchConditional %51 %52 %53 
                                     %52 = OpLabel 
                                             OpKill
                                     %53 = OpLabel 
                                             OpStore %56 %57 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ShadowBias;
uniform 	mediump vec3 _LightDirection;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _Expond;
	UNITY_UNIFORM vec4 _MREA_ST;
	UNITY_UNIFORM vec4 _MainTex_ST;
	UNITY_UNIFORM vec4 _Maincolor;
	UNITY_UNIFORM float _Roughness;
	UNITY_UNIFORM vec3 _rimlightdir;
	UNITY_UNIFORM vec4 _rimcolor;
	UNITY_UNIFORM float _rimhardness;
	UNITY_UNIFORM float _rimthreshold;
	UNITY_UNIFORM float _rimintensity;
	UNITY_UNIFORM float _anisotropic;
	UNITY_UNIFORM vec4 _anisocolor;
	UNITY_UNIFORM float _anisooffest;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.xyz = _LightDirection.xyz * _ShadowBias.xxx + u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat6 = dot(_LightDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat6 = (-u_xlat6) + 1.0;
    u_xlat6 = u_xlat6 * _ShadowBias.y;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _Cutoff;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_TARGET0;
float u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat0 = u_xlat16_0 + (-_Cutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0<0.0);
#else
    u_xlatb0 = u_xlat0<0.0;
#endif
    if(u_xlatb0){discard;}
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "_ADDITIONAL_LIGHTS" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 203
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %84 %173 %182 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 RelaxedPrecision 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 RelaxedPrecision 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 RelaxedPrecision 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 RelaxedPrecision 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 RelaxedPrecision 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 RelaxedPrecision 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpMemberDecorate %21 16 RelaxedPrecision 
                                                      OpMemberDecorate %21 16 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpDecorate %66 ArrayStride 66 
                                                      OpMemberDecorate %67 0 Offset 67 
                                                      OpMemberDecorate %67 1 Offset 67 
                                                      OpMemberDecorate %67 2 RelaxedPrecision 
                                                      OpMemberDecorate %67 2 Offset 67 
                                                      OpDecorate %67 Block 
                                                      OpDecorate %69 DescriptorSet 69 
                                                      OpDecorate %69 Binding 69 
                                                      OpDecorate %72 RelaxedPrecision 
                                                      OpDecorate %84 Location 84 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpMemberDecorate %171 0 BuiltIn 171 
                                                      OpMemberDecorate %171 1 BuiltIn 171 
                                                      OpMemberDecorate %171 2 BuiltIn 171 
                                                      OpDecorate %171 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 182 
                                                      OpDecorate %184 Location 184 
                                                      OpMemberDecorate %186 0 Offset 186 
                                                      OpMemberDecorate %186 1 Offset 186 
                                                      OpMemberDecorate %186 2 Offset 186 
                                                      OpMemberDecorate %186 3 Offset 186 
                                                      OpMemberDecorate %186 4 Offset 186 
                                                      OpMemberDecorate %186 5 Offset 186 
                                                      OpMemberDecorate %186 6 Offset 186 
                                                      OpMemberDecorate %186 7 Offset 186 
                                                      OpMemberDecorate %186 8 Offset 186 
                                                      OpMemberDecorate %186 9 Offset 186 
                                                      OpMemberDecorate %186 10 Offset 186 
                                                      OpMemberDecorate %186 11 Offset 186 
                                                      OpMemberDecorate %186 12 Offset 186 
                                                      OpDecorate %186 Block 
                                                      OpDecorate %188 DescriptorSet 188 
                                                      OpDecorate %188 Binding 188 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 3 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeArray %7 %16 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypeArray %7 %19 
                                              %21 = OpTypeStruct %17 %18 %7 %7 %7 %20 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4; f32_4[2]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 0 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %45 = OpConstant 2 
                                          i32 %59 = OpConstant 3 
                                              %66 = OpTypeArray %7 %16 
                                              %67 = OpTypeStruct %66 %7 %12 
                                              %68 = OpTypePointer Uniform %67 
    Uniform struct {f32_4[4]; f32_4; f32_3;}* %69 = OpVariable Uniform 
                                              %70 = OpTypePointer Uniform %12 
                               Private f32_4* %82 = OpVariable Private 
                                              %83 = OpTypePointer Input %12 
                                 Input f32_3* %84 = OpVariable Input 
                                          u32 %90 = OpConstant 0 
                                              %91 = OpTypePointer Private %6 
                                          u32 %98 = OpConstant 1 
                                Private f32* %106 = OpVariable Private 
                                         f32 %113 = OpConstant 3.674022E-40 
                                         f32 %130 = OpConstant 3.674022E-40 
                                         f32 %131 = OpConstant 3.674022E-40 
                                             %137 = OpTypePointer Uniform %6 
                                             %170 = OpTypeArray %6 %98 
                                             %171 = OpTypeStruct %7 %6 %170 
                                             %172 = OpTypePointer Output %171 
        Output struct {f32_4; f32; f32[1];}* %173 = OpVariable Output 
                                             %178 = OpTypePointer Output %7 
                                             %180 = OpTypeVector %6 2 
                                             %181 = OpTypePointer Output %180 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %183 = OpTypePointer Input %180 
                                Input f32_2* %184 = OpVariable Input 
                                             %186 = OpTypeStruct %6 %7 %7 %7 %6 %12 %7 %6 %6 %6 %6 %7 %6 
                                             %187 = OpTypePointer Uniform %186 
Uniform struct {f32; f32_4; f32_4; f32_4; f32; f32_3; f32_4; f32; f32; f32; f32; f32_4; f32;}* %188 = OpVariable Uniform 
                                             %197 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %11 
                                        f32_3 %14 = OpVectorShuffle %13 %13 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_3 %30 = OpVectorShuffle %29 %29 0 1 2 
                                        f32_3 %31 = OpFMul %14 %30 
                                        f32_4 %32 = OpLoad %9 
                                        f32_4 %33 = OpVectorShuffle %32 %31 4 5 6 3 
                                                      OpStore %9 %33 
                               Uniform f32_4* %34 = OpAccessChain %23 %25 %25 
                                        f32_4 %35 = OpLoad %34 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 1 2 
                                        f32_4 %37 = OpLoad %11 
                                        f32_3 %38 = OpVectorShuffle %37 %37 0 0 0 
                                        f32_3 %39 = OpFMul %36 %38 
                                        f32_4 %40 = OpLoad %9 
                                        f32_3 %41 = OpVectorShuffle %40 %40 0 1 2 
                                        f32_3 %42 = OpFAdd %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpVectorShuffle %43 %42 4 5 6 3 
                                                      OpStore %9 %44 
                               Uniform f32_4* %46 = OpAccessChain %23 %25 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_3 %48 = OpVectorShuffle %47 %47 0 1 2 
                                        f32_4 %49 = OpLoad %11 
                                        f32_3 %50 = OpVectorShuffle %49 %49 2 2 2 
                                        f32_3 %51 = OpFMul %48 %50 
                                        f32_4 %52 = OpLoad %9 
                                        f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                        f32_3 %54 = OpFAdd %51 %53 
                                        f32_4 %55 = OpLoad %9 
                                        f32_4 %56 = OpVectorShuffle %55 %54 4 5 6 3 
                                                      OpStore %9 %56 
                                        f32_4 %57 = OpLoad %9 
                                        f32_3 %58 = OpVectorShuffle %57 %57 0 1 2 
                               Uniform f32_4* %60 = OpAccessChain %23 %25 %59 
                                        f32_4 %61 = OpLoad %60 
                                        f32_3 %62 = OpVectorShuffle %61 %61 0 1 2 
                                        f32_3 %63 = OpFAdd %58 %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %63 4 5 6 3 
                                                      OpStore %9 %65 
                               Uniform f32_3* %71 = OpAccessChain %69 %45 
                                        f32_3 %72 = OpLoad %71 
                               Uniform f32_4* %73 = OpAccessChain %69 %26 
                                        f32_4 %74 = OpLoad %73 
                                        f32_3 %75 = OpVectorShuffle %74 %74 0 0 0 
                                        f32_3 %76 = OpFMul %72 %75 
                                        f32_4 %77 = OpLoad %9 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFAdd %76 %78 
                                        f32_4 %80 = OpLoad %9 
                                        f32_4 %81 = OpVectorShuffle %80 %79 4 5 6 3 
                                                      OpStore %9 %81 
                                        f32_3 %85 = OpLoad %84 
                               Uniform f32_4* %86 = OpAccessChain %23 %26 %25 
                                        f32_4 %87 = OpLoad %86 
                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
                                          f32 %89 = OpDot %85 %88 
                                 Private f32* %92 = OpAccessChain %82 %90 
                                                      OpStore %92 %89 
                                        f32_3 %93 = OpLoad %84 
                               Uniform f32_4* %94 = OpAccessChain %23 %26 %26 
                                        f32_4 %95 = OpLoad %94 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 1 2 
                                          f32 %97 = OpDot %93 %96 
                                 Private f32* %99 = OpAccessChain %82 %98 
                                                      OpStore %99 %97 
                                       f32_3 %100 = OpLoad %84 
                              Uniform f32_4* %101 = OpAccessChain %23 %26 %45 
                                       f32_4 %102 = OpLoad %101 
                                       f32_3 %103 = OpVectorShuffle %102 %102 0 1 2 
                                         f32 %104 = OpDot %100 %103 
                                Private f32* %105 = OpAccessChain %82 %19 
                                                      OpStore %105 %104 
                                       f32_4 %107 = OpLoad %82 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                       f32_4 %109 = OpLoad %82 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                         f32 %111 = OpDot %108 %110 
                                                      OpStore %106 %111 
                                         f32 %112 = OpLoad %106 
                                         f32 %114 = OpExtInst %1 40 %112 %113 
                                                      OpStore %106 %114 
                                         f32 %115 = OpLoad %106 
                                         f32 %116 = OpExtInst %1 32 %115 
                                                      OpStore %106 %116 
                                         f32 %117 = OpLoad %106 
                                       f32_3 %118 = OpCompositeConstruct %117 %117 %117 
                                       f32_4 %119 = OpLoad %82 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_3 %121 = OpFMul %118 %120 
                                       f32_4 %122 = OpLoad %82 
                                       f32_4 %123 = OpVectorShuffle %122 %121 4 5 6 3 
                                                      OpStore %82 %123 
                              Uniform f32_3* %124 = OpAccessChain %69 %45 
                                       f32_3 %125 = OpLoad %124 
                                       f32_4 %126 = OpLoad %82 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 2 
                                         f32 %128 = OpDot %125 %127 
                                                      OpStore %106 %128 
                                         f32 %129 = OpLoad %106 
                                         f32 %132 = OpExtInst %1 43 %129 %130 %131 
                                                      OpStore %106 %132 
                                         f32 %133 = OpLoad %106 
                                         f32 %134 = OpFNegate %133 
                                         f32 %135 = OpFAdd %134 %131 
                                                      OpStore %106 %135 
                                         f32 %136 = OpLoad %106 
                                Uniform f32* %138 = OpAccessChain %69 %26 %98 
                                         f32 %139 = OpLoad %138 
                                         f32 %140 = OpFMul %136 %139 
                                                      OpStore %106 %140 
                                       f32_4 %141 = OpLoad %82 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                         f32 %143 = OpLoad %106 
                                       f32_3 %144 = OpCompositeConstruct %143 %143 %143 
                                       f32_3 %145 = OpFMul %142 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFAdd %145 %147 
                                       f32_4 %149 = OpLoad %9 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %9 %150 
                                       f32_4 %151 = OpLoad %9 
                                       f32_4 %152 = OpVectorShuffle %151 %151 1 1 1 1 
                              Uniform f32_4* %153 = OpAccessChain %69 %25 %26 
                                       f32_4 %154 = OpLoad %153 
                                       f32_4 %155 = OpFMul %152 %154 
                                                      OpStore %82 %155 
                              Uniform f32_4* %156 = OpAccessChain %69 %25 %25 
                                       f32_4 %157 = OpLoad %156 
                                       f32_4 %158 = OpLoad %9 
                                       f32_4 %159 = OpVectorShuffle %158 %158 0 0 0 0 
                                       f32_4 %160 = OpFMul %157 %159 
                                       f32_4 %161 = OpLoad %82 
                                       f32_4 %162 = OpFAdd %160 %161 
                                                      OpStore %82 %162 
                              Uniform f32_4* %163 = OpAccessChain %69 %25 %45 
                                       f32_4 %164 = OpLoad %163 
                                       f32_4 %165 = OpLoad %9 
                                       f32_4 %166 = OpVectorShuffle %165 %165 2 2 2 2 
                                       f32_4 %167 = OpFMul %164 %166 
                                       f32_4 %168 = OpLoad %82 
                                       f32_4 %169 = OpFAdd %167 %168 
                                                      OpStore %9 %169 
                                       f32_4 %174 = OpLoad %9 
                              Uniform f32_4* %175 = OpAccessChain %69 %25 %59 
                                       f32_4 %176 = OpLoad %175 
                                       f32_4 %177 = OpFAdd %174 %176 
                               Output f32_4* %179 = OpAccessChain %173 %25 
                                                      OpStore %179 %177 
                                       f32_2 %185 = OpLoad %184 
                              Uniform f32_4* %189 = OpAccessChain %188 %45 
                                       f32_4 %190 = OpLoad %189 
                                       f32_2 %191 = OpVectorShuffle %190 %190 0 1 
                                       f32_2 %192 = OpFMul %185 %191 
                              Uniform f32_4* %193 = OpAccessChain %188 %45 
                                       f32_4 %194 = OpLoad %193 
                                       f32_2 %195 = OpVectorShuffle %194 %194 2 3 
                                       f32_2 %196 = OpFAdd %192 %195 
                                                      OpStore vs_TEXCOORD0 %196 
                                 Output f32* %198 = OpAccessChain %173 %25 %98 
                                         f32 %199 = OpLoad %198 
                                         f32 %200 = OpFNegate %199 
                                 Output f32* %201 = OpAccessChain %173 %25 %98 
                                                      OpStore %201 %200 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 59
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %21 %56 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate %8 RelaxedPrecision 
                                             OpDecorate %11 RelaxedPrecision 
                                             OpDecorate %11 DescriptorSet 11 
                                             OpDecorate %11 Binding 11 
                                             OpDecorate %12 RelaxedPrecision 
                                             OpDecorate %15 RelaxedPrecision 
                                             OpDecorate %15 DescriptorSet 15 
                                             OpDecorate %15 Binding 15 
                                             OpDecorate %16 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 21 
                                             OpDecorate %27 RelaxedPrecision 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpMemberDecorate %30 0 Offset 30 
                                             OpDecorate %30 Block 
                                             OpDecorate %32 DescriptorSet 32 
                                             OpDecorate %32 Binding 32 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %56 Location 56 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypePointer Private %6 
                         Private f32* %8 = OpVariable Private 
                                      %9 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %10 = OpTypePointer UniformConstant %9 
UniformConstant read_only Texture2D* %11 = OpVariable UniformConstant 
                                     %13 = OpTypeSampler 
                                     %14 = OpTypePointer UniformConstant %13 
            UniformConstant sampler* %15 = OpVariable UniformConstant 
                                     %17 = OpTypeSampledImage %9 
                                     %19 = OpTypeVector %6 2 
                                     %20 = OpTypePointer Input %19 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %23 = OpTypeVector %6 4 
                                     %25 = OpTypeInt 32 0 
                                 u32 %26 = OpConstant 3 
                        Private f32* %28 = OpVariable Private 
                                     %30 = OpTypeStruct %6 
                                     %31 = OpTypePointer Uniform %30 
              Uniform struct {f32;}* %32 = OpVariable Uniform 
                                     %33 = OpTypeInt 32 1 
                                 i32 %34 = OpConstant 0 
                                     %35 = OpTypePointer Uniform %6 
                                     %40 = OpTypeBool 
                                     %41 = OpTypePointer Private %40 
                       Private bool* %42 = OpVariable Private 
                                 f32 %44 = OpConstant 3.674022E-40 
                                 i32 %47 = OpConstant 1 
                                 i32 %49 = OpConstant -1 
                                     %55 = OpTypePointer Output %23 
                       Output f32_4* %56 = OpVariable Output 
                               f32_4 %57 = OpConstantComposite %44 %44 %44 %44 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %12 = OpLoad %11 
                             sampler %16 = OpLoad %15 
          read_only Texture2DSampled %18 = OpSampledImage %12 %16 
                               f32_2 %22 = OpLoad vs_TEXCOORD0 
                               f32_4 %24 = OpImageSampleImplicitLod %18 %22 
                                 f32 %27 = OpCompositeExtract %24 3 
                                             OpStore %8 %27 
                                 f32 %29 = OpLoad %8 
                        Uniform f32* %36 = OpAccessChain %32 %34 
                                 f32 %37 = OpLoad %36 
                                 f32 %38 = OpFNegate %37 
                                 f32 %39 = OpFAdd %29 %38 
                                             OpStore %28 %39 
                                 f32 %43 = OpLoad %28 
                                bool %45 = OpFOrdLessThan %43 %44 
                                             OpStore %42 %45 
                                bool %46 = OpLoad %42 
                                 i32 %48 = OpSelect %46 %47 %34 
                                 i32 %50 = OpIMul %48 %49 
                                bool %51 = OpINotEqual %50 %34 
                                             OpSelectionMerge %53 None 
                                             OpBranchConditional %51 %52 %53 
                                     %52 = OpLabel 
                                             OpKill
                                     %53 = OpLabel 
                                             OpStore %56 %57 
                                             OpReturn
                                             OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "gles3 " {
""
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS_VERTEX" }
""
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS" }
""
}
SubProgram "vulkan " {
""
}
SubProgram "vulkan " {
Keywords { "_ADDITIONAL_LIGHTS_VERTEX" }
""
}
SubProgram "vulkan " {
Keywords { "_ADDITIONAL_LIGHTS" }
""
}
}
}
}
}