//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Unlit/Character_Skin" {
Properties {
_reflectmap ("Reflect Map ", 2D) = "white" { }
_MainTex ("Main Texture", 2D) = "white" { }
_Emissioncolor ("Emission Color", Color) = (1,1,1,1)
_Normal ("Normal Map", 2D) = "bump" { }
_MREA ("Metal Roughness Emiess Ao", 2D) = "white" { }
_Roughness ("roughness", Range(-0.5, 0.5)) = 0
_SSSLUT ("SSSLUT", 2D) = "white" { }
_sss ("sss", Range(0, 5)) = 1
_Curvemn ("CurveMun", Range(0, 1)) = 0.5
_Expond ("ENV Expond", Float) = 1
}
SubShader {
 LOD 100
 Tags { "RenderType" = "Opaque" }
 Pass {
  LOD 100
  Tags { "LIGHTMODE" = "LightweightForward" "RenderType" = "Opaque" }
  GpuProgramID 29094
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD3.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD4.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD7 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[32];
uniform 	mediump vec4 _AdditionalLightsColor[32];
uniform 	mediump vec4 _AdditionalLightsAttenuation[32];
uniform 	mediump vec4 _AdditionalLightsSpotDir[32];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _Expond;
	UNITY_UNIFORM vec4 _MainTex_ST;
	UNITY_UNIFORM vec4 _Emissioncolor;
	UNITY_UNIFORM float _Roughness;
	UNITY_UNIFORM float _sss;
	UNITY_UNIFORM vec3 _rimlightdir;
	UNITY_UNIFORM vec4 _rimcolor;
	UNITY_UNIFORM float _rimhardness;
	UNITY_UNIFORM float _rimthreshold;
	UNITY_UNIFORM float _rimintensity;
	UNITY_UNIFORM float _Curvemn;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _Normal;
UNITY_LOCATION(2) uniform mediump sampler2D _MREA;
UNITY_LOCATION(3) uniform mediump sampler2D _SSSLUT;
UNITY_LOCATION(4) uniform mediump sampler2D _reflectmap;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
int u_xlati2;
bool u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_12;
vec3 u_xlat13;
int u_xlati13;
float u_xlat15;
uint u_xlatu15;
float u_xlat16;
float u_xlat26;
float u_xlat39;
uint u_xlatu39;
float u_xlat40;
float u_xlat41;
mediump float u_xlat16_45;
mediump float u_xlat16_46;
mediump float u_xlat16_47;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat13.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xyz = vs_TEXCOORD2.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat40 = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = vec3(u_xlat40) * u_xlat1.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat16_4.xyz = texture(_MainTex, u_xlat3.xy).xyz;
    u_xlat16_5.xyz = texture(_Normal, u_xlat3.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3 = texture(_MREA, u_xlat3.xy);
    u_xlat40 = u_xlat16_3.y + (-_Roughness);
    u_xlat16_45 = (-u_xlat40) + 1.0;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;
    u_xlat16_45 = max(u_xlat16_45, 0.00200000009);
    u_xlat16_7.xyz = u_xlat16_4.xyz * u_xlat16_3.zzz;
    u_xlat5.xyz = u_xlat16_7.xyz * _Emissioncolor.xyz;
    u_xlat16_7.xyz = u_xlat16_4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_7.xyz = u_xlat16_3.xxx * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_46 = u_xlat16_3.x * -0.959999979 + 0.959999979;
    u_xlat16_8.xyz = u_xlat16_4.xyz * vec3(u_xlat16_46);
    u_xlat16_8.xyz = u_xlat16_3.www * u_xlat16_8.xyz;
    u_xlat3.xyz = u_xlat16_6.yyy * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = u_xlat16_6.xxx * vs_TEXCOORD3.xyz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat16_6.zzz * vs_TEXCOORD1.xyz + u_xlat3.xyz;
    u_xlat41 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat41 = inversesqrt(u_xlat41);
    u_xlat4.xyz = vec3(u_xlat41) * u_xlat3.xyz;
    u_xlat41 = dot(u_xlat4.xyz, _MainLightPosition.xyz);
    u_xlat3.x = max(u_xlat41, 9.99999975e-06);
    u_xlat0.y = dot(u_xlat4.xyz, u_xlat13.xyz);
    u_xlat0.z = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(1.17549435e-38, 9.99999975e-06, 9.99999975e-06));
    u_xlat39 = u_xlat16_45 + u_xlat16_45;
    u_xlat2.x = u_xlat0.z * u_xlat0.z;
    u_xlat39 = u_xlat2.x * u_xlat39 + 0.5;
    u_xlat16_6.x = u_xlat39 + -1.0;
    u_xlat13.x = (-u_xlat0.y) + 1.0;
    u_xlat13.x = max(u_xlat13.x, 0.0);
    u_xlat39 = u_xlat13.x * u_xlat13.x;
    u_xlat39 = u_xlat39 * u_xlat39;
    u_xlat13.x = u_xlat13.x * u_xlat39;
    u_xlat13.x = u_xlat16_6.x * u_xlat13.x + 1.0;
    u_xlat39 = (-u_xlat3.x) + 1.0;
    u_xlat39 = max(u_xlat39, 0.0);
    u_xlat2.x = u_xlat39 * u_xlat39;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat39 = u_xlat39 * u_xlat2.x;
    u_xlat39 = u_xlat16_6.x * u_xlat39 + 1.0;
    u_xlat16_6.x = u_xlat13.x * u_xlat39;
    u_xlat16_6.x = min(u_xlat16_6.x, 1.0);
    u_xlat16_6.x = u_xlat41 * u_xlat16_6.x;
    u_xlat16_2.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat2.x = u_xlat16_2.x;
    u_xlat2.yw = vec2(vec2(_Curvemn, _Curvemn));
    u_xlat16_9.xyz = texture(_SSSLUT, u_xlat2.xy).xyz;
    u_xlat9.xyz = u_xlat16_9.xyz * vec3(vec3(_sss, _sss, _sss));
    u_xlat13.x = min(u_xlat2.x, 1.0);
    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat9.xyz;
    u_xlat9.xyz = u_xlat16_6.xyz * _MainLightColor.xyz;
    u_xlat9.xyz = u_xlat9.xyz * u_xlat13.xxx + u_xlat5.xyz;
    u_xlat16_6.x = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlati13 = int(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat9.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<uint(u_xlati13) ; u_xlatu_loop_1++)
    {
        u_xlati2 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu15 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_46 = dot(unity_LightIndices[int(u_xlatu15)], ImmCB_0[u_xlati2]);
        u_xlati2 = int(u_xlat16_46);
        u_xlat10.xyz = (-vs_TEXCOORD5.xyz) * _AdditionalLightsPosition[u_xlati2].www + _AdditionalLightsPosition[u_xlati2].xyz;
        u_xlat15 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat15 = max(u_xlat15, 6.10351563e-05);
        u_xlat16 = inversesqrt(u_xlat15);
        u_xlat10.xyz = vec3(u_xlat16) * u_xlat10.xyz;
        u_xlat16 = float(1.0) / float(u_xlat15);
        u_xlat15 = u_xlat15 * _AdditionalLightsAttenuation[u_xlati2].x + _AdditionalLightsAttenuation[u_xlati2].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
        u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
        u_xlat15 = u_xlat15 * u_xlat16;
        u_xlat16_46 = dot(_AdditionalLightsSpotDir[u_xlati2].xyz, u_xlat10.xyz);
        u_xlat16_46 = u_xlat16_46 * _AdditionalLightsAttenuation[u_xlati2].z + _AdditionalLightsAttenuation[u_xlati2].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_46 = min(max(u_xlat16_46, 0.0), 1.0);
#else
        u_xlat16_46 = clamp(u_xlat16_46, 0.0, 1.0);
#endif
        u_xlat16_46 = u_xlat16_46 * u_xlat16_46;
        u_xlat15 = u_xlat15 * u_xlat16_46;
        u_xlat16 = dot(u_xlat4.xyz, u_xlat10.xyz);
        u_xlat2.z = max(u_xlat16, 9.99999975e-06);
        u_xlat16_10.xyz = texture(_SSSLUT, u_xlat2.zw).xyz;
        u_xlat10.xyz = u_xlat16_10.xyz * vec3(vec3(_sss, _sss, _sss));
        u_xlat16_11.xyz = u_xlat16_8.xyz * u_xlat10.xyz;
        u_xlat16_11.xyz = u_xlat16_11.xyz * _AdditionalLightsColor[u_xlati2].xyz;
        u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(u_xlat15) + u_xlat5.xyz;
        u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_11.xyz;
    }
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyw = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat0.xyw);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat0.xyw);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_46 = u_xlat16_45 * u_xlat16_45;
    u_xlat16_47 = u_xlat16_45 * u_xlat16_45 + -1.0;
    u_xlat13.x = u_xlat13.x * u_xlat16_47 + 1.00001001;
    u_xlat16_47 = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat13.x * u_xlat13.x;
    u_xlat13.x = max(u_xlat16_47, 0.100000001);
    u_xlat0.x = u_xlat13.x * u_xlat0.x;
    u_xlat16_47 = u_xlat16_45 * 4.0 + 2.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_47;
    u_xlat0.x = u_xlat16_46 / u_xlat0.x;
    u_xlat0.xyw = u_xlat16_7.xyz * u_xlat0.xxx;
    u_xlat16_11.xyz = u_xlat0.xyw * vec3(3.14159274, 3.14159274, 3.14159274);
    u_xlat1.xyz = u_xlat16_11.xyz * _MainLightColor.xyz;
    u_xlat16_6.xyz = u_xlat1.xyz * u_xlat3.xxx + u_xlat16_6.xyz;
    u_xlat4.w = 1.0;
    u_xlat16_11.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_11.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_11.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_2 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_12.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_12.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_12.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_46 = u_xlat4.y * u_xlat4.y;
    u_xlat16_46 = u_xlat4.x * u_xlat4.x + (-u_xlat16_46);
    u_xlat16_12.xyz = unity_SHC.xyz * vec3(u_xlat16_46) + u_xlat16_12.xyz;
    u_xlat16_11.xyz = u_xlat16_11.xyz + u_xlat16_12.xyz;
    u_xlat16_11.xyz = max(u_xlat16_11.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_11.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].x;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat16_11.x = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].y;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].y;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].y;
    u_xlat16_11.y = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat16_11.xy = u_xlat16_11.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat16_46 = (-u_xlat16_45) * 0.699999988 + 1.70000005;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_46;
    u_xlat16_46 = u_xlat16_45 * 8.0;
    u_xlat16_1.xyz = textureLod(_reflectmap, u_xlat16_11.xy, u_xlat16_46).xyz;
    u_xlat16 = u_xlat16_45 * u_xlat16_45 + 1.0;
    u_xlat16 = float(1.0) / u_xlat16;
    u_xlat0.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat0.x = max(u_xlat0.w, u_xlat0.x);
    u_xlat0.x = u_xlat40 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13.x = (-u_xlat0.z) + 1.0;
    u_xlat13.x = max(u_xlat13.x, 0.0);
    u_xlat26 = u_xlat13.x * u_xlat13.x;
    u_xlat26 = u_xlat26 * u_xlat26;
    u_xlat13.x = u_xlat13.x * u_xlat26;
    u_xlat0.xzw = (-u_xlat16_7.xyz) + u_xlat0.xxx;
    u_xlat0.xyz = u_xlat13.xxx * u_xlat0.xzw + u_xlat16_7.xyz;
    u_xlat0.xyz = vec3(u_xlat16) * u_xlat0.xyz;
    u_xlat16_7.xyz = u_xlat16_3.www * u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_8.xyz * vec3(_Expond) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixInvV[1].xyz * _rimlightdir.yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixInvV[0].xyz * _rimlightdir.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixInvV[2].xyz * _rimlightdir.zzz + u_xlat0.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat0.x = u_xlat0.x * u_xlat16_3.w + (-_rimthreshold);
    u_xlat0.x = u_xlat0.x * _rimhardness;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = u_xlat0.xxx * _rimcolor.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz * vec3(vec3(_rimintensity, _rimintensity, _rimintensity));
    u_xlat1.xyz = u_xlat3.xxx * u_xlat0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = u_xlat0.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(2.20000005, 2.20000005, 2.20000005);
    u_xlat16_6.xyz = exp2(u_xlat16_6.xyz);
    SV_Target0.xyz = sqrt(u_xlat16_6.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 382
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %84 %93 %95 %98 %138 %141 %149 %183 %209 %215 %217 %218 %369 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 RelaxedPrecision 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 RelaxedPrecision 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 RelaxedPrecision 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 RelaxedPrecision 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 RelaxedPrecision 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 RelaxedPrecision 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpMemberDecorate %21 16 RelaxedPrecision 
                                                      OpMemberDecorate %21 16 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpDecorate %59 ArrayStride 59 
                                                      OpMemberDecorate %60 0 Offset 60 
                                                      OpMemberDecorate %60 1 Offset 60 
                                                      OpDecorate %60 Block 
                                                      OpDecorate %62 DescriptorSet 62 
                                                      OpDecorate %62 Binding 62 
                                                      OpMemberDecorate %82 0 BuiltIn 82 
                                                      OpMemberDecorate %82 1 BuiltIn 82 
                                                      OpMemberDecorate %82 2 BuiltIn 82 
                                                      OpDecorate %82 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 93 
                                                      OpDecorate %95 Location 95 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate vs_TEXCOORD1 Location 138 
                                                      OpDecorate vs_TEXCOORD2 Location 141 
                                                      OpDecorate %149 Location 149 
                                                      OpDecorate vs_TEXCOORD3 Location 183 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 209 
                                                      OpDecorate vs_TEXCOORD5 Location 215 
                                                      OpDecorate vs_TEXCOORD6 Location 217 
                                                      OpDecorate %218 Location 218 
                                                      OpDecorate %222 ArrayStride 222 
                                                      OpMemberDecorate %223 0 Offset 223 
                                                      OpMemberDecorate %223 1 Offset 223 
                                                      OpMemberDecorate %223 2 Offset 223 
                                                      OpMemberDecorate %223 3 Offset 223 
                                                      OpMemberDecorate %223 4 Offset 223 
                                                      OpMemberDecorate %223 5 Offset 223 
                                                      OpMemberDecorate %223 6 RelaxedPrecision 
                                                      OpMemberDecorate %223 6 Offset 223 
                                                      OpMemberDecorate %223 7 RelaxedPrecision 
                                                      OpMemberDecorate %223 7 Offset 223 
                                                      OpMemberDecorate %223 8 RelaxedPrecision 
                                                      OpMemberDecorate %223 8 Offset 223 
                                                      OpMemberDecorate %223 9 RelaxedPrecision 
                                                      OpMemberDecorate %223 9 Offset 223 
                                                      OpMemberDecorate %223 10 RelaxedPrecision 
                                                      OpMemberDecorate %223 10 Offset 223 
                                                      OpMemberDecorate %223 11 Offset 223 
                                                      OpDecorate %223 Block 
                                                      OpDecorate %225 DescriptorSet 225 
                                                      OpDecorate %225 Binding 225 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %314 RelaxedPrecision 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %320 RelaxedPrecision 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %328 RelaxedPrecision 
                                                      OpDecorate %331 RelaxedPrecision 
                                                      OpDecorate %332 RelaxedPrecision 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %338 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD7 Location 369 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %10 %16 
                                              %18 = OpTypeArray %10 %16 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypeArray %10 %19 
                                              %21 = OpTypeStruct %17 %18 %10 %10 %10 %20 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4; f32_4[2]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 0 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %10 
                                          i32 %40 = OpConstant 2 
                                          i32 %50 = OpConstant 3 
                                              %55 = OpTypePointer Private %10 
                               Private f32_4* %56 = OpVariable Private 
                                              %59 = OpTypeArray %10 %16 
                                              %60 = OpTypeStruct %7 %59 
                                              %61 = OpTypePointer Uniform %60 
           Uniform struct {f32_3; f32_4[4];}* %62 = OpVariable Uniform 
                                          u32 %80 = OpConstant 1 
                                              %81 = OpTypeArray %6 %80 
                                              %82 = OpTypeStruct %10 %6 %81 
                                              %83 = OpTypePointer Output %82 
         Output struct {f32_4; f32; f32[1];}* %84 = OpVariable Output 
                                              %89 = OpTypePointer Output %10 
                                              %91 = OpTypeVector %6 2 
                                              %92 = OpTypePointer Output %91 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                              %94 = OpTypePointer Input %91 
                                 Input f32_2* %95 = OpVariable Input 
                                              %97 = OpTypePointer Input %7 
                                 Input f32_3* %98 = OpVariable Input 
                                         u32 %104 = OpConstant 0 
                                             %105 = OpTypePointer Private %6 
                                Private f32* %119 = OpVariable Private 
                                         f32 %126 = OpConstant 3.674022E-40 
                                             %137 = OpTypePointer Output %7 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %144 = OpTypePointer Uniform %7 
                              Private f32_3* %148 = OpVariable Private 
                                Input f32_4* %149 = OpVariable Input 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                              Private f32_3* %185 = OpVariable Private 
                                         u32 %201 = OpConstant 3 
                                             %202 = OpTypePointer Input %6 
                                             %205 = OpTypePointer Uniform %6 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD5 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                Input f32_4* %218 = OpVariable Input 
                                         u32 %221 = OpConstant 20 
                                             %222 = OpTypeArray %10 %221 
                                             %223 = OpTypeStruct %222 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 
                                             %224 = OpTypePointer Uniform %223 
Uniform struct {f32_4[20]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %225 = OpVariable Uniform 
                                         i32 %260 = OpConstant 4 
                                             %270 = OpTypeBool 
                                             %271 = OpTypeVector %270 4 
                                             %272 = OpTypePointer Private %271 
                             Private bool_4* %273 = OpVariable Private 
                                         i32 %275 = OpConstant 5 
                              Private f32_3* %279 = OpVariable Private 
                                             %280 = OpTypePointer Private %270 
                                         f32 %283 = OpConstant 3.674022E-40 
                                         f32 %284 = OpConstant 3.674022E-40 
                              Private f32_4* %295 = OpVariable Private 
                                         f32 %298 = OpConstant 3.674022E-40 
                                         f32 %299 = OpConstant 3.674022E-40 
                                       f32_3 %319 = OpConstantComposite %299 %299 %299 
                                         f32 %324 = OpConstant 3.674022E-40 
                                         f32 %325 = OpConstant 3.674022E-40 
                                         f32 %326 = OpConstant 3.674022E-40 
                                       f32_4 %327 = OpConstantComposite %324 %325 %326 %298 
                                             %335 = OpTypePointer Private %15 
                                Private u32* %336 = OpVariable Private 
                                             %340 = OpTypePointer Private %24 
                                Private i32* %341 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD7 = OpVariable Output 
                                             %376 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %12 
                                        f32_3 %14 = OpVectorShuffle %13 %13 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_3 %30 = OpVectorShuffle %29 %29 0 1 2 
                                        f32_3 %31 = OpFMul %14 %30 
                                                      OpStore %9 %31 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %25 
                                        f32_4 %33 = OpLoad %32 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                        f32_4 %35 = OpLoad %12 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 0 0 
                                        f32_3 %37 = OpFMul %34 %36 
                                        f32_3 %38 = OpLoad %9 
                                        f32_3 %39 = OpFAdd %37 %38 
                                                      OpStore %9 %39 
                               Uniform f32_4* %41 = OpAccessChain %23 %25 %40 
                                        f32_4 %42 = OpLoad %41 
                                        f32_3 %43 = OpVectorShuffle %42 %42 0 1 2 
                                        f32_4 %44 = OpLoad %12 
                                        f32_3 %45 = OpVectorShuffle %44 %44 2 2 2 
                                        f32_3 %46 = OpFMul %43 %45 
                                        f32_3 %47 = OpLoad %9 
                                        f32_3 %48 = OpFAdd %46 %47 
                                                      OpStore %9 %48 
                                        f32_3 %49 = OpLoad %9 
                               Uniform f32_4* %51 = OpAccessChain %23 %25 %50 
                                        f32_4 %52 = OpLoad %51 
                                        f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                        f32_3 %54 = OpFAdd %49 %53 
                                                      OpStore %9 %54 
                                        f32_3 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 1 1 1 1 
                               Uniform f32_4* %63 = OpAccessChain %62 %26 %26 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFMul %58 %64 
                                                      OpStore %56 %65 
                               Uniform f32_4* %66 = OpAccessChain %62 %26 %25 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpLoad %9 
                                        f32_4 %69 = OpVectorShuffle %68 %68 0 0 0 0 
                                        f32_4 %70 = OpFMul %67 %69 
                                        f32_4 %71 = OpLoad %56 
                                        f32_4 %72 = OpFAdd %70 %71 
                                                      OpStore %56 %72 
                               Uniform f32_4* %73 = OpAccessChain %62 %26 %40 
                                        f32_4 %74 = OpLoad %73 
                                        f32_3 %75 = OpLoad %9 
                                        f32_4 %76 = OpVectorShuffle %75 %75 2 2 2 2 
                                        f32_4 %77 = OpFMul %74 %76 
                                        f32_4 %78 = OpLoad %56 
                                        f32_4 %79 = OpFAdd %77 %78 
                                                      OpStore %56 %79 
                                        f32_4 %85 = OpLoad %56 
                               Uniform f32_4* %86 = OpAccessChain %62 %26 %50 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpFAdd %85 %87 
                                Output f32_4* %90 = OpAccessChain %84 %25 
                                                      OpStore %90 %88 
                                        f32_2 %96 = OpLoad %95 
                                                      OpStore vs_TEXCOORD0 %96 
                                        f32_3 %99 = OpLoad %98 
                              Uniform f32_4* %100 = OpAccessChain %23 %26 %25 
                                       f32_4 %101 = OpLoad %100 
                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 2 
                                         f32 %103 = OpDot %99 %102 
                                Private f32* %106 = OpAccessChain %56 %104 
                                                      OpStore %106 %103 
                                       f32_3 %107 = OpLoad %98 
                              Uniform f32_4* %108 = OpAccessChain %23 %26 %26 
                                       f32_4 %109 = OpLoad %108 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                         f32 %111 = OpDot %107 %110 
                                Private f32* %112 = OpAccessChain %56 %80 
                                                      OpStore %112 %111 
                                       f32_3 %113 = OpLoad %98 
                              Uniform f32_4* %114 = OpAccessChain %23 %26 %40 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                         f32 %117 = OpDot %113 %116 
                                Private f32* %118 = OpAccessChain %56 %19 
                                                      OpStore %118 %117 
                                       f32_4 %120 = OpLoad %56 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_4 %122 = OpLoad %56 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                         f32 %124 = OpDot %121 %123 
                                                      OpStore %119 %124 
                                         f32 %125 = OpLoad %119 
                                         f32 %127 = OpExtInst %1 40 %125 %126 
                                                      OpStore %119 %127 
                                         f32 %128 = OpLoad %119 
                                         f32 %129 = OpExtInst %1 32 %128 
                                                      OpStore %119 %129 
                                         f32 %130 = OpLoad %119 
                                       f32_3 %131 = OpCompositeConstruct %130 %130 %130 
                                       f32_4 %132 = OpLoad %56 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_3 %134 = OpFMul %131 %133 
                                       f32_4 %135 = OpLoad %56 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 6 3 
                                                      OpStore %56 %136 
                                       f32_4 %139 = OpLoad %56 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                                      OpStore vs_TEXCOORD1 %140 
                                       f32_3 %142 = OpLoad %9 
                                       f32_3 %143 = OpFNegate %142 
                              Uniform f32_3* %145 = OpAccessChain %62 %25 
                                       f32_3 %146 = OpLoad %145 
                                       f32_3 %147 = OpFAdd %143 %146 
                                                      OpStore vs_TEXCOORD2 %147 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 1 1 1 
                              Uniform f32_4* %152 = OpAccessChain %23 %25 %26 
                                       f32_4 %153 = OpLoad %152 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                       f32_3 %155 = OpFMul %151 %154 
                                                      OpStore %148 %155 
                              Uniform f32_4* %156 = OpAccessChain %23 %25 %25 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                       f32_4 %159 = OpLoad %149 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 0 0 
                                       f32_3 %161 = OpFMul %158 %160 
                                       f32_3 %162 = OpLoad %148 
                                       f32_3 %163 = OpFAdd %161 %162 
                                                      OpStore %148 %163 
                              Uniform f32_4* %164 = OpAccessChain %23 %25 %40 
                                       f32_4 %165 = OpLoad %164 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                       f32_4 %167 = OpLoad %149 
                                       f32_3 %168 = OpVectorShuffle %167 %167 2 2 2 
                                       f32_3 %169 = OpFMul %166 %168 
                                       f32_3 %170 = OpLoad %148 
                                       f32_3 %171 = OpFAdd %169 %170 
                                                      OpStore %148 %171 
                                       f32_3 %172 = OpLoad %148 
                                       f32_3 %173 = OpLoad %148 
                                         f32 %174 = OpDot %172 %173 
                                                      OpStore %119 %174 
                                         f32 %175 = OpLoad %119 
                                         f32 %176 = OpExtInst %1 40 %175 %126 
                                                      OpStore %119 %176 
                                         f32 %177 = OpLoad %119 
                                         f32 %178 = OpExtInst %1 32 %177 
                                                      OpStore %119 %178 
                                         f32 %179 = OpLoad %119 
                                       f32_3 %180 = OpCompositeConstruct %179 %179 %179 
                                       f32_3 %181 = OpLoad %148 
                                       f32_3 %182 = OpFMul %180 %181 
                                                      OpStore %148 %182 
                                       f32_3 %184 = OpLoad %148 
                                                      OpStore vs_TEXCOORD3 %184 
                                       f32_4 %186 = OpLoad %56 
                                       f32_3 %187 = OpVectorShuffle %186 %186 2 0 1 
                                       f32_3 %188 = OpLoad %148 
                                       f32_3 %189 = OpVectorShuffle %188 %188 1 2 0 
                                       f32_3 %190 = OpFMul %187 %189 
                                                      OpStore %185 %190 
                                       f32_4 %191 = OpLoad %56 
                                       f32_3 %192 = OpVectorShuffle %191 %191 1 2 0 
                                       f32_3 %193 = OpLoad %148 
                                       f32_3 %194 = OpVectorShuffle %193 %193 2 0 1 
                                       f32_3 %195 = OpFMul %192 %194 
                                       f32_3 %196 = OpLoad %185 
                                       f32_3 %197 = OpFNegate %196 
                                       f32_3 %198 = OpFAdd %195 %197 
                                       f32_4 %199 = OpLoad %56 
                                       f32_4 %200 = OpVectorShuffle %199 %198 4 5 6 3 
                                                      OpStore %56 %200 
                                  Input f32* %203 = OpAccessChain %149 %201 
                                         f32 %204 = OpLoad %203 
                                Uniform f32* %206 = OpAccessChain %23 %50 %201 
                                         f32 %207 = OpLoad %206 
                                         f32 %208 = OpFMul %204 %207 
                                                      OpStore %119 %208 
                                         f32 %210 = OpLoad %119 
                                       f32_3 %211 = OpCompositeConstruct %210 %210 %210 
                                       f32_4 %212 = OpLoad %56 
                                       f32_3 %213 = OpVectorShuffle %212 %212 0 1 2 
                                       f32_3 %214 = OpFMul %211 %213 
                                                      OpStore vs_TEXCOORD4 %214 
                                       f32_3 %216 = OpLoad %9 
                                                      OpStore vs_TEXCOORD5 %216 
                                       f32_4 %219 = OpLoad %218 
                                                      OpStore vs_TEXCOORD6 %219 
                                       f32_3 %220 = OpLoad %9 
                              Uniform f32_4* %226 = OpAccessChain %225 %26 
                                       f32_4 %227 = OpLoad %226 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                       f32_3 %229 = OpFNegate %228 
                                       f32_3 %230 = OpFAdd %220 %229 
                                       f32_4 %231 = OpLoad %56 
                                       f32_4 %232 = OpVectorShuffle %231 %230 4 5 6 3 
                                                      OpStore %56 %232 
                                       f32_4 %233 = OpLoad %56 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                       f32_4 %235 = OpLoad %56 
                                       f32_3 %236 = OpVectorShuffle %235 %235 0 1 2 
                                         f32 %237 = OpDot %234 %236 
                                Private f32* %238 = OpAccessChain %56 %104 
                                                      OpStore %238 %237 
                                       f32_3 %239 = OpLoad %9 
                              Uniform f32_4* %240 = OpAccessChain %225 %40 
                                       f32_4 %241 = OpLoad %240 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 1 2 
                                       f32_3 %243 = OpFNegate %242 
                                       f32_3 %244 = OpFAdd %239 %243 
                                                      OpStore %148 %244 
                                       f32_3 %245 = OpLoad %148 
                                       f32_3 %246 = OpLoad %148 
                                         f32 %247 = OpDot %245 %246 
                                Private f32* %248 = OpAccessChain %56 %80 
                                                      OpStore %248 %247 
                                       f32_3 %249 = OpLoad %9 
                              Uniform f32_4* %250 = OpAccessChain %225 %50 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                       f32_3 %253 = OpFNegate %252 
                                       f32_3 %254 = OpFAdd %249 %253 
                                                      OpStore %148 %254 
                                       f32_3 %255 = OpLoad %148 
                                       f32_3 %256 = OpLoad %148 
                                         f32 %257 = OpDot %255 %256 
                                Private f32* %258 = OpAccessChain %56 %19 
                                                      OpStore %258 %257 
                                       f32_3 %259 = OpLoad %9 
                              Uniform f32_4* %261 = OpAccessChain %225 %260 
                                       f32_4 %262 = OpLoad %261 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                       f32_3 %264 = OpFNegate %263 
                                       f32_3 %265 = OpFAdd %259 %264 
                                                      OpStore %148 %265 
                                       f32_3 %266 = OpLoad %148 
                                       f32_3 %267 = OpLoad %148 
                                         f32 %268 = OpDot %266 %267 
                                Private f32* %269 = OpAccessChain %56 %201 
                                                      OpStore %269 %268 
                                       f32_4 %274 = OpLoad %56 
                              Uniform f32_4* %276 = OpAccessChain %225 %275 
                                       f32_4 %277 = OpLoad %276 
                                      bool_4 %278 = OpFOrdLessThan %274 %277 
                                                      OpStore %273 %278 
                               Private bool* %281 = OpAccessChain %273 %104 
                                        bool %282 = OpLoad %281 
                                         f32 %285 = OpSelect %282 %283 %284 
                                Private f32* %286 = OpAccessChain %279 %104 
                                                      OpStore %286 %285 
                               Private bool* %287 = OpAccessChain %273 %80 
                                        bool %288 = OpLoad %287 
                                         f32 %289 = OpSelect %288 %283 %284 
                                Private f32* %290 = OpAccessChain %279 %80 
                                                      OpStore %290 %289 
                               Private bool* %291 = OpAccessChain %273 %19 
                                        bool %292 = OpLoad %291 
                                         f32 %293 = OpSelect %292 %283 %284 
                                Private f32* %294 = OpAccessChain %279 %19 
                                                      OpStore %294 %293 
                               Private bool* %296 = OpAccessChain %273 %104 
                                        bool %297 = OpLoad %296 
                                         f32 %300 = OpSelect %297 %298 %299 
                                Private f32* %301 = OpAccessChain %295 %104 
                                                      OpStore %301 %300 
                               Private bool* %302 = OpAccessChain %273 %80 
                                        bool %303 = OpLoad %302 
                                         f32 %304 = OpSelect %303 %298 %299 
                                Private f32* %305 = OpAccessChain %295 %80 
                                                      OpStore %305 %304 
                               Private bool* %306 = OpAccessChain %273 %19 
                                        bool %307 = OpLoad %306 
                                         f32 %308 = OpSelect %307 %298 %299 
                                Private f32* %309 = OpAccessChain %295 %19 
                                                      OpStore %309 %308 
                               Private bool* %310 = OpAccessChain %273 %201 
                                        bool %311 = OpLoad %310 
                                         f32 %312 = OpSelect %311 %298 %299 
                                Private f32* %313 = OpAccessChain %295 %201 
                                                      OpStore %313 %312 
                                       f32_3 %314 = OpLoad %279 
                                       f32_4 %315 = OpLoad %295 
                                       f32_3 %316 = OpVectorShuffle %315 %315 1 2 3 
                                       f32_3 %317 = OpFAdd %314 %316 
                                                      OpStore %279 %317 
                                       f32_3 %318 = OpLoad %279 
                                       f32_3 %320 = OpExtInst %1 40 %318 %319 
                                       f32_4 %321 = OpLoad %295 
                                       f32_4 %322 = OpVectorShuffle %321 %320 0 4 5 6 
                                                      OpStore %295 %322 
                                       f32_4 %323 = OpLoad %295 
                                         f32 %328 = OpDot %323 %327 
                                Private f32* %329 = OpAccessChain %279 %104 
                                                      OpStore %329 %328 
                                Private f32* %330 = OpAccessChain %279 %104 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpFNegate %331 
                                         f32 %333 = OpFAdd %332 %324 
                                Private f32* %334 = OpAccessChain %279 %104 
                                                      OpStore %334 %333 
                                Private f32* %337 = OpAccessChain %279 %104 
                                         f32 %338 = OpLoad %337 
                                         u32 %339 = OpConvertFToU %338 
                                                      OpStore %336 %339 
                                         u32 %342 = OpLoad %336 
                                         i32 %343 = OpBitcast %342 
                                         i32 %344 = OpShiftLeftLogical %343 %40 
                                                      OpStore %341 %344 
                                       f32_3 %345 = OpLoad %9 
                                       f32_4 %346 = OpVectorShuffle %345 %345 1 1 1 1 
                                         i32 %347 = OpLoad %341 
                                         i32 %348 = OpIAdd %347 %26 
                              Uniform f32_4* %349 = OpAccessChain %225 %25 %348 
                                       f32_4 %350 = OpLoad %349 
                                       f32_4 %351 = OpFMul %346 %350 
                                                      OpStore %56 %351 
                                         i32 %352 = OpLoad %341 
                              Uniform f32_4* %353 = OpAccessChain %225 %25 %352 
                                       f32_4 %354 = OpLoad %353 
                                       f32_3 %355 = OpLoad %9 
                                       f32_4 %356 = OpVectorShuffle %355 %355 0 0 0 0 
                                       f32_4 %357 = OpFMul %354 %356 
                                       f32_4 %358 = OpLoad %56 
                                       f32_4 %359 = OpFAdd %357 %358 
                                                      OpStore %56 %359 
                                         i32 %360 = OpLoad %341 
                                         i32 %361 = OpIAdd %360 %40 
                              Uniform f32_4* %362 = OpAccessChain %225 %25 %361 
                                       f32_4 %363 = OpLoad %362 
                                       f32_3 %364 = OpLoad %9 
                                       f32_4 %365 = OpVectorShuffle %364 %364 2 2 2 2 
                                       f32_4 %366 = OpFMul %363 %365 
                                       f32_4 %367 = OpLoad %56 
                                       f32_4 %368 = OpFAdd %366 %367 
                                                      OpStore %56 %368 
                                       f32_4 %370 = OpLoad %56 
                                         i32 %371 = OpLoad %341 
                                         i32 %372 = OpIAdd %371 %50 
                              Uniform f32_4* %373 = OpAccessChain %225 %25 %372 
                                       f32_4 %374 = OpLoad %373 
                                       f32_4 %375 = OpFAdd %370 %374 
                                                      OpStore vs_TEXCOORD7 %375 
                                 Output f32* %377 = OpAccessChain %84 %25 %80 
                                         f32 %378 = OpLoad %377 
                                         f32 %379 = OpFNegate %378 
                                 Output f32* %380 = OpAccessChain %84 %25 %80 
                                                      OpStore %380 %379 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 1143
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %91 %140 %259 %264 %271 %525 %1133 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate vs_TEXCOORD7 Location 12 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %28 DescriptorSet 28 
                                                      OpDecorate %28 Binding 28 
                                                      OpDecorate %29 RelaxedPrecision 
                                                      OpDecorate %32 RelaxedPrecision 
                                                      OpDecorate %32 DescriptorSet 32 
                                                      OpDecorate %32 Binding 32 
                                                      OpDecorate %33 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %44 ArrayStride 44 
                                                      OpMemberDecorate %45 0 Offset 45 
                                                      OpMemberDecorate %45 1 Offset 45 
                                                      OpMemberDecorate %45 2 Offset 45 
                                                      OpMemberDecorate %45 3 Offset 45 
                                                      OpMemberDecorate %45 4 Offset 45 
                                                      OpMemberDecorate %45 5 Offset 45 
                                                      OpMemberDecorate %45 6 RelaxedPrecision 
                                                      OpMemberDecorate %45 6 Offset 45 
                                                      OpMemberDecorate %45 7 RelaxedPrecision 
                                                      OpMemberDecorate %45 7 Offset 45 
                                                      OpMemberDecorate %45 8 RelaxedPrecision 
                                                      OpMemberDecorate %45 8 Offset 45 
                                                      OpMemberDecorate %45 9 RelaxedPrecision 
                                                      OpMemberDecorate %45 9 Offset 45 
                                                      OpMemberDecorate %45 10 RelaxedPrecision 
                                                      OpMemberDecorate %45 10 Offset 45 
                                                      OpMemberDecorate %45 11 Offset 45 
                                                      OpDecorate %45 Block 
                                                      OpDecorate %47 DescriptorSet 47 
                                                      OpDecorate %47 Binding 47 
                                                      OpDecorate %53 RelaxedPrecision 
                                                      OpDecorate %54 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %58 RelaxedPrecision 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %63 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD2 Location 91 
                                                      OpDecorate %112 ArrayStride 112 
                                                      OpDecorate %113 ArrayStride 113 
                                                      OpMemberDecorate %114 0 Offset 114 
                                                      OpMemberDecorate %114 1 RelaxedPrecision 
                                                      OpMemberDecorate %114 1 Offset 114 
                                                      OpMemberDecorate %114 2 RelaxedPrecision 
                                                      OpMemberDecorate %114 2 Offset 114 
                                                      OpMemberDecorate %114 3 Offset 114 
                                                      OpMemberDecorate %114 4 Offset 114 
                                                      OpDecorate %114 Block 
                                                      OpDecorate %116 DescriptorSet 116 
                                                      OpDecorate %116 Binding 116 
                                                      OpDecorate vs_TEXCOORD0 Location 140 
                                                      OpMemberDecorate %142 0 Offset 142 
                                                      OpMemberDecorate %142 1 Offset 142 
                                                      OpMemberDecorate %142 2 Offset 142 
                                                      OpMemberDecorate %142 3 Offset 142 
                                                      OpMemberDecorate %142 4 Offset 142 
                                                      OpMemberDecorate %142 5 Offset 142 
                                                      OpMemberDecorate %142 6 Offset 142 
                                                      OpMemberDecorate %142 7 Offset 142 
                                                      OpMemberDecorate %142 8 Offset 142 
                                                      OpMemberDecorate %142 9 Offset 142 
                                                      OpMemberDecorate %142 10 Offset 142 
                                                      OpDecorate %142 Block 
                                                      OpDecorate %144 DescriptorSet 144 
                                                      OpDecorate %144 Binding 144 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %157 DescriptorSet 157 
                                                      OpDecorate %157 Binding 157 
                                                      OpDecorate %158 RelaxedPrecision 
                                                      OpDecorate %159 RelaxedPrecision 
                                                      OpDecorate %159 DescriptorSet 159 
                                                      OpDecorate %159 Binding 159 
                                                      OpDecorate %160 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %168 DescriptorSet 168 
                                                      OpDecorate %168 Binding 168 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %170 DescriptorSet 170 
                                                      OpDecorate %170 Binding 170 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %186 DescriptorSet 186 
                                                      OpDecorate %186 Binding 186 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %188 DescriptorSet 188 
                                                      OpDecorate %188 Binding 188 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %249 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 259 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD3 Location 264 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 271 
                                                      OpDecorate %320 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %399 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %420 DescriptorSet 420 
                                                      OpDecorate %420 Binding 420 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %422 DescriptorSet 422 
                                                      OpDecorate %422 Binding 422 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %428 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %438 RelaxedPrecision 
                                                      OpDecorate %439 RelaxedPrecision 
                                                      OpDecorate %440 RelaxedPrecision 
                                                      OpDecorate %441 RelaxedPrecision 
                                                      OpDecorate %442 RelaxedPrecision 
                                                      OpDecorate %443 RelaxedPrecision 
                                                      OpDecorate %445 RelaxedPrecision 
                                                      OpDecorate %450 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %467 ArrayStride 467 
                                                      OpDecorate %468 ArrayStride 468 
                                                      OpDecorate %469 ArrayStride 469 
                                                      OpMemberDecorate %470 0 Offset 470 
                                                      OpMemberDecorate %470 1 Offset 470 
                                                      OpMemberDecorate %470 2 Offset 470 
                                                      OpMemberDecorate %470 3 RelaxedPrecision 
                                                      OpMemberDecorate %470 3 Offset 470 
                                                      OpMemberDecorate %470 4 RelaxedPrecision 
                                                      OpMemberDecorate %470 4 Offset 470 
                                                      OpMemberDecorate %470 5 RelaxedPrecision 
                                                      OpMemberDecorate %470 5 Offset 470 
                                                      OpMemberDecorate %470 6 Offset 470 
                                                      OpMemberDecorate %470 7 RelaxedPrecision 
                                                      OpMemberDecorate %470 7 Offset 470 
                                                      OpMemberDecorate %470 8 Offset 470 
                                                      OpMemberDecorate %470 9 Offset 470 
                                                      OpMemberDecorate %470 10 RelaxedPrecision 
                                                      OpMemberDecorate %470 10 Offset 470 
                                                      OpMemberDecorate %470 11 RelaxedPrecision 
                                                      OpMemberDecorate %470 11 Offset 470 
                                                      OpMemberDecorate %470 12 RelaxedPrecision 
                                                      OpMemberDecorate %470 12 Offset 470 
                                                      OpMemberDecorate %470 13 RelaxedPrecision 
                                                      OpMemberDecorate %470 13 Offset 470 
                                                      OpMemberDecorate %470 14 RelaxedPrecision 
                                                      OpMemberDecorate %470 14 Offset 470 
                                                      OpMemberDecorate %470 15 RelaxedPrecision 
                                                      OpMemberDecorate %470 15 Offset 470 
                                                      OpMemberDecorate %470 16 RelaxedPrecision 
                                                      OpMemberDecorate %470 16 Offset 470 
                                                      OpDecorate %470 Block 
                                                      OpDecorate %472 DescriptorSet 472 
                                                      OpDecorate %472 Binding 472 
                                                      OpDecorate %474 RelaxedPrecision 
                                                      OpDecorate %475 RelaxedPrecision 
                                                      OpDecorate %478 RelaxedPrecision 
                                                      OpDecorate %505 RelaxedPrecision 
                                                      OpDecorate %522 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 525 
                                                      OpDecorate %529 ArrayStride 529 
                                                      OpDecorate %530 ArrayStride 530 
                                                      OpDecorate %531 ArrayStride 531 
                                                      OpDecorate %532 ArrayStride 532 
                                                      OpDecorate %533 ArrayStride 533 
                                                      OpMemberDecorate %534 0 Offset 534 
                                                      OpMemberDecorate %534 1 RelaxedPrecision 
                                                      OpMemberDecorate %534 1 Offset 534 
                                                      OpMemberDecorate %534 2 RelaxedPrecision 
                                                      OpMemberDecorate %534 2 Offset 534 
                                                      OpMemberDecorate %534 3 RelaxedPrecision 
                                                      OpMemberDecorate %534 3 Offset 534 
                                                      OpMemberDecorate %534 4 RelaxedPrecision 
                                                      OpMemberDecorate %534 4 Offset 534 
                                                      OpDecorate %534 Block 
                                                      OpDecorate %536 DescriptorSet 536 
                                                      OpDecorate %536 Binding 536 
                                                      OpDecorate %566 RelaxedPrecision 
                                                      OpDecorate %570 RelaxedPrecision 
                                                      OpDecorate %579 RelaxedPrecision 
                                                      OpDecorate %580 RelaxedPrecision 
                                                      OpDecorate %583 RelaxedPrecision 
                                                      OpDecorate %586 RelaxedPrecision 
                                                      OpDecorate %587 RelaxedPrecision 
                                                      OpDecorate %590 RelaxedPrecision 
                                                      OpDecorate %591 RelaxedPrecision 
                                                      OpDecorate %592 RelaxedPrecision 
                                                      OpDecorate %593 RelaxedPrecision 
                                                      OpDecorate %594 RelaxedPrecision 
                                                      OpDecorate %595 RelaxedPrecision 
                                                      OpDecorate %596 RelaxedPrecision 
                                                      OpDecorate %598 RelaxedPrecision 
                                                      OpDecorate %607 RelaxedPrecision 
                                                      OpDecorate %608 RelaxedPrecision 
                                                      OpDecorate %609 RelaxedPrecision 
                                                      OpDecorate %614 RelaxedPrecision 
                                                      OpDecorate %615 RelaxedPrecision 
                                                      OpDecorate %622 RelaxedPrecision 
                                                      OpDecorate %623 RelaxedPrecision 
                                                      OpDecorate %624 RelaxedPrecision 
                                                      OpDecorate %625 RelaxedPrecision 
                                                      OpDecorate %626 RelaxedPrecision 
                                                      OpDecorate %627 RelaxedPrecision 
                                                      OpDecorate %628 RelaxedPrecision 
                                                      OpDecorate %629 RelaxedPrecision 
                                                      OpDecorate %632 RelaxedPrecision 
                                                      OpDecorate %635 RelaxedPrecision 
                                                      OpDecorate %636 RelaxedPrecision 
                                                      OpDecorate %637 RelaxedPrecision 
                                                      OpDecorate %638 RelaxedPrecision 
                                                      OpDecorate %640 RelaxedPrecision 
                                                      OpDecorate %641 RelaxedPrecision 
                                                      OpDecorate %644 RelaxedPrecision 
                                                      OpDecorate %645 RelaxedPrecision 
                                                      OpDecorate %646 RelaxedPrecision 
                                                      OpDecorate %687 RelaxedPrecision 
                                                      OpDecorate %689 RelaxedPrecision 
                                                      OpDecorate %690 RelaxedPrecision 
                                                      OpDecorate %691 RelaxedPrecision 
                                                      OpDecorate %693 RelaxedPrecision 
                                                      OpDecorate %695 RelaxedPrecision 
                                                      OpDecorate %696 RelaxedPrecision 
                                                      OpDecorate %697 RelaxedPrecision 
                                                      OpDecorate %700 RelaxedPrecision 
                                                      OpDecorate %716 RelaxedPrecision 
                                                      OpDecorate %718 RelaxedPrecision 
                                                      OpDecorate %727 RelaxedPrecision 
                                                      OpDecorate %729 RelaxedPrecision 
                                                      OpDecorate %730 RelaxedPrecision 
                                                      OpDecorate %733 RelaxedPrecision 
                                                      OpDecorate %736 RelaxedPrecision 
                                                      OpDecorate %741 RelaxedPrecision 
                                                      OpDecorate %752 RelaxedPrecision 
                                                      OpDecorate %754 RelaxedPrecision 
                                                      OpDecorate %755 RelaxedPrecision 
                                                      OpDecorate %756 RelaxedPrecision 
                                                      OpDecorate %761 RelaxedPrecision 
                                                      OpDecorate %765 RelaxedPrecision 
                                                      OpDecorate %771 RelaxedPrecision 
                                                      OpDecorate %777 RelaxedPrecision 
                                                      OpDecorate %786 RelaxedPrecision 
                                                      OpDecorate %789 RelaxedPrecision 
                                                      OpDecorate %790 RelaxedPrecision 
                                                      OpDecorate %791 RelaxedPrecision 
                                                      OpDecorate %795 RelaxedPrecision 
                                                      OpDecorate %796 RelaxedPrecision 
                                                      OpDecorate %797 RelaxedPrecision 
                                                      OpDecorate %801 RelaxedPrecision 
                                                      OpDecorate %802 RelaxedPrecision 
                                                      OpDecorate %803 RelaxedPrecision 
                                                      OpDecorate %815 RelaxedPrecision 
                                                      OpDecorate %816 RelaxedPrecision 
                                                      OpDecorate %820 RelaxedPrecision 
                                                      OpDecorate %821 RelaxedPrecision 
                                                      OpDecorate %822 RelaxedPrecision 
                                                      OpDecorate %823 RelaxedPrecision 
                                                      OpDecorate %824 RelaxedPrecision 
                                                      OpDecorate %825 RelaxedPrecision 
                                                      OpDecorate %826 RelaxedPrecision 
                                                      OpDecorate %827 RelaxedPrecision 
                                                      OpDecorate %828 RelaxedPrecision 
                                                      OpDecorate %829 RelaxedPrecision 
                                                      OpDecorate %830 RelaxedPrecision 
                                                      OpDecorate %832 RelaxedPrecision 
                                                      OpDecorate %833 RelaxedPrecision 
                                                      OpDecorate %834 RelaxedPrecision 
                                                      OpDecorate %835 RelaxedPrecision 
                                                      OpDecorate %864 RelaxedPrecision 
                                                      OpDecorate %865 RelaxedPrecision 
                                                      OpDecorate %867 RelaxedPrecision 
                                                      OpDecorate %868 RelaxedPrecision 
                                                      OpDecorate %872 RelaxedPrecision 
                                                      OpDecorate %873 RelaxedPrecision 
                                                      OpDecorate %875 RelaxedPrecision 
                                                      OpDecorate %877 RelaxedPrecision 
                                                      OpDecorate %879 RelaxedPrecision 
                                                      OpDecorate %880 RelaxedPrecision 
                                                      OpDecorate %881 RelaxedPrecision 
                                                      OpDecorate %884 RelaxedPrecision 
                                                      OpDecorate %886 RelaxedPrecision 
                                                      OpDecorate %887 RelaxedPrecision 
                                                      OpDecorate %888 RelaxedPrecision 
                                                      OpDecorate %888 DescriptorSet 888 
                                                      OpDecorate %888 Binding 888 
                                                      OpDecorate %889 RelaxedPrecision 
                                                      OpDecorate %890 RelaxedPrecision 
                                                      OpDecorate %890 DescriptorSet 890 
                                                      OpDecorate %890 Binding 890 
                                                      OpDecorate %891 RelaxedPrecision 
                                                      OpDecorate %893 RelaxedPrecision 
                                                      OpDecorate %894 RelaxedPrecision 
                                                      OpDecorate %895 RelaxedPrecision 
                                                      OpDecorate %896 RelaxedPrecision 
                                                      OpDecorate %897 RelaxedPrecision 
                                                      OpDecorate %899 RelaxedPrecision 
                                                      OpDecorate %901 RelaxedPrecision 
                                                      OpDecorate %902 RelaxedPrecision 
                                                      OpDecorate %903 RelaxedPrecision 
                                                      OpDecorate %953 RelaxedPrecision 
                                                      OpDecorate %954 RelaxedPrecision 
                                                      OpDecorate %965 RelaxedPrecision 
                                                      OpDecorate %976 RelaxedPrecision 
                                                      OpDecorate %977 RelaxedPrecision 
                                                      OpDecorate %978 RelaxedPrecision 
                                                      OpDecorate %979 RelaxedPrecision 
                                                      OpDecorate %982 RelaxedPrecision 
                                                      OpDecorate %986 RelaxedPrecision 
                                                      OpDecorate %989 RelaxedPrecision 
                                                      OpDecorate %990 RelaxedPrecision 
                                                      OpDecorate %1056 RelaxedPrecision 
                                                      OpDecorate %1082 RelaxedPrecision 
                                                      OpDecorate %1090 RelaxedPrecision 
                                                      OpDecorate %1091 RelaxedPrecision 
                                                      OpDecorate %1092 RelaxedPrecision 
                                                      OpDecorate %1093 RelaxedPrecision 
                                                      OpDecorate %1094 RelaxedPrecision 
                                                      OpDecorate %1095 RelaxedPrecision 
                                                      OpDecorate %1115 RelaxedPrecision 
                                                      OpDecorate %1116 RelaxedPrecision 
                                                      OpDecorate %1117 RelaxedPrecision 
                                                      OpDecorate %1120 RelaxedPrecision 
                                                      OpDecorate %1122 RelaxedPrecision 
                                                      OpDecorate %1123 RelaxedPrecision 
                                                      OpDecorate %1124 RelaxedPrecision 
                                                      OpDecorate %1125 RelaxedPrecision 
                                                      OpDecorate %1126 RelaxedPrecision 
                                                      OpDecorate %1129 RelaxedPrecision 
                                                      OpDecorate %1130 RelaxedPrecision 
                                                      OpDecorate %1131 RelaxedPrecision 
                                                      OpDecorate %1133 RelaxedPrecision 
                                                      OpDecorate %1133 Location 1133 
                                                      OpDecorate %1134 RelaxedPrecision 
                                                      OpDecorate %1135 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Function %7 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                        Input f32_4* vs_TEXCOORD7 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 2 
                                              %18 = OpTypePointer Input %6 
                                              %24 = OpTypePointer Private %6 
                                 Private f32* %25 = OpVariable Private 
                                              %26 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %27 = OpTypePointer UniformConstant %26 
         UniformConstant read_only Texture2D* %28 = OpVariable UniformConstant 
                                              %30 = OpTypeSampler 
                                              %31 = OpTypePointer UniformConstant %30 
                     UniformConstant sampler* %32 = OpVariable UniformConstant 
                                              %34 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                              %35 = OpTypeSampledImage %34 
                                          f32 %38 = OpConstant 3.674022E-40 
                                              %41 = OpTypePointer Private %10 
                               Private f32_4* %42 = OpVariable Private 
                                          u32 %43 = OpConstant 20 
                                              %44 = OpTypeArray %10 %43 
                                              %45 = OpTypeStruct %44 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 
                                              %46 = OpTypePointer Uniform %45 
Uniform struct {f32_4[20]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %47 = OpVariable Uniform 
                                              %48 = OpTypeInt 32 1 
                                          i32 %49 = OpConstant 10 
                                          u32 %50 = OpConstant 0 
                                              %51 = OpTypePointer Uniform %6 
                                          f32 %55 = OpConstant 3.674022E-40 
                                              %66 = OpTypeBool 
                                              %67 = OpTypePointer Private %66 
                                Private bool* %68 = OpVariable Private 
                                Private bool* %72 = OpVariable Private 
                                              %80 = OpTypePointer Function %6 
                               Private f32_4* %89 = OpVariable Private 
                                              %90 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                             %100 = OpTypePointer Private %7 
                              Private f32_3* %101 = OpVariable Private 
                              Private f32_3* %106 = OpVariable Private 
                                         u32 %111 = OpConstant 4 
                                             %112 = OpTypeArray %10 %111 
                                             %113 = OpTypeArray %10 %111 
                                             %114 = OpTypeStruct %10 %10 %10 %112 %113 
                                             %115 = OpTypePointer Uniform %114 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_4[4];}* %116 = OpVariable Uniform 
                                         i32 %117 = OpConstant 0 
                                             %118 = OpTypePointer Uniform %10 
                                Private f32* %127 = OpVariable Private 
                              Private f32_4* %131 = OpVariable Private 
                              Private f32_3* %138 = OpVariable Private 
                                             %139 = OpTypePointer Input %13 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                             %142 = OpTypeStruct %6 %10 %10 %6 %6 %7 %10 %6 %6 %6 %6 
                                             %143 = OpTypePointer Uniform %142 
Uniform struct {f32; f32_4; f32_4; f32; f32; f32_3; f32_4; f32; f32; f32; f32;}* %144 = OpVariable Uniform 
                                         i32 %145 = OpConstant 1 
                              Private f32_3* %156 = OpVariable Private 
        UniformConstant read_only Texture2D* %157 = OpVariable UniformConstant 
                    UniformConstant sampler* %159 = OpVariable UniformConstant 
                                             %161 = OpTypeSampledImage %26 
                              Private f32_3* %167 = OpVariable Private 
        UniformConstant read_only Texture2D* %168 = OpVariable UniformConstant 
                    UniformConstant sampler* %170 = OpVariable UniformConstant 
                              Private f32_3* %177 = OpVariable Private 
                                         f32 %179 = OpConstant 3.674022E-40 
                                       f32_3 %180 = OpConstantComposite %179 %179 %179 
                                         f32 %182 = OpConstant 3.674022E-40 
                                       f32_3 %183 = OpConstantComposite %182 %182 %182 
                              Private f32_4* %185 = OpVariable Private 
        UniformConstant read_only Texture2D* %186 = OpVariable UniformConstant 
                    UniformConstant sampler* %188 = OpVariable UniformConstant 
                                         u32 %194 = OpConstant 1 
                                         i32 %197 = OpConstant 3 
                              Private f32_3* %202 = OpVariable Private 
                                         f32 %215 = OpConstant 3.674022E-40 
                              Private f32_3* %218 = OpVariable Private 
                              Private f32_3* %223 = OpVariable Private 
                                         i32 %225 = OpConstant 2 
                                         f32 %231 = OpConstant 3.674022E-40 
                                       f32_3 %232 = OpConstantComposite %231 %231 %231 
                                         f32 %238 = OpConstant 3.674022E-40 
                                       f32_3 %239 = OpConstantComposite %238 %238 %238 
                              Private f32_3* %241 = OpVariable Private 
                                         f32 %244 = OpConstant 3.674022E-40 
                                         f32 %246 = OpConstant 3.674022E-40 
                        Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                Private f32* %276 = OpVariable Private 
                              Private f32_4* %282 = OpVariable Private 
                                         f32 %296 = OpConstant 3.674022E-40 
                                         f32 %313 = OpConstant 3.674022E-40 
                                       f32_3 %314 = OpConstantComposite %313 %296 %296 
                                Private f32* %318 = OpVariable Private 
                                         f32 %334 = OpConstant 3.674022E-40 
                                Private f32* %393 = OpVariable Private 
                                Private f32* %403 = OpVariable Private 
                              Private f32_3* %419 = OpVariable Private 
        UniformConstant read_only Texture2D* %420 = OpVariable UniformConstant 
                    UniformConstant sampler* %422 = OpVariable UniformConstant 
                              Private f32_3* %429 = OpVariable Private 
                                         i32 %431 = OpConstant 4 
                              Private f32_3* %450 = OpVariable Private 
                                             %467 = OpTypeArray %10 %111 
                                             %468 = OpTypeArray %10 %111 
                                             %469 = OpTypeArray %10 %17 
                                             %470 = OpTypeStruct %467 %468 %10 %10 %10 %469 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 
                                             %471 = OpTypePointer Uniform %470 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4; f32_4[2]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %472 = OpVariable Uniform 
                                             %476 = OpTypePointer Private %48 
                                Private i32* %477 = OpVariable Private 
                                             %481 = OpTypePointer Function %16 
                                Private i32* %492 = OpVariable Private 
                                         u32 %494 = OpConstant 3 
                                             %497 = OpTypePointer Private %16 
                                Private u32* %498 = OpVariable Private 
                                         i32 %501 = OpConstant 5 
                                             %506 = OpTypeVector %16 4 
                                             %507 = OpTypeArray %506 %111 
                                         u32 %508 = OpConstant 1065353216 
                                       u32_4 %509 = OpConstantComposite %508 %50 %50 %50 
                                       u32_4 %510 = OpConstantComposite %50 %508 %50 %50 
                                       u32_4 %511 = OpConstantComposite %50 %50 %508 %50 
                                       u32_4 %512 = OpConstantComposite %50 %50 %50 %508 
                                    u32_4[4] %513 = OpConstantComposite %509 %510 %511 %512 
                                             %515 = OpTypePointer Function %507 
                                             %517 = OpTypePointer Function %506 
                              Private f32_3* %524 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD5 = OpVariable Input 
                                         u32 %528 = OpConstant 32 
                                             %529 = OpTypeArray %10 %528 
                                             %530 = OpTypeArray %10 %528 
                                             %531 = OpTypeArray %10 %528 
                                             %532 = OpTypeArray %10 %528 
                                             %533 = OpTypeArray %10 %528 
                                             %534 = OpTypeStruct %529 %530 %531 %532 %533 
                                             %535 = OpTypePointer Uniform %534 
Uniform struct {f32_4[32]; f32_4[32]; f32_4[32]; f32_4[32]; f32_4[32];}* %536 = OpVariable Uniform 
                                Private f32* %547 = OpVariable Private 
                                         f32 %552 = OpConstant 3.674022E-40 
                                Private f32* %554 = OpVariable Private 
                              Private f32_3* %607 = OpVariable Private 
                              Private f32_3* %628 = OpVariable Private 
                                Private f32* %691 = OpVariable Private 
                                         f32 %702 = OpConstant 3.674022E-40 
                                         f32 %717 = OpConstant 3.674022E-40 
                                         f32 %728 = OpConstant 3.674022E-40 
                                         f32 %749 = OpConstant 3.674022E-40 
                                       f32_3 %750 = OpConstantComposite %749 %749 %749 
                                         i32 %769 = OpConstant 11 
                                         i32 %775 = OpConstant 12 
                              Private f32_3* %786 = OpVariable Private 
                                         i32 %787 = OpConstant 13 
                                         i32 %793 = OpConstant 14 
                                         i32 %799 = OpConstant 15 
                                         i32 %818 = OpConstant 16 
                                       f32_3 %831 = OpConstantComposite %38 %38 %38 
                                       f32_2 %866 = OpConstantComposite %334 %334 
                                         f32 %874 = OpConstant 3.674022E-40 
                                         f32 %876 = OpConstant 3.674022E-40 
                                         f32 %885 = OpConstant 3.674022E-40 
                              Private f32_3* %887 = OpVariable Private 
        UniformConstant read_only Texture2D* %888 = OpVariable UniformConstant 
                    UniformConstant sampler* %890 = OpVariable UniformConstant 
                                Private f32* %939 = OpVariable Private 
                                             %997 = OpTypePointer Uniform %7 
                                        i32 %1058 = OpConstant 8 
                                        i32 %1066 = OpConstant 7 
                                        i32 %1077 = OpConstant 6 
                                        i32 %1083 = OpConstant 9 
                                      f32_3 %1104 = OpConstantComposite %874 %874 %874 
                                        f32 %1108 = OpConstant 3.674022E-40 
                                      f32_3 %1109 = OpConstantComposite %1108 %1108 %1108 
                                        f32 %1127 = OpConstant 3.674022E-40 
                                      f32_3 %1128 = OpConstantComposite %1127 %1127 %1127 
                                            %1132 = OpTypePointer Output %10 
                              Output f32_4* %1133 = OpVariable Output 
                                            %1138 = OpTypePointer Output %6 
                              Private bool* %1141 = OpVariable Private 
                               Private u32* %1142 = OpVariable Private 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32_3* %9 = OpVariable Function 
                                Function f32* %81 = OpVariable Function 
                               Function u32* %482 = OpVariable Function 
                          Function u32_4[4]* %516 = OpVariable Function 
                                        f32_4 %14 = OpLoad vs_TEXCOORD7 
                                        f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                                   Input f32* %19 = OpAccessChain vs_TEXCOORD7 %17 
                                          f32 %20 = OpLoad %19 
                                          f32 %21 = OpCompositeExtract %15 0 
                                          f32 %22 = OpCompositeExtract %15 1 
                                        f32_3 %23 = OpCompositeConstruct %21 %22 %20 
                                                      OpStore %9 %23 
                          read_only Texture2D %29 = OpLoad %28 
                                      sampler %33 = OpLoad %32 
                   read_only Texture2DSampled %36 = OpSampledImage %29 %33 
                                        f32_3 %37 = OpLoad %9 
                                          f32 %39 = OpCompositeExtract %37 2 
                                          f32 %40 = OpImageSampleDrefExplicitLod %36 %37 %39 Lod %6 
                                                      OpStore %25 %40 
                                 Uniform f32* %52 = OpAccessChain %47 %49 %50 
                                          f32 %53 = OpLoad %52 
                                          f32 %54 = OpFNegate %53 
                                          f32 %56 = OpFAdd %54 %55 
                                 Private f32* %57 = OpAccessChain %42 %50 
                                                      OpStore %57 %56 
                                          f32 %58 = OpLoad %25 
                                 Uniform f32* %59 = OpAccessChain %47 %49 %50 
                                          f32 %60 = OpLoad %59 
                                          f32 %61 = OpFMul %58 %60 
                                 Private f32* %62 = OpAccessChain %42 %50 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpFAdd %61 %63 
                                 Private f32* %65 = OpAccessChain %42 %50 
                                                      OpStore %65 %64 
                                   Input f32* %69 = OpAccessChain vs_TEXCOORD7 %17 
                                          f32 %70 = OpLoad %69 
                                         bool %71 = OpFOrdGreaterThanEqual %38 %70 
                                                      OpStore %68 %71 
                                   Input f32* %73 = OpAccessChain vs_TEXCOORD7 %17 
                                          f32 %74 = OpLoad %73 
                                         bool %75 = OpFOrdGreaterThanEqual %74 %55 
                                                      OpStore %72 %75 
                                         bool %76 = OpLoad %72 
                                         bool %77 = OpLoad %68 
                                         bool %78 = OpLogicalOr %76 %77 
                                                      OpStore %68 %78 
                                         bool %79 = OpLoad %68 
                                                      OpSelectionMerge %83 None 
                                                      OpBranchConditional %79 %82 %84 
                                              %82 = OpLabel 
                                                      OpStore %81 %55 
                                                      OpBranch %83 
                                              %84 = OpLabel 
                                 Private f32* %85 = OpAccessChain %42 %50 
                                          f32 %86 = OpLoad %85 
                                                      OpStore %81 %86 
                                                      OpBranch %83 
                                              %83 = OpLabel 
                                          f32 %87 = OpLoad %81 
                                 Private f32* %88 = OpAccessChain %42 %50 
                                                      OpStore %88 %87 
                                        f32_3 %92 = OpLoad vs_TEXCOORD2 
                                        f32_3 %93 = OpLoad vs_TEXCOORD2 
                                          f32 %94 = OpDot %92 %93 
                                 Private f32* %95 = OpAccessChain %89 %50 
                                                      OpStore %95 %94 
                                 Private f32* %96 = OpAccessChain %89 %50 
                                          f32 %97 = OpLoad %96 
                                          f32 %98 = OpExtInst %1 32 %97 
                                 Private f32* %99 = OpAccessChain %89 %50 
                                                      OpStore %99 %98 
                                       f32_4 %102 = OpLoad %89 
                                       f32_3 %103 = OpVectorShuffle %102 %102 0 0 0 
                                       f32_3 %104 = OpLoad vs_TEXCOORD2 
                                       f32_3 %105 = OpFMul %103 %104 
                                                      OpStore %101 %105 
                                       f32_3 %107 = OpLoad vs_TEXCOORD2 
                                       f32_4 %108 = OpLoad %89 
                                       f32_3 %109 = OpVectorShuffle %108 %108 0 0 0 
                                       f32_3 %110 = OpFMul %107 %109 
                              Uniform f32_4* %119 = OpAccessChain %116 %117 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_3 %122 = OpFAdd %110 %121 
                                                      OpStore %106 %122 
                                       f32_3 %123 = OpLoad %106 
                                       f32_3 %124 = OpLoad %106 
                                         f32 %125 = OpDot %123 %124 
                                Private f32* %126 = OpAccessChain %89 %50 
                                                      OpStore %126 %125 
                                Private f32* %128 = OpAccessChain %89 %50 
                                         f32 %129 = OpLoad %128 
                                         f32 %130 = OpExtInst %1 32 %129 
                                                      OpStore %127 %130 
                                         f32 %132 = OpLoad %127 
                                       f32_3 %133 = OpCompositeConstruct %132 %132 %132 
                                       f32_3 %134 = OpLoad %106 
                                       f32_3 %135 = OpFMul %133 %134 
                                       f32_4 %136 = OpLoad %131 
                                       f32_4 %137 = OpVectorShuffle %136 %135 4 5 6 3 
                                                      OpStore %131 %137 
                                       f32_2 %141 = OpLoad vs_TEXCOORD0 
                              Uniform f32_4* %146 = OpAccessChain %144 %145 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 1 
                                       f32_2 %149 = OpFMul %141 %148 
                              Uniform f32_4* %150 = OpAccessChain %144 %145 
                                       f32_4 %151 = OpLoad %150 
                                       f32_2 %152 = OpVectorShuffle %151 %151 2 3 
                                       f32_2 %153 = OpFAdd %149 %152 
                                       f32_3 %154 = OpLoad %138 
                                       f32_3 %155 = OpVectorShuffle %154 %153 3 4 2 
                                                      OpStore %138 %155 
                         read_only Texture2D %158 = OpLoad %157 
                                     sampler %160 = OpLoad %159 
                  read_only Texture2DSampled %162 = OpSampledImage %158 %160 
                                       f32_3 %163 = OpLoad %138 
                                       f32_2 %164 = OpVectorShuffle %163 %163 0 1 
                                       f32_4 %165 = OpImageSampleImplicitLod %162 %164 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                                      OpStore %156 %166 
                         read_only Texture2D %169 = OpLoad %168 
                                     sampler %171 = OpLoad %170 
                  read_only Texture2DSampled %172 = OpSampledImage %169 %171 
                                       f32_3 %173 = OpLoad %138 
                                       f32_2 %174 = OpVectorShuffle %173 %173 0 1 
                                       f32_4 %175 = OpImageSampleImplicitLod %172 %174 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                                      OpStore %167 %176 
                                       f32_3 %178 = OpLoad %167 
                                       f32_3 %181 = OpFMul %178 %180 
                                       f32_3 %184 = OpFAdd %181 %183 
                                                      OpStore %177 %184 
                         read_only Texture2D %187 = OpLoad %186 
                                     sampler %189 = OpLoad %188 
                  read_only Texture2DSampled %190 = OpSampledImage %187 %189 
                                       f32_3 %191 = OpLoad %138 
                                       f32_2 %192 = OpVectorShuffle %191 %191 0 1 
                                       f32_4 %193 = OpImageSampleImplicitLod %190 %192 
                                                      OpStore %185 %193 
                                Private f32* %195 = OpAccessChain %185 %194 
                                         f32 %196 = OpLoad %195 
                                Uniform f32* %198 = OpAccessChain %144 %197 
                                         f32 %199 = OpLoad %198 
                                         f32 %200 = OpFNegate %199 
                                         f32 %201 = OpFAdd %196 %200 
                                                      OpStore %127 %201 
                                         f32 %203 = OpLoad %127 
                                         f32 %204 = OpFNegate %203 
                                         f32 %205 = OpFAdd %204 %55 
                                Private f32* %206 = OpAccessChain %202 %50 
                                                      OpStore %206 %205 
                                Private f32* %207 = OpAccessChain %202 %50 
                                         f32 %208 = OpLoad %207 
                                Private f32* %209 = OpAccessChain %202 %50 
                                         f32 %210 = OpLoad %209 
                                         f32 %211 = OpFMul %208 %210 
                                Private f32* %212 = OpAccessChain %202 %50 
                                                      OpStore %212 %211 
                                Private f32* %213 = OpAccessChain %202 %50 
                                         f32 %214 = OpLoad %213 
                                         f32 %216 = OpExtInst %1 40 %214 %215 
                                Private f32* %217 = OpAccessChain %202 %50 
                                                      OpStore %217 %216 
                                       f32_3 %219 = OpLoad %156 
                                       f32_4 %220 = OpLoad %185 
                                       f32_3 %221 = OpVectorShuffle %220 %220 2 2 2 
                                       f32_3 %222 = OpFMul %219 %221 
                                                      OpStore %218 %222 
                                       f32_3 %224 = OpLoad %218 
                              Uniform f32_4* %226 = OpAccessChain %144 %225 
                                       f32_4 %227 = OpLoad %226 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                       f32_3 %229 = OpFMul %224 %228 
                                                      OpStore %223 %229 
                                       f32_3 %230 = OpLoad %156 
                                       f32_3 %233 = OpFAdd %230 %232 
                                                      OpStore %218 %233 
                                       f32_4 %234 = OpLoad %185 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 0 0 
                                       f32_3 %236 = OpLoad %218 
                                       f32_3 %237 = OpFMul %235 %236 
                                       f32_3 %240 = OpFAdd %237 %239 
                                                      OpStore %218 %240 
                                Private f32* %242 = OpAccessChain %185 %50 
                                         f32 %243 = OpLoad %242 
                                         f32 %245 = OpFMul %243 %244 
                                         f32 %247 = OpFAdd %245 %246 
                                Private f32* %248 = OpAccessChain %241 %50 
                                                      OpStore %248 %247 
                                       f32_3 %249 = OpLoad %156 
                                       f32_3 %250 = OpLoad %241 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 0 0 
                                       f32_3 %252 = OpFMul %249 %251 
                                                      OpStore %241 %252 
                                       f32_4 %253 = OpLoad %185 
                                       f32_3 %254 = OpVectorShuffle %253 %253 3 3 3 
                                       f32_3 %255 = OpLoad %241 
                                       f32_3 %256 = OpFMul %254 %255 
                                                      OpStore %241 %256 
                                       f32_3 %257 = OpLoad %177 
                                       f32_3 %258 = OpVectorShuffle %257 %257 1 1 1 
                                       f32_3 %260 = OpLoad vs_TEXCOORD4 
                                       f32_3 %261 = OpFMul %258 %260 
                                                      OpStore %138 %261 
                                       f32_3 %262 = OpLoad %177 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 0 0 
                                       f32_3 %265 = OpLoad vs_TEXCOORD3 
                                       f32_3 %266 = OpFMul %263 %265 
                                       f32_3 %267 = OpLoad %138 
                                       f32_3 %268 = OpFAdd %266 %267 
                                                      OpStore %138 %268 
                                       f32_3 %269 = OpLoad %177 
                                       f32_3 %270 = OpVectorShuffle %269 %269 2 2 2 
                                       f32_3 %272 = OpLoad vs_TEXCOORD1 
                                       f32_3 %273 = OpFMul %270 %272 
                                       f32_3 %274 = OpLoad %138 
                                       f32_3 %275 = OpFAdd %273 %274 
                                                      OpStore %138 %275 
                                       f32_3 %277 = OpLoad %138 
                                       f32_3 %278 = OpLoad %138 
                                         f32 %279 = OpDot %277 %278 
                                                      OpStore %276 %279 
                                         f32 %280 = OpLoad %276 
                                         f32 %281 = OpExtInst %1 32 %280 
                                                      OpStore %276 %281 
                                         f32 %283 = OpLoad %276 
                                       f32_3 %284 = OpCompositeConstruct %283 %283 %283 
                                       f32_3 %285 = OpLoad %138 
                                       f32_3 %286 = OpFMul %284 %285 
                                       f32_4 %287 = OpLoad %282 
                                       f32_4 %288 = OpVectorShuffle %287 %286 4 5 6 3 
                                                      OpStore %282 %288 
                                       f32_4 %289 = OpLoad %282 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 1 2 
                              Uniform f32_4* %291 = OpAccessChain %116 %117 
                                       f32_4 %292 = OpLoad %291 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
                                         f32 %294 = OpDot %290 %293 
                                                      OpStore %276 %294 
                                         f32 %295 = OpLoad %276 
                                         f32 %297 = OpExtInst %1 40 %295 %296 
                                Private f32* %298 = OpAccessChain %138 %50 
                                                      OpStore %298 %297 
                                       f32_4 %299 = OpLoad %282 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
                                       f32_3 %301 = OpLoad %101 
                                         f32 %302 = OpDot %300 %301 
                                Private f32* %303 = OpAccessChain %89 %194 
                                                      OpStore %303 %302 
                              Uniform f32_4* %304 = OpAccessChain %116 %117 
                                       f32_4 %305 = OpLoad %304 
                                       f32_3 %306 = OpVectorShuffle %305 %305 0 1 2 
                                       f32_4 %307 = OpLoad %131 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
                                         f32 %309 = OpDot %306 %308 
                                Private f32* %310 = OpAccessChain %89 %17 
                                                      OpStore %310 %309 
                                       f32_4 %311 = OpLoad %89 
                                       f32_3 %312 = OpVectorShuffle %311 %311 0 1 2 
                                       f32_3 %315 = OpExtInst %1 40 %312 %314 
                                       f32_4 %316 = OpLoad %89 
                                       f32_4 %317 = OpVectorShuffle %316 %315 4 5 6 3 
                                                      OpStore %89 %317 
                                Private f32* %319 = OpAccessChain %202 %50 
                                         f32 %320 = OpLoad %319 
                                Private f32* %321 = OpAccessChain %202 %50 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpFAdd %320 %322 
                                                      OpStore %318 %323 
                                Private f32* %324 = OpAccessChain %89 %17 
                                         f32 %325 = OpLoad %324 
                                Private f32* %326 = OpAccessChain %89 %17 
                                         f32 %327 = OpLoad %326 
                                         f32 %328 = OpFMul %325 %327 
                                Private f32* %329 = OpAccessChain %131 %50 
                                                      OpStore %329 %328 
                                Private f32* %330 = OpAccessChain %131 %50 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpLoad %318 
                                         f32 %333 = OpFMul %331 %332 
                                         f32 %335 = OpFAdd %333 %334 
                                                      OpStore %318 %335 
                                         f32 %336 = OpLoad %318 
                                         f32 %337 = OpFAdd %336 %182 
                                Private f32* %338 = OpAccessChain %177 %50 
                                                      OpStore %338 %337 
                                Private f32* %339 = OpAccessChain %89 %194 
                                         f32 %340 = OpLoad %339 
                                         f32 %341 = OpFNegate %340 
                                         f32 %342 = OpFAdd %341 %55 
                                Private f32* %343 = OpAccessChain %101 %50 
                                                      OpStore %343 %342 
                                Private f32* %344 = OpAccessChain %101 %50 
                                         f32 %345 = OpLoad %344 
                                         f32 %346 = OpExtInst %1 40 %345 %38 
                                Private f32* %347 = OpAccessChain %101 %50 
                                                      OpStore %347 %346 
                                Private f32* %348 = OpAccessChain %101 %50 
                                         f32 %349 = OpLoad %348 
                                Private f32* %350 = OpAccessChain %101 %50 
                                         f32 %351 = OpLoad %350 
                                         f32 %352 = OpFMul %349 %351 
                                                      OpStore %318 %352 
                                         f32 %353 = OpLoad %318 
                                         f32 %354 = OpLoad %318 
                                         f32 %355 = OpFMul %353 %354 
                                                      OpStore %318 %355 
                                Private f32* %356 = OpAccessChain %101 %50 
                                         f32 %357 = OpLoad %356 
                                         f32 %358 = OpLoad %318 
                                         f32 %359 = OpFMul %357 %358 
                                Private f32* %360 = OpAccessChain %101 %50 
                                                      OpStore %360 %359 
                                Private f32* %361 = OpAccessChain %177 %50 
                                         f32 %362 = OpLoad %361 
                                Private f32* %363 = OpAccessChain %101 %50 
                                         f32 %364 = OpLoad %363 
                                         f32 %365 = OpFMul %362 %364 
                                         f32 %366 = OpFAdd %365 %55 
                                Private f32* %367 = OpAccessChain %101 %50 
                                                      OpStore %367 %366 
                                Private f32* %368 = OpAccessChain %138 %50 
                                         f32 %369 = OpLoad %368 
                                         f32 %370 = OpFNegate %369 
                                         f32 %371 = OpFAdd %370 %55 
                                                      OpStore %318 %371 
                                         f32 %372 = OpLoad %318 
                                         f32 %373 = OpExtInst %1 40 %372 %38 
                                                      OpStore %318 %373 
                                         f32 %374 = OpLoad %318 
                                         f32 %375 = OpLoad %318 
                                         f32 %376 = OpFMul %374 %375 
                                Private f32* %377 = OpAccessChain %131 %50 
                                                      OpStore %377 %376 
                                Private f32* %378 = OpAccessChain %131 %50 
                                         f32 %379 = OpLoad %378 
                                Private f32* %380 = OpAccessChain %131 %50 
                                         f32 %381 = OpLoad %380 
                                         f32 %382 = OpFMul %379 %381 
                                Private f32* %383 = OpAccessChain %131 %50 
                                                      OpStore %383 %382 
                                         f32 %384 = OpLoad %318 
                                Private f32* %385 = OpAccessChain %131 %50 
                                         f32 %386 = OpLoad %385 
                                         f32 %387 = OpFMul %384 %386 
                                                      OpStore %318 %387 
                                Private f32* %388 = OpAccessChain %177 %50 
                                         f32 %389 = OpLoad %388 
                                         f32 %390 = OpLoad %318 
                                         f32 %391 = OpFMul %389 %390 
                                         f32 %392 = OpFAdd %391 %55 
                                                      OpStore %318 %392 
                                Private f32* %394 = OpAccessChain %101 %50 
                                         f32 %395 = OpLoad %394 
                                         f32 %396 = OpLoad %318 
                                         f32 %397 = OpFMul %395 %396 
                                                      OpStore %393 %397 
                                         f32 %398 = OpLoad %393 
                                         f32 %399 = OpExtInst %1 37 %398 %55 
                                                      OpStore %393 %399 
                                         f32 %400 = OpLoad %276 
                                         f32 %401 = OpLoad %393 
                                         f32 %402 = OpFMul %400 %401 
                                                      OpStore %393 %402 
                                         f32 %404 = OpLoad %393 
                                         f32 %405 = OpFMul %404 %334 
                                         f32 %406 = OpFAdd %405 %334 
                                                      OpStore %403 %406 
                                         f32 %407 = OpLoad %403 
                                Private f32* %408 = OpAccessChain %131 %50 
                                                      OpStore %408 %407 
                                Uniform f32* %409 = OpAccessChain %144 %49 
                                         f32 %410 = OpLoad %409 
                                Uniform f32* %411 = OpAccessChain %144 %49 
                                         f32 %412 = OpLoad %411 
                                       f32_2 %413 = OpCompositeConstruct %410 %412 
                                         f32 %414 = OpCompositeExtract %413 0 
                                         f32 %415 = OpCompositeExtract %413 1 
                                       f32_2 %416 = OpCompositeConstruct %414 %415 
                                       f32_4 %417 = OpLoad %131 
                                       f32_4 %418 = OpVectorShuffle %417 %416 0 4 2 5 
                                                      OpStore %131 %418 
                         read_only Texture2D %421 = OpLoad %420 
                                     sampler %423 = OpLoad %422 
                  read_only Texture2DSampled %424 = OpSampledImage %421 %423 
                                       f32_4 %425 = OpLoad %131 
                                       f32_2 %426 = OpVectorShuffle %425 %425 0 1 
                                       f32_4 %427 = OpImageSampleImplicitLod %424 %426 
                                       f32_3 %428 = OpVectorShuffle %427 %427 0 1 2 
                                                      OpStore %419 %428 
                                       f32_3 %430 = OpLoad %419 
                                Uniform f32* %432 = OpAccessChain %144 %431 
                                         f32 %433 = OpLoad %432 
                                Uniform f32* %434 = OpAccessChain %144 %431 
                                         f32 %435 = OpLoad %434 
                                Uniform f32* %436 = OpAccessChain %144 %431 
                                         f32 %437 = OpLoad %436 
                                       f32_3 %438 = OpCompositeConstruct %433 %435 %437 
                                         f32 %439 = OpCompositeExtract %438 0 
                                         f32 %440 = OpCompositeExtract %438 1 
                                         f32 %441 = OpCompositeExtract %438 2 
                                       f32_3 %442 = OpCompositeConstruct %439 %440 %441 
                                       f32_3 %443 = OpFMul %430 %442 
                                                      OpStore %429 %443 
                                Private f32* %444 = OpAccessChain %42 %50 
                                         f32 %445 = OpLoad %444 
                                Private f32* %446 = OpAccessChain %131 %50 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpExtInst %1 37 %445 %447 
                                Private f32* %449 = OpAccessChain %101 %50 
                                                      OpStore %449 %448 
                                       f32_3 %451 = OpLoad %241 
                                       f32_3 %452 = OpLoad %429 
                                       f32_3 %453 = OpFMul %451 %452 
                                                      OpStore %450 %453 
                                       f32_3 %454 = OpLoad %450 
                              Uniform f32_4* %455 = OpAccessChain %116 %145 
                                       f32_4 %456 = OpLoad %455 
                                       f32_3 %457 = OpVectorShuffle %456 %456 0 1 2 
                                       f32_3 %458 = OpFMul %454 %457 
                                                      OpStore %429 %458 
                                       f32_3 %459 = OpLoad %429 
                                       f32_3 %460 = OpLoad %101 
                                       f32_3 %461 = OpVectorShuffle %460 %460 0 0 0 
                                       f32_3 %462 = OpFMul %459 %461 
                                       f32_3 %463 = OpLoad %223 
                                       f32_3 %464 = OpFAdd %462 %463 
                                                      OpStore %429 %464 
                                Uniform f32* %465 = OpAccessChain %116 %225 %50 
                                         f32 %466 = OpLoad %465 
                                Uniform f32* %473 = OpAccessChain %472 %431 %194 
                                         f32 %474 = OpLoad %473 
                                         f32 %475 = OpExtInst %1 37 %466 %474 
                                                      OpStore %393 %475 
                                         f32 %478 = OpLoad %393 
                                         i32 %479 = OpConvertFToS %478 
                                                      OpStore %477 %479 
                                       f32_3 %480 = OpLoad %429 
                                                      OpStore %450 %480 
                                                      OpStore %482 %50 
                                                      OpBranch %483 
                                             %483 = OpLabel 
                                                      OpLoopMerge %485 %486 None 
                                                      OpBranch %487 
                                             %487 = OpLabel 
                                         u32 %488 = OpLoad %482 
                                         i32 %489 = OpLoad %477 
                                         u32 %490 = OpBitcast %489 
                                        bool %491 = OpULessThan %488 %490 
                                                      OpBranchConditional %491 %484 %485 
                                             %484 = OpLabel 
                                         u32 %493 = OpLoad %482 
                                         u32 %495 = OpBitwiseAnd %493 %494 
                                         i32 %496 = OpBitcast %495 
                                                      OpStore %492 %496 
                                         u32 %499 = OpLoad %482 
                                         u32 %500 = OpShiftRightLogical %499 %17 
                                                      OpStore %498 %500 
                                         u32 %502 = OpLoad %498 
                                         i32 %503 = OpBitcast %502 
                              Uniform f32_4* %504 = OpAccessChain %472 %501 %503 
                                       f32_4 %505 = OpLoad %504 
                                         i32 %514 = OpLoad %492 
                                                      OpStore %516 %513 
                             Function u32_4* %518 = OpAccessChain %516 %514 
                                       u32_4 %519 = OpLoad %518 
                                       f32_4 %520 = OpBitcast %519 
                                         f32 %521 = OpDot %505 %520 
                                                      OpStore %393 %521 
                                         f32 %522 = OpLoad %393 
                                         i32 %523 = OpConvertFToS %522 
                                                      OpStore %492 %523 
                                       f32_3 %526 = OpLoad vs_TEXCOORD5 
                                       f32_3 %527 = OpFNegate %526 
                                         i32 %537 = OpLoad %492 
                              Uniform f32_4* %538 = OpAccessChain %536 %117 %537 
                                       f32_4 %539 = OpLoad %538 
                                       f32_3 %540 = OpVectorShuffle %539 %539 3 3 3 
                                       f32_3 %541 = OpFMul %527 %540 
                                         i32 %542 = OpLoad %492 
                              Uniform f32_4* %543 = OpAccessChain %536 %117 %542 
                                       f32_4 %544 = OpLoad %543 
                                       f32_3 %545 = OpVectorShuffle %544 %544 0 1 2 
                                       f32_3 %546 = OpFAdd %541 %545 
                                                      OpStore %524 %546 
                                       f32_3 %548 = OpLoad %524 
                                       f32_3 %549 = OpLoad %524 
                                         f32 %550 = OpDot %548 %549 
                                                      OpStore %547 %550 
                                         f32 %551 = OpLoad %547 
                                         f32 %553 = OpExtInst %1 40 %551 %552 
                                                      OpStore %547 %553 
                                         f32 %555 = OpLoad %547 
                                         f32 %556 = OpExtInst %1 32 %555 
                                                      OpStore %554 %556 
                                         f32 %557 = OpLoad %554 
                                       f32_3 %558 = OpCompositeConstruct %557 %557 %557 
                                       f32_3 %559 = OpLoad %524 
                                       f32_3 %560 = OpFMul %558 %559 
                                                      OpStore %524 %560 
                                         f32 %561 = OpLoad %547 
                                         f32 %562 = OpFDiv %55 %561 
                                                      OpStore %554 %562 
                                         f32 %563 = OpLoad %547 
                                         i32 %564 = OpLoad %492 
                                Uniform f32* %565 = OpAccessChain %536 %225 %564 %50 
                                         f32 %566 = OpLoad %565 
                                         f32 %567 = OpFMul %563 %566 
                                         i32 %568 = OpLoad %492 
                                Uniform f32* %569 = OpAccessChain %536 %225 %568 %194 
                                         f32 %570 = OpLoad %569 
                                         f32 %571 = OpFAdd %567 %570 
                                                      OpStore %547 %571 
                                         f32 %572 = OpLoad %547 
                                         f32 %573 = OpExtInst %1 43 %572 %38 %55 
                                                      OpStore %547 %573 
                                         f32 %574 = OpLoad %547 
                                         f32 %575 = OpLoad %554 
                                         f32 %576 = OpFMul %574 %575 
                                                      OpStore %547 %576 
                                         i32 %577 = OpLoad %492 
                              Uniform f32_4* %578 = OpAccessChain %536 %197 %577 
                                       f32_4 %579 = OpLoad %578 
                                       f32_3 %580 = OpVectorShuffle %579 %579 0 1 2 
                                       f32_3 %581 = OpLoad %524 
                                         f32 %582 = OpDot %580 %581 
                                                      OpStore %393 %582 
                                         f32 %583 = OpLoad %393 
                                         i32 %584 = OpLoad %492 
                                Uniform f32* %585 = OpAccessChain %536 %225 %584 %17 
                                         f32 %586 = OpLoad %585 
                                         f32 %587 = OpFMul %583 %586 
                                         i32 %588 = OpLoad %492 
                                Uniform f32* %589 = OpAccessChain %536 %225 %588 %494 
                                         f32 %590 = OpLoad %589 
                                         f32 %591 = OpFAdd %587 %590 
                                                      OpStore %393 %591 
                                         f32 %592 = OpLoad %393 
                                         f32 %593 = OpExtInst %1 43 %592 %38 %55 
                                                      OpStore %393 %593 
                                         f32 %594 = OpLoad %393 
                                         f32 %595 = OpLoad %393 
                                         f32 %596 = OpFMul %594 %595 
                                                      OpStore %393 %596 
                                         f32 %597 = OpLoad %547 
                                         f32 %598 = OpLoad %393 
                                         f32 %599 = OpFMul %597 %598 
                                                      OpStore %547 %599 
                                       f32_4 %600 = OpLoad %282 
                                       f32_3 %601 = OpVectorShuffle %600 %600 0 1 2 
                                       f32_3 %602 = OpLoad %524 
                                         f32 %603 = OpDot %601 %602 
                                                      OpStore %554 %603 
                                         f32 %604 = OpLoad %554 
                                         f32 %605 = OpExtInst %1 40 %604 %296 
                                Private f32* %606 = OpAccessChain %131 %17 
                                                      OpStore %606 %605 
                         read_only Texture2D %608 = OpLoad %420 
                                     sampler %609 = OpLoad %422 
                  read_only Texture2DSampled %610 = OpSampledImage %608 %609 
                                       f32_4 %611 = OpLoad %131 
                                       f32_2 %612 = OpVectorShuffle %611 %611 2 3 
                                       f32_4 %613 = OpImageSampleImplicitLod %610 %612 
                                       f32_3 %614 = OpVectorShuffle %613 %613 0 1 2 
                                                      OpStore %607 %614 
                                       f32_3 %615 = OpLoad %607 
                                Uniform f32* %616 = OpAccessChain %144 %431 
                                         f32 %617 = OpLoad %616 
                                Uniform f32* %618 = OpAccessChain %144 %431 
                                         f32 %619 = OpLoad %618 
                                Uniform f32* %620 = OpAccessChain %144 %431 
                                         f32 %621 = OpLoad %620 
                                       f32_3 %622 = OpCompositeConstruct %617 %619 %621 
                                         f32 %623 = OpCompositeExtract %622 0 
                                         f32 %624 = OpCompositeExtract %622 1 
                                         f32 %625 = OpCompositeExtract %622 2 
                                       f32_3 %626 = OpCompositeConstruct %623 %624 %625 
                                       f32_3 %627 = OpFMul %615 %626 
                                                      OpStore %524 %627 
                                       f32_3 %629 = OpLoad %241 
                                       f32_3 %630 = OpLoad %524 
                                       f32_3 %631 = OpFMul %629 %630 
                                                      OpStore %628 %631 
                                       f32_3 %632 = OpLoad %628 
                                         i32 %633 = OpLoad %492 
                              Uniform f32_4* %634 = OpAccessChain %536 %145 %633 
                                       f32_4 %635 = OpLoad %634 
                                       f32_3 %636 = OpVectorShuffle %635 %635 0 1 2 
                                       f32_3 %637 = OpFMul %632 %636 
                                                      OpStore %628 %637 
                                       f32_3 %638 = OpLoad %628 
                                         f32 %639 = OpLoad %547 
                                       f32_3 %640 = OpCompositeConstruct %639 %639 %639 
                                       f32_3 %641 = OpFMul %638 %640 
                                       f32_3 %642 = OpLoad %223 
                                       f32_3 %643 = OpFAdd %641 %642 
                                                      OpStore %628 %643 
                                       f32_3 %644 = OpLoad %450 
                                       f32_3 %645 = OpLoad %628 
                                       f32_3 %646 = OpFAdd %644 %645 
                                                      OpStore %450 %646 
                                                      OpBranch %486 
                                             %486 = OpLabel 
                                         u32 %647 = OpLoad %482 
                                         u32 %648 = OpIAdd %647 %145 
                                                      OpStore %482 %648 
                                                      OpBranch %483 
                                             %485 = OpLabel 
                                Private f32* %649 = OpAccessChain %89 %50 
                                         f32 %650 = OpLoad %649 
                                         f32 %651 = OpExtInst %1 32 %650 
                                Private f32* %652 = OpAccessChain %89 %50 
                                                      OpStore %652 %651 
                                       f32_4 %653 = OpLoad %89 
                                       f32_3 %654 = OpVectorShuffle %653 %653 0 0 0 
                                       f32_3 %655 = OpLoad %106 
                                       f32_3 %656 = OpFMul %654 %655 
                                       f32_4 %657 = OpLoad %89 
                                       f32_4 %658 = OpVectorShuffle %657 %656 4 5 2 6 
                                                      OpStore %89 %658 
                                       f32_4 %659 = OpLoad %282 
                                       f32_3 %660 = OpVectorShuffle %659 %659 0 1 2 
                                       f32_4 %661 = OpLoad %89 
                                       f32_3 %662 = OpVectorShuffle %661 %661 0 1 3 
                                         f32 %663 = OpDot %660 %662 
                                Private f32* %664 = OpAccessChain %106 %50 
                                                      OpStore %664 %663 
                                Private f32* %665 = OpAccessChain %106 %50 
                                         f32 %666 = OpLoad %665 
                                         f32 %667 = OpExtInst %1 43 %666 %38 %55 
                                Private f32* %668 = OpAccessChain %106 %50 
                                                      OpStore %668 %667 
                              Uniform f32_4* %669 = OpAccessChain %116 %117 
                                       f32_4 %670 = OpLoad %669 
                                       f32_3 %671 = OpVectorShuffle %670 %670 0 1 2 
                                       f32_4 %672 = OpLoad %89 
                                       f32_3 %673 = OpVectorShuffle %672 %672 0 1 3 
                                         f32 %674 = OpDot %671 %673 
                                Private f32* %675 = OpAccessChain %89 %50 
                                                      OpStore %675 %674 
                                Private f32* %676 = OpAccessChain %89 %50 
                                         f32 %677 = OpLoad %676 
                                         f32 %678 = OpExtInst %1 43 %677 %38 %55 
                                Private f32* %679 = OpAccessChain %89 %50 
                                                      OpStore %679 %678 
                                Private f32* %680 = OpAccessChain %106 %50 
                                         f32 %681 = OpLoad %680 
                                Private f32* %682 = OpAccessChain %106 %50 
                                         f32 %683 = OpLoad %682 
                                         f32 %684 = OpFMul %681 %683 
                                Private f32* %685 = OpAccessChain %101 %50 
                                                      OpStore %685 %684 
                                Private f32* %686 = OpAccessChain %202 %50 
                                         f32 %687 = OpLoad %686 
                                Private f32* %688 = OpAccessChain %202 %50 
                                         f32 %689 = OpLoad %688 
                                         f32 %690 = OpFMul %687 %689 
                                                      OpStore %393 %690 
                                Private f32* %692 = OpAccessChain %202 %50 
                                         f32 %693 = OpLoad %692 
                                Private f32* %694 = OpAccessChain %202 %50 
                                         f32 %695 = OpLoad %694 
                                         f32 %696 = OpFMul %693 %695 
                                         f32 %697 = OpFAdd %696 %182 
                                                      OpStore %691 %697 
                                Private f32* %698 = OpAccessChain %101 %50 
                                         f32 %699 = OpLoad %698 
                                         f32 %700 = OpLoad %691 
                                         f32 %701 = OpFMul %699 %700 
                                         f32 %703 = OpFAdd %701 %702 
                                Private f32* %704 = OpAccessChain %101 %50 
                                                      OpStore %704 %703 
                                Private f32* %705 = OpAccessChain %89 %50 
                                         f32 %706 = OpLoad %705 
                                Private f32* %707 = OpAccessChain %89 %50 
                                         f32 %708 = OpLoad %707 
                                         f32 %709 = OpFMul %706 %708 
                                                      OpStore %691 %709 
                                Private f32* %710 = OpAccessChain %101 %50 
                                         f32 %711 = OpLoad %710 
                                Private f32* %712 = OpAccessChain %101 %50 
                                         f32 %713 = OpLoad %712 
                                         f32 %714 = OpFMul %711 %713 
                                Private f32* %715 = OpAccessChain %89 %50 
                                                      OpStore %715 %714 
                                         f32 %716 = OpLoad %691 
                                         f32 %718 = OpExtInst %1 40 %716 %717 
                                Private f32* %719 = OpAccessChain %101 %50 
                                                      OpStore %719 %718 
                                Private f32* %720 = OpAccessChain %101 %50 
                                         f32 %721 = OpLoad %720 
                                Private f32* %722 = OpAccessChain %89 %50 
                                         f32 %723 = OpLoad %722 
                                         f32 %724 = OpFMul %721 %723 
                                Private f32* %725 = OpAccessChain %89 %50 
                                                      OpStore %725 %724 
                                Private f32* %726 = OpAccessChain %202 %50 
                                         f32 %727 = OpLoad %726 
                                         f32 %729 = OpFMul %727 %728 
                                         f32 %730 = OpFAdd %729 %179 
                                                      OpStore %691 %730 
                                Private f32* %731 = OpAccessChain %89 %50 
                                         f32 %732 = OpLoad %731 
                                         f32 %733 = OpLoad %691 
                                         f32 %734 = OpFMul %732 %733 
                                Private f32* %735 = OpAccessChain %89 %50 
                                                      OpStore %735 %734 
                                         f32 %736 = OpLoad %393 
                                Private f32* %737 = OpAccessChain %89 %50 
                                         f32 %738 = OpLoad %737 
                                         f32 %739 = OpFDiv %736 %738 
                                Private f32* %740 = OpAccessChain %89 %50 
                                                      OpStore %740 %739 
                                       f32_3 %741 = OpLoad %218 
                                       f32_4 %742 = OpLoad %89 
                                       f32_3 %743 = OpVectorShuffle %742 %742 0 0 0 
                                       f32_3 %744 = OpFMul %741 %743 
                                       f32_4 %745 = OpLoad %89 
                                       f32_4 %746 = OpVectorShuffle %745 %744 4 5 2 6 
                                                      OpStore %89 %746 
                                       f32_4 %747 = OpLoad %89 
                                       f32_3 %748 = OpVectorShuffle %747 %747 0 1 3 
                                       f32_3 %751 = OpFMul %748 %750 
                                                      OpStore %628 %751 
                                       f32_3 %752 = OpLoad %628 
                              Uniform f32_4* %753 = OpAccessChain %116 %145 
                                       f32_4 %754 = OpLoad %753 
                                       f32_3 %755 = OpVectorShuffle %754 %754 0 1 2 
                                       f32_3 %756 = OpFMul %752 %755 
                                                      OpStore %106 %756 
                                       f32_3 %757 = OpLoad %106 
                                       f32_3 %758 = OpLoad %138 
                                       f32_3 %759 = OpVectorShuffle %758 %758 0 0 0 
                                       f32_3 %760 = OpFMul %757 %759 
                                       f32_3 %761 = OpLoad %450 
                                       f32_3 %762 = OpFAdd %760 %761 
                                                      OpStore %450 %762 
                                Private f32* %763 = OpAccessChain %282 %494 
                                                      OpStore %763 %55 
                              Uniform f32_4* %764 = OpAccessChain %472 %49 
                                       f32_4 %765 = OpLoad %764 
                                       f32_4 %766 = OpLoad %282 
                                         f32 %767 = OpDot %765 %766 
                                Private f32* %768 = OpAccessChain %628 %50 
                                                      OpStore %768 %767 
                              Uniform f32_4* %770 = OpAccessChain %472 %769 
                                       f32_4 %771 = OpLoad %770 
                                       f32_4 %772 = OpLoad %282 
                                         f32 %773 = OpDot %771 %772 
                                Private f32* %774 = OpAccessChain %628 %194 
                                                      OpStore %774 %773 
                              Uniform f32_4* %776 = OpAccessChain %472 %775 
                                       f32_4 %777 = OpLoad %776 
                                       f32_4 %778 = OpLoad %282 
                                         f32 %779 = OpDot %777 %778 
                                Private f32* %780 = OpAccessChain %628 %17 
                                                      OpStore %780 %779 
                                       f32_4 %781 = OpLoad %282 
                                       f32_4 %782 = OpVectorShuffle %781 %781 1 2 2 0 
                                       f32_4 %783 = OpLoad %282 
                                       f32_4 %784 = OpVectorShuffle %783 %783 0 1 2 2 
                                       f32_4 %785 = OpFMul %782 %784 
                                                      OpStore %42 %785 
                              Uniform f32_4* %788 = OpAccessChain %472 %787 
                                       f32_4 %789 = OpLoad %788 
                                       f32_4 %790 = OpLoad %42 
                                         f32 %791 = OpDot %789 %790 
                                Private f32* %792 = OpAccessChain %786 %50 
                                                      OpStore %792 %791 
                              Uniform f32_4* %794 = OpAccessChain %472 %793 
                                       f32_4 %795 = OpLoad %794 
                                       f32_4 %796 = OpLoad %42 
                                         f32 %797 = OpDot %795 %796 
                                Private f32* %798 = OpAccessChain %786 %194 
                                                      OpStore %798 %797 
                              Uniform f32_4* %800 = OpAccessChain %472 %799 
                                       f32_4 %801 = OpLoad %800 
                                       f32_4 %802 = OpLoad %42 
                                         f32 %803 = OpDot %801 %802 
                                Private f32* %804 = OpAccessChain %786 %17 
                                                      OpStore %804 %803 
                                Private f32* %805 = OpAccessChain %282 %194 
                                         f32 %806 = OpLoad %805 
                                Private f32* %807 = OpAccessChain %282 %194 
                                         f32 %808 = OpLoad %807 
                                         f32 %809 = OpFMul %806 %808 
                                                      OpStore %393 %809 
                                Private f32* %810 = OpAccessChain %282 %50 
                                         f32 %811 = OpLoad %810 
                                Private f32* %812 = OpAccessChain %282 %50 
                                         f32 %813 = OpLoad %812 
                                         f32 %814 = OpFMul %811 %813 
                                         f32 %815 = OpLoad %393 
                                         f32 %816 = OpFNegate %815 
                                         f32 %817 = OpFAdd %814 %816 
                                                      OpStore %393 %817 
                              Uniform f32_4* %819 = OpAccessChain %472 %818 
                                       f32_4 %820 = OpLoad %819 
                                       f32_3 %821 = OpVectorShuffle %820 %820 0 1 2 
                                         f32 %822 = OpLoad %393 
                                       f32_3 %823 = OpCompositeConstruct %822 %822 %822 
                                       f32_3 %824 = OpFMul %821 %823 
                                       f32_3 %825 = OpLoad %786 
                                       f32_3 %826 = OpFAdd %824 %825 
                                                      OpStore %786 %826 
                                       f32_3 %827 = OpLoad %628 
                                       f32_3 %828 = OpLoad %786 
                                       f32_3 %829 = OpFAdd %827 %828 
                                                      OpStore %628 %829 
                                       f32_3 %830 = OpLoad %628 
                                       f32_3 %832 = OpExtInst %1 40 %830 %831 
                                                      OpStore %628 %832 
                                       f32_3 %833 = OpLoad %241 
                                       f32_3 %834 = OpLoad %628 
                                       f32_3 %835 = OpFMul %833 %834 
                                                      OpStore %241 %835 
                                Uniform f32* %836 = OpAccessChain %116 %197 %117 %50 
                                         f32 %837 = OpLoad %836 
                                Private f32* %838 = OpAccessChain %106 %50 
                                                      OpStore %838 %837 
                                Uniform f32* %839 = OpAccessChain %116 %197 %145 %50 
                                         f32 %840 = OpLoad %839 
                                Private f32* %841 = OpAccessChain %106 %194 
                                                      OpStore %841 %840 
                                Uniform f32* %842 = OpAccessChain %116 %197 %225 %50 
                                         f32 %843 = OpLoad %842 
                                Private f32* %844 = OpAccessChain %106 %17 
                                                      OpStore %844 %843 
                                       f32_3 %845 = OpLoad %106 
                                       f32_4 %846 = OpLoad %282 
                                       f32_3 %847 = OpVectorShuffle %846 %846 0 1 2 
                                         f32 %848 = OpDot %845 %847 
                                Private f32* %849 = OpAccessChain %628 %50 
                                                      OpStore %849 %848 
                                Uniform f32* %850 = OpAccessChain %116 %197 %117 %194 
                                         f32 %851 = OpLoad %850 
                                Private f32* %852 = OpAccessChain %106 %50 
                                                      OpStore %852 %851 
                                Uniform f32* %853 = OpAccessChain %116 %197 %145 %194 
                                         f32 %854 = OpLoad %853 
                                Private f32* %855 = OpAccessChain %106 %194 
                                                      OpStore %855 %854 
                                Uniform f32* %856 = OpAccessChain %116 %197 %225 %194 
                                         f32 %857 = OpLoad %856 
                                Private f32* %858 = OpAccessChain %106 %17 
                                                      OpStore %858 %857 
                                       f32_3 %859 = OpLoad %106 
                                       f32_4 %860 = OpLoad %282 
                                       f32_3 %861 = OpVectorShuffle %860 %860 0 1 2 
                                         f32 %862 = OpDot %859 %861 
                                Private f32* %863 = OpAccessChain %628 %194 
                                                      OpStore %863 %862 
                                       f32_3 %864 = OpLoad %628 
                                       f32_2 %865 = OpVectorShuffle %864 %864 0 1 
                                       f32_2 %867 = OpFMul %865 %866 
                                       f32_2 %868 = OpFAdd %867 %866 
                                       f32_3 %869 = OpLoad %628 
                                       f32_3 %870 = OpVectorShuffle %869 %868 3 4 2 
                                                      OpStore %628 %870 
                                Private f32* %871 = OpAccessChain %202 %50 
                                         f32 %872 = OpLoad %871 
                                         f32 %873 = OpFNegate %872 
                                         f32 %875 = OpFMul %873 %874 
                                         f32 %877 = OpFAdd %875 %876 
                                                      OpStore %393 %877 
                                Private f32* %878 = OpAccessChain %202 %50 
                                         f32 %879 = OpLoad %878 
                                         f32 %880 = OpLoad %393 
                                         f32 %881 = OpFMul %879 %880 
                                Private f32* %882 = OpAccessChain %202 %50 
                                                      OpStore %882 %881 
                                Private f32* %883 = OpAccessChain %202 %50 
                                         f32 %884 = OpLoad %883 
                                         f32 %886 = OpFMul %884 %885 
                                                      OpStore %393 %886 
                         read_only Texture2D %889 = OpLoad %888 
                                     sampler %891 = OpLoad %890 
                  read_only Texture2DSampled %892 = OpSampledImage %889 %891 
                                       f32_3 %893 = OpLoad %628 
                                       f32_2 %894 = OpVectorShuffle %893 %893 0 1 
                                         f32 %895 = OpLoad %393 
                                       f32_4 %896 = OpImageSampleExplicitLod %892 %894 Lod %10 
                                       f32_3 %897 = OpVectorShuffle %896 %896 0 1 2 
                                                      OpStore %887 %897 
                                Private f32* %898 = OpAccessChain %202 %50 
                                         f32 %899 = OpLoad %898 
                                Private f32* %900 = OpAccessChain %202 %50 
                                         f32 %901 = OpLoad %900 
                                         f32 %902 = OpFMul %899 %901 
                                         f32 %903 = OpFAdd %902 %55 
                                Private f32* %904 = OpAccessChain %131 %50 
                                                      OpStore %904 %903 
                                Private f32* %905 = OpAccessChain %131 %50 
                                         f32 %906 = OpLoad %905 
                                         f32 %907 = OpFDiv %55 %906 
                                Private f32* %908 = OpAccessChain %131 %50 
                                                      OpStore %908 %907 
                                Private f32* %909 = OpAccessChain %89 %194 
                                         f32 %910 = OpLoad %909 
                                Private f32* %911 = OpAccessChain %89 %50 
                                         f32 %912 = OpLoad %911 
                                         f32 %913 = OpExtInst %1 40 %910 %912 
                                Private f32* %914 = OpAccessChain %89 %50 
                                                      OpStore %914 %913 
                                Private f32* %915 = OpAccessChain %89 %494 
                                         f32 %916 = OpLoad %915 
                                Private f32* %917 = OpAccessChain %89 %50 
                                         f32 %918 = OpLoad %917 
                                         f32 %919 = OpExtInst %1 40 %916 %918 
                                Private f32* %920 = OpAccessChain %89 %50 
                                                      OpStore %920 %919 
                                         f32 %921 = OpLoad %127 
                                Private f32* %922 = OpAccessChain %89 %50 
                                         f32 %923 = OpLoad %922 
                                         f32 %924 = OpFAdd %921 %923 
                                Private f32* %925 = OpAccessChain %89 %50 
                                                      OpStore %925 %924 
                                Private f32* %926 = OpAccessChain %89 %50 
                                         f32 %927 = OpLoad %926 
                                         f32 %928 = OpExtInst %1 43 %927 %38 %55 
                                Private f32* %929 = OpAccessChain %89 %50 
                                                      OpStore %929 %928 
                                Private f32* %930 = OpAccessChain %89 %17 
                                         f32 %931 = OpLoad %930 
                                         f32 %932 = OpFNegate %931 
                                         f32 %933 = OpFAdd %932 %55 
                                Private f32* %934 = OpAccessChain %101 %50 
                                                      OpStore %934 %933 
                                Private f32* %935 = OpAccessChain %101 %50 
                                         f32 %936 = OpLoad %935 
                                         f32 %937 = OpExtInst %1 40 %936 %38 
                                Private f32* %938 = OpAccessChain %101 %50 
                                                      OpStore %938 %937 
                                Private f32* %940 = OpAccessChain %101 %50 
                                         f32 %941 = OpLoad %940 
                                Private f32* %942 = OpAccessChain %101 %50 
                                         f32 %943 = OpLoad %942 
                                         f32 %944 = OpFMul %941 %943 
                                                      OpStore %939 %944 
                                         f32 %945 = OpLoad %939 
                                         f32 %946 = OpLoad %939 
                                         f32 %947 = OpFMul %945 %946 
                                                      OpStore %939 %947 
                                Private f32* %948 = OpAccessChain %101 %50 
                                         f32 %949 = OpLoad %948 
                                         f32 %950 = OpLoad %939 
                                         f32 %951 = OpFMul %949 %950 
                                Private f32* %952 = OpAccessChain %101 %50 
                                                      OpStore %952 %951 
                                       f32_3 %953 = OpLoad %218 
                                       f32_3 %954 = OpFNegate %953 
                                       f32_4 %955 = OpLoad %89 
                                       f32_3 %956 = OpVectorShuffle %955 %955 0 0 0 
                                       f32_3 %957 = OpFAdd %954 %956 
                                       f32_4 %958 = OpLoad %89 
                                       f32_4 %959 = OpVectorShuffle %958 %957 4 1 5 6 
                                                      OpStore %89 %959 
                                       f32_3 %960 = OpLoad %101 
                                       f32_3 %961 = OpVectorShuffle %960 %960 0 0 0 
                                       f32_4 %962 = OpLoad %89 
                                       f32_3 %963 = OpVectorShuffle %962 %962 0 2 3 
                                       f32_3 %964 = OpFMul %961 %963 
                                       f32_3 %965 = OpLoad %218 
                                       f32_3 %966 = OpFAdd %964 %965 
                                       f32_4 %967 = OpLoad %89 
                                       f32_4 %968 = OpVectorShuffle %967 %966 4 5 6 3 
                                                      OpStore %89 %968 
                                       f32_4 %969 = OpLoad %131 
                                       f32_3 %970 = OpVectorShuffle %969 %969 0 0 0 
                                       f32_4 %971 = OpLoad %89 
                                       f32_3 %972 = OpVectorShuffle %971 %971 0 1 2 
                                       f32_3 %973 = OpFMul %970 %972 
                                       f32_4 %974 = OpLoad %89 
                                       f32_4 %975 = OpVectorShuffle %974 %973 4 5 6 3 
                                                      OpStore %89 %975 
                                       f32_4 %976 = OpLoad %185 
                                       f32_3 %977 = OpVectorShuffle %976 %976 3 3 3 
                                       f32_3 %978 = OpLoad %887 
                                       f32_3 %979 = OpFMul %977 %978 
                                                      OpStore %202 %979 
                                       f32_4 %980 = OpLoad %89 
                                       f32_3 %981 = OpVectorShuffle %980 %980 0 1 2 
                                       f32_3 %982 = OpLoad %202 
                                       f32_3 %983 = OpFMul %981 %982 
                                       f32_4 %984 = OpLoad %89 
                                       f32_4 %985 = OpVectorShuffle %984 %983 4 5 6 3 
                                                      OpStore %89 %985 
                                       f32_3 %986 = OpLoad %241 
                                Uniform f32* %987 = OpAccessChain %144 %117 
                                         f32 %988 = OpLoad %987 
                                       f32_3 %989 = OpCompositeConstruct %988 %988 %988 
                                       f32_3 %990 = OpFMul %986 %989 
                                       f32_4 %991 = OpLoad %89 
                                       f32_3 %992 = OpVectorShuffle %991 %991 0 1 2 
                                       f32_3 %993 = OpFAdd %990 %992 
                                                      OpStore %202 %993 
                              Uniform f32_4* %994 = OpAccessChain %116 %431 %145 
                                       f32_4 %995 = OpLoad %994 
                                       f32_3 %996 = OpVectorShuffle %995 %995 0 1 2 
                              Uniform f32_3* %998 = OpAccessChain %144 %501 
                                       f32_3 %999 = OpLoad %998 
                                      f32_3 %1000 = OpVectorShuffle %999 %999 1 1 1 
                                      f32_3 %1001 = OpFMul %996 %1000 
                                      f32_4 %1002 = OpLoad %89 
                                      f32_4 %1003 = OpVectorShuffle %1002 %1001 4 5 6 3 
                                                      OpStore %89 %1003 
                             Uniform f32_4* %1004 = OpAccessChain %116 %431 %117 
                                      f32_4 %1005 = OpLoad %1004 
                                      f32_3 %1006 = OpVectorShuffle %1005 %1005 0 1 2 
                             Uniform f32_3* %1007 = OpAccessChain %144 %501 
                                      f32_3 %1008 = OpLoad %1007 
                                      f32_3 %1009 = OpVectorShuffle %1008 %1008 0 0 0 
                                      f32_3 %1010 = OpFMul %1006 %1009 
                                      f32_4 %1011 = OpLoad %89 
                                      f32_3 %1012 = OpVectorShuffle %1011 %1011 0 1 2 
                                      f32_3 %1013 = OpFAdd %1010 %1012 
                                      f32_4 %1014 = OpLoad %89 
                                      f32_4 %1015 = OpVectorShuffle %1014 %1013 4 5 6 3 
                                                      OpStore %89 %1015 
                             Uniform f32_4* %1016 = OpAccessChain %116 %431 %225 
                                      f32_4 %1017 = OpLoad %1016 
                                      f32_3 %1018 = OpVectorShuffle %1017 %1017 0 1 2 
                             Uniform f32_3* %1019 = OpAccessChain %144 %501 
                                      f32_3 %1020 = OpLoad %1019 
                                      f32_3 %1021 = OpVectorShuffle %1020 %1020 2 2 2 
                                      f32_3 %1022 = OpFMul %1018 %1021 
                                      f32_4 %1023 = OpLoad %89 
                                      f32_3 %1024 = OpVectorShuffle %1023 %1023 0 1 2 
                                      f32_3 %1025 = OpFAdd %1022 %1024 
                                      f32_4 %1026 = OpLoad %89 
                                      f32_4 %1027 = OpVectorShuffle %1026 %1025 4 5 6 3 
                                                      OpStore %89 %1027 
                                      f32_4 %1028 = OpLoad %89 
                                      f32_3 %1029 = OpVectorShuffle %1028 %1028 0 1 2 
                                      f32_4 %1030 = OpLoad %89 
                                      f32_3 %1031 = OpVectorShuffle %1030 %1030 0 1 2 
                                        f32 %1032 = OpDot %1029 %1031 
                                                      OpStore %318 %1032 
                                        f32 %1033 = OpLoad %318 
                                        f32 %1034 = OpExtInst %1 32 %1033 
                                                      OpStore %318 %1034 
                                        f32 %1035 = OpLoad %318 
                                      f32_3 %1036 = OpCompositeConstruct %1035 %1035 %1035 
                                      f32_4 %1037 = OpLoad %89 
                                      f32_3 %1038 = OpVectorShuffle %1037 %1037 0 1 2 
                                      f32_3 %1039 = OpFMul %1036 %1038 
                                      f32_4 %1040 = OpLoad %89 
                                      f32_4 %1041 = OpVectorShuffle %1040 %1039 4 5 6 3 
                                                      OpStore %89 %1041 
                                      f32_4 %1042 = OpLoad %282 
                                      f32_3 %1043 = OpVectorShuffle %1042 %1042 0 1 2 
                                      f32_4 %1044 = OpLoad %89 
                                      f32_3 %1045 = OpVectorShuffle %1044 %1044 0 1 2 
                                        f32 %1046 = OpDot %1043 %1045 
                               Private f32* %1047 = OpAccessChain %89 %50 
                                                      OpStore %1047 %1046 
                               Private f32* %1048 = OpAccessChain %89 %50 
                                        f32 %1049 = OpLoad %1048 
                                        f32 %1050 = OpFMul %1049 %334 
                                        f32 %1051 = OpFAdd %1050 %334 
                               Private f32* %1052 = OpAccessChain %89 %50 
                                                      OpStore %1052 %1051 
                               Private f32* %1053 = OpAccessChain %89 %50 
                                        f32 %1054 = OpLoad %1053 
                               Private f32* %1055 = OpAccessChain %185 %494 
                                        f32 %1056 = OpLoad %1055 
                                        f32 %1057 = OpFMul %1054 %1056 
                               Uniform f32* %1059 = OpAccessChain %144 %1058 
                                        f32 %1060 = OpLoad %1059 
                                        f32 %1061 = OpFNegate %1060 
                                        f32 %1062 = OpFAdd %1057 %1061 
                               Private f32* %1063 = OpAccessChain %89 %50 
                                                      OpStore %1063 %1062 
                               Private f32* %1064 = OpAccessChain %89 %50 
                                        f32 %1065 = OpLoad %1064 
                               Uniform f32* %1067 = OpAccessChain %144 %1066 
                                        f32 %1068 = OpLoad %1067 
                                        f32 %1069 = OpFMul %1065 %1068 
                               Private f32* %1070 = OpAccessChain %89 %50 
                                                      OpStore %1070 %1069 
                               Private f32* %1071 = OpAccessChain %89 %50 
                                        f32 %1072 = OpLoad %1071 
                                        f32 %1073 = OpExtInst %1 43 %1072 %38 %55 
                               Private f32* %1074 = OpAccessChain %89 %50 
                                                      OpStore %1074 %1073 
                                      f32_4 %1075 = OpLoad %89 
                                      f32_3 %1076 = OpVectorShuffle %1075 %1075 0 0 0 
                             Uniform f32_4* %1078 = OpAccessChain %144 %1077 
                                      f32_4 %1079 = OpLoad %1078 
                                      f32_3 %1080 = OpVectorShuffle %1079 %1079 0 1 2 
                                      f32_3 %1081 = OpFMul %1076 %1080 
                                                      OpStore %241 %1081 
                                      f32_3 %1082 = OpLoad %241 
                               Uniform f32* %1084 = OpAccessChain %144 %1083 
                                        f32 %1085 = OpLoad %1084 
                               Uniform f32* %1086 = OpAccessChain %144 %1083 
                                        f32 %1087 = OpLoad %1086 
                               Uniform f32* %1088 = OpAccessChain %144 %1083 
                                        f32 %1089 = OpLoad %1088 
                                      f32_3 %1090 = OpCompositeConstruct %1085 %1087 %1089 
                                        f32 %1091 = OpCompositeExtract %1090 0 
                                        f32 %1092 = OpCompositeExtract %1090 1 
                                        f32 %1093 = OpCompositeExtract %1090 2 
                                      f32_3 %1094 = OpCompositeConstruct %1091 %1092 %1093 
                                      f32_3 %1095 = OpFMul %1082 %1094 
                                      f32_4 %1096 = OpLoad %89 
                                      f32_4 %1097 = OpVectorShuffle %1096 %1095 4 5 6 3 
                                                      OpStore %89 %1097 
                                      f32_3 %1098 = OpLoad %138 
                                      f32_3 %1099 = OpVectorShuffle %1098 %1098 0 0 0 
                                      f32_4 %1100 = OpLoad %89 
                                      f32_3 %1101 = OpVectorShuffle %1100 %1100 0 1 2 
                                      f32_3 %1102 = OpFMul %1099 %1101 
                                                      OpStore %106 %1102 
                                      f32_3 %1103 = OpLoad %106 
                                      f32_3 %1105 = OpFMul %1103 %1104 
                                                      OpStore %106 %1105 
                                      f32_4 %1106 = OpLoad %89 
                                      f32_3 %1107 = OpVectorShuffle %1106 %1106 0 1 2 
                                      f32_3 %1110 = OpFMul %1107 %1109 
                                      f32_3 %1111 = OpLoad %106 
                                      f32_3 %1112 = OpFAdd %1110 %1111 
                                      f32_4 %1113 = OpLoad %89 
                                      f32_4 %1114 = OpVectorShuffle %1113 %1112 4 5 6 3 
                                                      OpStore %89 %1114 
                                      f32_3 %1115 = OpLoad %450 
                                      f32_3 %1116 = OpLoad %202 
                                      f32_3 %1117 = OpFAdd %1115 %1116 
                                                      OpStore %202 %1117 
                                      f32_4 %1118 = OpLoad %89 
                                      f32_3 %1119 = OpVectorShuffle %1118 %1118 0 1 2 
                                      f32_3 %1120 = OpLoad %202 
                                      f32_3 %1121 = OpFAdd %1119 %1120 
                                                      OpStore %202 %1121 
                                      f32_3 %1122 = OpLoad %202 
                                      f32_3 %1123 = OpExtInst %1 40 %1122 %831 
                                                      OpStore %202 %1123 
                                      f32_3 %1124 = OpLoad %202 
                                      f32_3 %1125 = OpExtInst %1 30 %1124 
                                                      OpStore %202 %1125 
                                      f32_3 %1126 = OpLoad %202 
                                      f32_3 %1129 = OpFMul %1126 %1128 
                                                      OpStore %202 %1129 
                                      f32_3 %1130 = OpLoad %202 
                                      f32_3 %1131 = OpExtInst %1 29 %1130 
                                                      OpStore %202 %1131 
                                      f32_3 %1134 = OpLoad %202 
                                      f32_3 %1135 = OpExtInst %1 31 %1134 
                                      f32_4 %1136 = OpLoad %1133 
                                      f32_4 %1137 = OpVectorShuffle %1136 %1135 4 5 6 3 
                                                      OpStore %1133 %1137 
                                Output f32* %1139 = OpAccessChain %1133 %494 
                                                      OpStore %1139 %55 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "vulkan " {
Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 268
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %94 %103 %105 %108 %148 %151 %161 %195 %221 %227 %230 %231 %257 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 RelaxedPrecision 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 RelaxedPrecision 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 RelaxedPrecision 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 RelaxedPrecision 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 RelaxedPrecision 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 RelaxedPrecision 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpMemberDecorate %21 16 RelaxedPrecision 
                                                      OpMemberDecorate %21 16 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpDecorate %69 ArrayStride 69 
                                                      OpMemberDecorate %70 0 Offset 70 
                                                      OpMemberDecorate %70 1 Offset 70 
                                                      OpDecorate %70 Block 
                                                      OpDecorate %72 DescriptorSet 72 
                                                      OpDecorate %72 Binding 72 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 103 
                                                      OpDecorate %105 Location 105 
                                                      OpDecorate %108 Location 108 
                                                      OpDecorate vs_TEXCOORD1 Location 148 
                                                      OpDecorate vs_TEXCOORD2 Location 151 
                                                      OpDecorate %161 Location 161 
                                                      OpDecorate vs_TEXCOORD3 Location 195 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 221 
                                                      OpDecorate vs_TEXCOORD5 Location 227 
                                                      OpDecorate vs_TEXCOORD6 Location 230 
                                                      OpDecorate %231 Location 231 
                                                      OpDecorate %236 ArrayStride 236 
                                                      OpMemberDecorate %237 0 Offset 237 
                                                      OpMemberDecorate %237 1 Offset 237 
                                                      OpMemberDecorate %237 2 Offset 237 
                                                      OpMemberDecorate %237 3 Offset 237 
                                                      OpMemberDecorate %237 4 Offset 237 
                                                      OpMemberDecorate %237 5 Offset 237 
                                                      OpMemberDecorate %237 6 RelaxedPrecision 
                                                      OpMemberDecorate %237 6 Offset 237 
                                                      OpMemberDecorate %237 7 RelaxedPrecision 
                                                      OpMemberDecorate %237 7 Offset 237 
                                                      OpMemberDecorate %237 8 RelaxedPrecision 
                                                      OpMemberDecorate %237 8 Offset 237 
                                                      OpMemberDecorate %237 9 RelaxedPrecision 
                                                      OpMemberDecorate %237 9 Offset 237 
                                                      OpMemberDecorate %237 10 RelaxedPrecision 
                                                      OpMemberDecorate %237 10 Offset 237 
                                                      OpMemberDecorate %237 11 Offset 237 
                                                      OpDecorate %237 Block 
                                                      OpDecorate %239 DescriptorSet 239 
                                                      OpDecorate %239 Binding 239 
                                                      OpDecorate vs_TEXCOORD7 Location 257 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 3 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeArray %7 %16 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypeArray %7 %19 
                                              %21 = OpTypeStruct %17 %18 %7 %7 %7 %20 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4; f32_4[2]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 0 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %45 = OpConstant 2 
                                          i32 %59 = OpConstant 3 
                               Private f32_4* %66 = OpVariable Private 
                                              %69 = OpTypeArray %7 %16 
                                              %70 = OpTypeStruct %12 %69 
                                              %71 = OpTypePointer Uniform %70 
           Uniform struct {f32_3; f32_4[4];}* %72 = OpVariable Uniform 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %99 = OpTypePointer Output %7 
                                             %101 = OpTypeVector %6 2 
                                             %102 = OpTypePointer Output %101 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %104 = OpTypePointer Input %101 
                                Input f32_2* %105 = OpVariable Input 
                                             %107 = OpTypePointer Input %12 
                                Input f32_3* %108 = OpVariable Input 
                                         u32 %114 = OpConstant 0 
                                             %115 = OpTypePointer Private %6 
                                Private f32* %129 = OpVariable Private 
                                         f32 %136 = OpConstant 3.674022E-40 
                                             %147 = OpTypePointer Output %12 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %155 = OpTypePointer Uniform %12 
                                             %159 = OpTypePointer Private %12 
                              Private f32_3* %160 = OpVariable Private 
                                Input f32_4* %161 = OpVariable Input 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                              Private f32_3* %197 = OpVariable Private 
                                         u32 %213 = OpConstant 3 
                                             %214 = OpTypePointer Input %6 
                                             %217 = OpTypePointer Uniform %6 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD5 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                Input f32_4* %231 = OpVariable Input 
                                         u32 %235 = OpConstant 20 
                                             %236 = OpTypeArray %7 %235 
                                             %237 = OpTypeStruct %236 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 
                                             %238 = OpTypePointer Uniform %237 
Uniform struct {f32_4[20]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %239 = OpVariable Uniform 
                       Output f32_4* vs_TEXCOORD7 = OpVariable Output 
                                             %262 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %11 
                                        f32_3 %14 = OpVectorShuffle %13 %13 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_3 %30 = OpVectorShuffle %29 %29 0 1 2 
                                        f32_3 %31 = OpFMul %14 %30 
                                        f32_4 %32 = OpLoad %9 
                                        f32_4 %33 = OpVectorShuffle %32 %31 4 5 6 3 
                                                      OpStore %9 %33 
                               Uniform f32_4* %34 = OpAccessChain %23 %25 %25 
                                        f32_4 %35 = OpLoad %34 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 1 2 
                                        f32_4 %37 = OpLoad %11 
                                        f32_3 %38 = OpVectorShuffle %37 %37 0 0 0 
                                        f32_3 %39 = OpFMul %36 %38 
                                        f32_4 %40 = OpLoad %9 
                                        f32_3 %41 = OpVectorShuffle %40 %40 0 1 2 
                                        f32_3 %42 = OpFAdd %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpVectorShuffle %43 %42 4 5 6 3 
                                                      OpStore %9 %44 
                               Uniform f32_4* %46 = OpAccessChain %23 %25 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_3 %48 = OpVectorShuffle %47 %47 0 1 2 
                                        f32_4 %49 = OpLoad %11 
                                        f32_3 %50 = OpVectorShuffle %49 %49 2 2 2 
                                        f32_3 %51 = OpFMul %48 %50 
                                        f32_4 %52 = OpLoad %9 
                                        f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                        f32_3 %54 = OpFAdd %51 %53 
                                        f32_4 %55 = OpLoad %9 
                                        f32_4 %56 = OpVectorShuffle %55 %54 4 5 6 3 
                                                      OpStore %9 %56 
                                        f32_4 %57 = OpLoad %9 
                                        f32_3 %58 = OpVectorShuffle %57 %57 0 1 2 
                               Uniform f32_4* %60 = OpAccessChain %23 %25 %59 
                                        f32_4 %61 = OpLoad %60 
                                        f32_3 %62 = OpVectorShuffle %61 %61 0 1 2 
                                        f32_3 %63 = OpFAdd %58 %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %63 4 5 6 3 
                                                      OpStore %9 %65 
                                        f32_4 %67 = OpLoad %9 
                                        f32_4 %68 = OpVectorShuffle %67 %67 1 1 1 1 
                               Uniform f32_4* %73 = OpAccessChain %72 %26 %26 
                                        f32_4 %74 = OpLoad %73 
                                        f32_4 %75 = OpFMul %68 %74 
                                                      OpStore %66 %75 
                               Uniform f32_4* %76 = OpAccessChain %72 %26 %25 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %9 
                                        f32_4 %79 = OpVectorShuffle %78 %78 0 0 0 0 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %66 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %66 %82 
                               Uniform f32_4* %83 = OpAccessChain %72 %26 %45 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %9 
                                        f32_4 %86 = OpVectorShuffle %85 %85 2 2 2 2 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %66 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %66 %89 
                                        f32_4 %95 = OpLoad %66 
                               Uniform f32_4* %96 = OpAccessChain %72 %26 %59 
                                        f32_4 %97 = OpLoad %96 
                                        f32_4 %98 = OpFAdd %95 %97 
                               Output f32_4* %100 = OpAccessChain %94 %25 
                                                      OpStore %100 %98 
                                       f32_2 %106 = OpLoad %105 
                                                      OpStore vs_TEXCOORD0 %106 
                                       f32_3 %109 = OpLoad %108 
                              Uniform f32_4* %110 = OpAccessChain %23 %26 %25 
                                       f32_4 %111 = OpLoad %110 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
                                         f32 %113 = OpDot %109 %112 
                                Private f32* %116 = OpAccessChain %66 %114 
                                                      OpStore %116 %113 
                                       f32_3 %117 = OpLoad %108 
                              Uniform f32_4* %118 = OpAccessChain %23 %26 %26 
                                       f32_4 %119 = OpLoad %118 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                         f32 %121 = OpDot %117 %120 
                                Private f32* %122 = OpAccessChain %66 %90 
                                                      OpStore %122 %121 
                                       f32_3 %123 = OpLoad %108 
                              Uniform f32_4* %124 = OpAccessChain %23 %26 %45 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                         f32 %127 = OpDot %123 %126 
                                Private f32* %128 = OpAccessChain %66 %19 
                                                      OpStore %128 %127 
                                       f32_4 %130 = OpLoad %66 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_4 %132 = OpLoad %66 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                         f32 %134 = OpDot %131 %133 
                                                      OpStore %129 %134 
                                         f32 %135 = OpLoad %129 
                                         f32 %137 = OpExtInst %1 40 %135 %136 
                                                      OpStore %129 %137 
                                         f32 %138 = OpLoad %129 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %129 %139 
                                         f32 %140 = OpLoad %129 
                                       f32_3 %141 = OpCompositeConstruct %140 %140 %140 
                                       f32_4 %142 = OpLoad %66 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                       f32_3 %144 = OpFMul %141 %143 
                                       f32_4 %145 = OpLoad %66 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %66 %146 
                                       f32_4 %149 = OpLoad %66 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                                      OpStore vs_TEXCOORD1 %150 
                                       f32_4 %152 = OpLoad %9 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                       f32_3 %154 = OpFNegate %153 
                              Uniform f32_3* %156 = OpAccessChain %72 %25 
                                       f32_3 %157 = OpLoad %156 
                                       f32_3 %158 = OpFAdd %154 %157 
                                                      OpStore vs_TEXCOORD2 %158 
                                       f32_4 %162 = OpLoad %161 
                                       f32_3 %163 = OpVectorShuffle %162 %162 1 1 1 
                              Uniform f32_4* %164 = OpAccessChain %23 %25 %26 
                                       f32_4 %165 = OpLoad %164 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                       f32_3 %167 = OpFMul %163 %166 
                                                      OpStore %160 %167 
                              Uniform f32_4* %168 = OpAccessChain %23 %25 %25 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                       f32_4 %171 = OpLoad %161 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 0 0 
                                       f32_3 %173 = OpFMul %170 %172 
                                       f32_3 %174 = OpLoad %160 
                                       f32_3 %175 = OpFAdd %173 %174 
                                                      OpStore %160 %175 
                              Uniform f32_4* %176 = OpAccessChain %23 %25 %45 
                                       f32_4 %177 = OpLoad %176 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                       f32_4 %179 = OpLoad %161 
                                       f32_3 %180 = OpVectorShuffle %179 %179 2 2 2 
                                       f32_3 %181 = OpFMul %178 %180 
                                       f32_3 %182 = OpLoad %160 
                                       f32_3 %183 = OpFAdd %181 %182 
                                                      OpStore %160 %183 
                                       f32_3 %184 = OpLoad %160 
                                       f32_3 %185 = OpLoad %160 
                                         f32 %186 = OpDot %184 %185 
                                                      OpStore %129 %186 
                                         f32 %187 = OpLoad %129 
                                         f32 %188 = OpExtInst %1 40 %187 %136 
                                                      OpStore %129 %188 
                                         f32 %189 = OpLoad %129 
                                         f32 %190 = OpExtInst %1 32 %189 
                                                      OpStore %129 %190 
                                         f32 %191 = OpLoad %129 
                                       f32_3 %192 = OpCompositeConstruct %191 %191 %191 
                                       f32_3 %193 = OpLoad %160 
                                       f32_3 %194 = OpFMul %192 %193 
                                                      OpStore %160 %194 
                                       f32_3 %196 = OpLoad %160 
                                                      OpStore vs_TEXCOORD3 %196 
                                       f32_4 %198 = OpLoad %66 
                                       f32_3 %199 = OpVectorShuffle %198 %198 2 0 1 
                                       f32_3 %200 = OpLoad %160 
                                       f32_3 %201 = OpVectorShuffle %200 %200 1 2 0 
                                       f32_3 %202 = OpFMul %199 %201 
                                                      OpStore %197 %202 
                                       f32_4 %203 = OpLoad %66 
                                       f32_3 %204 = OpVectorShuffle %203 %203 1 2 0 
                                       f32_3 %205 = OpLoad %160 
                                       f32_3 %206 = OpVectorShuffle %205 %205 2 0 1 
                                       f32_3 %207 = OpFMul %204 %206 
                                       f32_3 %208 = OpLoad %197 
                                       f32_3 %209 = OpFNegate %208 
                                       f32_3 %210 = OpFAdd %207 %209 
                                       f32_4 %211 = OpLoad %66 
                                       f32_4 %212 = OpVectorShuffle %211 %210 4 5 6 3 
                                                      OpStore %66 %212 
                                  Input f32* %215 = OpAccessChain %161 %213 
                                         f32 %216 = OpLoad %215 
                                Uniform f32* %218 = OpAccessChain %23 %59 %213 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpFMul %216 %219 
                                                      OpStore %129 %220 
                                         f32 %222 = OpLoad %129 
                                       f32_3 %223 = OpCompositeConstruct %222 %222 %222 
                                       f32_4 %224 = OpLoad %66 
                                       f32_3 %225 = OpVectorShuffle %224 %224 0 1 2 
                                       f32_3 %226 = OpFMul %223 %225 
                                                      OpStore vs_TEXCOORD4 %226 
                                       f32_4 %228 = OpLoad %9 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 2 
                                                      OpStore vs_TEXCOORD5 %229 
                                       f32_4 %232 = OpLoad %231 
                                                      OpStore vs_TEXCOORD6 %232 
                                       f32_4 %233 = OpLoad %9 
                                       f32_4 %234 = OpVectorShuffle %233 %233 1 1 1 1 
                              Uniform f32_4* %240 = OpAccessChain %239 %25 %26 
                                       f32_4 %241 = OpLoad %240 
                                       f32_4 %242 = OpFMul %234 %241 
                                                      OpStore %66 %242 
                              Uniform f32_4* %243 = OpAccessChain %239 %25 %25 
                                       f32_4 %244 = OpLoad %243 
                                       f32_4 %245 = OpLoad %9 
                                       f32_4 %246 = OpVectorShuffle %245 %245 0 0 0 0 
                                       f32_4 %247 = OpFMul %244 %246 
                                       f32_4 %248 = OpLoad %66 
                                       f32_4 %249 = OpFAdd %247 %248 
                                                      OpStore %66 %249 
                              Uniform f32_4* %250 = OpAccessChain %239 %25 %45 
                                       f32_4 %251 = OpLoad %250 
                                       f32_4 %252 = OpLoad %9 
                                       f32_4 %253 = OpVectorShuffle %252 %252 2 2 2 2 
                                       f32_4 %254 = OpFMul %251 %253 
                                       f32_4 %255 = OpLoad %66 
                                       f32_4 %256 = OpFAdd %254 %255 
                                                      OpStore %9 %256 
                                       f32_4 %258 = OpLoad %9 
                              Uniform f32_4* %259 = OpAccessChain %239 %25 %59 
                                       f32_4 %260 = OpLoad %259 
                                       f32_4 %261 = OpFAdd %258 %260 
                                                      OpStore vs_TEXCOORD7 %261 
                                 Output f32* %263 = OpAccessChain %94 %25 %90 
                                         f32 %264 = OpLoad %263 
                                         f32 %265 = OpFNegate %264 
                                 Output f32* %266 = OpAccessChain %94 %25 %90 
                                                      OpStore %266 %265 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 1143
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %91 %140 %259 %264 %271 %525 %1133 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate vs_TEXCOORD7 Location 12 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %28 DescriptorSet 28 
                                                      OpDecorate %28 Binding 28 
                                                      OpDecorate %29 RelaxedPrecision 
                                                      OpDecorate %32 RelaxedPrecision 
                                                      OpDecorate %32 DescriptorSet 32 
                                                      OpDecorate %32 Binding 32 
                                                      OpDecorate %33 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %44 ArrayStride 44 
                                                      OpMemberDecorate %45 0 Offset 45 
                                                      OpMemberDecorate %45 1 Offset 45 
                                                      OpMemberDecorate %45 2 Offset 45 
                                                      OpMemberDecorate %45 3 Offset 45 
                                                      OpMemberDecorate %45 4 Offset 45 
                                                      OpMemberDecorate %45 5 Offset 45 
                                                      OpMemberDecorate %45 6 RelaxedPrecision 
                                                      OpMemberDecorate %45 6 Offset 45 
                                                      OpMemberDecorate %45 7 RelaxedPrecision 
                                                      OpMemberDecorate %45 7 Offset 45 
                                                      OpMemberDecorate %45 8 RelaxedPrecision 
                                                      OpMemberDecorate %45 8 Offset 45 
                                                      OpMemberDecorate %45 9 RelaxedPrecision 
                                                      OpMemberDecorate %45 9 Offset 45 
                                                      OpMemberDecorate %45 10 RelaxedPrecision 
                                                      OpMemberDecorate %45 10 Offset 45 
                                                      OpMemberDecorate %45 11 Offset 45 
                                                      OpDecorate %45 Block 
                                                      OpDecorate %47 DescriptorSet 47 
                                                      OpDecorate %47 Binding 47 
                                                      OpDecorate %53 RelaxedPrecision 
                                                      OpDecorate %54 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %58 RelaxedPrecision 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %63 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD2 Location 91 
                                                      OpDecorate %112 ArrayStride 112 
                                                      OpDecorate %113 ArrayStride 113 
                                                      OpMemberDecorate %114 0 Offset 114 
                                                      OpMemberDecorate %114 1 RelaxedPrecision 
                                                      OpMemberDecorate %114 1 Offset 114 
                                                      OpMemberDecorate %114 2 RelaxedPrecision 
                                                      OpMemberDecorate %114 2 Offset 114 
                                                      OpMemberDecorate %114 3 Offset 114 
                                                      OpMemberDecorate %114 4 Offset 114 
                                                      OpDecorate %114 Block 
                                                      OpDecorate %116 DescriptorSet 116 
                                                      OpDecorate %116 Binding 116 
                                                      OpDecorate vs_TEXCOORD0 Location 140 
                                                      OpMemberDecorate %142 0 Offset 142 
                                                      OpMemberDecorate %142 1 Offset 142 
                                                      OpMemberDecorate %142 2 Offset 142 
                                                      OpMemberDecorate %142 3 Offset 142 
                                                      OpMemberDecorate %142 4 Offset 142 
                                                      OpMemberDecorate %142 5 Offset 142 
                                                      OpMemberDecorate %142 6 Offset 142 
                                                      OpMemberDecorate %142 7 Offset 142 
                                                      OpMemberDecorate %142 8 Offset 142 
                                                      OpMemberDecorate %142 9 Offset 142 
                                                      OpMemberDecorate %142 10 Offset 142 
                                                      OpDecorate %142 Block 
                                                      OpDecorate %144 DescriptorSet 144 
                                                      OpDecorate %144 Binding 144 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %157 DescriptorSet 157 
                                                      OpDecorate %157 Binding 157 
                                                      OpDecorate %158 RelaxedPrecision 
                                                      OpDecorate %159 RelaxedPrecision 
                                                      OpDecorate %159 DescriptorSet 159 
                                                      OpDecorate %159 Binding 159 
                                                      OpDecorate %160 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %168 DescriptorSet 168 
                                                      OpDecorate %168 Binding 168 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %170 DescriptorSet 170 
                                                      OpDecorate %170 Binding 170 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %186 DescriptorSet 186 
                                                      OpDecorate %186 Binding 186 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %188 DescriptorSet 188 
                                                      OpDecorate %188 Binding 188 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %249 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 259 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD3 Location 264 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 271 
                                                      OpDecorate %320 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %399 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %420 DescriptorSet 420 
                                                      OpDecorate %420 Binding 420 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %422 DescriptorSet 422 
                                                      OpDecorate %422 Binding 422 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %428 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %438 RelaxedPrecision 
                                                      OpDecorate %439 RelaxedPrecision 
                                                      OpDecorate %440 RelaxedPrecision 
                                                      OpDecorate %441 RelaxedPrecision 
                                                      OpDecorate %442 RelaxedPrecision 
                                                      OpDecorate %443 RelaxedPrecision 
                                                      OpDecorate %445 RelaxedPrecision 
                                                      OpDecorate %450 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %467 ArrayStride 467 
                                                      OpDecorate %468 ArrayStride 468 
                                                      OpDecorate %469 ArrayStride 469 
                                                      OpMemberDecorate %470 0 Offset 470 
                                                      OpMemberDecorate %470 1 Offset 470 
                                                      OpMemberDecorate %470 2 Offset 470 
                                                      OpMemberDecorate %470 3 RelaxedPrecision 
                                                      OpMemberDecorate %470 3 Offset 470 
                                                      OpMemberDecorate %470 4 RelaxedPrecision 
                                                      OpMemberDecorate %470 4 Offset 470 
                                                      OpMemberDecorate %470 5 RelaxedPrecision 
                                                      OpMemberDecorate %470 5 Offset 470 
                                                      OpMemberDecorate %470 6 Offset 470 
                                                      OpMemberDecorate %470 7 RelaxedPrecision 
                                                      OpMemberDecorate %470 7 Offset 470 
                                                      OpMemberDecorate %470 8 Offset 470 
                                                      OpMemberDecorate %470 9 Offset 470 
                                                      OpMemberDecorate %470 10 RelaxedPrecision 
                                                      OpMemberDecorate %470 10 Offset 470 
                                                      OpMemberDecorate %470 11 RelaxedPrecision 
                                                      OpMemberDecorate %470 11 Offset 470 
                                                      OpMemberDecorate %470 12 RelaxedPrecision 
                                                      OpMemberDecorate %470 12 Offset 470 
                                                      OpMemberDecorate %470 13 RelaxedPrecision 
                                                      OpMemberDecorate %470 13 Offset 470 
                                                      OpMemberDecorate %470 14 RelaxedPrecision 
                                                      OpMemberDecorate %470 14 Offset 470 
                                                      OpMemberDecorate %470 15 RelaxedPrecision 
                                                      OpMemberDecorate %470 15 Offset 470 
                                                      OpMemberDecorate %470 16 RelaxedPrecision 
                                                      OpMemberDecorate %470 16 Offset 470 
                                                      OpDecorate %470 Block 
                                                      OpDecorate %472 DescriptorSet 472 
                                                      OpDecorate %472 Binding 472 
                                                      OpDecorate %474 RelaxedPrecision 
                                                      OpDecorate %475 RelaxedPrecision 
                                                      OpDecorate %478 RelaxedPrecision 
                                                      OpDecorate %505 RelaxedPrecision 
                                                      OpDecorate %522 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 525 
                                                      OpDecorate %529 ArrayStride 529 
                                                      OpDecorate %530 ArrayStride 530 
                                                      OpDecorate %531 ArrayStride 531 
                                                      OpDecorate %532 ArrayStride 532 
                                                      OpDecorate %533 ArrayStride 533 
                                                      OpMemberDecorate %534 0 Offset 534 
                                                      OpMemberDecorate %534 1 RelaxedPrecision 
                                                      OpMemberDecorate %534 1 Offset 534 
                                                      OpMemberDecorate %534 2 RelaxedPrecision 
                                                      OpMemberDecorate %534 2 Offset 534 
                                                      OpMemberDecorate %534 3 RelaxedPrecision 
                                                      OpMemberDecorate %534 3 Offset 534 
                                                      OpMemberDecorate %534 4 RelaxedPrecision 
                                                      OpMemberDecorate %534 4 Offset 534 
                                                      OpDecorate %534 Block 
                                                      OpDecorate %536 DescriptorSet 536 
                                                      OpDecorate %536 Binding 536 
                                                      OpDecorate %566 RelaxedPrecision 
                                                      OpDecorate %570 RelaxedPrecision 
                                                      OpDecorate %579 RelaxedPrecision 
                                                      OpDecorate %580 RelaxedPrecision 
                                                      OpDecorate %583 RelaxedPrecision 
                                                      OpDecorate %586 RelaxedPrecision 
                                                      OpDecorate %587 RelaxedPrecision 
                                                      OpDecorate %590 RelaxedPrecision 
                                                      OpDecorate %591 RelaxedPrecision 
                                                      OpDecorate %592 RelaxedPrecision 
                                                      OpDecorate %593 RelaxedPrecision 
                                                      OpDecorate %594 RelaxedPrecision 
                                                      OpDecorate %595 RelaxedPrecision 
                                                      OpDecorate %596 RelaxedPrecision 
                                                      OpDecorate %598 RelaxedPrecision 
                                                      OpDecorate %607 RelaxedPrecision 
                                                      OpDecorate %608 RelaxedPrecision 
                                                      OpDecorate %609 RelaxedPrecision 
                                                      OpDecorate %614 RelaxedPrecision 
                                                      OpDecorate %615 RelaxedPrecision 
                                                      OpDecorate %622 RelaxedPrecision 
                                                      OpDecorate %623 RelaxedPrecision 
                                                      OpDecorate %624 RelaxedPrecision 
                                                      OpDecorate %625 RelaxedPrecision 
                                                      OpDecorate %626 RelaxedPrecision 
                                                      OpDecorate %627 RelaxedPrecision 
                                                      OpDecorate %628 RelaxedPrecision 
                                                      OpDecorate %629 RelaxedPrecision 
                                                      OpDecorate %632 RelaxedPrecision 
                                                      OpDecorate %635 RelaxedPrecision 
                                                      OpDecorate %636 RelaxedPrecision 
                                                      OpDecorate %637 RelaxedPrecision 
                                                      OpDecorate %638 RelaxedPrecision 
                                                      OpDecorate %640 RelaxedPrecision 
                                                      OpDecorate %641 RelaxedPrecision 
                                                      OpDecorate %644 RelaxedPrecision 
                                                      OpDecorate %645 RelaxedPrecision 
                                                      OpDecorate %646 RelaxedPrecision 
                                                      OpDecorate %687 RelaxedPrecision 
                                                      OpDecorate %689 RelaxedPrecision 
                                                      OpDecorate %690 RelaxedPrecision 
                                                      OpDecorate %691 RelaxedPrecision 
                                                      OpDecorate %693 RelaxedPrecision 
                                                      OpDecorate %695 RelaxedPrecision 
                                                      OpDecorate %696 RelaxedPrecision 
                                                      OpDecorate %697 RelaxedPrecision 
                                                      OpDecorate %700 RelaxedPrecision 
                                                      OpDecorate %716 RelaxedPrecision 
                                                      OpDecorate %718 RelaxedPrecision 
                                                      OpDecorate %727 RelaxedPrecision 
                                                      OpDecorate %729 RelaxedPrecision 
                                                      OpDecorate %730 RelaxedPrecision 
                                                      OpDecorate %733 RelaxedPrecision 
                                                      OpDecorate %736 RelaxedPrecision 
                                                      OpDecorate %741 RelaxedPrecision 
                                                      OpDecorate %752 RelaxedPrecision 
                                                      OpDecorate %754 RelaxedPrecision 
                                                      OpDecorate %755 RelaxedPrecision 
                                                      OpDecorate %756 RelaxedPrecision 
                                                      OpDecorate %761 RelaxedPrecision 
                                                      OpDecorate %765 RelaxedPrecision 
                                                      OpDecorate %771 RelaxedPrecision 
                                                      OpDecorate %777 RelaxedPrecision 
                                                      OpDecorate %786 RelaxedPrecision 
                                                      OpDecorate %789 RelaxedPrecision 
                                                      OpDecorate %790 RelaxedPrecision 
                                                      OpDecorate %791 RelaxedPrecision 
                                                      OpDecorate %795 RelaxedPrecision 
                                                      OpDecorate %796 RelaxedPrecision 
                                                      OpDecorate %797 RelaxedPrecision 
                                                      OpDecorate %801 RelaxedPrecision 
                                                      OpDecorate %802 RelaxedPrecision 
                                                      OpDecorate %803 RelaxedPrecision 
                                                      OpDecorate %815 RelaxedPrecision 
                                                      OpDecorate %816 RelaxedPrecision 
                                                      OpDecorate %820 RelaxedPrecision 
                                                      OpDecorate %821 RelaxedPrecision 
                                                      OpDecorate %822 RelaxedPrecision 
                                                      OpDecorate %823 RelaxedPrecision 
                                                      OpDecorate %824 RelaxedPrecision 
                                                      OpDecorate %825 RelaxedPrecision 
                                                      OpDecorate %826 RelaxedPrecision 
                                                      OpDecorate %827 RelaxedPrecision 
                                                      OpDecorate %828 RelaxedPrecision 
                                                      OpDecorate %829 RelaxedPrecision 
                                                      OpDecorate %830 RelaxedPrecision 
                                                      OpDecorate %832 RelaxedPrecision 
                                                      OpDecorate %833 RelaxedPrecision 
                                                      OpDecorate %834 RelaxedPrecision 
                                                      OpDecorate %835 RelaxedPrecision 
                                                      OpDecorate %864 RelaxedPrecision 
                                                      OpDecorate %865 RelaxedPrecision 
                                                      OpDecorate %867 RelaxedPrecision 
                                                      OpDecorate %868 RelaxedPrecision 
                                                      OpDecorate %872 RelaxedPrecision 
                                                      OpDecorate %873 RelaxedPrecision 
                                                      OpDecorate %875 RelaxedPrecision 
                                                      OpDecorate %877 RelaxedPrecision 
                                                      OpDecorate %879 RelaxedPrecision 
                                                      OpDecorate %880 RelaxedPrecision 
                                                      OpDecorate %881 RelaxedPrecision 
                                                      OpDecorate %884 RelaxedPrecision 
                                                      OpDecorate %886 RelaxedPrecision 
                                                      OpDecorate %887 RelaxedPrecision 
                                                      OpDecorate %888 RelaxedPrecision 
                                                      OpDecorate %888 DescriptorSet 888 
                                                      OpDecorate %888 Binding 888 
                                                      OpDecorate %889 RelaxedPrecision 
                                                      OpDecorate %890 RelaxedPrecision 
                                                      OpDecorate %890 DescriptorSet 890 
                                                      OpDecorate %890 Binding 890 
                                                      OpDecorate %891 RelaxedPrecision 
                                                      OpDecorate %893 RelaxedPrecision 
                                                      OpDecorate %894 RelaxedPrecision 
                                                      OpDecorate %895 RelaxedPrecision 
                                                      OpDecorate %896 RelaxedPrecision 
                                                      OpDecorate %897 RelaxedPrecision 
                                                      OpDecorate %899 RelaxedPrecision 
                                                      OpDecorate %901 RelaxedPrecision 
                                                      OpDecorate %902 RelaxedPrecision 
                                                      OpDecorate %903 RelaxedPrecision 
                                                      OpDecorate %953 RelaxedPrecision 
                                                      OpDecorate %954 RelaxedPrecision 
                                                      OpDecorate %965 RelaxedPrecision 
                                                      OpDecorate %976 RelaxedPrecision 
                                                      OpDecorate %977 RelaxedPrecision 
                                                      OpDecorate %978 RelaxedPrecision 
                                                      OpDecorate %979 RelaxedPrecision 
                                                      OpDecorate %982 RelaxedPrecision 
                                                      OpDecorate %986 RelaxedPrecision 
                                                      OpDecorate %989 RelaxedPrecision 
                                                      OpDecorate %990 RelaxedPrecision 
                                                      OpDecorate %1056 RelaxedPrecision 
                                                      OpDecorate %1082 RelaxedPrecision 
                                                      OpDecorate %1090 RelaxedPrecision 
                                                      OpDecorate %1091 RelaxedPrecision 
                                                      OpDecorate %1092 RelaxedPrecision 
                                                      OpDecorate %1093 RelaxedPrecision 
                                                      OpDecorate %1094 RelaxedPrecision 
                                                      OpDecorate %1095 RelaxedPrecision 
                                                      OpDecorate %1115 RelaxedPrecision 
                                                      OpDecorate %1116 RelaxedPrecision 
                                                      OpDecorate %1117 RelaxedPrecision 
                                                      OpDecorate %1120 RelaxedPrecision 
                                                      OpDecorate %1122 RelaxedPrecision 
                                                      OpDecorate %1123 RelaxedPrecision 
                                                      OpDecorate %1124 RelaxedPrecision 
                                                      OpDecorate %1125 RelaxedPrecision 
                                                      OpDecorate %1126 RelaxedPrecision 
                                                      OpDecorate %1129 RelaxedPrecision 
                                                      OpDecorate %1130 RelaxedPrecision 
                                                      OpDecorate %1131 RelaxedPrecision 
                                                      OpDecorate %1133 RelaxedPrecision 
                                                      OpDecorate %1133 Location 1133 
                                                      OpDecorate %1134 RelaxedPrecision 
                                                      OpDecorate %1135 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Function %7 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                        Input f32_4* vs_TEXCOORD7 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 2 
                                              %18 = OpTypePointer Input %6 
                                              %24 = OpTypePointer Private %6 
                                 Private f32* %25 = OpVariable Private 
                                              %26 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %27 = OpTypePointer UniformConstant %26 
         UniformConstant read_only Texture2D* %28 = OpVariable UniformConstant 
                                              %30 = OpTypeSampler 
                                              %31 = OpTypePointer UniformConstant %30 
                     UniformConstant sampler* %32 = OpVariable UniformConstant 
                                              %34 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                              %35 = OpTypeSampledImage %34 
                                          f32 %38 = OpConstant 3.674022E-40 
                                              %41 = OpTypePointer Private %10 
                               Private f32_4* %42 = OpVariable Private 
                                          u32 %43 = OpConstant 20 
                                              %44 = OpTypeArray %10 %43 
                                              %45 = OpTypeStruct %44 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 
                                              %46 = OpTypePointer Uniform %45 
Uniform struct {f32_4[20]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %47 = OpVariable Uniform 
                                              %48 = OpTypeInt 32 1 
                                          i32 %49 = OpConstant 10 
                                          u32 %50 = OpConstant 0 
                                              %51 = OpTypePointer Uniform %6 
                                          f32 %55 = OpConstant 3.674022E-40 
                                              %66 = OpTypeBool 
                                              %67 = OpTypePointer Private %66 
                                Private bool* %68 = OpVariable Private 
                                Private bool* %72 = OpVariable Private 
                                              %80 = OpTypePointer Function %6 
                               Private f32_4* %89 = OpVariable Private 
                                              %90 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                             %100 = OpTypePointer Private %7 
                              Private f32_3* %101 = OpVariable Private 
                              Private f32_3* %106 = OpVariable Private 
                                         u32 %111 = OpConstant 4 
                                             %112 = OpTypeArray %10 %111 
                                             %113 = OpTypeArray %10 %111 
                                             %114 = OpTypeStruct %10 %10 %10 %112 %113 
                                             %115 = OpTypePointer Uniform %114 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_4[4];}* %116 = OpVariable Uniform 
                                         i32 %117 = OpConstant 0 
                                             %118 = OpTypePointer Uniform %10 
                                Private f32* %127 = OpVariable Private 
                              Private f32_4* %131 = OpVariable Private 
                              Private f32_3* %138 = OpVariable Private 
                                             %139 = OpTypePointer Input %13 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                             %142 = OpTypeStruct %6 %10 %10 %6 %6 %7 %10 %6 %6 %6 %6 
                                             %143 = OpTypePointer Uniform %142 
Uniform struct {f32; f32_4; f32_4; f32; f32; f32_3; f32_4; f32; f32; f32; f32;}* %144 = OpVariable Uniform 
                                         i32 %145 = OpConstant 1 
                              Private f32_3* %156 = OpVariable Private 
        UniformConstant read_only Texture2D* %157 = OpVariable UniformConstant 
                    UniformConstant sampler* %159 = OpVariable UniformConstant 
                                             %161 = OpTypeSampledImage %26 
                              Private f32_3* %167 = OpVariable Private 
        UniformConstant read_only Texture2D* %168 = OpVariable UniformConstant 
                    UniformConstant sampler* %170 = OpVariable UniformConstant 
                              Private f32_3* %177 = OpVariable Private 
                                         f32 %179 = OpConstant 3.674022E-40 
                                       f32_3 %180 = OpConstantComposite %179 %179 %179 
                                         f32 %182 = OpConstant 3.674022E-40 
                                       f32_3 %183 = OpConstantComposite %182 %182 %182 
                              Private f32_4* %185 = OpVariable Private 
        UniformConstant read_only Texture2D* %186 = OpVariable UniformConstant 
                    UniformConstant sampler* %188 = OpVariable UniformConstant 
                                         u32 %194 = OpConstant 1 
                                         i32 %197 = OpConstant 3 
                              Private f32_3* %202 = OpVariable Private 
                                         f32 %215 = OpConstant 3.674022E-40 
                              Private f32_3* %218 = OpVariable Private 
                              Private f32_3* %223 = OpVariable Private 
                                         i32 %225 = OpConstant 2 
                                         f32 %231 = OpConstant 3.674022E-40 
                                       f32_3 %232 = OpConstantComposite %231 %231 %231 
                                         f32 %238 = OpConstant 3.674022E-40 
                                       f32_3 %239 = OpConstantComposite %238 %238 %238 
                              Private f32_3* %241 = OpVariable Private 
                                         f32 %244 = OpConstant 3.674022E-40 
                                         f32 %246 = OpConstant 3.674022E-40 
                        Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                Private f32* %276 = OpVariable Private 
                              Private f32_4* %282 = OpVariable Private 
                                         f32 %296 = OpConstant 3.674022E-40 
                                         f32 %313 = OpConstant 3.674022E-40 
                                       f32_3 %314 = OpConstantComposite %313 %296 %296 
                                Private f32* %318 = OpVariable Private 
                                         f32 %334 = OpConstant 3.674022E-40 
                                Private f32* %393 = OpVariable Private 
                                Private f32* %403 = OpVariable Private 
                              Private f32_3* %419 = OpVariable Private 
        UniformConstant read_only Texture2D* %420 = OpVariable UniformConstant 
                    UniformConstant sampler* %422 = OpVariable UniformConstant 
                              Private f32_3* %429 = OpVariable Private 
                                         i32 %431 = OpConstant 4 
                              Private f32_3* %450 = OpVariable Private 
                                             %467 = OpTypeArray %10 %111 
                                             %468 = OpTypeArray %10 %111 
                                             %469 = OpTypeArray %10 %17 
                                             %470 = OpTypeStruct %467 %468 %10 %10 %10 %469 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 
                                             %471 = OpTypePointer Uniform %470 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4; f32_4[2]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %472 = OpVariable Uniform 
                                             %476 = OpTypePointer Private %48 
                                Private i32* %477 = OpVariable Private 
                                             %481 = OpTypePointer Function %16 
                                Private i32* %492 = OpVariable Private 
                                         u32 %494 = OpConstant 3 
                                             %497 = OpTypePointer Private %16 
                                Private u32* %498 = OpVariable Private 
                                         i32 %501 = OpConstant 5 
                                             %506 = OpTypeVector %16 4 
                                             %507 = OpTypeArray %506 %111 
                                         u32 %508 = OpConstant 1065353216 
                                       u32_4 %509 = OpConstantComposite %508 %50 %50 %50 
                                       u32_4 %510 = OpConstantComposite %50 %508 %50 %50 
                                       u32_4 %511 = OpConstantComposite %50 %50 %508 %50 
                                       u32_4 %512 = OpConstantComposite %50 %50 %50 %508 
                                    u32_4[4] %513 = OpConstantComposite %509 %510 %511 %512 
                                             %515 = OpTypePointer Function %507 
                                             %517 = OpTypePointer Function %506 
                              Private f32_3* %524 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD5 = OpVariable Input 
                                         u32 %528 = OpConstant 32 
                                             %529 = OpTypeArray %10 %528 
                                             %530 = OpTypeArray %10 %528 
                                             %531 = OpTypeArray %10 %528 
                                             %532 = OpTypeArray %10 %528 
                                             %533 = OpTypeArray %10 %528 
                                             %534 = OpTypeStruct %529 %530 %531 %532 %533 
                                             %535 = OpTypePointer Uniform %534 
Uniform struct {f32_4[32]; f32_4[32]; f32_4[32]; f32_4[32]; f32_4[32];}* %536 = OpVariable Uniform 
                                Private f32* %547 = OpVariable Private 
                                         f32 %552 = OpConstant 3.674022E-40 
                                Private f32* %554 = OpVariable Private 
                              Private f32_3* %607 = OpVariable Private 
                              Private f32_3* %628 = OpVariable Private 
                                Private f32* %691 = OpVariable Private 
                                         f32 %702 = OpConstant 3.674022E-40 
                                         f32 %717 = OpConstant 3.674022E-40 
                                         f32 %728 = OpConstant 3.674022E-40 
                                         f32 %749 = OpConstant 3.674022E-40 
                                       f32_3 %750 = OpConstantComposite %749 %749 %749 
                                         i32 %769 = OpConstant 11 
                                         i32 %775 = OpConstant 12 
                              Private f32_3* %786 = OpVariable Private 
                                         i32 %787 = OpConstant 13 
                                         i32 %793 = OpConstant 14 
                                         i32 %799 = OpConstant 15 
                                         i32 %818 = OpConstant 16 
                                       f32_3 %831 = OpConstantComposite %38 %38 %38 
                                       f32_2 %866 = OpConstantComposite %334 %334 
                                         f32 %874 = OpConstant 3.674022E-40 
                                         f32 %876 = OpConstant 3.674022E-40 
                                         f32 %885 = OpConstant 3.674022E-40 
                              Private f32_3* %887 = OpVariable Private 
        UniformConstant read_only Texture2D* %888 = OpVariable UniformConstant 
                    UniformConstant sampler* %890 = OpVariable UniformConstant 
                                Private f32* %939 = OpVariable Private 
                                             %997 = OpTypePointer Uniform %7 
                                        i32 %1058 = OpConstant 8 
                                        i32 %1066 = OpConstant 7 
                                        i32 %1077 = OpConstant 6 
                                        i32 %1083 = OpConstant 9 
                                      f32_3 %1104 = OpConstantComposite %874 %874 %874 
                                        f32 %1108 = OpConstant 3.674022E-40 
                                      f32_3 %1109 = OpConstantComposite %1108 %1108 %1108 
                                        f32 %1127 = OpConstant 3.674022E-40 
                                      f32_3 %1128 = OpConstantComposite %1127 %1127 %1127 
                                            %1132 = OpTypePointer Output %10 
                              Output f32_4* %1133 = OpVariable Output 
                                            %1138 = OpTypePointer Output %6 
                              Private bool* %1141 = OpVariable Private 
                               Private u32* %1142 = OpVariable Private 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32_3* %9 = OpVariable Function 
                                Function f32* %81 = OpVariable Function 
                               Function u32* %482 = OpVariable Function 
                          Function u32_4[4]* %516 = OpVariable Function 
                                        f32_4 %14 = OpLoad vs_TEXCOORD7 
                                        f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                                   Input f32* %19 = OpAccessChain vs_TEXCOORD7 %17 
                                          f32 %20 = OpLoad %19 
                                          f32 %21 = OpCompositeExtract %15 0 
                                          f32 %22 = OpCompositeExtract %15 1 
                                        f32_3 %23 = OpCompositeConstruct %21 %22 %20 
                                                      OpStore %9 %23 
                          read_only Texture2D %29 = OpLoad %28 
                                      sampler %33 = OpLoad %32 
                   read_only Texture2DSampled %36 = OpSampledImage %29 %33 
                                        f32_3 %37 = OpLoad %9 
                                          f32 %39 = OpCompositeExtract %37 2 
                                          f32 %40 = OpImageSampleDrefExplicitLod %36 %37 %39 Lod %6 
                                                      OpStore %25 %40 
                                 Uniform f32* %52 = OpAccessChain %47 %49 %50 
                                          f32 %53 = OpLoad %52 
                                          f32 %54 = OpFNegate %53 
                                          f32 %56 = OpFAdd %54 %55 
                                 Private f32* %57 = OpAccessChain %42 %50 
                                                      OpStore %57 %56 
                                          f32 %58 = OpLoad %25 
                                 Uniform f32* %59 = OpAccessChain %47 %49 %50 
                                          f32 %60 = OpLoad %59 
                                          f32 %61 = OpFMul %58 %60 
                                 Private f32* %62 = OpAccessChain %42 %50 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpFAdd %61 %63 
                                 Private f32* %65 = OpAccessChain %42 %50 
                                                      OpStore %65 %64 
                                   Input f32* %69 = OpAccessChain vs_TEXCOORD7 %17 
                                          f32 %70 = OpLoad %69 
                                         bool %71 = OpFOrdGreaterThanEqual %38 %70 
                                                      OpStore %68 %71 
                                   Input f32* %73 = OpAccessChain vs_TEXCOORD7 %17 
                                          f32 %74 = OpLoad %73 
                                         bool %75 = OpFOrdGreaterThanEqual %74 %55 
                                                      OpStore %72 %75 
                                         bool %76 = OpLoad %72 
                                         bool %77 = OpLoad %68 
                                         bool %78 = OpLogicalOr %76 %77 
                                                      OpStore %68 %78 
                                         bool %79 = OpLoad %68 
                                                      OpSelectionMerge %83 None 
                                                      OpBranchConditional %79 %82 %84 
                                              %82 = OpLabel 
                                                      OpStore %81 %55 
                                                      OpBranch %83 
                                              %84 = OpLabel 
                                 Private f32* %85 = OpAccessChain %42 %50 
                                          f32 %86 = OpLoad %85 
                                                      OpStore %81 %86 
                                                      OpBranch %83 
                                              %83 = OpLabel 
                                          f32 %87 = OpLoad %81 
                                 Private f32* %88 = OpAccessChain %42 %50 
                                                      OpStore %88 %87 
                                        f32_3 %92 = OpLoad vs_TEXCOORD2 
                                        f32_3 %93 = OpLoad vs_TEXCOORD2 
                                          f32 %94 = OpDot %92 %93 
                                 Private f32* %95 = OpAccessChain %89 %50 
                                                      OpStore %95 %94 
                                 Private f32* %96 = OpAccessChain %89 %50 
                                          f32 %97 = OpLoad %96 
                                          f32 %98 = OpExtInst %1 32 %97 
                                 Private f32* %99 = OpAccessChain %89 %50 
                                                      OpStore %99 %98 
                                       f32_4 %102 = OpLoad %89 
                                       f32_3 %103 = OpVectorShuffle %102 %102 0 0 0 
                                       f32_3 %104 = OpLoad vs_TEXCOORD2 
                                       f32_3 %105 = OpFMul %103 %104 
                                                      OpStore %101 %105 
                                       f32_3 %107 = OpLoad vs_TEXCOORD2 
                                       f32_4 %108 = OpLoad %89 
                                       f32_3 %109 = OpVectorShuffle %108 %108 0 0 0 
                                       f32_3 %110 = OpFMul %107 %109 
                              Uniform f32_4* %119 = OpAccessChain %116 %117 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_3 %122 = OpFAdd %110 %121 
                                                      OpStore %106 %122 
                                       f32_3 %123 = OpLoad %106 
                                       f32_3 %124 = OpLoad %106 
                                         f32 %125 = OpDot %123 %124 
                                Private f32* %126 = OpAccessChain %89 %50 
                                                      OpStore %126 %125 
                                Private f32* %128 = OpAccessChain %89 %50 
                                         f32 %129 = OpLoad %128 
                                         f32 %130 = OpExtInst %1 32 %129 
                                                      OpStore %127 %130 
                                         f32 %132 = OpLoad %127 
                                       f32_3 %133 = OpCompositeConstruct %132 %132 %132 
                                       f32_3 %134 = OpLoad %106 
                                       f32_3 %135 = OpFMul %133 %134 
                                       f32_4 %136 = OpLoad %131 
                                       f32_4 %137 = OpVectorShuffle %136 %135 4 5 6 3 
                                                      OpStore %131 %137 
                                       f32_2 %141 = OpLoad vs_TEXCOORD0 
                              Uniform f32_4* %146 = OpAccessChain %144 %145 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 1 
                                       f32_2 %149 = OpFMul %141 %148 
                              Uniform f32_4* %150 = OpAccessChain %144 %145 
                                       f32_4 %151 = OpLoad %150 
                                       f32_2 %152 = OpVectorShuffle %151 %151 2 3 
                                       f32_2 %153 = OpFAdd %149 %152 
                                       f32_3 %154 = OpLoad %138 
                                       f32_3 %155 = OpVectorShuffle %154 %153 3 4 2 
                                                      OpStore %138 %155 
                         read_only Texture2D %158 = OpLoad %157 
                                     sampler %160 = OpLoad %159 
                  read_only Texture2DSampled %162 = OpSampledImage %158 %160 
                                       f32_3 %163 = OpLoad %138 
                                       f32_2 %164 = OpVectorShuffle %163 %163 0 1 
                                       f32_4 %165 = OpImageSampleImplicitLod %162 %164 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                                      OpStore %156 %166 
                         read_only Texture2D %169 = OpLoad %168 
                                     sampler %171 = OpLoad %170 
                  read_only Texture2DSampled %172 = OpSampledImage %169 %171 
                                       f32_3 %173 = OpLoad %138 
                                       f32_2 %174 = OpVectorShuffle %173 %173 0 1 
                                       f32_4 %175 = OpImageSampleImplicitLod %172 %174 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                                      OpStore %167 %176 
                                       f32_3 %178 = OpLoad %167 
                                       f32_3 %181 = OpFMul %178 %180 
                                       f32_3 %184 = OpFAdd %181 %183 
                                                      OpStore %177 %184 
                         read_only Texture2D %187 = OpLoad %186 
                                     sampler %189 = OpLoad %188 
                  read_only Texture2DSampled %190 = OpSampledImage %187 %189 
                                       f32_3 %191 = OpLoad %138 
                                       f32_2 %192 = OpVectorShuffle %191 %191 0 1 
                                       f32_4 %193 = OpImageSampleImplicitLod %190 %192 
                                                      OpStore %185 %193 
                                Private f32* %195 = OpAccessChain %185 %194 
                                         f32 %196 = OpLoad %195 
                                Uniform f32* %198 = OpAccessChain %144 %197 
                                         f32 %199 = OpLoad %198 
                                         f32 %200 = OpFNegate %199 
                                         f32 %201 = OpFAdd %196 %200 
                                                      OpStore %127 %201 
                                         f32 %203 = OpLoad %127 
                                         f32 %204 = OpFNegate %203 
                                         f32 %205 = OpFAdd %204 %55 
                                Private f32* %206 = OpAccessChain %202 %50 
                                                      OpStore %206 %205 
                                Private f32* %207 = OpAccessChain %202 %50 
                                         f32 %208 = OpLoad %207 
                                Private f32* %209 = OpAccessChain %202 %50 
                                         f32 %210 = OpLoad %209 
                                         f32 %211 = OpFMul %208 %210 
                                Private f32* %212 = OpAccessChain %202 %50 
                                                      OpStore %212 %211 
                                Private f32* %213 = OpAccessChain %202 %50 
                                         f32 %214 = OpLoad %213 
                                         f32 %216 = OpExtInst %1 40 %214 %215 
                                Private f32* %217 = OpAccessChain %202 %50 
                                                      OpStore %217 %216 
                                       f32_3 %219 = OpLoad %156 
                                       f32_4 %220 = OpLoad %185 
                                       f32_3 %221 = OpVectorShuffle %220 %220 2 2 2 
                                       f32_3 %222 = OpFMul %219 %221 
                                                      OpStore %218 %222 
                                       f32_3 %224 = OpLoad %218 
                              Uniform f32_4* %226 = OpAccessChain %144 %225 
                                       f32_4 %227 = OpLoad %226 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                       f32_3 %229 = OpFMul %224 %228 
                                                      OpStore %223 %229 
                                       f32_3 %230 = OpLoad %156 
                                       f32_3 %233 = OpFAdd %230 %232 
                                                      OpStore %218 %233 
                                       f32_4 %234 = OpLoad %185 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 0 0 
                                       f32_3 %236 = OpLoad %218 
                                       f32_3 %237 = OpFMul %235 %236 
                                       f32_3 %240 = OpFAdd %237 %239 
                                                      OpStore %218 %240 
                                Private f32* %242 = OpAccessChain %185 %50 
                                         f32 %243 = OpLoad %242 
                                         f32 %245 = OpFMul %243 %244 
                                         f32 %247 = OpFAdd %245 %246 
                                Private f32* %248 = OpAccessChain %241 %50 
                                                      OpStore %248 %247 
                                       f32_3 %249 = OpLoad %156 
                                       f32_3 %250 = OpLoad %241 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 0 0 
                                       f32_3 %252 = OpFMul %249 %251 
                                                      OpStore %241 %252 
                                       f32_4 %253 = OpLoad %185 
                                       f32_3 %254 = OpVectorShuffle %253 %253 3 3 3 
                                       f32_3 %255 = OpLoad %241 
                                       f32_3 %256 = OpFMul %254 %255 
                                                      OpStore %241 %256 
                                       f32_3 %257 = OpLoad %177 
                                       f32_3 %258 = OpVectorShuffle %257 %257 1 1 1 
                                       f32_3 %260 = OpLoad vs_TEXCOORD4 
                                       f32_3 %261 = OpFMul %258 %260 
                                                      OpStore %138 %261 
                                       f32_3 %262 = OpLoad %177 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 0 0 
                                       f32_3 %265 = OpLoad vs_TEXCOORD3 
                                       f32_3 %266 = OpFMul %263 %265 
                                       f32_3 %267 = OpLoad %138 
                                       f32_3 %268 = OpFAdd %266 %267 
                                                      OpStore %138 %268 
                                       f32_3 %269 = OpLoad %177 
                                       f32_3 %270 = OpVectorShuffle %269 %269 2 2 2 
                                       f32_3 %272 = OpLoad vs_TEXCOORD1 
                                       f32_3 %273 = OpFMul %270 %272 
                                       f32_3 %274 = OpLoad %138 
                                       f32_3 %275 = OpFAdd %273 %274 
                                                      OpStore %138 %275 
                                       f32_3 %277 = OpLoad %138 
                                       f32_3 %278 = OpLoad %138 
                                         f32 %279 = OpDot %277 %278 
                                                      OpStore %276 %279 
                                         f32 %280 = OpLoad %276 
                                         f32 %281 = OpExtInst %1 32 %280 
                                                      OpStore %276 %281 
                                         f32 %283 = OpLoad %276 
                                       f32_3 %284 = OpCompositeConstruct %283 %283 %283 
                                       f32_3 %285 = OpLoad %138 
                                       f32_3 %286 = OpFMul %284 %285 
                                       f32_4 %287 = OpLoad %282 
                                       f32_4 %288 = OpVectorShuffle %287 %286 4 5 6 3 
                                                      OpStore %282 %288 
                                       f32_4 %289 = OpLoad %282 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 1 2 
                              Uniform f32_4* %291 = OpAccessChain %116 %117 
                                       f32_4 %292 = OpLoad %291 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
                                         f32 %294 = OpDot %290 %293 
                                                      OpStore %276 %294 
                                         f32 %295 = OpLoad %276 
                                         f32 %297 = OpExtInst %1 40 %295 %296 
                                Private f32* %298 = OpAccessChain %138 %50 
                                                      OpStore %298 %297 
                                       f32_4 %299 = OpLoad %282 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
                                       f32_3 %301 = OpLoad %101 
                                         f32 %302 = OpDot %300 %301 
                                Private f32* %303 = OpAccessChain %89 %194 
                                                      OpStore %303 %302 
                              Uniform f32_4* %304 = OpAccessChain %116 %117 
                                       f32_4 %305 = OpLoad %304 
                                       f32_3 %306 = OpVectorShuffle %305 %305 0 1 2 
                                       f32_4 %307 = OpLoad %131 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
                                         f32 %309 = OpDot %306 %308 
                                Private f32* %310 = OpAccessChain %89 %17 
                                                      OpStore %310 %309 
                                       f32_4 %311 = OpLoad %89 
                                       f32_3 %312 = OpVectorShuffle %311 %311 0 1 2 
                                       f32_3 %315 = OpExtInst %1 40 %312 %314 
                                       f32_4 %316 = OpLoad %89 
                                       f32_4 %317 = OpVectorShuffle %316 %315 4 5 6 3 
                                                      OpStore %89 %317 
                                Private f32* %319 = OpAccessChain %202 %50 
                                         f32 %320 = OpLoad %319 
                                Private f32* %321 = OpAccessChain %202 %50 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpFAdd %320 %322 
                                                      OpStore %318 %323 
                                Private f32* %324 = OpAccessChain %89 %17 
                                         f32 %325 = OpLoad %324 
                                Private f32* %326 = OpAccessChain %89 %17 
                                         f32 %327 = OpLoad %326 
                                         f32 %328 = OpFMul %325 %327 
                                Private f32* %329 = OpAccessChain %131 %50 
                                                      OpStore %329 %328 
                                Private f32* %330 = OpAccessChain %131 %50 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpLoad %318 
                                         f32 %333 = OpFMul %331 %332 
                                         f32 %335 = OpFAdd %333 %334 
                                                      OpStore %318 %335 
                                         f32 %336 = OpLoad %318 
                                         f32 %337 = OpFAdd %336 %182 
                                Private f32* %338 = OpAccessChain %177 %50 
                                                      OpStore %338 %337 
                                Private f32* %339 = OpAccessChain %89 %194 
                                         f32 %340 = OpLoad %339 
                                         f32 %341 = OpFNegate %340 
                                         f32 %342 = OpFAdd %341 %55 
                                Private f32* %343 = OpAccessChain %101 %50 
                                                      OpStore %343 %342 
                                Private f32* %344 = OpAccessChain %101 %50 
                                         f32 %345 = OpLoad %344 
                                         f32 %346 = OpExtInst %1 40 %345 %38 
                                Private f32* %347 = OpAccessChain %101 %50 
                                                      OpStore %347 %346 
                                Private f32* %348 = OpAccessChain %101 %50 
                                         f32 %349 = OpLoad %348 
                                Private f32* %350 = OpAccessChain %101 %50 
                                         f32 %351 = OpLoad %350 
                                         f32 %352 = OpFMul %349 %351 
                                                      OpStore %318 %352 
                                         f32 %353 = OpLoad %318 
                                         f32 %354 = OpLoad %318 
                                         f32 %355 = OpFMul %353 %354 
                                                      OpStore %318 %355 
                                Private f32* %356 = OpAccessChain %101 %50 
                                         f32 %357 = OpLoad %356 
                                         f32 %358 = OpLoad %318 
                                         f32 %359 = OpFMul %357 %358 
                                Private f32* %360 = OpAccessChain %101 %50 
                                                      OpStore %360 %359 
                                Private f32* %361 = OpAccessChain %177 %50 
                                         f32 %362 = OpLoad %361 
                                Private f32* %363 = OpAccessChain %101 %50 
                                         f32 %364 = OpLoad %363 
                                         f32 %365 = OpFMul %362 %364 
                                         f32 %366 = OpFAdd %365 %55 
                                Private f32* %367 = OpAccessChain %101 %50 
                                                      OpStore %367 %366 
                                Private f32* %368 = OpAccessChain %138 %50 
                                         f32 %369 = OpLoad %368 
                                         f32 %370 = OpFNegate %369 
                                         f32 %371 = OpFAdd %370 %55 
                                                      OpStore %318 %371 
                                         f32 %372 = OpLoad %318 
                                         f32 %373 = OpExtInst %1 40 %372 %38 
                                                      OpStore %318 %373 
                                         f32 %374 = OpLoad %318 
                                         f32 %375 = OpLoad %318 
                                         f32 %376 = OpFMul %374 %375 
                                Private f32* %377 = OpAccessChain %131 %50 
                                                      OpStore %377 %376 
                                Private f32* %378 = OpAccessChain %131 %50 
                                         f32 %379 = OpLoad %378 
                                Private f32* %380 = OpAccessChain %131 %50 
                                         f32 %381 = OpLoad %380 
                                         f32 %382 = OpFMul %379 %381 
                                Private f32* %383 = OpAccessChain %131 %50 
                                                      OpStore %383 %382 
                                         f32 %384 = OpLoad %318 
                                Private f32* %385 = OpAccessChain %131 %50 
                                         f32 %386 = OpLoad %385 
                                         f32 %387 = OpFMul %384 %386 
                                                      OpStore %318 %387 
                                Private f32* %388 = OpAccessChain %177 %50 
                                         f32 %389 = OpLoad %388 
                                         f32 %390 = OpLoad %318 
                                         f32 %391 = OpFMul %389 %390 
                                         f32 %392 = OpFAdd %391 %55 
                                                      OpStore %318 %392 
                                Private f32* %394 = OpAccessChain %101 %50 
                                         f32 %395 = OpLoad %394 
                                         f32 %396 = OpLoad %318 
                                         f32 %397 = OpFMul %395 %396 
                                                      OpStore %393 %397 
                                         f32 %398 = OpLoad %393 
                                         f32 %399 = OpExtInst %1 37 %398 %55 
                                                      OpStore %393 %399 
                                         f32 %400 = OpLoad %276 
                                         f32 %401 = OpLoad %393 
                                         f32 %402 = OpFMul %400 %401 
                                                      OpStore %393 %402 
                                         f32 %404 = OpLoad %393 
                                         f32 %405 = OpFMul %404 %334 
                                         f32 %406 = OpFAdd %405 %334 
                                                      OpStore %403 %406 
                                         f32 %407 = OpLoad %403 
                                Private f32* %408 = OpAccessChain %131 %50 
                                                      OpStore %408 %407 
                                Uniform f32* %409 = OpAccessChain %144 %49 
                                         f32 %410 = OpLoad %409 
                                Uniform f32* %411 = OpAccessChain %144 %49 
                                         f32 %412 = OpLoad %411 
                                       f32_2 %413 = OpCompositeConstruct %410 %412 
                                         f32 %414 = OpCompositeExtract %413 0 
                                         f32 %415 = OpCompositeExtract %413 1 
                                       f32_2 %416 = OpCompositeConstruct %414 %415 
                                       f32_4 %417 = OpLoad %131 
                                       f32_4 %418 = OpVectorShuffle %417 %416 0 4 2 5 
                                                      OpStore %131 %418 
                         read_only Texture2D %421 = OpLoad %420 
                                     sampler %423 = OpLoad %422 
                  read_only Texture2DSampled %424 = OpSampledImage %421 %423 
                                       f32_4 %425 = OpLoad %131 
                                       f32_2 %426 = OpVectorShuffle %425 %425 0 1 
                                       f32_4 %427 = OpImageSampleImplicitLod %424 %426 
                                       f32_3 %428 = OpVectorShuffle %427 %427 0 1 2 
                                                      OpStore %419 %428 
                                       f32_3 %430 = OpLoad %419 
                                Uniform f32* %432 = OpAccessChain %144 %431 
                                         f32 %433 = OpLoad %432 
                                Uniform f32* %434 = OpAccessChain %144 %431 
                                         f32 %435 = OpLoad %434 
                                Uniform f32* %436 = OpAccessChain %144 %431 
                                         f32 %437 = OpLoad %436 
                                       f32_3 %438 = OpCompositeConstruct %433 %435 %437 
                                         f32 %439 = OpCompositeExtract %438 0 
                                         f32 %440 = OpCompositeExtract %438 1 
                                         f32 %441 = OpCompositeExtract %438 2 
                                       f32_3 %442 = OpCompositeConstruct %439 %440 %441 
                                       f32_3 %443 = OpFMul %430 %442 
                                                      OpStore %429 %443 
                                Private f32* %444 = OpAccessChain %42 %50 
                                         f32 %445 = OpLoad %444 
                                Private f32* %446 = OpAccessChain %131 %50 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpExtInst %1 37 %445 %447 
                                Private f32* %449 = OpAccessChain %101 %50 
                                                      OpStore %449 %448 
                                       f32_3 %451 = OpLoad %241 
                                       f32_3 %452 = OpLoad %429 
                                       f32_3 %453 = OpFMul %451 %452 
                                                      OpStore %450 %453 
                                       f32_3 %454 = OpLoad %450 
                              Uniform f32_4* %455 = OpAccessChain %116 %145 
                                       f32_4 %456 = OpLoad %455 
                                       f32_3 %457 = OpVectorShuffle %456 %456 0 1 2 
                                       f32_3 %458 = OpFMul %454 %457 
                                                      OpStore %429 %458 
                                       f32_3 %459 = OpLoad %429 
                                       f32_3 %460 = OpLoad %101 
                                       f32_3 %461 = OpVectorShuffle %460 %460 0 0 0 
                                       f32_3 %462 = OpFMul %459 %461 
                                       f32_3 %463 = OpLoad %223 
                                       f32_3 %464 = OpFAdd %462 %463 
                                                      OpStore %429 %464 
                                Uniform f32* %465 = OpAccessChain %116 %225 %50 
                                         f32 %466 = OpLoad %465 
                                Uniform f32* %473 = OpAccessChain %472 %431 %194 
                                         f32 %474 = OpLoad %473 
                                         f32 %475 = OpExtInst %1 37 %466 %474 
                                                      OpStore %393 %475 
                                         f32 %478 = OpLoad %393 
                                         i32 %479 = OpConvertFToS %478 
                                                      OpStore %477 %479 
                                       f32_3 %480 = OpLoad %429 
                                                      OpStore %450 %480 
                                                      OpStore %482 %50 
                                                      OpBranch %483 
                                             %483 = OpLabel 
                                                      OpLoopMerge %485 %486 None 
                                                      OpBranch %487 
                                             %487 = OpLabel 
                                         u32 %488 = OpLoad %482 
                                         i32 %489 = OpLoad %477 
                                         u32 %490 = OpBitcast %489 
                                        bool %491 = OpULessThan %488 %490 
                                                      OpBranchConditional %491 %484 %485 
                                             %484 = OpLabel 
                                         u32 %493 = OpLoad %482 
                                         u32 %495 = OpBitwiseAnd %493 %494 
                                         i32 %496 = OpBitcast %495 
                                                      OpStore %492 %496 
                                         u32 %499 = OpLoad %482 
                                         u32 %500 = OpShiftRightLogical %499 %17 
                                                      OpStore %498 %500 
                                         u32 %502 = OpLoad %498 
                                         i32 %503 = OpBitcast %502 
                              Uniform f32_4* %504 = OpAccessChain %472 %501 %503 
                                       f32_4 %505 = OpLoad %504 
                                         i32 %514 = OpLoad %492 
                                                      OpStore %516 %513 
                             Function u32_4* %518 = OpAccessChain %516 %514 
                                       u32_4 %519 = OpLoad %518 
                                       f32_4 %520 = OpBitcast %519 
                                         f32 %521 = OpDot %505 %520 
                                                      OpStore %393 %521 
                                         f32 %522 = OpLoad %393 
                                         i32 %523 = OpConvertFToS %522 
                                                      OpStore %492 %523 
                                       f32_3 %526 = OpLoad vs_TEXCOORD5 
                                       f32_3 %527 = OpFNegate %526 
                                         i32 %537 = OpLoad %492 
                              Uniform f32_4* %538 = OpAccessChain %536 %117 %537 
                                       f32_4 %539 = OpLoad %538 
                                       f32_3 %540 = OpVectorShuffle %539 %539 3 3 3 
                                       f32_3 %541 = OpFMul %527 %540 
                                         i32 %542 = OpLoad %492 
                              Uniform f32_4* %543 = OpAccessChain %536 %117 %542 
                                       f32_4 %544 = OpLoad %543 
                                       f32_3 %545 = OpVectorShuffle %544 %544 0 1 2 
                                       f32_3 %546 = OpFAdd %541 %545 
                                                      OpStore %524 %546 
                                       f32_3 %548 = OpLoad %524 
                                       f32_3 %549 = OpLoad %524 
                                         f32 %550 = OpDot %548 %549 
                                                      OpStore %547 %550 
                                         f32 %551 = OpLoad %547 
                                         f32 %553 = OpExtInst %1 40 %551 %552 
                                                      OpStore %547 %553 
                                         f32 %555 = OpLoad %547 
                                         f32 %556 = OpExtInst %1 32 %555 
                                                      OpStore %554 %556 
                                         f32 %557 = OpLoad %554 
                                       f32_3 %558 = OpCompositeConstruct %557 %557 %557 
                                       f32_3 %559 = OpLoad %524 
                                       f32_3 %560 = OpFMul %558 %559 
                                                      OpStore %524 %560 
                                         f32 %561 = OpLoad %547 
                                         f32 %562 = OpFDiv %55 %561 
                                                      OpStore %554 %562 
                                         f32 %563 = OpLoad %547 
                                         i32 %564 = OpLoad %492 
                                Uniform f32* %565 = OpAccessChain %536 %225 %564 %50 
                                         f32 %566 = OpLoad %565 
                                         f32 %567 = OpFMul %563 %566 
                                         i32 %568 = OpLoad %492 
                                Uniform f32* %569 = OpAccessChain %536 %225 %568 %194 
                                         f32 %570 = OpLoad %569 
                                         f32 %571 = OpFAdd %567 %570 
                                                      OpStore %547 %571 
                                         f32 %572 = OpLoad %547 
                                         f32 %573 = OpExtInst %1 43 %572 %38 %55 
                                                      OpStore %547 %573 
                                         f32 %574 = OpLoad %547 
                                         f32 %575 = OpLoad %554 
                                         f32 %576 = OpFMul %574 %575 
                                                      OpStore %547 %576 
                                         i32 %577 = OpLoad %492 
                              Uniform f32_4* %578 = OpAccessChain %536 %197 %577 
                                       f32_4 %579 = OpLoad %578 
                                       f32_3 %580 = OpVectorShuffle %579 %579 0 1 2 
                                       f32_3 %581 = OpLoad %524 
                                         f32 %582 = OpDot %580 %581 
                                                      OpStore %393 %582 
                                         f32 %583 = OpLoad %393 
                                         i32 %584 = OpLoad %492 
                                Uniform f32* %585 = OpAccessChain %536 %225 %584 %17 
                                         f32 %586 = OpLoad %585 
                                         f32 %587 = OpFMul %583 %586 
                                         i32 %588 = OpLoad %492 
                                Uniform f32* %589 = OpAccessChain %536 %225 %588 %494 
                                         f32 %590 = OpLoad %589 
                                         f32 %591 = OpFAdd %587 %590 
                                                      OpStore %393 %591 
                                         f32 %592 = OpLoad %393 
                                         f32 %593 = OpExtInst %1 43 %592 %38 %55 
                                                      OpStore %393 %593 
                                         f32 %594 = OpLoad %393 
                                         f32 %595 = OpLoad %393 
                                         f32 %596 = OpFMul %594 %595 
                                                      OpStore %393 %596 
                                         f32 %597 = OpLoad %547 
                                         f32 %598 = OpLoad %393 
                                         f32 %599 = OpFMul %597 %598 
                                                      OpStore %547 %599 
                                       f32_4 %600 = OpLoad %282 
                                       f32_3 %601 = OpVectorShuffle %600 %600 0 1 2 
                                       f32_3 %602 = OpLoad %524 
                                         f32 %603 = OpDot %601 %602 
                                                      OpStore %554 %603 
                                         f32 %604 = OpLoad %554 
                                         f32 %605 = OpExtInst %1 40 %604 %296 
                                Private f32* %606 = OpAccessChain %131 %17 
                                                      OpStore %606 %605 
                         read_only Texture2D %608 = OpLoad %420 
                                     sampler %609 = OpLoad %422 
                  read_only Texture2DSampled %610 = OpSampledImage %608 %609 
                                       f32_4 %611 = OpLoad %131 
                                       f32_2 %612 = OpVectorShuffle %611 %611 2 3 
                                       f32_4 %613 = OpImageSampleImplicitLod %610 %612 
                                       f32_3 %614 = OpVectorShuffle %613 %613 0 1 2 
                                                      OpStore %607 %614 
                                       f32_3 %615 = OpLoad %607 
                                Uniform f32* %616 = OpAccessChain %144 %431 
                                         f32 %617 = OpLoad %616 
                                Uniform f32* %618 = OpAccessChain %144 %431 
                                         f32 %619 = OpLoad %618 
                                Uniform f32* %620 = OpAccessChain %144 %431 
                                         f32 %621 = OpLoad %620 
                                       f32_3 %622 = OpCompositeConstruct %617 %619 %621 
                                         f32 %623 = OpCompositeExtract %622 0 
                                         f32 %624 = OpCompositeExtract %622 1 
                                         f32 %625 = OpCompositeExtract %622 2 
                                       f32_3 %626 = OpCompositeConstruct %623 %624 %625 
                                       f32_3 %627 = OpFMul %615 %626 
                                                      OpStore %524 %627 
                                       f32_3 %629 = OpLoad %241 
                                       f32_3 %630 = OpLoad %524 
                                       f32_3 %631 = OpFMul %629 %630 
                                                      OpStore %628 %631 
                                       f32_3 %632 = OpLoad %628 
                                         i32 %633 = OpLoad %492 
                              Uniform f32_4* %634 = OpAccessChain %536 %145 %633 
                                       f32_4 %635 = OpLoad %634 
                                       f32_3 %636 = OpVectorShuffle %635 %635 0 1 2 
                                       f32_3 %637 = OpFMul %632 %636 
                                                      OpStore %628 %637 
                                       f32_3 %638 = OpLoad %628 
                                         f32 %639 = OpLoad %547 
                                       f32_3 %640 = OpCompositeConstruct %639 %639 %639 
                                       f32_3 %641 = OpFMul %638 %640 
                                       f32_3 %642 = OpLoad %223 
                                       f32_3 %643 = OpFAdd %641 %642 
                                                      OpStore %628 %643 
                                       f32_3 %644 = OpLoad %450 
                                       f32_3 %645 = OpLoad %628 
                                       f32_3 %646 = OpFAdd %644 %645 
                                                      OpStore %450 %646 
                                                      OpBranch %486 
                                             %486 = OpLabel 
                                         u32 %647 = OpLoad %482 
                                         u32 %648 = OpIAdd %647 %145 
                                                      OpStore %482 %648 
                                                      OpBranch %483 
                                             %485 = OpLabel 
                                Private f32* %649 = OpAccessChain %89 %50 
                                         f32 %650 = OpLoad %649 
                                         f32 %651 = OpExtInst %1 32 %650 
                                Private f32* %652 = OpAccessChain %89 %50 
                                                      OpStore %652 %651 
                                       f32_4 %653 = OpLoad %89 
                                       f32_3 %654 = OpVectorShuffle %653 %653 0 0 0 
                                       f32_3 %655 = OpLoad %106 
                                       f32_3 %656 = OpFMul %654 %655 
                                       f32_4 %657 = OpLoad %89 
                                       f32_4 %658 = OpVectorShuffle %657 %656 4 5 2 6 
                                                      OpStore %89 %658 
                                       f32_4 %659 = OpLoad %282 
                                       f32_3 %660 = OpVectorShuffle %659 %659 0 1 2 
                                       f32_4 %661 = OpLoad %89 
                                       f32_3 %662 = OpVectorShuffle %661 %661 0 1 3 
                                         f32 %663 = OpDot %660 %662 
                                Private f32* %664 = OpAccessChain %106 %50 
                                                      OpStore %664 %663 
                                Private f32* %665 = OpAccessChain %106 %50 
                                         f32 %666 = OpLoad %665 
                                         f32 %667 = OpExtInst %1 43 %666 %38 %55 
                                Private f32* %668 = OpAccessChain %106 %50 
                                                      OpStore %668 %667 
                              Uniform f32_4* %669 = OpAccessChain %116 %117 
                                       f32_4 %670 = OpLoad %669 
                                       f32_3 %671 = OpVectorShuffle %670 %670 0 1 2 
                                       f32_4 %672 = OpLoad %89 
                                       f32_3 %673 = OpVectorShuffle %672 %672 0 1 3 
                                         f32 %674 = OpDot %671 %673 
                                Private f32* %675 = OpAccessChain %89 %50 
                                                      OpStore %675 %674 
                                Private f32* %676 = OpAccessChain %89 %50 
                                         f32 %677 = OpLoad %676 
                                         f32 %678 = OpExtInst %1 43 %677 %38 %55 
                                Private f32* %679 = OpAccessChain %89 %50 
                                                      OpStore %679 %678 
                                Private f32* %680 = OpAccessChain %106 %50 
                                         f32 %681 = OpLoad %680 
                                Private f32* %682 = OpAccessChain %106 %50 
                                         f32 %683 = OpLoad %682 
                                         f32 %684 = OpFMul %681 %683 
                                Private f32* %685 = OpAccessChain %101 %50 
                                                      OpStore %685 %684 
                                Private f32* %686 = OpAccessChain %202 %50 
                                         f32 %687 = OpLoad %686 
                                Private f32* %688 = OpAccessChain %202 %50 
                                         f32 %689 = OpLoad %688 
                                         f32 %690 = OpFMul %687 %689 
                                                      OpStore %393 %690 
                                Private f32* %692 = OpAccessChain %202 %50 
                                         f32 %693 = OpLoad %692 
                                Private f32* %694 = OpAccessChain %202 %50 
                                         f32 %695 = OpLoad %694 
                                         f32 %696 = OpFMul %693 %695 
                                         f32 %697 = OpFAdd %696 %182 
                                                      OpStore %691 %697 
                                Private f32* %698 = OpAccessChain %101 %50 
                                         f32 %699 = OpLoad %698 
                                         f32 %700 = OpLoad %691 
                                         f32 %701 = OpFMul %699 %700 
                                         f32 %703 = OpFAdd %701 %702 
                                Private f32* %704 = OpAccessChain %101 %50 
                                                      OpStore %704 %703 
                                Private f32* %705 = OpAccessChain %89 %50 
                                         f32 %706 = OpLoad %705 
                                Private f32* %707 = OpAccessChain %89 %50 
                                         f32 %708 = OpLoad %707 
                                         f32 %709 = OpFMul %706 %708 
                                                      OpStore %691 %709 
                                Private f32* %710 = OpAccessChain %101 %50 
                                         f32 %711 = OpLoad %710 
                                Private f32* %712 = OpAccessChain %101 %50 
                                         f32 %713 = OpLoad %712 
                                         f32 %714 = OpFMul %711 %713 
                                Private f32* %715 = OpAccessChain %89 %50 
                                                      OpStore %715 %714 
                                         f32 %716 = OpLoad %691 
                                         f32 %718 = OpExtInst %1 40 %716 %717 
                                Private f32* %719 = OpAccessChain %101 %50 
                                                      OpStore %719 %718 
                                Private f32* %720 = OpAccessChain %101 %50 
                                         f32 %721 = OpLoad %720 
                                Private f32* %722 = OpAccessChain %89 %50 
                                         f32 %723 = OpLoad %722 
                                         f32 %724 = OpFMul %721 %723 
                                Private f32* %725 = OpAccessChain %89 %50 
                                                      OpStore %725 %724 
                                Private f32* %726 = OpAccessChain %202 %50 
                                         f32 %727 = OpLoad %726 
                                         f32 %729 = OpFMul %727 %728 
                                         f32 %730 = OpFAdd %729 %179 
                                                      OpStore %691 %730 
                                Private f32* %731 = OpAccessChain %89 %50 
                                         f32 %732 = OpLoad %731 
                                         f32 %733 = OpLoad %691 
                                         f32 %734 = OpFMul %732 %733 
                                Private f32* %735 = OpAccessChain %89 %50 
                                                      OpStore %735 %734 
                                         f32 %736 = OpLoad %393 
                                Private f32* %737 = OpAccessChain %89 %50 
                                         f32 %738 = OpLoad %737 
                                         f32 %739 = OpFDiv %736 %738 
                                Private f32* %740 = OpAccessChain %89 %50 
                                                      OpStore %740 %739 
                                       f32_3 %741 = OpLoad %218 
                                       f32_4 %742 = OpLoad %89 
                                       f32_3 %743 = OpVectorShuffle %742 %742 0 0 0 
                                       f32_3 %744 = OpFMul %741 %743 
                                       f32_4 %745 = OpLoad %89 
                                       f32_4 %746 = OpVectorShuffle %745 %744 4 5 2 6 
                                                      OpStore %89 %746 
                                       f32_4 %747 = OpLoad %89 
                                       f32_3 %748 = OpVectorShuffle %747 %747 0 1 3 
                                       f32_3 %751 = OpFMul %748 %750 
                                                      OpStore %628 %751 
                                       f32_3 %752 = OpLoad %628 
                              Uniform f32_4* %753 = OpAccessChain %116 %145 
                                       f32_4 %754 = OpLoad %753 
                                       f32_3 %755 = OpVectorShuffle %754 %754 0 1 2 
                                       f32_3 %756 = OpFMul %752 %755 
                                                      OpStore %106 %756 
                                       f32_3 %757 = OpLoad %106 
                                       f32_3 %758 = OpLoad %138 
                                       f32_3 %759 = OpVectorShuffle %758 %758 0 0 0 
                                       f32_3 %760 = OpFMul %757 %759 
                                       f32_3 %761 = OpLoad %450 
                                       f32_3 %762 = OpFAdd %760 %761 
                                                      OpStore %450 %762 
                                Private f32* %763 = OpAccessChain %282 %494 
                                                      OpStore %763 %55 
                              Uniform f32_4* %764 = OpAccessChain %472 %49 
                                       f32_4 %765 = OpLoad %764 
                                       f32_4 %766 = OpLoad %282 
                                         f32 %767 = OpDot %765 %766 
                                Private f32* %768 = OpAccessChain %628 %50 
                                                      OpStore %768 %767 
                              Uniform f32_4* %770 = OpAccessChain %472 %769 
                                       f32_4 %771 = OpLoad %770 
                                       f32_4 %772 = OpLoad %282 
                                         f32 %773 = OpDot %771 %772 
                                Private f32* %774 = OpAccessChain %628 %194 
                                                      OpStore %774 %773 
                              Uniform f32_4* %776 = OpAccessChain %472 %775 
                                       f32_4 %777 = OpLoad %776 
                                       f32_4 %778 = OpLoad %282 
                                         f32 %779 = OpDot %777 %778 
                                Private f32* %780 = OpAccessChain %628 %17 
                                                      OpStore %780 %779 
                                       f32_4 %781 = OpLoad %282 
                                       f32_4 %782 = OpVectorShuffle %781 %781 1 2 2 0 
                                       f32_4 %783 = OpLoad %282 
                                       f32_4 %784 = OpVectorShuffle %783 %783 0 1 2 2 
                                       f32_4 %785 = OpFMul %782 %784 
                                                      OpStore %42 %785 
                              Uniform f32_4* %788 = OpAccessChain %472 %787 
                                       f32_4 %789 = OpLoad %788 
                                       f32_4 %790 = OpLoad %42 
                                         f32 %791 = OpDot %789 %790 
                                Private f32* %792 = OpAccessChain %786 %50 
                                                      OpStore %792 %791 
                              Uniform f32_4* %794 = OpAccessChain %472 %793 
                                       f32_4 %795 = OpLoad %794 
                                       f32_4 %796 = OpLoad %42 
                                         f32 %797 = OpDot %795 %796 
                                Private f32* %798 = OpAccessChain %786 %194 
                                                      OpStore %798 %797 
                              Uniform f32_4* %800 = OpAccessChain %472 %799 
                                       f32_4 %801 = OpLoad %800 
                                       f32_4 %802 = OpLoad %42 
                                         f32 %803 = OpDot %801 %802 
                                Private f32* %804 = OpAccessChain %786 %17 
                                                      OpStore %804 %803 
                                Private f32* %805 = OpAccessChain %282 %194 
                                         f32 %806 = OpLoad %805 
                                Private f32* %807 = OpAccessChain %282 %194 
                                         f32 %808 = OpLoad %807 
                                         f32 %809 = OpFMul %806 %808 
                                                      OpStore %393 %809 
                                Private f32* %810 = OpAccessChain %282 %50 
                                         f32 %811 = OpLoad %810 
                                Private f32* %812 = OpAccessChain %282 %50 
                                         f32 %813 = OpLoad %812 
                                         f32 %814 = OpFMul %811 %813 
                                         f32 %815 = OpLoad %393 
                                         f32 %816 = OpFNegate %815 
                                         f32 %817 = OpFAdd %814 %816 
                                                      OpStore %393 %817 
                              Uniform f32_4* %819 = OpAccessChain %472 %818 
                                       f32_4 %820 = OpLoad %819 
                                       f32_3 %821 = OpVectorShuffle %820 %820 0 1 2 
                                         f32 %822 = OpLoad %393 
                                       f32_3 %823 = OpCompositeConstruct %822 %822 %822 
                                       f32_3 %824 = OpFMul %821 %823 
                                       f32_3 %825 = OpLoad %786 
                                       f32_3 %826 = OpFAdd %824 %825 
                                                      OpStore %786 %826 
                                       f32_3 %827 = OpLoad %628 
                                       f32_3 %828 = OpLoad %786 
                                       f32_3 %829 = OpFAdd %827 %828 
                                                      OpStore %628 %829 
                                       f32_3 %830 = OpLoad %628 
                                       f32_3 %832 = OpExtInst %1 40 %830 %831 
                                                      OpStore %628 %832 
                                       f32_3 %833 = OpLoad %241 
                                       f32_3 %834 = OpLoad %628 
                                       f32_3 %835 = OpFMul %833 %834 
                                                      OpStore %241 %835 
                                Uniform f32* %836 = OpAccessChain %116 %197 %117 %50 
                                         f32 %837 = OpLoad %836 
                                Private f32* %838 = OpAccessChain %106 %50 
                                                      OpStore %838 %837 
                                Uniform f32* %839 = OpAccessChain %116 %197 %145 %50 
                                         f32 %840 = OpLoad %839 
                                Private f32* %841 = OpAccessChain %106 %194 
                                                      OpStore %841 %840 
                                Uniform f32* %842 = OpAccessChain %116 %197 %225 %50 
                                         f32 %843 = OpLoad %842 
                                Private f32* %844 = OpAccessChain %106 %17 
                                                      OpStore %844 %843 
                                       f32_3 %845 = OpLoad %106 
                                       f32_4 %846 = OpLoad %282 
                                       f32_3 %847 = OpVectorShuffle %846 %846 0 1 2 
                                         f32 %848 = OpDot %845 %847 
                                Private f32* %849 = OpAccessChain %628 %50 
                                                      OpStore %849 %848 
                                Uniform f32* %850 = OpAccessChain %116 %197 %117 %194 
                                         f32 %851 = OpLoad %850 
                                Private f32* %852 = OpAccessChain %106 %50 
                                                      OpStore %852 %851 
                                Uniform f32* %853 = OpAccessChain %116 %197 %145 %194 
                                         f32 %854 = OpLoad %853 
                                Private f32* %855 = OpAccessChain %106 %194 
                                                      OpStore %855 %854 
                                Uniform f32* %856 = OpAccessChain %116 %197 %225 %194 
                                         f32 %857 = OpLoad %856 
                                Private f32* %858 = OpAccessChain %106 %17 
                                                      OpStore %858 %857 
                                       f32_3 %859 = OpLoad %106 
                                       f32_4 %860 = OpLoad %282 
                                       f32_3 %861 = OpVectorShuffle %860 %860 0 1 2 
                                         f32 %862 = OpDot %859 %861 
                                Private f32* %863 = OpAccessChain %628 %194 
                                                      OpStore %863 %862 
                                       f32_3 %864 = OpLoad %628 
                                       f32_2 %865 = OpVectorShuffle %864 %864 0 1 
                                       f32_2 %867 = OpFMul %865 %866 
                                       f32_2 %868 = OpFAdd %867 %866 
                                       f32_3 %869 = OpLoad %628 
                                       f32_3 %870 = OpVectorShuffle %869 %868 3 4 2 
                                                      OpStore %628 %870 
                                Private f32* %871 = OpAccessChain %202 %50 
                                         f32 %872 = OpLoad %871 
                                         f32 %873 = OpFNegate %872 
                                         f32 %875 = OpFMul %873 %874 
                                         f32 %877 = OpFAdd %875 %876 
                                                      OpStore %393 %877 
                                Private f32* %878 = OpAccessChain %202 %50 
                                         f32 %879 = OpLoad %878 
                                         f32 %880 = OpLoad %393 
                                         f32 %881 = OpFMul %879 %880 
                                Private f32* %882 = OpAccessChain %202 %50 
                                                      OpStore %882 %881 
                                Private f32* %883 = OpAccessChain %202 %50 
                                         f32 %884 = OpLoad %883 
                                         f32 %886 = OpFMul %884 %885 
                                                      OpStore %393 %886 
                         read_only Texture2D %889 = OpLoad %888 
                                     sampler %891 = OpLoad %890 
                  read_only Texture2DSampled %892 = OpSampledImage %889 %891 
                                       f32_3 %893 = OpLoad %628 
                                       f32_2 %894 = OpVectorShuffle %893 %893 0 1 
                                         f32 %895 = OpLoad %393 
                                       f32_4 %896 = OpImageSampleExplicitLod %892 %894 Lod %10 
                                       f32_3 %897 = OpVectorShuffle %896 %896 0 1 2 
                                                      OpStore %887 %897 
                                Private f32* %898 = OpAccessChain %202 %50 
                                         f32 %899 = OpLoad %898 
                                Private f32* %900 = OpAccessChain %202 %50 
                                         f32 %901 = OpLoad %900 
                                         f32 %902 = OpFMul %899 %901 
                                         f32 %903 = OpFAdd %902 %55 
                                Private f32* %904 = OpAccessChain %131 %50 
                                                      OpStore %904 %903 
                                Private f32* %905 = OpAccessChain %131 %50 
                                         f32 %906 = OpLoad %905 
                                         f32 %907 = OpFDiv %55 %906 
                                Private f32* %908 = OpAccessChain %131 %50 
                                                      OpStore %908 %907 
                                Private f32* %909 = OpAccessChain %89 %194 
                                         f32 %910 = OpLoad %909 
                                Private f32* %911 = OpAccessChain %89 %50 
                                         f32 %912 = OpLoad %911 
                                         f32 %913 = OpExtInst %1 40 %910 %912 
                                Private f32* %914 = OpAccessChain %89 %50 
                                                      OpStore %914 %913 
                                Private f32* %915 = OpAccessChain %89 %494 
                                         f32 %916 = OpLoad %915 
                                Private f32* %917 = OpAccessChain %89 %50 
                                         f32 %918 = OpLoad %917 
                                         f32 %919 = OpExtInst %1 40 %916 %918 
                                Private f32* %920 = OpAccessChain %89 %50 
                                                      OpStore %920 %919 
                                         f32 %921 = OpLoad %127 
                                Private f32* %922 = OpAccessChain %89 %50 
                                         f32 %923 = OpLoad %922 
                                         f32 %924 = OpFAdd %921 %923 
                                Private f32* %925 = OpAccessChain %89 %50 
                                                      OpStore %925 %924 
                                Private f32* %926 = OpAccessChain %89 %50 
                                         f32 %927 = OpLoad %926 
                                         f32 %928 = OpExtInst %1 43 %927 %38 %55 
                                Private f32* %929 = OpAccessChain %89 %50 
                                                      OpStore %929 %928 
                                Private f32* %930 = OpAccessChain %89 %17 
                                         f32 %931 = OpLoad %930 
                                         f32 %932 = OpFNegate %931 
                                         f32 %933 = OpFAdd %932 %55 
                                Private f32* %934 = OpAccessChain %101 %50 
                                                      OpStore %934 %933 
                                Private f32* %935 = OpAccessChain %101 %50 
                                         f32 %936 = OpLoad %935 
                                         f32 %937 = OpExtInst %1 40 %936 %38 
                                Private f32* %938 = OpAccessChain %101 %50 
                                                      OpStore %938 %937 
                                Private f32* %940 = OpAccessChain %101 %50 
                                         f32 %941 = OpLoad %940 
                                Private f32* %942 = OpAccessChain %101 %50 
                                         f32 %943 = OpLoad %942 
                                         f32 %944 = OpFMul %941 %943 
                                                      OpStore %939 %944 
                                         f32 %945 = OpLoad %939 
                                         f32 %946 = OpLoad %939 
                                         f32 %947 = OpFMul %945 %946 
                                                      OpStore %939 %947 
                                Private f32* %948 = OpAccessChain %101 %50 
                                         f32 %949 = OpLoad %948 
                                         f32 %950 = OpLoad %939 
                                         f32 %951 = OpFMul %949 %950 
                                Private f32* %952 = OpAccessChain %101 %50 
                                                      OpStore %952 %951 
                                       f32_3 %953 = OpLoad %218 
                                       f32_3 %954 = OpFNegate %953 
                                       f32_4 %955 = OpLoad %89 
                                       f32_3 %956 = OpVectorShuffle %955 %955 0 0 0 
                                       f32_3 %957 = OpFAdd %954 %956 
                                       f32_4 %958 = OpLoad %89 
                                       f32_4 %959 = OpVectorShuffle %958 %957 4 1 5 6 
                                                      OpStore %89 %959 
                                       f32_3 %960 = OpLoad %101 
                                       f32_3 %961 = OpVectorShuffle %960 %960 0 0 0 
                                       f32_4 %962 = OpLoad %89 
                                       f32_3 %963 = OpVectorShuffle %962 %962 0 2 3 
                                       f32_3 %964 = OpFMul %961 %963 
                                       f32_3 %965 = OpLoad %218 
                                       f32_3 %966 = OpFAdd %964 %965 
                                       f32_4 %967 = OpLoad %89 
                                       f32_4 %968 = OpVectorShuffle %967 %966 4 5 6 3 
                                                      OpStore %89 %968 
                                       f32_4 %969 = OpLoad %131 
                                       f32_3 %970 = OpVectorShuffle %969 %969 0 0 0 
                                       f32_4 %971 = OpLoad %89 
                                       f32_3 %972 = OpVectorShuffle %971 %971 0 1 2 
                                       f32_3 %973 = OpFMul %970 %972 
                                       f32_4 %974 = OpLoad %89 
                                       f32_4 %975 = OpVectorShuffle %974 %973 4 5 6 3 
                                                      OpStore %89 %975 
                                       f32_4 %976 = OpLoad %185 
                                       f32_3 %977 = OpVectorShuffle %976 %976 3 3 3 
                                       f32_3 %978 = OpLoad %887 
                                       f32_3 %979 = OpFMul %977 %978 
                                                      OpStore %202 %979 
                                       f32_4 %980 = OpLoad %89 
                                       f32_3 %981 = OpVectorShuffle %980 %980 0 1 2 
                                       f32_3 %982 = OpLoad %202 
                                       f32_3 %983 = OpFMul %981 %982 
                                       f32_4 %984 = OpLoad %89 
                                       f32_4 %985 = OpVectorShuffle %984 %983 4 5 6 3 
                                                      OpStore %89 %985 
                                       f32_3 %986 = OpLoad %241 
                                Uniform f32* %987 = OpAccessChain %144 %117 
                                         f32 %988 = OpLoad %987 
                                       f32_3 %989 = OpCompositeConstruct %988 %988 %988 
                                       f32_3 %990 = OpFMul %986 %989 
                                       f32_4 %991 = OpLoad %89 
                                       f32_3 %992 = OpVectorShuffle %991 %991 0 1 2 
                                       f32_3 %993 = OpFAdd %990 %992 
                                                      OpStore %202 %993 
                              Uniform f32_4* %994 = OpAccessChain %116 %431 %145 
                                       f32_4 %995 = OpLoad %994 
                                       f32_3 %996 = OpVectorShuffle %995 %995 0 1 2 
                              Uniform f32_3* %998 = OpAccessChain %144 %501 
                                       f32_3 %999 = OpLoad %998 
                                      f32_3 %1000 = OpVectorShuffle %999 %999 1 1 1 
                                      f32_3 %1001 = OpFMul %996 %1000 
                                      f32_4 %1002 = OpLoad %89 
                                      f32_4 %1003 = OpVectorShuffle %1002 %1001 4 5 6 3 
                                                      OpStore %89 %1003 
                             Uniform f32_4* %1004 = OpAccessChain %116 %431 %117 
                                      f32_4 %1005 = OpLoad %1004 
                                      f32_3 %1006 = OpVectorShuffle %1005 %1005 0 1 2 
                             Uniform f32_3* %1007 = OpAccessChain %144 %501 
                                      f32_3 %1008 = OpLoad %1007 
                                      f32_3 %1009 = OpVectorShuffle %1008 %1008 0 0 0 
                                      f32_3 %1010 = OpFMul %1006 %1009 
                                      f32_4 %1011 = OpLoad %89 
                                      f32_3 %1012 = OpVectorShuffle %1011 %1011 0 1 2 
                                      f32_3 %1013 = OpFAdd %1010 %1012 
                                      f32_4 %1014 = OpLoad %89 
                                      f32_4 %1015 = OpVectorShuffle %1014 %1013 4 5 6 3 
                                                      OpStore %89 %1015 
                             Uniform f32_4* %1016 = OpAccessChain %116 %431 %225 
                                      f32_4 %1017 = OpLoad %1016 
                                      f32_3 %1018 = OpVectorShuffle %1017 %1017 0 1 2 
                             Uniform f32_3* %1019 = OpAccessChain %144 %501 
                                      f32_3 %1020 = OpLoad %1019 
                                      f32_3 %1021 = OpVectorShuffle %1020 %1020 2 2 2 
                                      f32_3 %1022 = OpFMul %1018 %1021 
                                      f32_4 %1023 = OpLoad %89 
                                      f32_3 %1024 = OpVectorShuffle %1023 %1023 0 1 2 
                                      f32_3 %1025 = OpFAdd %1022 %1024 
                                      f32_4 %1026 = OpLoad %89 
                                      f32_4 %1027 = OpVectorShuffle %1026 %1025 4 5 6 3 
                                                      OpStore %89 %1027 
                                      f32_4 %1028 = OpLoad %89 
                                      f32_3 %1029 = OpVectorShuffle %1028 %1028 0 1 2 
                                      f32_4 %1030 = OpLoad %89 
                                      f32_3 %1031 = OpVectorShuffle %1030 %1030 0 1 2 
                                        f32 %1032 = OpDot %1029 %1031 
                                                      OpStore %318 %1032 
                                        f32 %1033 = OpLoad %318 
                                        f32 %1034 = OpExtInst %1 32 %1033 
                                                      OpStore %318 %1034 
                                        f32 %1035 = OpLoad %318 
                                      f32_3 %1036 = OpCompositeConstruct %1035 %1035 %1035 
                                      f32_4 %1037 = OpLoad %89 
                                      f32_3 %1038 = OpVectorShuffle %1037 %1037 0 1 2 
                                      f32_3 %1039 = OpFMul %1036 %1038 
                                      f32_4 %1040 = OpLoad %89 
                                      f32_4 %1041 = OpVectorShuffle %1040 %1039 4 5 6 3 
                                                      OpStore %89 %1041 
                                      f32_4 %1042 = OpLoad %282 
                                      f32_3 %1043 = OpVectorShuffle %1042 %1042 0 1 2 
                                      f32_4 %1044 = OpLoad %89 
                                      f32_3 %1045 = OpVectorShuffle %1044 %1044 0 1 2 
                                        f32 %1046 = OpDot %1043 %1045 
                               Private f32* %1047 = OpAccessChain %89 %50 
                                                      OpStore %1047 %1046 
                               Private f32* %1048 = OpAccessChain %89 %50 
                                        f32 %1049 = OpLoad %1048 
                                        f32 %1050 = OpFMul %1049 %334 
                                        f32 %1051 = OpFAdd %1050 %334 
                               Private f32* %1052 = OpAccessChain %89 %50 
                                                      OpStore %1052 %1051 
                               Private f32* %1053 = OpAccessChain %89 %50 
                                        f32 %1054 = OpLoad %1053 
                               Private f32* %1055 = OpAccessChain %185 %494 
                                        f32 %1056 = OpLoad %1055 
                                        f32 %1057 = OpFMul %1054 %1056 
                               Uniform f32* %1059 = OpAccessChain %144 %1058 
                                        f32 %1060 = OpLoad %1059 
                                        f32 %1061 = OpFNegate %1060 
                                        f32 %1062 = OpFAdd %1057 %1061 
                               Private f32* %1063 = OpAccessChain %89 %50 
                                                      OpStore %1063 %1062 
                               Private f32* %1064 = OpAccessChain %89 %50 
                                        f32 %1065 = OpLoad %1064 
                               Uniform f32* %1067 = OpAccessChain %144 %1066 
                                        f32 %1068 = OpLoad %1067 
                                        f32 %1069 = OpFMul %1065 %1068 
                               Private f32* %1070 = OpAccessChain %89 %50 
                                                      OpStore %1070 %1069 
                               Private f32* %1071 = OpAccessChain %89 %50 
                                        f32 %1072 = OpLoad %1071 
                                        f32 %1073 = OpExtInst %1 43 %1072 %38 %55 
                               Private f32* %1074 = OpAccessChain %89 %50 
                                                      OpStore %1074 %1073 
                                      f32_4 %1075 = OpLoad %89 
                                      f32_3 %1076 = OpVectorShuffle %1075 %1075 0 0 0 
                             Uniform f32_4* %1078 = OpAccessChain %144 %1077 
                                      f32_4 %1079 = OpLoad %1078 
                                      f32_3 %1080 = OpVectorShuffle %1079 %1079 0 1 2 
                                      f32_3 %1081 = OpFMul %1076 %1080 
                                                      OpStore %241 %1081 
                                      f32_3 %1082 = OpLoad %241 
                               Uniform f32* %1084 = OpAccessChain %144 %1083 
                                        f32 %1085 = OpLoad %1084 
                               Uniform f32* %1086 = OpAccessChain %144 %1083 
                                        f32 %1087 = OpLoad %1086 
                               Uniform f32* %1088 = OpAccessChain %144 %1083 
                                        f32 %1089 = OpLoad %1088 
                                      f32_3 %1090 = OpCompositeConstruct %1085 %1087 %1089 
                                        f32 %1091 = OpCompositeExtract %1090 0 
                                        f32 %1092 = OpCompositeExtract %1090 1 
                                        f32 %1093 = OpCompositeExtract %1090 2 
                                      f32_3 %1094 = OpCompositeConstruct %1091 %1092 %1093 
                                      f32_3 %1095 = OpFMul %1082 %1094 
                                      f32_4 %1096 = OpLoad %89 
                                      f32_4 %1097 = OpVectorShuffle %1096 %1095 4 5 6 3 
                                                      OpStore %89 %1097 
                                      f32_3 %1098 = OpLoad %138 
                                      f32_3 %1099 = OpVectorShuffle %1098 %1098 0 0 0 
                                      f32_4 %1100 = OpLoad %89 
                                      f32_3 %1101 = OpVectorShuffle %1100 %1100 0 1 2 
                                      f32_3 %1102 = OpFMul %1099 %1101 
                                                      OpStore %106 %1102 
                                      f32_3 %1103 = OpLoad %106 
                                      f32_3 %1105 = OpFMul %1103 %1104 
                                                      OpStore %106 %1105 
                                      f32_4 %1106 = OpLoad %89 
                                      f32_3 %1107 = OpVectorShuffle %1106 %1106 0 1 2 
                                      f32_3 %1110 = OpFMul %1107 %1109 
                                      f32_3 %1111 = OpLoad %106 
                                      f32_3 %1112 = OpFAdd %1110 %1111 
                                      f32_4 %1113 = OpLoad %89 
                                      f32_4 %1114 = OpVectorShuffle %1113 %1112 4 5 6 3 
                                                      OpStore %89 %1114 
                                      f32_3 %1115 = OpLoad %450 
                                      f32_3 %1116 = OpLoad %202 
                                      f32_3 %1117 = OpFAdd %1115 %1116 
                                                      OpStore %202 %1117 
                                      f32_4 %1118 = OpLoad %89 
                                      f32_3 %1119 = OpVectorShuffle %1118 %1118 0 1 2 
                                      f32_3 %1120 = OpLoad %202 
                                      f32_3 %1121 = OpFAdd %1119 %1120 
                                                      OpStore %202 %1121 
                                      f32_3 %1122 = OpLoad %202 
                                      f32_3 %1123 = OpExtInst %1 40 %1122 %831 
                                                      OpStore %202 %1123 
                                      f32_3 %1124 = OpLoad %202 
                                      f32_3 %1125 = OpExtInst %1 30 %1124 
                                                      OpStore %202 %1125 
                                      f32_3 %1126 = OpLoad %202 
                                      f32_3 %1129 = OpFMul %1126 %1128 
                                                      OpStore %202 %1129 
                                      f32_3 %1130 = OpLoad %202 
                                      f32_3 %1131 = OpExtInst %1 29 %1130 
                                                      OpStore %202 %1131 
                                      f32_3 %1134 = OpLoad %202 
                                      f32_3 %1135 = OpExtInst %1 31 %1134 
                                      f32_4 %1136 = OpLoad %1133 
                                      f32_4 %1137 = OpVectorShuffle %1136 %1135 4 5 6 3 
                                                      OpStore %1133 %1137 
                                Output f32* %1139 = OpAccessChain %1133 %494 
                                                      OpStore %1139 %55 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "gles3 " {
Keywords { "_MAIN_LIGHT_SHADOWS" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD3.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD4.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD7 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[32];
uniform 	mediump vec4 _AdditionalLightsColor[32];
uniform 	mediump vec4 _AdditionalLightsAttenuation[32];
uniform 	mediump vec4 _AdditionalLightsSpotDir[32];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _Expond;
	UNITY_UNIFORM vec4 _MainTex_ST;
	UNITY_UNIFORM vec4 _Emissioncolor;
	UNITY_UNIFORM float _Roughness;
	UNITY_UNIFORM float _sss;
	UNITY_UNIFORM vec3 _rimlightdir;
	UNITY_UNIFORM vec4 _rimcolor;
	UNITY_UNIFORM float _rimhardness;
	UNITY_UNIFORM float _rimthreshold;
	UNITY_UNIFORM float _rimintensity;
	UNITY_UNIFORM float _Curvemn;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(3) uniform mediump sampler2D _Normal;
UNITY_LOCATION(4) uniform mediump sampler2D _MREA;
UNITY_LOCATION(5) uniform mediump sampler2D _SSSLUT;
UNITY_LOCATION(6) uniform mediump sampler2D _reflectmap;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump float u_xlat16_3;
int u_xlati3;
bool u_xlatb3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
vec4 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
mediump vec3 u_xlat16_13;
mediump vec3 u_xlat16_14;
vec3 u_xlat15;
int u_xlati15;
bool u_xlatb15;
mediump vec3 u_xlat16_16;
float u_xlat18;
uint u_xlatu18;
float u_xlat19;
mediump vec3 u_xlat16_22;
float u_xlat30;
float u_xlat45;
uint u_xlatu45;
float u_xlat47;
float u_xlat48;
mediump float u_xlat16_54;
mediump float u_xlat16_56;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_0 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_1.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_1.x = u_xlat16_0 * _MainLightShadowParams.x + u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0>=vs_TEXCOORD7.z);
#else
    u_xlatb0 = 0.0>=vs_TEXCOORD7.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vs_TEXCOORD7.z>=1.0);
#else
    u_xlatb15 = vs_TEXCOORD7.z>=1.0;
#endif
    u_xlatb0 = u_xlatb15 || u_xlatb0;
    u_xlat16_1.x = (u_xlatb0) ? 1.0 : u_xlat16_1.x;
    u_xlat0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat15.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat2.xyz = vs_TEXCOORD2.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat47 = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = vec3(u_xlat47) * u_xlat2.xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat4.xy).xyz;
    u_xlat16_6.xyz = texture(_Normal, u_xlat4.xy).xyz;
    u_xlat16_16.xyz = u_xlat16_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4 = texture(_MREA, u_xlat4.xy);
    u_xlat47 = u_xlat16_4.y + (-_Roughness);
    u_xlat16_7.x = (-u_xlat47) + 1.0;
    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
    u_xlat16_7.x = max(u_xlat16_7.x, 0.00200000009);
    u_xlat16_22.xyz = u_xlat16_5.xyz * u_xlat16_4.zzz;
    u_xlat8.xyz = u_xlat16_22.xyz * _Emissioncolor.xyz;
    u_xlat16_22.xyz = u_xlat16_5.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_22.xyz = u_xlat16_4.xxx * u_xlat16_22.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_9.x = u_xlat16_4.x * -0.959999979 + 0.959999979;
    u_xlat16_9.xyz = u_xlat16_5.xyz * u_xlat16_9.xxx;
    u_xlat16_9.xyz = u_xlat16_4.www * u_xlat16_9.xyz;
    u_xlat4.xyz = u_xlat16_16.yyy * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = u_xlat16_16.xxx * vs_TEXCOORD3.xyz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat16_16.zzz * vs_TEXCOORD1.xyz + u_xlat4.xyz;
    u_xlat48 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat48 = inversesqrt(u_xlat48);
    u_xlat5.xyz = vec3(u_xlat48) * u_xlat4.xyz;
    u_xlat48 = dot(u_xlat5.xyz, _MainLightPosition.xyz);
    u_xlat4.x = max(u_xlat48, 9.99999975e-06);
    u_xlat0.y = dot(u_xlat5.xyz, u_xlat15.xyz);
    u_xlat0.z = dot(_MainLightPosition.xyz, u_xlat3.xyz);
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(1.17549435e-38, 9.99999975e-06, 9.99999975e-06));
    u_xlat45 = u_xlat16_7.x + u_xlat16_7.x;
    u_xlat3.x = u_xlat0.z * u_xlat0.z;
    u_xlat45 = u_xlat3.x * u_xlat45 + 0.5;
    u_xlat16_16.x = u_xlat45 + -1.0;
    u_xlat15.x = (-u_xlat0.y) + 1.0;
    u_xlat15.x = max(u_xlat15.x, 0.0);
    u_xlat45 = u_xlat15.x * u_xlat15.x;
    u_xlat45 = u_xlat45 * u_xlat45;
    u_xlat15.x = u_xlat15.x * u_xlat45;
    u_xlat15.x = u_xlat16_16.x * u_xlat15.x + 1.0;
    u_xlat45 = (-u_xlat4.x) + 1.0;
    u_xlat45 = max(u_xlat45, 0.0);
    u_xlat3.x = u_xlat45 * u_xlat45;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat45 = u_xlat45 * u_xlat3.x;
    u_xlat45 = u_xlat16_16.x * u_xlat45 + 1.0;
    u_xlat16_54 = u_xlat15.x * u_xlat45;
    u_xlat16_54 = min(u_xlat16_54, 1.0);
    u_xlat16_54 = u_xlat48 * u_xlat16_54;
    u_xlat16_3 = u_xlat16_54 * 0.5 + 0.5;
    u_xlat3.x = u_xlat16_3;
    u_xlat3.yw = vec2(vec2(_Curvemn, _Curvemn));
    u_xlat16_10.xyz = texture(_SSSLUT, u_xlat3.xy).xyz;
    u_xlat10.xyz = u_xlat16_10.xyz * vec3(vec3(_sss, _sss, _sss));
    u_xlat15.x = min(u_xlat16_1.x, u_xlat3.x);
    u_xlat16_11.xyz = u_xlat16_9.xyz * u_xlat10.xyz;
    u_xlat10.xyz = u_xlat16_11.xyz * _MainLightColor.xyz;
    u_xlat10.xyz = u_xlat10.xyz * u_xlat15.xxx + u_xlat8.xyz;
    u_xlat16_54 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlati15 = int(u_xlat16_54);
    u_xlat16_11.xyz = u_xlat10.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<uint(u_xlati15) ; u_xlatu_loop_1++)
    {
        u_xlati3 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu18 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_54 = dot(unity_LightIndices[int(u_xlatu18)], ImmCB_0[u_xlati3]);
        u_xlati3 = int(u_xlat16_54);
        u_xlat12.xyz = (-vs_TEXCOORD5.xyz) * _AdditionalLightsPosition[u_xlati3].www + _AdditionalLightsPosition[u_xlati3].xyz;
        u_xlat18 = dot(u_xlat12.xyz, u_xlat12.xyz);
        u_xlat18 = max(u_xlat18, 6.10351563e-05);
        u_xlat19 = inversesqrt(u_xlat18);
        u_xlat12.xyz = vec3(u_xlat19) * u_xlat12.xyz;
        u_xlat19 = float(1.0) / float(u_xlat18);
        u_xlat18 = u_xlat18 * _AdditionalLightsAttenuation[u_xlati3].x + _AdditionalLightsAttenuation[u_xlati3].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
        u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
        u_xlat18 = u_xlat18 * u_xlat19;
        u_xlat16_54 = dot(_AdditionalLightsSpotDir[u_xlati3].xyz, u_xlat12.xyz);
        u_xlat16_54 = u_xlat16_54 * _AdditionalLightsAttenuation[u_xlati3].z + _AdditionalLightsAttenuation[u_xlati3].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_54 = min(max(u_xlat16_54, 0.0), 1.0);
#else
        u_xlat16_54 = clamp(u_xlat16_54, 0.0, 1.0);
#endif
        u_xlat16_54 = u_xlat16_54 * u_xlat16_54;
        u_xlat18 = u_xlat18 * u_xlat16_54;
        u_xlat19 = dot(u_xlat5.xyz, u_xlat12.xyz);
        u_xlat3.z = max(u_xlat19, 9.99999975e-06);
        u_xlat16_12.xyz = texture(_SSSLUT, u_xlat3.zw).xyz;
        u_xlat12.xyz = u_xlat16_12.xyz * vec3(vec3(_sss, _sss, _sss));
        u_xlat16_13.xyz = u_xlat16_9.xyz * u_xlat12.xyz;
        u_xlat16_13.xyz = u_xlat16_13.xyz * _AdditionalLightsColor[u_xlati3].xyz;
        u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat18) + u_xlat8.xyz;
        u_xlat16_11.xyz = u_xlat16_11.xyz + u_xlat16_13.xyz;
    }
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyw = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat0.xyw);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat0.xyw);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat15.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_54 = u_xlat16_7.x * u_xlat16_7.x;
    u_xlat16_56 = u_xlat16_7.x * u_xlat16_7.x + -1.0;
    u_xlat15.x = u_xlat15.x * u_xlat16_56 + 1.00001001;
    u_xlat16_56 = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat15.x * u_xlat15.x;
    u_xlat15.x = max(u_xlat16_56, 0.100000001);
    u_xlat0.x = u_xlat15.x * u_xlat0.x;
    u_xlat16_56 = u_xlat16_7.x * 4.0 + 2.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_56;
    u_xlat0.x = u_xlat16_54 / u_xlat0.x;
    u_xlat0.xyw = u_xlat16_22.xyz * u_xlat0.xxx;
    u_xlat16_13.xyz = u_xlat0.xyw * vec3(3.14159274, 3.14159274, 3.14159274);
    u_xlat2.xyz = u_xlat16_13.xyz * _MainLightColor.xyz;
    u_xlat16_11.xyz = u_xlat2.xyz * u_xlat4.xxx + u_xlat16_11.xyz;
    u_xlat5.w = 1.0;
    u_xlat16_13.x = dot(unity_SHAr, u_xlat5);
    u_xlat16_13.y = dot(unity_SHAg, u_xlat5);
    u_xlat16_13.z = dot(unity_SHAb, u_xlat5);
    u_xlat16_1 = u_xlat5.yzzx * u_xlat5.xyzz;
    u_xlat16_14.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_14.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_14.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_54 = u_xlat5.y * u_xlat5.y;
    u_xlat16_54 = u_xlat5.x * u_xlat5.x + (-u_xlat16_54);
    u_xlat16_14.xyz = unity_SHC.xyz * vec3(u_xlat16_54) + u_xlat16_14.xyz;
    u_xlat16_13.xyz = u_xlat16_13.xyz + u_xlat16_14.xyz;
    u_xlat16_13.xyz = max(u_xlat16_13.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_13.xyz;
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].x;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat16_13.x = dot(u_xlat2.xyz, u_xlat5.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].y;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].y;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].y;
    u_xlat16_13.y = dot(u_xlat2.xyz, u_xlat5.xyz);
    u_xlat16_13.xy = u_xlat16_13.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat16_54 = (-u_xlat16_7.x) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_54;
    u_xlat16_54 = u_xlat16_7.x * 8.0;
    u_xlat16_2.xyz = textureLod(_reflectmap, u_xlat16_13.xy, u_xlat16_54).xyz;
    u_xlat3.x = u_xlat16_7.x * u_xlat16_7.x + 1.0;
    u_xlat3.x = float(1.0) / u_xlat3.x;
    u_xlat0.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat0.x = max(u_xlat0.w, u_xlat0.x);
    u_xlat0.x = u_xlat47 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat15.x = (-u_xlat0.z) + 1.0;
    u_xlat15.x = max(u_xlat15.x, 0.0);
    u_xlat30 = u_xlat15.x * u_xlat15.x;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat15.x = u_xlat15.x * u_xlat30;
    u_xlat0.xzw = (-u_xlat16_22.xyz) + u_xlat0.xxx;
    u_xlat0.xyz = u_xlat15.xxx * u_xlat0.xzw + u_xlat16_22.xyz;
    u_xlat0.xyz = u_xlat3.xxx * u_xlat0.xyz;
    u_xlat16_7.xyz = u_xlat16_4.www * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_9.xyz * vec3(_Expond) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixInvV[1].xyz * _rimlightdir.yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixInvV[0].xyz * _rimlightdir.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixInvV[2].xyz * _rimlightdir.zzz + u_xlat0.xyz;
    u_xlat45 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat45 = inversesqrt(u_xlat45);
    u_xlat0.xyz = vec3(u_xlat45) * u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat0.x = u_xlat0.x * u_xlat16_4.w + (-_rimthreshold);
    u_xlat0.x = u_xlat0.x * _rimhardness;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_9.xyz = u_xlat0.xxx * _rimcolor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_rimintensity, _rimintensity, _rimintensity));
    u_xlat2.xyz = u_xlat4.xxx * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat2.xyz;
    u_xlat16_7.xyz = u_xlat16_11.xyz + u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(2.20000005, 2.20000005, 2.20000005);
    u_xlat16_7.xyz = exp2(u_xlat16_7.xyz);
    SV_Target0.xyz = sqrt(u_xlat16_7.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "_ADDITIONAL_LIGHTS" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 268
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %94 %103 %105 %108 %148 %151 %161 %195 %221 %227 %230 %231 %257 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 RelaxedPrecision 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 RelaxedPrecision 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 RelaxedPrecision 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 RelaxedPrecision 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 RelaxedPrecision 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 RelaxedPrecision 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpMemberDecorate %21 16 RelaxedPrecision 
                                                      OpMemberDecorate %21 16 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpDecorate %69 ArrayStride 69 
                                                      OpMemberDecorate %70 0 Offset 70 
                                                      OpMemberDecorate %70 1 Offset 70 
                                                      OpDecorate %70 Block 
                                                      OpDecorate %72 DescriptorSet 72 
                                                      OpDecorate %72 Binding 72 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 103 
                                                      OpDecorate %105 Location 105 
                                                      OpDecorate %108 Location 108 
                                                      OpDecorate vs_TEXCOORD1 Location 148 
                                                      OpDecorate vs_TEXCOORD2 Location 151 
                                                      OpDecorate %161 Location 161 
                                                      OpDecorate vs_TEXCOORD3 Location 195 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 221 
                                                      OpDecorate vs_TEXCOORD5 Location 227 
                                                      OpDecorate vs_TEXCOORD6 Location 230 
                                                      OpDecorate %231 Location 231 
                                                      OpDecorate %236 ArrayStride 236 
                                                      OpMemberDecorate %237 0 Offset 237 
                                                      OpMemberDecorate %237 1 Offset 237 
                                                      OpMemberDecorate %237 2 Offset 237 
                                                      OpMemberDecorate %237 3 Offset 237 
                                                      OpMemberDecorate %237 4 Offset 237 
                                                      OpMemberDecorate %237 5 Offset 237 
                                                      OpMemberDecorate %237 6 RelaxedPrecision 
                                                      OpMemberDecorate %237 6 Offset 237 
                                                      OpMemberDecorate %237 7 RelaxedPrecision 
                                                      OpMemberDecorate %237 7 Offset 237 
                                                      OpMemberDecorate %237 8 RelaxedPrecision 
                                                      OpMemberDecorate %237 8 Offset 237 
                                                      OpMemberDecorate %237 9 RelaxedPrecision 
                                                      OpMemberDecorate %237 9 Offset 237 
                                                      OpMemberDecorate %237 10 RelaxedPrecision 
                                                      OpMemberDecorate %237 10 Offset 237 
                                                      OpMemberDecorate %237 11 Offset 237 
                                                      OpDecorate %237 Block 
                                                      OpDecorate %239 DescriptorSet 239 
                                                      OpDecorate %239 Binding 239 
                                                      OpDecorate vs_TEXCOORD7 Location 257 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 3 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeArray %7 %16 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypeArray %7 %19 
                                              %21 = OpTypeStruct %17 %18 %7 %7 %7 %20 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4; f32_4[2]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 0 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %45 = OpConstant 2 
                                          i32 %59 = OpConstant 3 
                               Private f32_4* %66 = OpVariable Private 
                                              %69 = OpTypeArray %7 %16 
                                              %70 = OpTypeStruct %12 %69 
                                              %71 = OpTypePointer Uniform %70 
           Uniform struct {f32_3; f32_4[4];}* %72 = OpVariable Uniform 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %99 = OpTypePointer Output %7 
                                             %101 = OpTypeVector %6 2 
                                             %102 = OpTypePointer Output %101 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %104 = OpTypePointer Input %101 
                                Input f32_2* %105 = OpVariable Input 
                                             %107 = OpTypePointer Input %12 
                                Input f32_3* %108 = OpVariable Input 
                                         u32 %114 = OpConstant 0 
                                             %115 = OpTypePointer Private %6 
                                Private f32* %129 = OpVariable Private 
                                         f32 %136 = OpConstant 3.674022E-40 
                                             %147 = OpTypePointer Output %12 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %155 = OpTypePointer Uniform %12 
                                             %159 = OpTypePointer Private %12 
                              Private f32_3* %160 = OpVariable Private 
                                Input f32_4* %161 = OpVariable Input 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                              Private f32_3* %197 = OpVariable Private 
                                         u32 %213 = OpConstant 3 
                                             %214 = OpTypePointer Input %6 
                                             %217 = OpTypePointer Uniform %6 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD5 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                Input f32_4* %231 = OpVariable Input 
                                         u32 %235 = OpConstant 20 
                                             %236 = OpTypeArray %7 %235 
                                             %237 = OpTypeStruct %236 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 
                                             %238 = OpTypePointer Uniform %237 
Uniform struct {f32_4[20]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %239 = OpVariable Uniform 
                       Output f32_4* vs_TEXCOORD7 = OpVariable Output 
                                             %262 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %11 
                                        f32_3 %14 = OpVectorShuffle %13 %13 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_3 %30 = OpVectorShuffle %29 %29 0 1 2 
                                        f32_3 %31 = OpFMul %14 %30 
                                        f32_4 %32 = OpLoad %9 
                                        f32_4 %33 = OpVectorShuffle %32 %31 4 5 6 3 
                                                      OpStore %9 %33 
                               Uniform f32_4* %34 = OpAccessChain %23 %25 %25 
                                        f32_4 %35 = OpLoad %34 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 1 2 
                                        f32_4 %37 = OpLoad %11 
                                        f32_3 %38 = OpVectorShuffle %37 %37 0 0 0 
                                        f32_3 %39 = OpFMul %36 %38 
                                        f32_4 %40 = OpLoad %9 
                                        f32_3 %41 = OpVectorShuffle %40 %40 0 1 2 
                                        f32_3 %42 = OpFAdd %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpVectorShuffle %43 %42 4 5 6 3 
                                                      OpStore %9 %44 
                               Uniform f32_4* %46 = OpAccessChain %23 %25 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_3 %48 = OpVectorShuffle %47 %47 0 1 2 
                                        f32_4 %49 = OpLoad %11 
                                        f32_3 %50 = OpVectorShuffle %49 %49 2 2 2 
                                        f32_3 %51 = OpFMul %48 %50 
                                        f32_4 %52 = OpLoad %9 
                                        f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                        f32_3 %54 = OpFAdd %51 %53 
                                        f32_4 %55 = OpLoad %9 
                                        f32_4 %56 = OpVectorShuffle %55 %54 4 5 6 3 
                                                      OpStore %9 %56 
                                        f32_4 %57 = OpLoad %9 
                                        f32_3 %58 = OpVectorShuffle %57 %57 0 1 2 
                               Uniform f32_4* %60 = OpAccessChain %23 %25 %59 
                                        f32_4 %61 = OpLoad %60 
                                        f32_3 %62 = OpVectorShuffle %61 %61 0 1 2 
                                        f32_3 %63 = OpFAdd %58 %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %63 4 5 6 3 
                                                      OpStore %9 %65 
                                        f32_4 %67 = OpLoad %9 
                                        f32_4 %68 = OpVectorShuffle %67 %67 1 1 1 1 
                               Uniform f32_4* %73 = OpAccessChain %72 %26 %26 
                                        f32_4 %74 = OpLoad %73 
                                        f32_4 %75 = OpFMul %68 %74 
                                                      OpStore %66 %75 
                               Uniform f32_4* %76 = OpAccessChain %72 %26 %25 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %9 
                                        f32_4 %79 = OpVectorShuffle %78 %78 0 0 0 0 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %66 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %66 %82 
                               Uniform f32_4* %83 = OpAccessChain %72 %26 %45 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %9 
                                        f32_4 %86 = OpVectorShuffle %85 %85 2 2 2 2 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %66 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %66 %89 
                                        f32_4 %95 = OpLoad %66 
                               Uniform f32_4* %96 = OpAccessChain %72 %26 %59 
                                        f32_4 %97 = OpLoad %96 
                                        f32_4 %98 = OpFAdd %95 %97 
                               Output f32_4* %100 = OpAccessChain %94 %25 
                                                      OpStore %100 %98 
                                       f32_2 %106 = OpLoad %105 
                                                      OpStore vs_TEXCOORD0 %106 
                                       f32_3 %109 = OpLoad %108 
                              Uniform f32_4* %110 = OpAccessChain %23 %26 %25 
                                       f32_4 %111 = OpLoad %110 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
                                         f32 %113 = OpDot %109 %112 
                                Private f32* %116 = OpAccessChain %66 %114 
                                                      OpStore %116 %113 
                                       f32_3 %117 = OpLoad %108 
                              Uniform f32_4* %118 = OpAccessChain %23 %26 %26 
                                       f32_4 %119 = OpLoad %118 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                         f32 %121 = OpDot %117 %120 
                                Private f32* %122 = OpAccessChain %66 %90 
                                                      OpStore %122 %121 
                                       f32_3 %123 = OpLoad %108 
                              Uniform f32_4* %124 = OpAccessChain %23 %26 %45 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                         f32 %127 = OpDot %123 %126 
                                Private f32* %128 = OpAccessChain %66 %19 
                                                      OpStore %128 %127 
                                       f32_4 %130 = OpLoad %66 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_4 %132 = OpLoad %66 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                         f32 %134 = OpDot %131 %133 
                                                      OpStore %129 %134 
                                         f32 %135 = OpLoad %129 
                                         f32 %137 = OpExtInst %1 40 %135 %136 
                                                      OpStore %129 %137 
                                         f32 %138 = OpLoad %129 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %129 %139 
                                         f32 %140 = OpLoad %129 
                                       f32_3 %141 = OpCompositeConstruct %140 %140 %140 
                                       f32_4 %142 = OpLoad %66 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                       f32_3 %144 = OpFMul %141 %143 
                                       f32_4 %145 = OpLoad %66 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %66 %146 
                                       f32_4 %149 = OpLoad %66 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                                      OpStore vs_TEXCOORD1 %150 
                                       f32_4 %152 = OpLoad %9 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                       f32_3 %154 = OpFNegate %153 
                              Uniform f32_3* %156 = OpAccessChain %72 %25 
                                       f32_3 %157 = OpLoad %156 
                                       f32_3 %158 = OpFAdd %154 %157 
                                                      OpStore vs_TEXCOORD2 %158 
                                       f32_4 %162 = OpLoad %161 
                                       f32_3 %163 = OpVectorShuffle %162 %162 1 1 1 
                              Uniform f32_4* %164 = OpAccessChain %23 %25 %26 
                                       f32_4 %165 = OpLoad %164 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                       f32_3 %167 = OpFMul %163 %166 
                                                      OpStore %160 %167 
                              Uniform f32_4* %168 = OpAccessChain %23 %25 %25 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                       f32_4 %171 = OpLoad %161 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 0 0 
                                       f32_3 %173 = OpFMul %170 %172 
                                       f32_3 %174 = OpLoad %160 
                                       f32_3 %175 = OpFAdd %173 %174 
                                                      OpStore %160 %175 
                              Uniform f32_4* %176 = OpAccessChain %23 %25 %45 
                                       f32_4 %177 = OpLoad %176 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                       f32_4 %179 = OpLoad %161 
                                       f32_3 %180 = OpVectorShuffle %179 %179 2 2 2 
                                       f32_3 %181 = OpFMul %178 %180 
                                       f32_3 %182 = OpLoad %160 
                                       f32_3 %183 = OpFAdd %181 %182 
                                                      OpStore %160 %183 
                                       f32_3 %184 = OpLoad %160 
                                       f32_3 %185 = OpLoad %160 
                                         f32 %186 = OpDot %184 %185 
                                                      OpStore %129 %186 
                                         f32 %187 = OpLoad %129 
                                         f32 %188 = OpExtInst %1 40 %187 %136 
                                                      OpStore %129 %188 
                                         f32 %189 = OpLoad %129 
                                         f32 %190 = OpExtInst %1 32 %189 
                                                      OpStore %129 %190 
                                         f32 %191 = OpLoad %129 
                                       f32_3 %192 = OpCompositeConstruct %191 %191 %191 
                                       f32_3 %193 = OpLoad %160 
                                       f32_3 %194 = OpFMul %192 %193 
                                                      OpStore %160 %194 
                                       f32_3 %196 = OpLoad %160 
                                                      OpStore vs_TEXCOORD3 %196 
                                       f32_4 %198 = OpLoad %66 
                                       f32_3 %199 = OpVectorShuffle %198 %198 2 0 1 
                                       f32_3 %200 = OpLoad %160 
                                       f32_3 %201 = OpVectorShuffle %200 %200 1 2 0 
                                       f32_3 %202 = OpFMul %199 %201 
                                                      OpStore %197 %202 
                                       f32_4 %203 = OpLoad %66 
                                       f32_3 %204 = OpVectorShuffle %203 %203 1 2 0 
                                       f32_3 %205 = OpLoad %160 
                                       f32_3 %206 = OpVectorShuffle %205 %205 2 0 1 
                                       f32_3 %207 = OpFMul %204 %206 
                                       f32_3 %208 = OpLoad %197 
                                       f32_3 %209 = OpFNegate %208 
                                       f32_3 %210 = OpFAdd %207 %209 
                                       f32_4 %211 = OpLoad %66 
                                       f32_4 %212 = OpVectorShuffle %211 %210 4 5 6 3 
                                                      OpStore %66 %212 
                                  Input f32* %215 = OpAccessChain %161 %213 
                                         f32 %216 = OpLoad %215 
                                Uniform f32* %218 = OpAccessChain %23 %59 %213 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpFMul %216 %219 
                                                      OpStore %129 %220 
                                         f32 %222 = OpLoad %129 
                                       f32_3 %223 = OpCompositeConstruct %222 %222 %222 
                                       f32_4 %224 = OpLoad %66 
                                       f32_3 %225 = OpVectorShuffle %224 %224 0 1 2 
                                       f32_3 %226 = OpFMul %223 %225 
                                                      OpStore vs_TEXCOORD4 %226 
                                       f32_4 %228 = OpLoad %9 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 2 
                                                      OpStore vs_TEXCOORD5 %229 
                                       f32_4 %232 = OpLoad %231 
                                                      OpStore vs_TEXCOORD6 %232 
                                       f32_4 %233 = OpLoad %9 
                                       f32_4 %234 = OpVectorShuffle %233 %233 1 1 1 1 
                              Uniform f32_4* %240 = OpAccessChain %239 %25 %26 
                                       f32_4 %241 = OpLoad %240 
                                       f32_4 %242 = OpFMul %234 %241 
                                                      OpStore %66 %242 
                              Uniform f32_4* %243 = OpAccessChain %239 %25 %25 
                                       f32_4 %244 = OpLoad %243 
                                       f32_4 %245 = OpLoad %9 
                                       f32_4 %246 = OpVectorShuffle %245 %245 0 0 0 0 
                                       f32_4 %247 = OpFMul %244 %246 
                                       f32_4 %248 = OpLoad %66 
                                       f32_4 %249 = OpFAdd %247 %248 
                                                      OpStore %66 %249 
                              Uniform f32_4* %250 = OpAccessChain %239 %25 %45 
                                       f32_4 %251 = OpLoad %250 
                                       f32_4 %252 = OpLoad %9 
                                       f32_4 %253 = OpVectorShuffle %252 %252 2 2 2 2 
                                       f32_4 %254 = OpFMul %251 %253 
                                       f32_4 %255 = OpLoad %66 
                                       f32_4 %256 = OpFAdd %254 %255 
                                                      OpStore %9 %256 
                                       f32_4 %258 = OpLoad %9 
                              Uniform f32_4* %259 = OpAccessChain %239 %25 %59 
                                       f32_4 %260 = OpLoad %259 
                                       f32_4 %261 = OpFAdd %258 %260 
                                                      OpStore vs_TEXCOORD7 %261 
                                 Output f32* %263 = OpAccessChain %94 %25 %90 
                                         f32 %264 = OpLoad %263 
                                         f32 %265 = OpFNegate %264 
                                 Output f32* %266 = OpAccessChain %94 %25 %90 
                                                      OpStore %266 %265 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 1064
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %66 %185 %190 %197 %459 %1053 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate vs_TEXCOORD2 Location 12 
                                                      OpDecorate %36 ArrayStride 36 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpMemberDecorate %38 1 RelaxedPrecision 
                                                      OpMemberDecorate %38 1 Offset 38 
                                                      OpMemberDecorate %38 2 RelaxedPrecision 
                                                      OpMemberDecorate %38 2 Offset 38 
                                                      OpMemberDecorate %38 3 Offset 38 
                                                      OpMemberDecorate %38 4 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate vs_TEXCOORD0 Location 66 
                                                      OpMemberDecorate %68 0 Offset 68 
                                                      OpMemberDecorate %68 1 Offset 68 
                                                      OpMemberDecorate %68 2 Offset 68 
                                                      OpMemberDecorate %68 3 Offset 68 
                                                      OpMemberDecorate %68 4 Offset 68 
                                                      OpMemberDecorate %68 5 Offset 68 
                                                      OpMemberDecorate %68 6 Offset 68 
                                                      OpMemberDecorate %68 7 Offset 68 
                                                      OpMemberDecorate %68 8 Offset 68 
                                                      OpMemberDecorate %68 9 Offset 68 
                                                      OpMemberDecorate %68 10 Offset 68 
                                                      OpDecorate %68 Block 
                                                      OpDecorate %70 DescriptorSet 70 
                                                      OpDecorate %70 Binding 70 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %85 DescriptorSet 85 
                                                      OpDecorate %85 Binding 85 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %89 DescriptorSet 89 
                                                      OpDecorate %89 Binding 89 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %96 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %98 DescriptorSet 98 
                                                      OpDecorate %98 Binding 98 
                                                      OpDecorate %99 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %100 DescriptorSet 100 
                                                      OpDecorate %100 Binding 100 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate %107 RelaxedPrecision 
                                                      OpDecorate %108 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate %116 RelaxedPrecision 
                                                      OpDecorate %116 DescriptorSet 116 
                                                      OpDecorate %116 Binding 116 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %118 DescriptorSet 118 
                                                      OpDecorate %118 Binding 118 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %140 RelaxedPrecision 
                                                      OpDecorate %141 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %144 RelaxedPrecision 
                                                      OpDecorate %145 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %147 RelaxedPrecision 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %150 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %159 RelaxedPrecision 
                                                      OpDecorate %160 RelaxedPrecision 
                                                      OpDecorate %161 RelaxedPrecision 
                                                      OpDecorate %162 RelaxedPrecision 
                                                      OpDecorate %163 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 185 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD3 Location 190 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 197 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %325 RelaxedPrecision 
                                                      OpDecorate %326 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %335 RelaxedPrecision 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %337 RelaxedPrecision 
                                                      OpDecorate %340 RelaxedPrecision 
                                                      OpDecorate %353 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %354 DescriptorSet 354 
                                                      OpDecorate %354 Binding 354 
                                                      OpDecorate %355 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %356 DescriptorSet 356 
                                                      OpDecorate %356 Binding 356 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %372 RelaxedPrecision 
                                                      OpDecorate %373 RelaxedPrecision 
                                                      OpDecorate %374 RelaxedPrecision 
                                                      OpDecorate %375 RelaxedPrecision 
                                                      OpDecorate %376 RelaxedPrecision 
                                                      OpDecorate %377 RelaxedPrecision 
                                                      OpDecorate %382 RelaxedPrecision 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %387 RelaxedPrecision 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %397 RelaxedPrecision 
                                                      OpDecorate %398 ArrayStride 398 
                                                      OpDecorate %399 ArrayStride 399 
                                                      OpDecorate %400 ArrayStride 400 
                                                      OpMemberDecorate %401 0 Offset 401 
                                                      OpMemberDecorate %401 1 Offset 401 
                                                      OpMemberDecorate %401 2 Offset 401 
                                                      OpMemberDecorate %401 3 RelaxedPrecision 
                                                      OpMemberDecorate %401 3 Offset 401 
                                                      OpMemberDecorate %401 4 RelaxedPrecision 
                                                      OpMemberDecorate %401 4 Offset 401 
                                                      OpMemberDecorate %401 5 RelaxedPrecision 
                                                      OpMemberDecorate %401 5 Offset 401 
                                                      OpMemberDecorate %401 6 Offset 401 
                                                      OpMemberDecorate %401 7 RelaxedPrecision 
                                                      OpMemberDecorate %401 7 Offset 401 
                                                      OpMemberDecorate %401 8 Offset 401 
                                                      OpMemberDecorate %401 9 Offset 401 
                                                      OpMemberDecorate %401 10 RelaxedPrecision 
                                                      OpMemberDecorate %401 10 Offset 401 
                                                      OpMemberDecorate %401 11 RelaxedPrecision 
                                                      OpMemberDecorate %401 11 Offset 401 
                                                      OpMemberDecorate %401 12 RelaxedPrecision 
                                                      OpMemberDecorate %401 12 Offset 401 
                                                      OpMemberDecorate %401 13 RelaxedPrecision 
                                                      OpMemberDecorate %401 13 Offset 401 
                                                      OpMemberDecorate %401 14 RelaxedPrecision 
                                                      OpMemberDecorate %401 14 Offset 401 
                                                      OpMemberDecorate %401 15 RelaxedPrecision 
                                                      OpMemberDecorate %401 15 Offset 401 
                                                      OpMemberDecorate %401 16 RelaxedPrecision 
                                                      OpMemberDecorate %401 16 Offset 401 
                                                      OpDecorate %401 Block 
                                                      OpDecorate %403 DescriptorSet 403 
                                                      OpDecorate %403 Binding 403 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %439 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 459 
                                                      OpDecorate %463 ArrayStride 463 
                                                      OpDecorate %464 ArrayStride 464 
                                                      OpDecorate %465 ArrayStride 465 
                                                      OpDecorate %466 ArrayStride 466 
                                                      OpDecorate %467 ArrayStride 467 
                                                      OpMemberDecorate %468 0 Offset 468 
                                                      OpMemberDecorate %468 1 RelaxedPrecision 
                                                      OpMemberDecorate %468 1 Offset 468 
                                                      OpMemberDecorate %468 2 RelaxedPrecision 
                                                      OpMemberDecorate %468 2 Offset 468 
                                                      OpMemberDecorate %468 3 RelaxedPrecision 
                                                      OpMemberDecorate %468 3 Offset 468 
                                                      OpMemberDecorate %468 4 RelaxedPrecision 
                                                      OpMemberDecorate %468 4 Offset 468 
                                                      OpDecorate %468 Block 
                                                      OpDecorate %470 DescriptorSet 470 
                                                      OpDecorate %470 Binding 470 
                                                      OpDecorate %500 RelaxedPrecision 
                                                      OpDecorate %504 RelaxedPrecision 
                                                      OpDecorate %513 RelaxedPrecision 
                                                      OpDecorate %514 RelaxedPrecision 
                                                      OpDecorate %517 RelaxedPrecision 
                                                      OpDecorate %520 RelaxedPrecision 
                                                      OpDecorate %521 RelaxedPrecision 
                                                      OpDecorate %524 RelaxedPrecision 
                                                      OpDecorate %525 RelaxedPrecision 
                                                      OpDecorate %526 RelaxedPrecision 
                                                      OpDecorate %527 RelaxedPrecision 
                                                      OpDecorate %528 RelaxedPrecision 
                                                      OpDecorate %529 RelaxedPrecision 
                                                      OpDecorate %530 RelaxedPrecision 
                                                      OpDecorate %532 RelaxedPrecision 
                                                      OpDecorate %541 RelaxedPrecision 
                                                      OpDecorate %542 RelaxedPrecision 
                                                      OpDecorate %543 RelaxedPrecision 
                                                      OpDecorate %548 RelaxedPrecision 
                                                      OpDecorate %549 RelaxedPrecision 
                                                      OpDecorate %556 RelaxedPrecision 
                                                      OpDecorate %557 RelaxedPrecision 
                                                      OpDecorate %558 RelaxedPrecision 
                                                      OpDecorate %559 RelaxedPrecision 
                                                      OpDecorate %560 RelaxedPrecision 
                                                      OpDecorate %561 RelaxedPrecision 
                                                      OpDecorate %562 RelaxedPrecision 
                                                      OpDecorate %563 RelaxedPrecision 
                                                      OpDecorate %566 RelaxedPrecision 
                                                      OpDecorate %569 RelaxedPrecision 
                                                      OpDecorate %570 RelaxedPrecision 
                                                      OpDecorate %571 RelaxedPrecision 
                                                      OpDecorate %572 RelaxedPrecision 
                                                      OpDecorate %574 RelaxedPrecision 
                                                      OpDecorate %575 RelaxedPrecision 
                                                      OpDecorate %578 RelaxedPrecision 
                                                      OpDecorate %579 RelaxedPrecision 
                                                      OpDecorate %580 RelaxedPrecision 
                                                      OpDecorate %620 RelaxedPrecision 
                                                      OpDecorate %621 RelaxedPrecision 
                                                      OpDecorate %622 RelaxedPrecision 
                                                      OpDecorate %623 RelaxedPrecision 
                                                      OpDecorate %624 RelaxedPrecision 
                                                      OpDecorate %625 RelaxedPrecision 
                                                      OpDecorate %626 RelaxedPrecision 
                                                      OpDecorate %627 RelaxedPrecision 
                                                      OpDecorate %630 RelaxedPrecision 
                                                      OpDecorate %646 RelaxedPrecision 
                                                      OpDecorate %648 RelaxedPrecision 
                                                      OpDecorate %656 RelaxedPrecision 
                                                      OpDecorate %658 RelaxedPrecision 
                                                      OpDecorate %659 RelaxedPrecision 
                                                      OpDecorate %662 RelaxedPrecision 
                                                      OpDecorate %665 RelaxedPrecision 
                                                      OpDecorate %670 RelaxedPrecision 
                                                      OpDecorate %681 RelaxedPrecision 
                                                      OpDecorate %683 RelaxedPrecision 
                                                      OpDecorate %684 RelaxedPrecision 
                                                      OpDecorate %685 RelaxedPrecision 
                                                      OpDecorate %690 RelaxedPrecision 
                                                      OpDecorate %694 RelaxedPrecision 
                                                      OpDecorate %700 RelaxedPrecision 
                                                      OpDecorate %706 RelaxedPrecision 
                                                      OpDecorate %715 RelaxedPrecision 
                                                      OpDecorate %718 RelaxedPrecision 
                                                      OpDecorate %719 RelaxedPrecision 
                                                      OpDecorate %720 RelaxedPrecision 
                                                      OpDecorate %724 RelaxedPrecision 
                                                      OpDecorate %725 RelaxedPrecision 
                                                      OpDecorate %726 RelaxedPrecision 
                                                      OpDecorate %730 RelaxedPrecision 
                                                      OpDecorate %731 RelaxedPrecision 
                                                      OpDecorate %732 RelaxedPrecision 
                                                      OpDecorate %744 RelaxedPrecision 
                                                      OpDecorate %745 RelaxedPrecision 
                                                      OpDecorate %749 RelaxedPrecision 
                                                      OpDecorate %750 RelaxedPrecision 
                                                      OpDecorate %751 RelaxedPrecision 
                                                      OpDecorate %752 RelaxedPrecision 
                                                      OpDecorate %753 RelaxedPrecision 
                                                      OpDecorate %754 RelaxedPrecision 
                                                      OpDecorate %755 RelaxedPrecision 
                                                      OpDecorate %756 RelaxedPrecision 
                                                      OpDecorate %757 RelaxedPrecision 
                                                      OpDecorate %758 RelaxedPrecision 
                                                      OpDecorate %759 RelaxedPrecision 
                                                      OpDecorate %761 RelaxedPrecision 
                                                      OpDecorate %762 RelaxedPrecision 
                                                      OpDecorate %763 RelaxedPrecision 
                                                      OpDecorate %764 RelaxedPrecision 
                                                      OpDecorate %793 RelaxedPrecision 
                                                      OpDecorate %794 RelaxedPrecision 
                                                      OpDecorate %796 RelaxedPrecision 
                                                      OpDecorate %797 RelaxedPrecision 
                                                      OpDecorate %800 RelaxedPrecision 
                                                      OpDecorate %801 RelaxedPrecision 
                                                      OpDecorate %803 RelaxedPrecision 
                                                      OpDecorate %805 RelaxedPrecision 
                                                      OpDecorate %806 RelaxedPrecision 
                                                      OpDecorate %807 RelaxedPrecision 
                                                      OpDecorate %808 RelaxedPrecision 
                                                      OpDecorate %809 RelaxedPrecision 
                                                      OpDecorate %811 RelaxedPrecision 
                                                      OpDecorate %812 RelaxedPrecision 
                                                      OpDecorate %813 RelaxedPrecision 
                                                      OpDecorate %813 DescriptorSet 813 
                                                      OpDecorate %813 Binding 813 
                                                      OpDecorate %814 RelaxedPrecision 
                                                      OpDecorate %815 RelaxedPrecision 
                                                      OpDecorate %815 DescriptorSet 815 
                                                      OpDecorate %815 Binding 815 
                                                      OpDecorate %816 RelaxedPrecision 
                                                      OpDecorate %818 RelaxedPrecision 
                                                      OpDecorate %819 RelaxedPrecision 
                                                      OpDecorate %820 RelaxedPrecision 
                                                      OpDecorate %821 RelaxedPrecision 
                                                      OpDecorate %822 RelaxedPrecision 
                                                      OpDecorate %823 RelaxedPrecision 
                                                      OpDecorate %824 RelaxedPrecision 
                                                      OpDecorate %825 RelaxedPrecision 
                                                      OpDecorate %826 RelaxedPrecision 
                                                      OpDecorate %873 RelaxedPrecision 
                                                      OpDecorate %874 RelaxedPrecision 
                                                      OpDecorate %885 RelaxedPrecision 
                                                      OpDecorate %896 RelaxedPrecision 
                                                      OpDecorate %897 RelaxedPrecision 
                                                      OpDecorate %898 RelaxedPrecision 
                                                      OpDecorate %899 RelaxedPrecision 
                                                      OpDecorate %902 RelaxedPrecision 
                                                      OpDecorate %906 RelaxedPrecision 
                                                      OpDecorate %909 RelaxedPrecision 
                                                      OpDecorate %910 RelaxedPrecision 
                                                      OpDecorate %976 RelaxedPrecision 
                                                      OpDecorate %1002 RelaxedPrecision 
                                                      OpDecorate %1010 RelaxedPrecision 
                                                      OpDecorate %1011 RelaxedPrecision 
                                                      OpDecorate %1012 RelaxedPrecision 
                                                      OpDecorate %1013 RelaxedPrecision 
                                                      OpDecorate %1014 RelaxedPrecision 
                                                      OpDecorate %1015 RelaxedPrecision 
                                                      OpDecorate %1035 RelaxedPrecision 
                                                      OpDecorate %1036 RelaxedPrecision 
                                                      OpDecorate %1037 RelaxedPrecision 
                                                      OpDecorate %1040 RelaxedPrecision 
                                                      OpDecorate %1042 RelaxedPrecision 
                                                      OpDecorate %1043 RelaxedPrecision 
                                                      OpDecorate %1044 RelaxedPrecision 
                                                      OpDecorate %1045 RelaxedPrecision 
                                                      OpDecorate %1046 RelaxedPrecision 
                                                      OpDecorate %1049 RelaxedPrecision 
                                                      OpDecorate %1050 RelaxedPrecision 
                                                      OpDecorate %1051 RelaxedPrecision 
                                                      OpDecorate %1053 RelaxedPrecision 
                                                      OpDecorate %1053 Location 1053 
                                                      OpDecorate %1054 RelaxedPrecision 
                                                      OpDecorate %1055 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 0 
                                              %18 = OpTypePointer Private %6 
                                              %24 = OpTypePointer Private %10 
                               Private f32_3* %25 = OpVariable Private 
                               Private f32_3* %30 = OpVariable Private 
                                          u32 %35 = OpConstant 4 
                                              %36 = OpTypeArray %7 %35 
                                              %37 = OpTypeArray %7 %35 
                                              %38 = OpTypeStruct %7 %7 %7 %36 %37 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_4[4];}* %40 = OpVariable Uniform 
                                              %41 = OpTypeInt 32 1 
                                          i32 %42 = OpConstant 0 
                                              %43 = OpTypePointer Uniform %7 
                                 Private f32* %52 = OpVariable Private 
                               Private f32_4* %56 = OpVariable Private 
                               Private f32_3* %63 = OpVariable Private 
                                              %64 = OpTypeVector %6 2 
                                              %65 = OpTypePointer Input %64 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %68 = OpTypeStruct %6 %7 %7 %6 %6 %10 %7 %6 %6 %6 %6 
                                              %69 = OpTypePointer Uniform %68 
Uniform struct {f32; f32_4; f32_4; f32; f32; f32_3; f32_4; f32; f32; f32; f32;}* %70 = OpVariable Uniform 
                                          i32 %71 = OpConstant 1 
                               Private f32_3* %82 = OpVariable Private 
                                              %83 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %84 = OpTypePointer UniformConstant %83 
         UniformConstant read_only Texture2D* %85 = OpVariable UniformConstant 
                                              %87 = OpTypeSampler 
                                              %88 = OpTypePointer UniformConstant %87 
                     UniformConstant sampler* %89 = OpVariable UniformConstant 
                                              %91 = OpTypeSampledImage %83 
                               Private f32_3* %97 = OpVariable Private 
         UniformConstant read_only Texture2D* %98 = OpVariable UniformConstant 
                    UniformConstant sampler* %100 = OpVariable UniformConstant 
                              Private f32_3* %107 = OpVariable Private 
                                         f32 %109 = OpConstant 3.674022E-40 
                                       f32_3 %110 = OpConstantComposite %109 %109 %109 
                                         f32 %112 = OpConstant 3.674022E-40 
                                       f32_3 %113 = OpConstantComposite %112 %112 %112 
                              Private f32_4* %115 = OpVariable Private 
        UniformConstant read_only Texture2D* %116 = OpVariable UniformConstant 
                    UniformConstant sampler* %118 = OpVariable UniformConstant 
                                         u32 %124 = OpConstant 1 
                                         i32 %127 = OpConstant 3 
                                             %128 = OpTypePointer Uniform %6 
                                Private f32* %133 = OpVariable Private 
                                         f32 %136 = OpConstant 3.674022E-40 
                                         f32 %142 = OpConstant 3.674022E-40 
                              Private f32_3* %144 = OpVariable Private 
                              Private f32_3* %149 = OpVariable Private 
                                         i32 %151 = OpConstant 2 
                                         f32 %157 = OpConstant 3.674022E-40 
                                       f32_3 %158 = OpConstantComposite %157 %157 %157 
                                         f32 %164 = OpConstant 3.674022E-40 
                                       f32_3 %165 = OpConstantComposite %164 %164 %164 
                                Private f32* %167 = OpVariable Private 
                                         f32 %170 = OpConstant 3.674022E-40 
                                         f32 %172 = OpConstant 3.674022E-40 
                              Private f32_3* %174 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                Private f32* %202 = OpVariable Private 
                              Private f32_4* %208 = OpVariable Private 
                                         f32 %222 = OpConstant 3.674022E-40 
                                         u32 %236 = OpConstant 2 
                                         f32 %240 = OpConstant 3.674022E-40 
                                       f32_3 %241 = OpConstantComposite %240 %222 %222 
                                Private f32* %245 = OpVariable Private 
                                         f32 %259 = OpConstant 3.674022E-40 
                                         f32 %271 = OpConstant 3.674022E-40 
                              Private f32_4* %333 = OpVariable Private 
                                         i32 %342 = OpConstant 10 
                              Private f32_3* %353 = OpVariable Private 
        UniformConstant read_only Texture2D* %354 = OpVariable UniformConstant 
                    UniformConstant sampler* %356 = OpVariable UniformConstant 
                              Private f32_3* %363 = OpVariable Private 
                                         i32 %365 = OpConstant 4 
                                             %398 = OpTypeArray %7 %35 
                                             %399 = OpTypeArray %7 %35 
                                             %400 = OpTypeArray %7 %236 
                                             %401 = OpTypeStruct %398 %399 %7 %7 %7 %400 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 
                                             %402 = OpTypePointer Uniform %401 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4; f32_4[2]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %403 = OpVariable Uniform 
                                             %408 = OpTypePointer Private %41 
                                Private i32* %409 = OpVariable Private 
                                             %414 = OpTypePointer Function %16 
                                             %424 = OpTypeBool 
                                Private i32* %426 = OpVariable Private 
                                         u32 %428 = OpConstant 3 
                                             %431 = OpTypePointer Private %16 
                                Private u32* %432 = OpVariable Private 
                                         i32 %435 = OpConstant 5 
                                             %440 = OpTypeVector %16 4 
                                             %441 = OpTypeArray %440 %35 
                                         u32 %442 = OpConstant 1065353216 
                                       u32_4 %443 = OpConstantComposite %442 %17 %17 %17 
                                       u32_4 %444 = OpConstantComposite %17 %442 %17 %17 
                                       u32_4 %445 = OpConstantComposite %17 %17 %442 %17 
                                       u32_4 %446 = OpConstantComposite %17 %17 %17 %442 
                                    u32_4[4] %447 = OpConstantComposite %443 %444 %445 %446 
                                             %449 = OpTypePointer Function %441 
                                             %451 = OpTypePointer Function %440 
                              Private f32_3* %458 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD5 = OpVariable Input 
                                         u32 %462 = OpConstant 32 
                                             %463 = OpTypeArray %7 %462 
                                             %464 = OpTypeArray %7 %462 
                                             %465 = OpTypeArray %7 %462 
                                             %466 = OpTypeArray %7 %462 
                                             %467 = OpTypeArray %7 %462 
                                             %468 = OpTypeStruct %463 %464 %465 %466 %467 
                                             %469 = OpTypePointer Uniform %468 
Uniform struct {f32_4[32]; f32_4[32]; f32_4[32]; f32_4[32]; f32_4[32];}* %470 = OpVariable Uniform 
                                Private f32* %481 = OpVariable Private 
                                         f32 %486 = OpConstant 3.674022E-40 
                                Private f32* %488 = OpVariable Private 
                              Private f32_3* %541 = OpVariable Private 
                              Private f32_3* %562 = OpVariable Private 
                                Private f32* %623 = OpVariable Private 
                                         f32 %632 = OpConstant 3.674022E-40 
                                         f32 %647 = OpConstant 3.674022E-40 
                                         f32 %657 = OpConstant 3.674022E-40 
                                         f32 %678 = OpConstant 3.674022E-40 
                                       f32_3 %679 = OpConstantComposite %678 %678 %678 
                                         i32 %698 = OpConstant 11 
                                         i32 %704 = OpConstant 12 
                              Private f32_3* %715 = OpVariable Private 
                                         i32 %716 = OpConstant 13 
                                         i32 %722 = OpConstant 14 
                                         i32 %728 = OpConstant 15 
                                         i32 %747 = OpConstant 16 
                                       f32_3 %760 = OpConstantComposite %271 %271 %271 
                                       f32_2 %795 = OpConstantComposite %259 %259 
                                         f32 %802 = OpConstant 3.674022E-40 
                                         f32 %804 = OpConstant 3.674022E-40 
                                         f32 %810 = OpConstant 3.674022E-40 
                              Private f32_3* %812 = OpVariable Private 
        UniformConstant read_only Texture2D* %813 = OpVariable UniformConstant 
                    UniformConstant sampler* %815 = OpVariable UniformConstant 
                                Private f32* %859 = OpVariable Private 
                                             %917 = OpTypePointer Uniform %10 
                                         i32 %978 = OpConstant 8 
                                         i32 %986 = OpConstant 7 
                                         i32 %997 = OpConstant 6 
                                        i32 %1003 = OpConstant 9 
                                      f32_3 %1024 = OpConstantComposite %802 %802 %802 
                                        f32 %1028 = OpConstant 3.674022E-40 
                                      f32_3 %1029 = OpConstantComposite %1028 %1028 %1028 
                                        f32 %1047 = OpConstant 3.674022E-40 
                                      f32_3 %1048 = OpConstantComposite %1047 %1047 %1047 
                                            %1052 = OpTypePointer Output %7 
                              Output f32_4* %1053 = OpVariable Output 
                                            %1058 = OpTypePointer Output %6 
                                            %1061 = OpTypePointer Private %424 
                              Private bool* %1062 = OpVariable Private 
                               Private u32* %1063 = OpVariable Private 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function u32* %415 = OpVariable Function 
                          Function u32_4[4]* %450 = OpVariable Function 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                                        f32_3 %14 = OpLoad vs_TEXCOORD2 
                                          f32 %15 = OpDot %13 %14 
                                 Private f32* %19 = OpAccessChain %9 %17 
                                                      OpStore %19 %15 
                                 Private f32* %20 = OpAccessChain %9 %17 
                                          f32 %21 = OpLoad %20 
                                          f32 %22 = OpExtInst %1 32 %21 
                                 Private f32* %23 = OpAccessChain %9 %17 
                                                      OpStore %23 %22 
                                        f32_4 %26 = OpLoad %9 
                                        f32_3 %27 = OpVectorShuffle %26 %26 0 0 0 
                                        f32_3 %28 = OpLoad vs_TEXCOORD2 
                                        f32_3 %29 = OpFMul %27 %28 
                                                      OpStore %25 %29 
                                        f32_3 %31 = OpLoad vs_TEXCOORD2 
                                        f32_4 %32 = OpLoad %9 
                                        f32_3 %33 = OpVectorShuffle %32 %32 0 0 0 
                                        f32_3 %34 = OpFMul %31 %33 
                               Uniform f32_4* %44 = OpAccessChain %40 %42 
                                        f32_4 %45 = OpLoad %44 
                                        f32_3 %46 = OpVectorShuffle %45 %45 0 1 2 
                                        f32_3 %47 = OpFAdd %34 %46 
                                                      OpStore %30 %47 
                                        f32_3 %48 = OpLoad %30 
                                        f32_3 %49 = OpLoad %30 
                                          f32 %50 = OpDot %48 %49 
                                 Private f32* %51 = OpAccessChain %9 %17 
                                                      OpStore %51 %50 
                                 Private f32* %53 = OpAccessChain %9 %17 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpExtInst %1 32 %54 
                                                      OpStore %52 %55 
                                          f32 %57 = OpLoad %52 
                                        f32_3 %58 = OpCompositeConstruct %57 %57 %57 
                                        f32_3 %59 = OpLoad %30 
                                        f32_3 %60 = OpFMul %58 %59 
                                        f32_4 %61 = OpLoad %56 
                                        f32_4 %62 = OpVectorShuffle %61 %60 4 5 6 3 
                                                      OpStore %56 %62 
                                        f32_2 %67 = OpLoad vs_TEXCOORD0 
                               Uniform f32_4* %72 = OpAccessChain %70 %71 
                                        f32_4 %73 = OpLoad %72 
                                        f32_2 %74 = OpVectorShuffle %73 %73 0 1 
                                        f32_2 %75 = OpFMul %67 %74 
                               Uniform f32_4* %76 = OpAccessChain %70 %71 
                                        f32_4 %77 = OpLoad %76 
                                        f32_2 %78 = OpVectorShuffle %77 %77 2 3 
                                        f32_2 %79 = OpFAdd %75 %78 
                                        f32_3 %80 = OpLoad %63 
                                        f32_3 %81 = OpVectorShuffle %80 %79 3 4 2 
                                                      OpStore %63 %81 
                          read_only Texture2D %86 = OpLoad %85 
                                      sampler %90 = OpLoad %89 
                   read_only Texture2DSampled %92 = OpSampledImage %86 %90 
                                        f32_3 %93 = OpLoad %63 
                                        f32_2 %94 = OpVectorShuffle %93 %93 0 1 
                                        f32_4 %95 = OpImageSampleImplicitLod %92 %94 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 1 2 
                                                      OpStore %82 %96 
                          read_only Texture2D %99 = OpLoad %98 
                                     sampler %101 = OpLoad %100 
                  read_only Texture2DSampled %102 = OpSampledImage %99 %101 
                                       f32_3 %103 = OpLoad %63 
                                       f32_2 %104 = OpVectorShuffle %103 %103 0 1 
                                       f32_4 %105 = OpImageSampleImplicitLod %102 %104 
                                       f32_3 %106 = OpVectorShuffle %105 %105 0 1 2 
                                                      OpStore %97 %106 
                                       f32_3 %108 = OpLoad %97 
                                       f32_3 %111 = OpFMul %108 %110 
                                       f32_3 %114 = OpFAdd %111 %113 
                                                      OpStore %107 %114 
                         read_only Texture2D %117 = OpLoad %116 
                                     sampler %119 = OpLoad %118 
                  read_only Texture2DSampled %120 = OpSampledImage %117 %119 
                                       f32_3 %121 = OpLoad %63 
                                       f32_2 %122 = OpVectorShuffle %121 %121 0 1 
                                       f32_4 %123 = OpImageSampleImplicitLod %120 %122 
                                                      OpStore %115 %123 
                                Private f32* %125 = OpAccessChain %115 %124 
                                         f32 %126 = OpLoad %125 
                                Uniform f32* %129 = OpAccessChain %70 %127 
                                         f32 %130 = OpLoad %129 
                                         f32 %131 = OpFNegate %130 
                                         f32 %132 = OpFAdd %126 %131 
                                                      OpStore %52 %132 
                                         f32 %134 = OpLoad %52 
                                         f32 %135 = OpFNegate %134 
                                         f32 %137 = OpFAdd %135 %136 
                                                      OpStore %133 %137 
                                         f32 %138 = OpLoad %133 
                                         f32 %139 = OpLoad %133 
                                         f32 %140 = OpFMul %138 %139 
                                                      OpStore %133 %140 
                                         f32 %141 = OpLoad %133 
                                         f32 %143 = OpExtInst %1 40 %141 %142 
                                                      OpStore %133 %143 
                                       f32_3 %145 = OpLoad %82 
                                       f32_4 %146 = OpLoad %115 
                                       f32_3 %147 = OpVectorShuffle %146 %146 2 2 2 
                                       f32_3 %148 = OpFMul %145 %147 
                                                      OpStore %144 %148 
                                       f32_3 %150 = OpLoad %144 
                              Uniform f32_4* %152 = OpAccessChain %70 %151 
                                       f32_4 %153 = OpLoad %152 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                       f32_3 %155 = OpFMul %150 %154 
                                                      OpStore %149 %155 
                                       f32_3 %156 = OpLoad %82 
                                       f32_3 %159 = OpFAdd %156 %158 
                                                      OpStore %144 %159 
                                       f32_4 %160 = OpLoad %115 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 0 0 
                                       f32_3 %162 = OpLoad %144 
                                       f32_3 %163 = OpFMul %161 %162 
                                       f32_3 %166 = OpFAdd %163 %165 
                                                      OpStore %144 %166 
                                Private f32* %168 = OpAccessChain %115 %17 
                                         f32 %169 = OpLoad %168 
                                         f32 %171 = OpFMul %169 %170 
                                         f32 %173 = OpFAdd %171 %172 
                                                      OpStore %167 %173 
                                       f32_3 %175 = OpLoad %82 
                                         f32 %176 = OpLoad %167 
                                       f32_3 %177 = OpCompositeConstruct %176 %176 %176 
                                       f32_3 %178 = OpFMul %175 %177 
                                                      OpStore %174 %178 
                                       f32_4 %179 = OpLoad %115 
                                       f32_3 %180 = OpVectorShuffle %179 %179 3 3 3 
                                       f32_3 %181 = OpLoad %174 
                                       f32_3 %182 = OpFMul %180 %181 
                                                      OpStore %174 %182 
                                       f32_3 %183 = OpLoad %107 
                                       f32_3 %184 = OpVectorShuffle %183 %183 1 1 1 
                                       f32_3 %186 = OpLoad vs_TEXCOORD4 
                                       f32_3 %187 = OpFMul %184 %186 
                                                      OpStore %63 %187 
                                       f32_3 %188 = OpLoad %107 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 0 0 
                                       f32_3 %191 = OpLoad vs_TEXCOORD3 
                                       f32_3 %192 = OpFMul %189 %191 
                                       f32_3 %193 = OpLoad %63 
                                       f32_3 %194 = OpFAdd %192 %193 
                                                      OpStore %63 %194 
                                       f32_3 %195 = OpLoad %107 
                                       f32_3 %196 = OpVectorShuffle %195 %195 2 2 2 
                                       f32_3 %198 = OpLoad vs_TEXCOORD1 
                                       f32_3 %199 = OpFMul %196 %198 
                                       f32_3 %200 = OpLoad %63 
                                       f32_3 %201 = OpFAdd %199 %200 
                                                      OpStore %63 %201 
                                       f32_3 %203 = OpLoad %63 
                                       f32_3 %204 = OpLoad %63 
                                         f32 %205 = OpDot %203 %204 
                                                      OpStore %202 %205 
                                         f32 %206 = OpLoad %202 
                                         f32 %207 = OpExtInst %1 32 %206 
                                                      OpStore %202 %207 
                                         f32 %209 = OpLoad %202 
                                       f32_3 %210 = OpCompositeConstruct %209 %209 %209 
                                       f32_3 %211 = OpLoad %63 
                                       f32_3 %212 = OpFMul %210 %211 
                                       f32_4 %213 = OpLoad %208 
                                       f32_4 %214 = OpVectorShuffle %213 %212 4 5 6 3 
                                                      OpStore %208 %214 
                                       f32_4 %215 = OpLoad %208 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                              Uniform f32_4* %217 = OpAccessChain %40 %42 
                                       f32_4 %218 = OpLoad %217 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
                                         f32 %220 = OpDot %216 %219 
                                                      OpStore %202 %220 
                                         f32 %221 = OpLoad %202 
                                         f32 %223 = OpExtInst %1 40 %221 %222 
                                Private f32* %224 = OpAccessChain %63 %17 
                                                      OpStore %224 %223 
                                       f32_4 %225 = OpLoad %208 
                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
                                       f32_3 %227 = OpLoad %25 
                                         f32 %228 = OpDot %226 %227 
                                Private f32* %229 = OpAccessChain %9 %124 
                                                      OpStore %229 %228 
                              Uniform f32_4* %230 = OpAccessChain %40 %42 
                                       f32_4 %231 = OpLoad %230 
                                       f32_3 %232 = OpVectorShuffle %231 %231 0 1 2 
                                       f32_4 %233 = OpLoad %56 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                         f32 %235 = OpDot %232 %234 
                                Private f32* %237 = OpAccessChain %9 %236 
                                                      OpStore %237 %235 
                                       f32_4 %238 = OpLoad %9 
                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
                                       f32_3 %242 = OpExtInst %1 40 %239 %241 
                                       f32_4 %243 = OpLoad %9 
                                       f32_4 %244 = OpVectorShuffle %243 %242 4 5 6 3 
                                                      OpStore %9 %244 
                                         f32 %246 = OpLoad %133 
                                         f32 %247 = OpLoad %133 
                                         f32 %248 = OpFAdd %246 %247 
                                                      OpStore %245 %248 
                                Private f32* %249 = OpAccessChain %9 %236 
                                         f32 %250 = OpLoad %249 
                                Private f32* %251 = OpAccessChain %9 %236 
                                         f32 %252 = OpLoad %251 
                                         f32 %253 = OpFMul %250 %252 
                                Private f32* %254 = OpAccessChain %56 %17 
                                                      OpStore %254 %253 
                                Private f32* %255 = OpAccessChain %56 %17 
                                         f32 %256 = OpLoad %255 
                                         f32 %257 = OpLoad %245 
                                         f32 %258 = OpFMul %256 %257 
                                         f32 %260 = OpFAdd %258 %259 
                                                      OpStore %245 %260 
                                         f32 %261 = OpLoad %245 
                                         f32 %262 = OpFAdd %261 %112 
                                Private f32* %263 = OpAccessChain %107 %17 
                                                      OpStore %263 %262 
                                Private f32* %264 = OpAccessChain %9 %124 
                                         f32 %265 = OpLoad %264 
                                         f32 %266 = OpFNegate %265 
                                         f32 %267 = OpFAdd %266 %136 
                                Private f32* %268 = OpAccessChain %25 %17 
                                                      OpStore %268 %267 
                                Private f32* %269 = OpAccessChain %25 %17 
                                         f32 %270 = OpLoad %269 
                                         f32 %272 = OpExtInst %1 40 %270 %271 
                                Private f32* %273 = OpAccessChain %25 %17 
                                                      OpStore %273 %272 
                                Private f32* %274 = OpAccessChain %25 %17 
                                         f32 %275 = OpLoad %274 
                                Private f32* %276 = OpAccessChain %25 %17 
                                         f32 %277 = OpLoad %276 
                                         f32 %278 = OpFMul %275 %277 
                                                      OpStore %245 %278 
                                         f32 %279 = OpLoad %245 
                                         f32 %280 = OpLoad %245 
                                         f32 %281 = OpFMul %279 %280 
                                                      OpStore %245 %281 
                                Private f32* %282 = OpAccessChain %25 %17 
                                         f32 %283 = OpLoad %282 
                                         f32 %284 = OpLoad %245 
                                         f32 %285 = OpFMul %283 %284 
                                Private f32* %286 = OpAccessChain %25 %17 
                                                      OpStore %286 %285 
                                Private f32* %287 = OpAccessChain %107 %17 
                                         f32 %288 = OpLoad %287 
                                Private f32* %289 = OpAccessChain %25 %17 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpFMul %288 %290 
                                         f32 %292 = OpFAdd %291 %136 
                                Private f32* %293 = OpAccessChain %25 %17 
                                                      OpStore %293 %292 
                                Private f32* %294 = OpAccessChain %63 %17 
                                         f32 %295 = OpLoad %294 
                                         f32 %296 = OpFNegate %295 
                                         f32 %297 = OpFAdd %296 %136 
                                                      OpStore %245 %297 
                                         f32 %298 = OpLoad %245 
                                         f32 %299 = OpExtInst %1 40 %298 %271 
                                                      OpStore %245 %299 
                                         f32 %300 = OpLoad %245 
                                         f32 %301 = OpLoad %245 
                                         f32 %302 = OpFMul %300 %301 
                                Private f32* %303 = OpAccessChain %56 %17 
                                                      OpStore %303 %302 
                                Private f32* %304 = OpAccessChain %56 %17 
                                         f32 %305 = OpLoad %304 
                                Private f32* %306 = OpAccessChain %56 %17 
                                         f32 %307 = OpLoad %306 
                                         f32 %308 = OpFMul %305 %307 
                                Private f32* %309 = OpAccessChain %56 %17 
                                                      OpStore %309 %308 
                                         f32 %310 = OpLoad %245 
                                Private f32* %311 = OpAccessChain %56 %17 
                                         f32 %312 = OpLoad %311 
                                         f32 %313 = OpFMul %310 %312 
                                                      OpStore %245 %313 
                                Private f32* %314 = OpAccessChain %107 %17 
                                         f32 %315 = OpLoad %314 
                                         f32 %316 = OpLoad %245 
                                         f32 %317 = OpFMul %315 %316 
                                         f32 %318 = OpFAdd %317 %136 
                                                      OpStore %245 %318 
                                Private f32* %319 = OpAccessChain %25 %17 
                                         f32 %320 = OpLoad %319 
                                         f32 %321 = OpLoad %245 
                                         f32 %322 = OpFMul %320 %321 
                                Private f32* %323 = OpAccessChain %107 %17 
                                                      OpStore %323 %322 
                                Private f32* %324 = OpAccessChain %107 %17 
                                         f32 %325 = OpLoad %324 
                                         f32 %326 = OpExtInst %1 37 %325 %136 
                                Private f32* %327 = OpAccessChain %107 %17 
                                                      OpStore %327 %326 
                                         f32 %328 = OpLoad %202 
                                Private f32* %329 = OpAccessChain %107 %17 
                                         f32 %330 = OpLoad %329 
                                         f32 %331 = OpFMul %328 %330 
                                Private f32* %332 = OpAccessChain %107 %17 
                                                      OpStore %332 %331 
                                Private f32* %334 = OpAccessChain %107 %17 
                                         f32 %335 = OpLoad %334 
                                         f32 %336 = OpFMul %335 %259 
                                         f32 %337 = OpFAdd %336 %259 
                                Private f32* %338 = OpAccessChain %333 %17 
                                                      OpStore %338 %337 
                                Private f32* %339 = OpAccessChain %333 %17 
                                         f32 %340 = OpLoad %339 
                                Private f32* %341 = OpAccessChain %56 %17 
                                                      OpStore %341 %340 
                                Uniform f32* %343 = OpAccessChain %70 %342 
                                         f32 %344 = OpLoad %343 
                                Uniform f32* %345 = OpAccessChain %70 %342 
                                         f32 %346 = OpLoad %345 
                                       f32_2 %347 = OpCompositeConstruct %344 %346 
                                         f32 %348 = OpCompositeExtract %347 0 
                                         f32 %349 = OpCompositeExtract %347 1 
                                       f32_2 %350 = OpCompositeConstruct %348 %349 
                                       f32_4 %351 = OpLoad %56 
                                       f32_4 %352 = OpVectorShuffle %351 %350 0 4 2 5 
                                                      OpStore %56 %352 
                         read_only Texture2D %355 = OpLoad %354 
                                     sampler %357 = OpLoad %356 
                  read_only Texture2DSampled %358 = OpSampledImage %355 %357 
                                       f32_4 %359 = OpLoad %56 
                                       f32_2 %360 = OpVectorShuffle %359 %359 0 1 
                                       f32_4 %361 = OpImageSampleImplicitLod %358 %360 
                                       f32_3 %362 = OpVectorShuffle %361 %361 0 1 2 
                                                      OpStore %353 %362 
                                       f32_3 %364 = OpLoad %353 
                                Uniform f32* %366 = OpAccessChain %70 %365 
                                         f32 %367 = OpLoad %366 
                                Uniform f32* %368 = OpAccessChain %70 %365 
                                         f32 %369 = OpLoad %368 
                                Uniform f32* %370 = OpAccessChain %70 %365 
                                         f32 %371 = OpLoad %370 
                                       f32_3 %372 = OpCompositeConstruct %367 %369 %371 
                                         f32 %373 = OpCompositeExtract %372 0 
                                         f32 %374 = OpCompositeExtract %372 1 
                                         f32 %375 = OpCompositeExtract %372 2 
                                       f32_3 %376 = OpCompositeConstruct %373 %374 %375 
                                       f32_3 %377 = OpFMul %364 %376 
                                                      OpStore %363 %377 
                                Private f32* %378 = OpAccessChain %56 %17 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpExtInst %1 37 %379 %136 
                                Private f32* %381 = OpAccessChain %25 %17 
                                                      OpStore %381 %380 
                                       f32_3 %382 = OpLoad %174 
                                       f32_3 %383 = OpLoad %363 
                                       f32_3 %384 = OpFMul %382 %383 
                                                      OpStore %107 %384 
                                       f32_3 %385 = OpLoad %107 
                              Uniform f32_4* %386 = OpAccessChain %40 %71 
                                       f32_4 %387 = OpLoad %386 
                                       f32_3 %388 = OpVectorShuffle %387 %387 0 1 2 
                                       f32_3 %389 = OpFMul %385 %388 
                                                      OpStore %363 %389 
                                       f32_3 %390 = OpLoad %363 
                                       f32_3 %391 = OpLoad %25 
                                       f32_3 %392 = OpVectorShuffle %391 %391 0 0 0 
                                       f32_3 %393 = OpFMul %390 %392 
                                       f32_3 %394 = OpLoad %149 
                                       f32_3 %395 = OpFAdd %393 %394 
                                                      OpStore %363 %395 
                                Uniform f32* %396 = OpAccessChain %40 %151 %17 
                                         f32 %397 = OpLoad %396 
                                Uniform f32* %404 = OpAccessChain %403 %365 %124 
                                         f32 %405 = OpLoad %404 
                                         f32 %406 = OpExtInst %1 37 %397 %405 
                                Private f32* %407 = OpAccessChain %107 %17 
                                                      OpStore %407 %406 
                                Private f32* %410 = OpAccessChain %107 %17 
                                         f32 %411 = OpLoad %410 
                                         i32 %412 = OpConvertFToS %411 
                                                      OpStore %409 %412 
                                       f32_3 %413 = OpLoad %363 
                                                      OpStore %107 %413 
                                                      OpStore %415 %17 
                                                      OpBranch %416 
                                             %416 = OpLabel 
                                                      OpLoopMerge %418 %419 None 
                                                      OpBranch %420 
                                             %420 = OpLabel 
                                         u32 %421 = OpLoad %415 
                                         i32 %422 = OpLoad %409 
                                         u32 %423 = OpBitcast %422 
                                        bool %425 = OpULessThan %421 %423 
                                                      OpBranchConditional %425 %417 %418 
                                             %417 = OpLabel 
                                         u32 %427 = OpLoad %415 
                                         u32 %429 = OpBitwiseAnd %427 %428 
                                         i32 %430 = OpBitcast %429 
                                                      OpStore %426 %430 
                                         u32 %433 = OpLoad %415 
                                         u32 %434 = OpShiftRightLogical %433 %236 
                                                      OpStore %432 %434 
                                         u32 %436 = OpLoad %432 
                                         i32 %437 = OpBitcast %436 
                              Uniform f32_4* %438 = OpAccessChain %403 %435 %437 
                                       f32_4 %439 = OpLoad %438 
                                         i32 %448 = OpLoad %426 
                                                      OpStore %450 %447 
                             Function u32_4* %452 = OpAccessChain %450 %448 
                                       u32_4 %453 = OpLoad %452 
                                       f32_4 %454 = OpBitcast %453 
                                         f32 %455 = OpDot %439 %454 
                                                      OpStore %167 %455 
                                         f32 %456 = OpLoad %167 
                                         i32 %457 = OpConvertFToS %456 
                                                      OpStore %426 %457 
                                       f32_3 %460 = OpLoad vs_TEXCOORD5 
                                       f32_3 %461 = OpFNegate %460 
                                         i32 %471 = OpLoad %426 
                              Uniform f32_4* %472 = OpAccessChain %470 %42 %471 
                                       f32_4 %473 = OpLoad %472 
                                       f32_3 %474 = OpVectorShuffle %473 %473 3 3 3 
                                       f32_3 %475 = OpFMul %461 %474 
                                         i32 %476 = OpLoad %426 
                              Uniform f32_4* %477 = OpAccessChain %470 %42 %476 
                                       f32_4 %478 = OpLoad %477 
                                       f32_3 %479 = OpVectorShuffle %478 %478 0 1 2 
                                       f32_3 %480 = OpFAdd %475 %479 
                                                      OpStore %458 %480 
                                       f32_3 %482 = OpLoad %458 
                                       f32_3 %483 = OpLoad %458 
                                         f32 %484 = OpDot %482 %483 
                                                      OpStore %481 %484 
                                         f32 %485 = OpLoad %481 
                                         f32 %487 = OpExtInst %1 40 %485 %486 
                                                      OpStore %481 %487 
                                         f32 %489 = OpLoad %481 
                                         f32 %490 = OpExtInst %1 32 %489 
                                                      OpStore %488 %490 
                                         f32 %491 = OpLoad %488 
                                       f32_3 %492 = OpCompositeConstruct %491 %491 %491 
                                       f32_3 %493 = OpLoad %458 
                                       f32_3 %494 = OpFMul %492 %493 
                                                      OpStore %458 %494 
                                         f32 %495 = OpLoad %481 
                                         f32 %496 = OpFDiv %136 %495 
                                                      OpStore %488 %496 
                                         f32 %497 = OpLoad %481 
                                         i32 %498 = OpLoad %426 
                                Uniform f32* %499 = OpAccessChain %470 %151 %498 %17 
                                         f32 %500 = OpLoad %499 
                                         f32 %501 = OpFMul %497 %500 
                                         i32 %502 = OpLoad %426 
                                Uniform f32* %503 = OpAccessChain %470 %151 %502 %124 
                                         f32 %504 = OpLoad %503 
                                         f32 %505 = OpFAdd %501 %504 
                                                      OpStore %481 %505 
                                         f32 %506 = OpLoad %481 
                                         f32 %507 = OpExtInst %1 43 %506 %271 %136 
                                                      OpStore %481 %507 
                                         f32 %508 = OpLoad %481 
                                         f32 %509 = OpLoad %488 
                                         f32 %510 = OpFMul %508 %509 
                                                      OpStore %481 %510 
                                         i32 %511 = OpLoad %426 
                              Uniform f32_4* %512 = OpAccessChain %470 %127 %511 
                                       f32_4 %513 = OpLoad %512 
                                       f32_3 %514 = OpVectorShuffle %513 %513 0 1 2 
                                       f32_3 %515 = OpLoad %458 
                                         f32 %516 = OpDot %514 %515 
                                                      OpStore %167 %516 
                                         f32 %517 = OpLoad %167 
                                         i32 %518 = OpLoad %426 
                                Uniform f32* %519 = OpAccessChain %470 %151 %518 %236 
                                         f32 %520 = OpLoad %519 
                                         f32 %521 = OpFMul %517 %520 
                                         i32 %522 = OpLoad %426 
                                Uniform f32* %523 = OpAccessChain %470 %151 %522 %428 
                                         f32 %524 = OpLoad %523 
                                         f32 %525 = OpFAdd %521 %524 
                                                      OpStore %167 %525 
                                         f32 %526 = OpLoad %167 
                                         f32 %527 = OpExtInst %1 43 %526 %271 %136 
                                                      OpStore %167 %527 
                                         f32 %528 = OpLoad %167 
                                         f32 %529 = OpLoad %167 
                                         f32 %530 = OpFMul %528 %529 
                                                      OpStore %167 %530 
                                         f32 %531 = OpLoad %481 
                                         f32 %532 = OpLoad %167 
                                         f32 %533 = OpFMul %531 %532 
                                                      OpStore %481 %533 
                                       f32_4 %534 = OpLoad %208 
                                       f32_3 %535 = OpVectorShuffle %534 %534 0 1 2 
                                       f32_3 %536 = OpLoad %458 
                                         f32 %537 = OpDot %535 %536 
                                                      OpStore %488 %537 
                                         f32 %538 = OpLoad %488 
                                         f32 %539 = OpExtInst %1 40 %538 %222 
                                Private f32* %540 = OpAccessChain %56 %236 
                                                      OpStore %540 %539 
                         read_only Texture2D %542 = OpLoad %354 
                                     sampler %543 = OpLoad %356 
                  read_only Texture2DSampled %544 = OpSampledImage %542 %543 
                                       f32_4 %545 = OpLoad %56 
                                       f32_2 %546 = OpVectorShuffle %545 %545 2 3 
                                       f32_4 %547 = OpImageSampleImplicitLod %544 %546 
                                       f32_3 %548 = OpVectorShuffle %547 %547 0 1 2 
                                                      OpStore %541 %548 
                                       f32_3 %549 = OpLoad %541 
                                Uniform f32* %550 = OpAccessChain %70 %365 
                                         f32 %551 = OpLoad %550 
                                Uniform f32* %552 = OpAccessChain %70 %365 
                                         f32 %553 = OpLoad %552 
                                Uniform f32* %554 = OpAccessChain %70 %365 
                                         f32 %555 = OpLoad %554 
                                       f32_3 %556 = OpCompositeConstruct %551 %553 %555 
                                         f32 %557 = OpCompositeExtract %556 0 
                                         f32 %558 = OpCompositeExtract %556 1 
                                         f32 %559 = OpCompositeExtract %556 2 
                                       f32_3 %560 = OpCompositeConstruct %557 %558 %559 
                                       f32_3 %561 = OpFMul %549 %560 
                                                      OpStore %458 %561 
                                       f32_3 %563 = OpLoad %174 
                                       f32_3 %564 = OpLoad %458 
                                       f32_3 %565 = OpFMul %563 %564 
                                                      OpStore %562 %565 
                                       f32_3 %566 = OpLoad %562 
                                         i32 %567 = OpLoad %426 
                              Uniform f32_4* %568 = OpAccessChain %470 %71 %567 
                                       f32_4 %569 = OpLoad %568 
                                       f32_3 %570 = OpVectorShuffle %569 %569 0 1 2 
                                       f32_3 %571 = OpFMul %566 %570 
                                                      OpStore %562 %571 
                                       f32_3 %572 = OpLoad %562 
                                         f32 %573 = OpLoad %481 
                                       f32_3 %574 = OpCompositeConstruct %573 %573 %573 
                                       f32_3 %575 = OpFMul %572 %574 
                                       f32_3 %576 = OpLoad %149 
                                       f32_3 %577 = OpFAdd %575 %576 
                                                      OpStore %562 %577 
                                       f32_3 %578 = OpLoad %107 
                                       f32_3 %579 = OpLoad %562 
                                       f32_3 %580 = OpFAdd %578 %579 
                                                      OpStore %107 %580 
                                                      OpBranch %419 
                                             %419 = OpLabel 
                                         u32 %581 = OpLoad %415 
                                         u32 %582 = OpIAdd %581 %71 
                                                      OpStore %415 %582 
                                                      OpBranch %416 
                                             %418 = OpLabel 
                                Private f32* %583 = OpAccessChain %9 %17 
                                         f32 %584 = OpLoad %583 
                                         f32 %585 = OpExtInst %1 32 %584 
                                Private f32* %586 = OpAccessChain %9 %17 
                                                      OpStore %586 %585 
                                       f32_4 %587 = OpLoad %9 
                                       f32_3 %588 = OpVectorShuffle %587 %587 0 0 0 
                                       f32_3 %589 = OpLoad %30 
                                       f32_3 %590 = OpFMul %588 %589 
                                       f32_4 %591 = OpLoad %9 
                                       f32_4 %592 = OpVectorShuffle %591 %590 4 5 2 6 
                                                      OpStore %9 %592 
                                       f32_4 %593 = OpLoad %208 
                                       f32_3 %594 = OpVectorShuffle %593 %593 0 1 2 
                                       f32_4 %595 = OpLoad %9 
                                       f32_3 %596 = OpVectorShuffle %595 %595 0 1 3 
                                         f32 %597 = OpDot %594 %596 
                                Private f32* %598 = OpAccessChain %30 %17 
                                                      OpStore %598 %597 
                                Private f32* %599 = OpAccessChain %30 %17 
                                         f32 %600 = OpLoad %599 
                                         f32 %601 = OpExtInst %1 43 %600 %271 %136 
                                Private f32* %602 = OpAccessChain %30 %17 
                                                      OpStore %602 %601 
                              Uniform f32_4* %603 = OpAccessChain %40 %42 
                                       f32_4 %604 = OpLoad %603 
                                       f32_3 %605 = OpVectorShuffle %604 %604 0 1 2 
                                       f32_4 %606 = OpLoad %9 
                                       f32_3 %607 = OpVectorShuffle %606 %606 0 1 3 
                                         f32 %608 = OpDot %605 %607 
                                Private f32* %609 = OpAccessChain %9 %17 
                                                      OpStore %609 %608 
                                Private f32* %610 = OpAccessChain %9 %17 
                                         f32 %611 = OpLoad %610 
                                         f32 %612 = OpExtInst %1 43 %611 %271 %136 
                                Private f32* %613 = OpAccessChain %9 %17 
                                                      OpStore %613 %612 
                                Private f32* %614 = OpAccessChain %30 %17 
                                         f32 %615 = OpLoad %614 
                                Private f32* %616 = OpAccessChain %30 %17 
                                         f32 %617 = OpLoad %616 
                                         f32 %618 = OpFMul %615 %617 
                                Private f32* %619 = OpAccessChain %25 %17 
                                                      OpStore %619 %618 
                                         f32 %620 = OpLoad %133 
                                         f32 %621 = OpLoad %133 
                                         f32 %622 = OpFMul %620 %621 
                                                      OpStore %167 %622 
                                         f32 %624 = OpLoad %133 
                                         f32 %625 = OpLoad %133 
                                         f32 %626 = OpFMul %624 %625 
                                         f32 %627 = OpFAdd %626 %112 
                                                      OpStore %623 %627 
                                Private f32* %628 = OpAccessChain %25 %17 
                                         f32 %629 = OpLoad %628 
                                         f32 %630 = OpLoad %623 
                                         f32 %631 = OpFMul %629 %630 
                                         f32 %633 = OpFAdd %631 %632 
                                Private f32* %634 = OpAccessChain %25 %17 
                                                      OpStore %634 %633 
                                Private f32* %635 = OpAccessChain %9 %17 
                                         f32 %636 = OpLoad %635 
                                Private f32* %637 = OpAccessChain %9 %17 
                                         f32 %638 = OpLoad %637 
                                         f32 %639 = OpFMul %636 %638 
                                                      OpStore %623 %639 
                                Private f32* %640 = OpAccessChain %25 %17 
                                         f32 %641 = OpLoad %640 
                                Private f32* %642 = OpAccessChain %25 %17 
                                         f32 %643 = OpLoad %642 
                                         f32 %644 = OpFMul %641 %643 
                                Private f32* %645 = OpAccessChain %9 %17 
                                                      OpStore %645 %644 
                                         f32 %646 = OpLoad %623 
                                         f32 %648 = OpExtInst %1 40 %646 %647 
                                Private f32* %649 = OpAccessChain %25 %17 
                                                      OpStore %649 %648 
                                Private f32* %650 = OpAccessChain %25 %17 
                                         f32 %651 = OpLoad %650 
                                Private f32* %652 = OpAccessChain %9 %17 
                                         f32 %653 = OpLoad %652 
                                         f32 %654 = OpFMul %651 %653 
                                Private f32* %655 = OpAccessChain %9 %17 
                                                      OpStore %655 %654 
                                         f32 %656 = OpLoad %133 
                                         f32 %658 = OpFMul %656 %657 
                                         f32 %659 = OpFAdd %658 %109 
                                                      OpStore %623 %659 
                                Private f32* %660 = OpAccessChain %9 %17 
                                         f32 %661 = OpLoad %660 
                                         f32 %662 = OpLoad %623 
                                         f32 %663 = OpFMul %661 %662 
                                Private f32* %664 = OpAccessChain %9 %17 
                                                      OpStore %664 %663 
                                         f32 %665 = OpLoad %167 
                                Private f32* %666 = OpAccessChain %9 %17 
                                         f32 %667 = OpLoad %666 
                                         f32 %668 = OpFDiv %665 %667 
                                Private f32* %669 = OpAccessChain %9 %17 
                                                      OpStore %669 %668 
                                       f32_3 %670 = OpLoad %144 
                                       f32_4 %671 = OpLoad %9 
                                       f32_3 %672 = OpVectorShuffle %671 %671 0 0 0 
                                       f32_3 %673 = OpFMul %670 %672 
                                       f32_4 %674 = OpLoad %9 
                                       f32_4 %675 = OpVectorShuffle %674 %673 4 5 2 6 
                                                      OpStore %9 %675 
                                       f32_4 %676 = OpLoad %9 
                                       f32_3 %677 = OpVectorShuffle %676 %676 0 1 3 
                                       f32_3 %680 = OpFMul %677 %679 
                                                      OpStore %562 %680 
                                       f32_3 %681 = OpLoad %562 
                              Uniform f32_4* %682 = OpAccessChain %40 %71 
                                       f32_4 %683 = OpLoad %682 
                                       f32_3 %684 = OpVectorShuffle %683 %683 0 1 2 
                                       f32_3 %685 = OpFMul %681 %684 
                                                      OpStore %30 %685 
                                       f32_3 %686 = OpLoad %30 
                                       f32_3 %687 = OpLoad %63 
                                       f32_3 %688 = OpVectorShuffle %687 %687 0 0 0 
                                       f32_3 %689 = OpFMul %686 %688 
                                       f32_3 %690 = OpLoad %107 
                                       f32_3 %691 = OpFAdd %689 %690 
                                                      OpStore %107 %691 
                                Private f32* %692 = OpAccessChain %208 %428 
                                                      OpStore %692 %136 
                              Uniform f32_4* %693 = OpAccessChain %403 %342 
                                       f32_4 %694 = OpLoad %693 
                                       f32_4 %695 = OpLoad %208 
                                         f32 %696 = OpDot %694 %695 
                                Private f32* %697 = OpAccessChain %562 %17 
                                                      OpStore %697 %696 
                              Uniform f32_4* %699 = OpAccessChain %403 %698 
                                       f32_4 %700 = OpLoad %699 
                                       f32_4 %701 = OpLoad %208 
                                         f32 %702 = OpDot %700 %701 
                                Private f32* %703 = OpAccessChain %562 %124 
                                                      OpStore %703 %702 
                              Uniform f32_4* %705 = OpAccessChain %403 %704 
                                       f32_4 %706 = OpLoad %705 
                                       f32_4 %707 = OpLoad %208 
                                         f32 %708 = OpDot %706 %707 
                                Private f32* %709 = OpAccessChain %562 %236 
                                                      OpStore %709 %708 
                                       f32_4 %710 = OpLoad %208 
                                       f32_4 %711 = OpVectorShuffle %710 %710 1 2 2 0 
                                       f32_4 %712 = OpLoad %208 
                                       f32_4 %713 = OpVectorShuffle %712 %712 0 1 2 2 
                                       f32_4 %714 = OpFMul %711 %713 
                                                      OpStore %333 %714 
                              Uniform f32_4* %717 = OpAccessChain %403 %716 
                                       f32_4 %718 = OpLoad %717 
                                       f32_4 %719 = OpLoad %333 
                                         f32 %720 = OpDot %718 %719 
                                Private f32* %721 = OpAccessChain %715 %17 
                                                      OpStore %721 %720 
                              Uniform f32_4* %723 = OpAccessChain %403 %722 
                                       f32_4 %724 = OpLoad %723 
                                       f32_4 %725 = OpLoad %333 
                                         f32 %726 = OpDot %724 %725 
                                Private f32* %727 = OpAccessChain %715 %124 
                                                      OpStore %727 %726 
                              Uniform f32_4* %729 = OpAccessChain %403 %728 
                                       f32_4 %730 = OpLoad %729 
                                       f32_4 %731 = OpLoad %333 
                                         f32 %732 = OpDot %730 %731 
                                Private f32* %733 = OpAccessChain %715 %236 
                                                      OpStore %733 %732 
                                Private f32* %734 = OpAccessChain %208 %124 
                                         f32 %735 = OpLoad %734 
                                Private f32* %736 = OpAccessChain %208 %124 
                                         f32 %737 = OpLoad %736 
                                         f32 %738 = OpFMul %735 %737 
                                                      OpStore %167 %738 
                                Private f32* %739 = OpAccessChain %208 %17 
                                         f32 %740 = OpLoad %739 
                                Private f32* %741 = OpAccessChain %208 %17 
                                         f32 %742 = OpLoad %741 
                                         f32 %743 = OpFMul %740 %742 
                                         f32 %744 = OpLoad %167 
                                         f32 %745 = OpFNegate %744 
                                         f32 %746 = OpFAdd %743 %745 
                                                      OpStore %167 %746 
                              Uniform f32_4* %748 = OpAccessChain %403 %747 
                                       f32_4 %749 = OpLoad %748 
                                       f32_3 %750 = OpVectorShuffle %749 %749 0 1 2 
                                         f32 %751 = OpLoad %167 
                                       f32_3 %752 = OpCompositeConstruct %751 %751 %751 
                                       f32_3 %753 = OpFMul %750 %752 
                                       f32_3 %754 = OpLoad %715 
                                       f32_3 %755 = OpFAdd %753 %754 
                                                      OpStore %715 %755 
                                       f32_3 %756 = OpLoad %562 
                                       f32_3 %757 = OpLoad %715 
                                       f32_3 %758 = OpFAdd %756 %757 
                                                      OpStore %562 %758 
                                       f32_3 %759 = OpLoad %562 
                                       f32_3 %761 = OpExtInst %1 40 %759 %760 
                                                      OpStore %562 %761 
                                       f32_3 %762 = OpLoad %174 
                                       f32_3 %763 = OpLoad %562 
                                       f32_3 %764 = OpFMul %762 %763 
                                                      OpStore %174 %764 
                                Uniform f32* %765 = OpAccessChain %40 %127 %42 %17 
                                         f32 %766 = OpLoad %765 
                                Private f32* %767 = OpAccessChain %30 %17 
                                                      OpStore %767 %766 
                                Uniform f32* %768 = OpAccessChain %40 %127 %71 %17 
                                         f32 %769 = OpLoad %768 
                                Private f32* %770 = OpAccessChain %30 %124 
                                                      OpStore %770 %769 
                                Uniform f32* %771 = OpAccessChain %40 %127 %151 %17 
                                         f32 %772 = OpLoad %771 
                                Private f32* %773 = OpAccessChain %30 %236 
                                                      OpStore %773 %772 
                                       f32_3 %774 = OpLoad %30 
                                       f32_4 %775 = OpLoad %208 
                                       f32_3 %776 = OpVectorShuffle %775 %775 0 1 2 
                                         f32 %777 = OpDot %774 %776 
                                Private f32* %778 = OpAccessChain %562 %17 
                                                      OpStore %778 %777 
                                Uniform f32* %779 = OpAccessChain %40 %127 %42 %124 
                                         f32 %780 = OpLoad %779 
                                Private f32* %781 = OpAccessChain %30 %17 
                                                      OpStore %781 %780 
                                Uniform f32* %782 = OpAccessChain %40 %127 %71 %124 
                                         f32 %783 = OpLoad %782 
                                Private f32* %784 = OpAccessChain %30 %124 
                                                      OpStore %784 %783 
                                Uniform f32* %785 = OpAccessChain %40 %127 %151 %124 
                                         f32 %786 = OpLoad %785 
                                Private f32* %787 = OpAccessChain %30 %236 
                                                      OpStore %787 %786 
                                       f32_3 %788 = OpLoad %30 
                                       f32_4 %789 = OpLoad %208 
                                       f32_3 %790 = OpVectorShuffle %789 %789 0 1 2 
                                         f32 %791 = OpDot %788 %790 
                                Private f32* %792 = OpAccessChain %562 %124 
                                                      OpStore %792 %791 
                                       f32_3 %793 = OpLoad %562 
                                       f32_2 %794 = OpVectorShuffle %793 %793 0 1 
                                       f32_2 %796 = OpFMul %794 %795 
                                       f32_2 %797 = OpFAdd %796 %795 
                                       f32_3 %798 = OpLoad %562 
                                       f32_3 %799 = OpVectorShuffle %798 %797 3 4 2 
                                                      OpStore %562 %799 
                                         f32 %800 = OpLoad %133 
                                         f32 %801 = OpFNegate %800 
                                         f32 %803 = OpFMul %801 %802 
                                         f32 %805 = OpFAdd %803 %804 
                                                      OpStore %167 %805 
                                         f32 %806 = OpLoad %133 
                                         f32 %807 = OpLoad %167 
                                         f32 %808 = OpFMul %806 %807 
                                                      OpStore %133 %808 
                                         f32 %809 = OpLoad %133 
                                         f32 %811 = OpFMul %809 %810 
                                                      OpStore %167 %811 
                         read_only Texture2D %814 = OpLoad %813 
                                     sampler %816 = OpLoad %815 
                  read_only Texture2DSampled %817 = OpSampledImage %814 %816 
                                       f32_3 %818 = OpLoad %562 
                                       f32_2 %819 = OpVectorShuffle %818 %818 0 1 
                                         f32 %820 = OpLoad %167 
                                       f32_4 %821 = OpImageSampleExplicitLod %817 %819 Lod %7 
                                       f32_3 %822 = OpVectorShuffle %821 %821 0 1 2 
                                                      OpStore %812 %822 
                                         f32 %823 = OpLoad %133 
                                         f32 %824 = OpLoad %133 
                                         f32 %825 = OpFMul %823 %824 
                                         f32 %826 = OpFAdd %825 %136 
                                                      OpStore %488 %826 
                                         f32 %827 = OpLoad %488 
                                         f32 %828 = OpFDiv %136 %827 
                                                      OpStore %488 %828 
                                Private f32* %829 = OpAccessChain %9 %124 
                                         f32 %830 = OpLoad %829 
                                Private f32* %831 = OpAccessChain %9 %17 
                                         f32 %832 = OpLoad %831 
                                         f32 %833 = OpExtInst %1 40 %830 %832 
                                Private f32* %834 = OpAccessChain %9 %17 
                                                      OpStore %834 %833 
                                Private f32* %835 = OpAccessChain %9 %428 
                                         f32 %836 = OpLoad %835 
                                Private f32* %837 = OpAccessChain %9 %17 
                                         f32 %838 = OpLoad %837 
                                         f32 %839 = OpExtInst %1 40 %836 %838 
                                Private f32* %840 = OpAccessChain %9 %17 
                                                      OpStore %840 %839 
                                         f32 %841 = OpLoad %52 
                                Private f32* %842 = OpAccessChain %9 %17 
                                         f32 %843 = OpLoad %842 
                                         f32 %844 = OpFAdd %841 %843 
                                Private f32* %845 = OpAccessChain %9 %17 
                                                      OpStore %845 %844 
                                Private f32* %846 = OpAccessChain %9 %17 
                                         f32 %847 = OpLoad %846 
                                         f32 %848 = OpExtInst %1 43 %847 %271 %136 
                                Private f32* %849 = OpAccessChain %9 %17 
                                                      OpStore %849 %848 
                                Private f32* %850 = OpAccessChain %9 %236 
                                         f32 %851 = OpLoad %850 
                                         f32 %852 = OpFNegate %851 
                                         f32 %853 = OpFAdd %852 %136 
                                Private f32* %854 = OpAccessChain %25 %17 
                                                      OpStore %854 %853 
                                Private f32* %855 = OpAccessChain %25 %17 
                                         f32 %856 = OpLoad %855 
                                         f32 %857 = OpExtInst %1 40 %856 %271 
                                Private f32* %858 = OpAccessChain %25 %17 
                                                      OpStore %858 %857 
                                Private f32* %860 = OpAccessChain %25 %17 
                                         f32 %861 = OpLoad %860 
                                Private f32* %862 = OpAccessChain %25 %17 
                                         f32 %863 = OpLoad %862 
                                         f32 %864 = OpFMul %861 %863 
                                                      OpStore %859 %864 
                                         f32 %865 = OpLoad %859 
                                         f32 %866 = OpLoad %859 
                                         f32 %867 = OpFMul %865 %866 
                                                      OpStore %859 %867 
                                Private f32* %868 = OpAccessChain %25 %17 
                                         f32 %869 = OpLoad %868 
                                         f32 %870 = OpLoad %859 
                                         f32 %871 = OpFMul %869 %870 
                                Private f32* %872 = OpAccessChain %25 %17 
                                                      OpStore %872 %871 
                                       f32_3 %873 = OpLoad %144 
                                       f32_3 %874 = OpFNegate %873 
                                       f32_4 %875 = OpLoad %9 
                                       f32_3 %876 = OpVectorShuffle %875 %875 0 0 0 
                                       f32_3 %877 = OpFAdd %874 %876 
                                       f32_4 %878 = OpLoad %9 
                                       f32_4 %879 = OpVectorShuffle %878 %877 4 1 5 6 
                                                      OpStore %9 %879 
                                       f32_3 %880 = OpLoad %25 
                                       f32_3 %881 = OpVectorShuffle %880 %880 0 0 0 
                                       f32_4 %882 = OpLoad %9 
                                       f32_3 %883 = OpVectorShuffle %882 %882 0 2 3 
                                       f32_3 %884 = OpFMul %881 %883 
                                       f32_3 %885 = OpLoad %144 
                                       f32_3 %886 = OpFAdd %884 %885 
                                       f32_4 %887 = OpLoad %9 
                                       f32_4 %888 = OpVectorShuffle %887 %886 4 5 6 3 
                                                      OpStore %9 %888 
                                         f32 %889 = OpLoad %488 
                                       f32_3 %890 = OpCompositeConstruct %889 %889 %889 
                                       f32_4 %891 = OpLoad %9 
                                       f32_3 %892 = OpVectorShuffle %891 %891 0 1 2 
                                       f32_3 %893 = OpFMul %890 %892 
                                       f32_4 %894 = OpLoad %9 
                                       f32_4 %895 = OpVectorShuffle %894 %893 4 5 6 3 
                                                      OpStore %9 %895 
                                       f32_4 %896 = OpLoad %115 
                                       f32_3 %897 = OpVectorShuffle %896 %896 3 3 3 
                                       f32_3 %898 = OpLoad %812 
                                       f32_3 %899 = OpFMul %897 %898 
                                                      OpStore %144 %899 
                                       f32_4 %900 = OpLoad %9 
                                       f32_3 %901 = OpVectorShuffle %900 %900 0 1 2 
                                       f32_3 %902 = OpLoad %144 
                                       f32_3 %903 = OpFMul %901 %902 
                                       f32_4 %904 = OpLoad %9 
                                       f32_4 %905 = OpVectorShuffle %904 %903 4 5 6 3 
                                                      OpStore %9 %905 
                                       f32_3 %906 = OpLoad %174 
                                Uniform f32* %907 = OpAccessChain %70 %42 
                                         f32 %908 = OpLoad %907 
                                       f32_3 %909 = OpCompositeConstruct %908 %908 %908 
                                       f32_3 %910 = OpFMul %906 %909 
                                       f32_4 %911 = OpLoad %9 
                                       f32_3 %912 = OpVectorShuffle %911 %911 0 1 2 
                                       f32_3 %913 = OpFAdd %910 %912 
                                                      OpStore %144 %913 
                              Uniform f32_4* %914 = OpAccessChain %40 %365 %71 
                                       f32_4 %915 = OpLoad %914 
                                       f32_3 %916 = OpVectorShuffle %915 %915 0 1 2 
                              Uniform f32_3* %918 = OpAccessChain %70 %435 
                                       f32_3 %919 = OpLoad %918 
                                       f32_3 %920 = OpVectorShuffle %919 %919 1 1 1 
                                       f32_3 %921 = OpFMul %916 %920 
                                       f32_4 %922 = OpLoad %9 
                                       f32_4 %923 = OpVectorShuffle %922 %921 4 5 6 3 
                                                      OpStore %9 %923 
                              Uniform f32_4* %924 = OpAccessChain %40 %365 %42 
                                       f32_4 %925 = OpLoad %924 
                                       f32_3 %926 = OpVectorShuffle %925 %925 0 1 2 
                              Uniform f32_3* %927 = OpAccessChain %70 %435 
                                       f32_3 %928 = OpLoad %927 
                                       f32_3 %929 = OpVectorShuffle %928 %928 0 0 0 
                                       f32_3 %930 = OpFMul %926 %929 
                                       f32_4 %931 = OpLoad %9 
                                       f32_3 %932 = OpVectorShuffle %931 %931 0 1 2 
                                       f32_3 %933 = OpFAdd %930 %932 
                                       f32_4 %934 = OpLoad %9 
                                       f32_4 %935 = OpVectorShuffle %934 %933 4 5 6 3 
                                                      OpStore %9 %935 
                              Uniform f32_4* %936 = OpAccessChain %40 %365 %151 
                                       f32_4 %937 = OpLoad %936 
                                       f32_3 %938 = OpVectorShuffle %937 %937 0 1 2 
                              Uniform f32_3* %939 = OpAccessChain %70 %435 
                                       f32_3 %940 = OpLoad %939 
                                       f32_3 %941 = OpVectorShuffle %940 %940 2 2 2 
                                       f32_3 %942 = OpFMul %938 %941 
                                       f32_4 %943 = OpLoad %9 
                                       f32_3 %944 = OpVectorShuffle %943 %943 0 1 2 
                                       f32_3 %945 = OpFAdd %942 %944 
                                       f32_4 %946 = OpLoad %9 
                                       f32_4 %947 = OpVectorShuffle %946 %945 4 5 6 3 
                                                      OpStore %9 %947 
                                       f32_4 %948 = OpLoad %9 
                                       f32_3 %949 = OpVectorShuffle %948 %948 0 1 2 
                                       f32_4 %950 = OpLoad %9 
                                       f32_3 %951 = OpVectorShuffle %950 %950 0 1 2 
                                         f32 %952 = OpDot %949 %951 
                                                      OpStore %245 %952 
                                         f32 %953 = OpLoad %245 
                                         f32 %954 = OpExtInst %1 32 %953 
                                                      OpStore %245 %954 
                                         f32 %955 = OpLoad %245 
                                       f32_3 %956 = OpCompositeConstruct %955 %955 %955 
                                       f32_4 %957 = OpLoad %9 
                                       f32_3 %958 = OpVectorShuffle %957 %957 0 1 2 
                                       f32_3 %959 = OpFMul %956 %958 
                                       f32_4 %960 = OpLoad %9 
                                       f32_4 %961 = OpVectorShuffle %960 %959 4 5 6 3 
                                                      OpStore %9 %961 
                                       f32_4 %962 = OpLoad %208 
                                       f32_3 %963 = OpVectorShuffle %962 %962 0 1 2 
                                       f32_4 %964 = OpLoad %9 
                                       f32_3 %965 = OpVectorShuffle %964 %964 0 1 2 
                                         f32 %966 = OpDot %963 %965 
                                Private f32* %967 = OpAccessChain %9 %17 
                                                      OpStore %967 %966 
                                Private f32* %968 = OpAccessChain %9 %17 
                                         f32 %969 = OpLoad %968 
                                         f32 %970 = OpFMul %969 %259 
                                         f32 %971 = OpFAdd %970 %259 
                                Private f32* %972 = OpAccessChain %9 %17 
                                                      OpStore %972 %971 
                                Private f32* %973 = OpAccessChain %9 %17 
                                         f32 %974 = OpLoad %973 
                                Private f32* %975 = OpAccessChain %115 %428 
                                         f32 %976 = OpLoad %975 
                                         f32 %977 = OpFMul %974 %976 
                                Uniform f32* %979 = OpAccessChain %70 %978 
                                         f32 %980 = OpLoad %979 
                                         f32 %981 = OpFNegate %980 
                                         f32 %982 = OpFAdd %977 %981 
                                Private f32* %983 = OpAccessChain %9 %17 
                                                      OpStore %983 %982 
                                Private f32* %984 = OpAccessChain %9 %17 
                                         f32 %985 = OpLoad %984 
                                Uniform f32* %987 = OpAccessChain %70 %986 
                                         f32 %988 = OpLoad %987 
                                         f32 %989 = OpFMul %985 %988 
                                Private f32* %990 = OpAccessChain %9 %17 
                                                      OpStore %990 %989 
                                Private f32* %991 = OpAccessChain %9 %17 
                                         f32 %992 = OpLoad %991 
                                         f32 %993 = OpExtInst %1 43 %992 %271 %136 
                                Private f32* %994 = OpAccessChain %9 %17 
                                                      OpStore %994 %993 
                                       f32_4 %995 = OpLoad %9 
                                       f32_3 %996 = OpVectorShuffle %995 %995 0 0 0 
                              Uniform f32_4* %998 = OpAccessChain %70 %997 
                                       f32_4 %999 = OpLoad %998 
                                      f32_3 %1000 = OpVectorShuffle %999 %999 0 1 2 
                                      f32_3 %1001 = OpFMul %996 %1000 
                                                      OpStore %174 %1001 
                                      f32_3 %1002 = OpLoad %174 
                               Uniform f32* %1004 = OpAccessChain %70 %1003 
                                        f32 %1005 = OpLoad %1004 
                               Uniform f32* %1006 = OpAccessChain %70 %1003 
                                        f32 %1007 = OpLoad %1006 
                               Uniform f32* %1008 = OpAccessChain %70 %1003 
                                        f32 %1009 = OpLoad %1008 
                                      f32_3 %1010 = OpCompositeConstruct %1005 %1007 %1009 
                                        f32 %1011 = OpCompositeExtract %1010 0 
                                        f32 %1012 = OpCompositeExtract %1010 1 
                                        f32 %1013 = OpCompositeExtract %1010 2 
                                      f32_3 %1014 = OpCompositeConstruct %1011 %1012 %1013 
                                      f32_3 %1015 = OpFMul %1002 %1014 
                                      f32_4 %1016 = OpLoad %9 
                                      f32_4 %1017 = OpVectorShuffle %1016 %1015 4 5 6 3 
                                                      OpStore %9 %1017 
                                      f32_3 %1018 = OpLoad %63 
                                      f32_3 %1019 = OpVectorShuffle %1018 %1018 0 0 0 
                                      f32_4 %1020 = OpLoad %9 
                                      f32_3 %1021 = OpVectorShuffle %1020 %1020 0 1 2 
                                      f32_3 %1022 = OpFMul %1019 %1021 
                                                      OpStore %30 %1022 
                                      f32_3 %1023 = OpLoad %30 
                                      f32_3 %1025 = OpFMul %1023 %1024 
                                                      OpStore %30 %1025 
                                      f32_4 %1026 = OpLoad %9 
                                      f32_3 %1027 = OpVectorShuffle %1026 %1026 0 1 2 
                                      f32_3 %1030 = OpFMul %1027 %1029 
                                      f32_3 %1031 = OpLoad %30 
                                      f32_3 %1032 = OpFAdd %1030 %1031 
                                      f32_4 %1033 = OpLoad %9 
                                      f32_4 %1034 = OpVectorShuffle %1033 %1032 4 5 6 3 
                                                      OpStore %9 %1034 
                                      f32_3 %1035 = OpLoad %107 
                                      f32_3 %1036 = OpLoad %144 
                                      f32_3 %1037 = OpFAdd %1035 %1036 
                                                      OpStore %107 %1037 
                                      f32_4 %1038 = OpLoad %9 
                                      f32_3 %1039 = OpVectorShuffle %1038 %1038 0 1 2 
                                      f32_3 %1040 = OpLoad %107 
                                      f32_3 %1041 = OpFAdd %1039 %1040 
                                                      OpStore %107 %1041 
                                      f32_3 %1042 = OpLoad %107 
                                      f32_3 %1043 = OpExtInst %1 40 %1042 %760 
                                                      OpStore %107 %1043 
                                      f32_3 %1044 = OpLoad %107 
                                      f32_3 %1045 = OpExtInst %1 30 %1044 
                                                      OpStore %107 %1045 
                                      f32_3 %1046 = OpLoad %107 
                                      f32_3 %1049 = OpFMul %1046 %1048 
                                                      OpStore %107 %1049 
                                      f32_3 %1050 = OpLoad %107 
                                      f32_3 %1051 = OpExtInst %1 29 %1050 
                                                      OpStore %107 %1051 
                                      f32_3 %1054 = OpLoad %107 
                                      f32_3 %1055 = OpExtInst %1 31 %1054 
                                      f32_4 %1056 = OpLoad %1053 
                                      f32_4 %1057 = OpVectorShuffle %1056 %1055 4 5 6 3 
                                                      OpStore %1053 %1057 
                                Output f32* %1059 = OpAccessChain %1053 %428 
                                                      OpStore %1059 %136 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "gles3 " {
Keywords { "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec3 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
bvec4 u_xlatb1;
vec3 u_xlat2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
float u_xlat15;
int u_xlati15;
uint u_xlatu15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    vs_TEXCOORD3.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD4.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat1.z = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat1.w = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = lessThan(u_xlat1, _CascadeShadowSplitSphereRadii);
    u_xlat16_4.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_4.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_4.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.x = (u_xlatb1.x) ? float(1.0) : float(0.0);
    u_xlat16_1.y = (u_xlatb1.y) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb1.z) ? float(1.0) : float(0.0);
    u_xlat16_1.w = (u_xlatb1.w) ? float(1.0) : float(0.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_1.yzw;
    u_xlat16_1.yzw = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.x = dot(u_xlat16_1, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_4.x = (-u_xlat16_4.x) + 4.0;
    u_xlatu15 = uint(u_xlat16_4.x);
    u_xlati15 = int(int(u_xlatu15) << 2);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati15 + 1)];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati15] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati15 + 2)] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD7 = u_xlat1 + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati15 + 3)];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[32];
uniform 	mediump vec4 _AdditionalLightsColor[32];
uniform 	mediump vec4 _AdditionalLightsAttenuation[32];
uniform 	mediump vec4 _AdditionalLightsSpotDir[32];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _Expond;
	UNITY_UNIFORM vec4 _MainTex_ST;
	UNITY_UNIFORM vec4 _Emissioncolor;
	UNITY_UNIFORM float _Roughness;
	UNITY_UNIFORM float _sss;
	UNITY_UNIFORM vec3 _rimlightdir;
	UNITY_UNIFORM vec4 _rimcolor;
	UNITY_UNIFORM float _rimhardness;
	UNITY_UNIFORM float _rimthreshold;
	UNITY_UNIFORM float _rimintensity;
	UNITY_UNIFORM float _Curvemn;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(3) uniform mediump sampler2D _Normal;
UNITY_LOCATION(4) uniform mediump sampler2D _MREA;
UNITY_LOCATION(5) uniform mediump sampler2D _SSSLUT;
UNITY_LOCATION(6) uniform mediump sampler2D _reflectmap;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump float u_xlat16_3;
int u_xlati3;
bool u_xlatb3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
vec4 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
mediump vec3 u_xlat16_13;
mediump vec3 u_xlat16_14;
vec3 u_xlat15;
int u_xlati15;
bool u_xlatb15;
mediump vec3 u_xlat16_16;
float u_xlat18;
uint u_xlatu18;
float u_xlat19;
mediump vec3 u_xlat16_22;
float u_xlat30;
float u_xlat45;
uint u_xlatu45;
float u_xlat47;
float u_xlat48;
mediump float u_xlat16_54;
mediump float u_xlat16_56;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_0 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_1.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_1.x = u_xlat16_0 * _MainLightShadowParams.x + u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0>=vs_TEXCOORD7.z);
#else
    u_xlatb0 = 0.0>=vs_TEXCOORD7.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vs_TEXCOORD7.z>=1.0);
#else
    u_xlatb15 = vs_TEXCOORD7.z>=1.0;
#endif
    u_xlatb0 = u_xlatb15 || u_xlatb0;
    u_xlat16_1.x = (u_xlatb0) ? 1.0 : u_xlat16_1.x;
    u_xlat0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat15.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat2.xyz = vs_TEXCOORD2.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat47 = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = vec3(u_xlat47) * u_xlat2.xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat4.xy).xyz;
    u_xlat16_6.xyz = texture(_Normal, u_xlat4.xy).xyz;
    u_xlat16_16.xyz = u_xlat16_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4 = texture(_MREA, u_xlat4.xy);
    u_xlat47 = u_xlat16_4.y + (-_Roughness);
    u_xlat16_7.x = (-u_xlat47) + 1.0;
    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
    u_xlat16_7.x = max(u_xlat16_7.x, 0.00200000009);
    u_xlat16_22.xyz = u_xlat16_5.xyz * u_xlat16_4.zzz;
    u_xlat8.xyz = u_xlat16_22.xyz * _Emissioncolor.xyz;
    u_xlat16_22.xyz = u_xlat16_5.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_22.xyz = u_xlat16_4.xxx * u_xlat16_22.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_9.x = u_xlat16_4.x * -0.959999979 + 0.959999979;
    u_xlat16_9.xyz = u_xlat16_5.xyz * u_xlat16_9.xxx;
    u_xlat16_9.xyz = u_xlat16_4.www * u_xlat16_9.xyz;
    u_xlat4.xyz = u_xlat16_16.yyy * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = u_xlat16_16.xxx * vs_TEXCOORD3.xyz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat16_16.zzz * vs_TEXCOORD1.xyz + u_xlat4.xyz;
    u_xlat48 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat48 = inversesqrt(u_xlat48);
    u_xlat5.xyz = vec3(u_xlat48) * u_xlat4.xyz;
    u_xlat48 = dot(u_xlat5.xyz, _MainLightPosition.xyz);
    u_xlat4.x = max(u_xlat48, 9.99999975e-06);
    u_xlat0.y = dot(u_xlat5.xyz, u_xlat15.xyz);
    u_xlat0.z = dot(_MainLightPosition.xyz, u_xlat3.xyz);
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(1.17549435e-38, 9.99999975e-06, 9.99999975e-06));
    u_xlat45 = u_xlat16_7.x + u_xlat16_7.x;
    u_xlat3.x = u_xlat0.z * u_xlat0.z;
    u_xlat45 = u_xlat3.x * u_xlat45 + 0.5;
    u_xlat16_16.x = u_xlat45 + -1.0;
    u_xlat15.x = (-u_xlat0.y) + 1.0;
    u_xlat15.x = max(u_xlat15.x, 0.0);
    u_xlat45 = u_xlat15.x * u_xlat15.x;
    u_xlat45 = u_xlat45 * u_xlat45;
    u_xlat15.x = u_xlat15.x * u_xlat45;
    u_xlat15.x = u_xlat16_16.x * u_xlat15.x + 1.0;
    u_xlat45 = (-u_xlat4.x) + 1.0;
    u_xlat45 = max(u_xlat45, 0.0);
    u_xlat3.x = u_xlat45 * u_xlat45;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat45 = u_xlat45 * u_xlat3.x;
    u_xlat45 = u_xlat16_16.x * u_xlat45 + 1.0;
    u_xlat16_54 = u_xlat15.x * u_xlat45;
    u_xlat16_54 = min(u_xlat16_54, 1.0);
    u_xlat16_54 = u_xlat48 * u_xlat16_54;
    u_xlat16_3 = u_xlat16_54 * 0.5 + 0.5;
    u_xlat3.x = u_xlat16_3;
    u_xlat3.yw = vec2(vec2(_Curvemn, _Curvemn));
    u_xlat16_10.xyz = texture(_SSSLUT, u_xlat3.xy).xyz;
    u_xlat10.xyz = u_xlat16_10.xyz * vec3(vec3(_sss, _sss, _sss));
    u_xlat15.x = min(u_xlat16_1.x, u_xlat3.x);
    u_xlat16_11.xyz = u_xlat16_9.xyz * u_xlat10.xyz;
    u_xlat10.xyz = u_xlat16_11.xyz * _MainLightColor.xyz;
    u_xlat10.xyz = u_xlat10.xyz * u_xlat15.xxx + u_xlat8.xyz;
    u_xlat16_54 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlati15 = int(u_xlat16_54);
    u_xlat16_11.xyz = u_xlat10.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<uint(u_xlati15) ; u_xlatu_loop_1++)
    {
        u_xlati3 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu18 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_54 = dot(unity_LightIndices[int(u_xlatu18)], ImmCB_0[u_xlati3]);
        u_xlati3 = int(u_xlat16_54);
        u_xlat12.xyz = (-vs_TEXCOORD5.xyz) * _AdditionalLightsPosition[u_xlati3].www + _AdditionalLightsPosition[u_xlati3].xyz;
        u_xlat18 = dot(u_xlat12.xyz, u_xlat12.xyz);
        u_xlat18 = max(u_xlat18, 6.10351563e-05);
        u_xlat19 = inversesqrt(u_xlat18);
        u_xlat12.xyz = vec3(u_xlat19) * u_xlat12.xyz;
        u_xlat19 = float(1.0) / float(u_xlat18);
        u_xlat18 = u_xlat18 * _AdditionalLightsAttenuation[u_xlati3].x + _AdditionalLightsAttenuation[u_xlati3].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
        u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
        u_xlat18 = u_xlat18 * u_xlat19;
        u_xlat16_54 = dot(_AdditionalLightsSpotDir[u_xlati3].xyz, u_xlat12.xyz);
        u_xlat16_54 = u_xlat16_54 * _AdditionalLightsAttenuation[u_xlati3].z + _AdditionalLightsAttenuation[u_xlati3].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_54 = min(max(u_xlat16_54, 0.0), 1.0);
#else
        u_xlat16_54 = clamp(u_xlat16_54, 0.0, 1.0);
#endif
        u_xlat16_54 = u_xlat16_54 * u_xlat16_54;
        u_xlat18 = u_xlat18 * u_xlat16_54;
        u_xlat19 = dot(u_xlat5.xyz, u_xlat12.xyz);
        u_xlat3.z = max(u_xlat19, 9.99999975e-06);
        u_xlat16_12.xyz = texture(_SSSLUT, u_xlat3.zw).xyz;
        u_xlat12.xyz = u_xlat16_12.xyz * vec3(vec3(_sss, _sss, _sss));
        u_xlat16_13.xyz = u_xlat16_9.xyz * u_xlat12.xyz;
        u_xlat16_13.xyz = u_xlat16_13.xyz * _AdditionalLightsColor[u_xlati3].xyz;
        u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat18) + u_xlat8.xyz;
        u_xlat16_11.xyz = u_xlat16_11.xyz + u_xlat16_13.xyz;
    }
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyw = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat0.xyw);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat0.xyw);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat15.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_54 = u_xlat16_7.x * u_xlat16_7.x;
    u_xlat16_56 = u_xlat16_7.x * u_xlat16_7.x + -1.0;
    u_xlat15.x = u_xlat15.x * u_xlat16_56 + 1.00001001;
    u_xlat16_56 = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat15.x * u_xlat15.x;
    u_xlat15.x = max(u_xlat16_56, 0.100000001);
    u_xlat0.x = u_xlat15.x * u_xlat0.x;
    u_xlat16_56 = u_xlat16_7.x * 4.0 + 2.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_56;
    u_xlat0.x = u_xlat16_54 / u_xlat0.x;
    u_xlat0.xyw = u_xlat16_22.xyz * u_xlat0.xxx;
    u_xlat16_13.xyz = u_xlat0.xyw * vec3(3.14159274, 3.14159274, 3.14159274);
    u_xlat2.xyz = u_xlat16_13.xyz * _MainLightColor.xyz;
    u_xlat16_11.xyz = u_xlat2.xyz * u_xlat4.xxx + u_xlat16_11.xyz;
    u_xlat5.w = 1.0;
    u_xlat16_13.x = dot(unity_SHAr, u_xlat5);
    u_xlat16_13.y = dot(unity_SHAg, u_xlat5);
    u_xlat16_13.z = dot(unity_SHAb, u_xlat5);
    u_xlat16_1 = u_xlat5.yzzx * u_xlat5.xyzz;
    u_xlat16_14.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_14.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_14.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_54 = u_xlat5.y * u_xlat5.y;
    u_xlat16_54 = u_xlat5.x * u_xlat5.x + (-u_xlat16_54);
    u_xlat16_14.xyz = unity_SHC.xyz * vec3(u_xlat16_54) + u_xlat16_14.xyz;
    u_xlat16_13.xyz = u_xlat16_13.xyz + u_xlat16_14.xyz;
    u_xlat16_13.xyz = max(u_xlat16_13.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_13.xyz;
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].x;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat16_13.x = dot(u_xlat2.xyz, u_xlat5.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].y;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].y;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].y;
    u_xlat16_13.y = dot(u_xlat2.xyz, u_xlat5.xyz);
    u_xlat16_13.xy = u_xlat16_13.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat16_54 = (-u_xlat16_7.x) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_54;
    u_xlat16_54 = u_xlat16_7.x * 8.0;
    u_xlat16_2.xyz = textureLod(_reflectmap, u_xlat16_13.xy, u_xlat16_54).xyz;
    u_xlat3.x = u_xlat16_7.x * u_xlat16_7.x + 1.0;
    u_xlat3.x = float(1.0) / u_xlat3.x;
    u_xlat0.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat0.x = max(u_xlat0.w, u_xlat0.x);
    u_xlat0.x = u_xlat47 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat15.x = (-u_xlat0.z) + 1.0;
    u_xlat15.x = max(u_xlat15.x, 0.0);
    u_xlat30 = u_xlat15.x * u_xlat15.x;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat15.x = u_xlat15.x * u_xlat30;
    u_xlat0.xzw = (-u_xlat16_22.xyz) + u_xlat0.xxx;
    u_xlat0.xyz = u_xlat15.xxx * u_xlat0.xzw + u_xlat16_22.xyz;
    u_xlat0.xyz = u_xlat3.xxx * u_xlat0.xyz;
    u_xlat16_7.xyz = u_xlat16_4.www * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_9.xyz * vec3(_Expond) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixInvV[1].xyz * _rimlightdir.yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixInvV[0].xyz * _rimlightdir.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixInvV[2].xyz * _rimlightdir.zzz + u_xlat0.xyz;
    u_xlat45 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat45 = inversesqrt(u_xlat45);
    u_xlat0.xyz = vec3(u_xlat45) * u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat0.x = u_xlat0.x * u_xlat16_4.w + (-_rimthreshold);
    u_xlat0.x = u_xlat0.x * _rimhardness;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_9.xyz = u_xlat0.xxx * _rimcolor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_rimintensity, _rimintensity, _rimintensity));
    u_xlat2.xyz = u_xlat4.xxx * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat2.xyz;
    u_xlat16_7.xyz = u_xlat16_11.xyz + u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(2.20000005, 2.20000005, 2.20000005);
    u_xlat16_7.xyz = exp2(u_xlat16_7.xyz);
    SV_Target0.xyz = sqrt(u_xlat16_7.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 382
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %84 %93 %95 %98 %138 %141 %149 %183 %209 %215 %217 %218 %369 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 RelaxedPrecision 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 RelaxedPrecision 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 RelaxedPrecision 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 RelaxedPrecision 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 RelaxedPrecision 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 RelaxedPrecision 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpMemberDecorate %21 16 RelaxedPrecision 
                                                      OpMemberDecorate %21 16 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpDecorate %59 ArrayStride 59 
                                                      OpMemberDecorate %60 0 Offset 60 
                                                      OpMemberDecorate %60 1 Offset 60 
                                                      OpDecorate %60 Block 
                                                      OpDecorate %62 DescriptorSet 62 
                                                      OpDecorate %62 Binding 62 
                                                      OpMemberDecorate %82 0 BuiltIn 82 
                                                      OpMemberDecorate %82 1 BuiltIn 82 
                                                      OpMemberDecorate %82 2 BuiltIn 82 
                                                      OpDecorate %82 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 93 
                                                      OpDecorate %95 Location 95 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate vs_TEXCOORD1 Location 138 
                                                      OpDecorate vs_TEXCOORD2 Location 141 
                                                      OpDecorate %149 Location 149 
                                                      OpDecorate vs_TEXCOORD3 Location 183 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 209 
                                                      OpDecorate vs_TEXCOORD5 Location 215 
                                                      OpDecorate vs_TEXCOORD6 Location 217 
                                                      OpDecorate %218 Location 218 
                                                      OpDecorate %222 ArrayStride 222 
                                                      OpMemberDecorate %223 0 Offset 223 
                                                      OpMemberDecorate %223 1 Offset 223 
                                                      OpMemberDecorate %223 2 Offset 223 
                                                      OpMemberDecorate %223 3 Offset 223 
                                                      OpMemberDecorate %223 4 Offset 223 
                                                      OpMemberDecorate %223 5 Offset 223 
                                                      OpMemberDecorate %223 6 RelaxedPrecision 
                                                      OpMemberDecorate %223 6 Offset 223 
                                                      OpMemberDecorate %223 7 RelaxedPrecision 
                                                      OpMemberDecorate %223 7 Offset 223 
                                                      OpMemberDecorate %223 8 RelaxedPrecision 
                                                      OpMemberDecorate %223 8 Offset 223 
                                                      OpMemberDecorate %223 9 RelaxedPrecision 
                                                      OpMemberDecorate %223 9 Offset 223 
                                                      OpMemberDecorate %223 10 RelaxedPrecision 
                                                      OpMemberDecorate %223 10 Offset 223 
                                                      OpMemberDecorate %223 11 Offset 223 
                                                      OpDecorate %223 Block 
                                                      OpDecorate %225 DescriptorSet 225 
                                                      OpDecorate %225 Binding 225 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %314 RelaxedPrecision 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %320 RelaxedPrecision 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %328 RelaxedPrecision 
                                                      OpDecorate %331 RelaxedPrecision 
                                                      OpDecorate %332 RelaxedPrecision 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %338 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD7 Location 369 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %10 %16 
                                              %18 = OpTypeArray %10 %16 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypeArray %10 %19 
                                              %21 = OpTypeStruct %17 %18 %10 %10 %10 %20 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4; f32_4[2]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 0 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %10 
                                          i32 %40 = OpConstant 2 
                                          i32 %50 = OpConstant 3 
                                              %55 = OpTypePointer Private %10 
                               Private f32_4* %56 = OpVariable Private 
                                              %59 = OpTypeArray %10 %16 
                                              %60 = OpTypeStruct %7 %59 
                                              %61 = OpTypePointer Uniform %60 
           Uniform struct {f32_3; f32_4[4];}* %62 = OpVariable Uniform 
                                          u32 %80 = OpConstant 1 
                                              %81 = OpTypeArray %6 %80 
                                              %82 = OpTypeStruct %10 %6 %81 
                                              %83 = OpTypePointer Output %82 
         Output struct {f32_4; f32; f32[1];}* %84 = OpVariable Output 
                                              %89 = OpTypePointer Output %10 
                                              %91 = OpTypeVector %6 2 
                                              %92 = OpTypePointer Output %91 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                              %94 = OpTypePointer Input %91 
                                 Input f32_2* %95 = OpVariable Input 
                                              %97 = OpTypePointer Input %7 
                                 Input f32_3* %98 = OpVariable Input 
                                         u32 %104 = OpConstant 0 
                                             %105 = OpTypePointer Private %6 
                                Private f32* %119 = OpVariable Private 
                                         f32 %126 = OpConstant 3.674022E-40 
                                             %137 = OpTypePointer Output %7 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %144 = OpTypePointer Uniform %7 
                              Private f32_3* %148 = OpVariable Private 
                                Input f32_4* %149 = OpVariable Input 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                              Private f32_3* %185 = OpVariable Private 
                                         u32 %201 = OpConstant 3 
                                             %202 = OpTypePointer Input %6 
                                             %205 = OpTypePointer Uniform %6 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD5 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                Input f32_4* %218 = OpVariable Input 
                                         u32 %221 = OpConstant 20 
                                             %222 = OpTypeArray %10 %221 
                                             %223 = OpTypeStruct %222 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 
                                             %224 = OpTypePointer Uniform %223 
Uniform struct {f32_4[20]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %225 = OpVariable Uniform 
                                         i32 %260 = OpConstant 4 
                                             %270 = OpTypeBool 
                                             %271 = OpTypeVector %270 4 
                                             %272 = OpTypePointer Private %271 
                             Private bool_4* %273 = OpVariable Private 
                                         i32 %275 = OpConstant 5 
                              Private f32_3* %279 = OpVariable Private 
                                             %280 = OpTypePointer Private %270 
                                         f32 %283 = OpConstant 3.674022E-40 
                                         f32 %284 = OpConstant 3.674022E-40 
                              Private f32_4* %295 = OpVariable Private 
                                         f32 %298 = OpConstant 3.674022E-40 
                                         f32 %299 = OpConstant 3.674022E-40 
                                       f32_3 %319 = OpConstantComposite %299 %299 %299 
                                         f32 %324 = OpConstant 3.674022E-40 
                                         f32 %325 = OpConstant 3.674022E-40 
                                         f32 %326 = OpConstant 3.674022E-40 
                                       f32_4 %327 = OpConstantComposite %324 %325 %326 %298 
                                             %335 = OpTypePointer Private %15 
                                Private u32* %336 = OpVariable Private 
                                             %340 = OpTypePointer Private %24 
                                Private i32* %341 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD7 = OpVariable Output 
                                             %376 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %12 
                                        f32_3 %14 = OpVectorShuffle %13 %13 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_3 %30 = OpVectorShuffle %29 %29 0 1 2 
                                        f32_3 %31 = OpFMul %14 %30 
                                                      OpStore %9 %31 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %25 
                                        f32_4 %33 = OpLoad %32 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                        f32_4 %35 = OpLoad %12 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 0 0 
                                        f32_3 %37 = OpFMul %34 %36 
                                        f32_3 %38 = OpLoad %9 
                                        f32_3 %39 = OpFAdd %37 %38 
                                                      OpStore %9 %39 
                               Uniform f32_4* %41 = OpAccessChain %23 %25 %40 
                                        f32_4 %42 = OpLoad %41 
                                        f32_3 %43 = OpVectorShuffle %42 %42 0 1 2 
                                        f32_4 %44 = OpLoad %12 
                                        f32_3 %45 = OpVectorShuffle %44 %44 2 2 2 
                                        f32_3 %46 = OpFMul %43 %45 
                                        f32_3 %47 = OpLoad %9 
                                        f32_3 %48 = OpFAdd %46 %47 
                                                      OpStore %9 %48 
                                        f32_3 %49 = OpLoad %9 
                               Uniform f32_4* %51 = OpAccessChain %23 %25 %50 
                                        f32_4 %52 = OpLoad %51 
                                        f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                        f32_3 %54 = OpFAdd %49 %53 
                                                      OpStore %9 %54 
                                        f32_3 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 1 1 1 1 
                               Uniform f32_4* %63 = OpAccessChain %62 %26 %26 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFMul %58 %64 
                                                      OpStore %56 %65 
                               Uniform f32_4* %66 = OpAccessChain %62 %26 %25 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpLoad %9 
                                        f32_4 %69 = OpVectorShuffle %68 %68 0 0 0 0 
                                        f32_4 %70 = OpFMul %67 %69 
                                        f32_4 %71 = OpLoad %56 
                                        f32_4 %72 = OpFAdd %70 %71 
                                                      OpStore %56 %72 
                               Uniform f32_4* %73 = OpAccessChain %62 %26 %40 
                                        f32_4 %74 = OpLoad %73 
                                        f32_3 %75 = OpLoad %9 
                                        f32_4 %76 = OpVectorShuffle %75 %75 2 2 2 2 
                                        f32_4 %77 = OpFMul %74 %76 
                                        f32_4 %78 = OpLoad %56 
                                        f32_4 %79 = OpFAdd %77 %78 
                                                      OpStore %56 %79 
                                        f32_4 %85 = OpLoad %56 
                               Uniform f32_4* %86 = OpAccessChain %62 %26 %50 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpFAdd %85 %87 
                                Output f32_4* %90 = OpAccessChain %84 %25 
                                                      OpStore %90 %88 
                                        f32_2 %96 = OpLoad %95 
                                                      OpStore vs_TEXCOORD0 %96 
                                        f32_3 %99 = OpLoad %98 
                              Uniform f32_4* %100 = OpAccessChain %23 %26 %25 
                                       f32_4 %101 = OpLoad %100 
                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 2 
                                         f32 %103 = OpDot %99 %102 
                                Private f32* %106 = OpAccessChain %56 %104 
                                                      OpStore %106 %103 
                                       f32_3 %107 = OpLoad %98 
                              Uniform f32_4* %108 = OpAccessChain %23 %26 %26 
                                       f32_4 %109 = OpLoad %108 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                         f32 %111 = OpDot %107 %110 
                                Private f32* %112 = OpAccessChain %56 %80 
                                                      OpStore %112 %111 
                                       f32_3 %113 = OpLoad %98 
                              Uniform f32_4* %114 = OpAccessChain %23 %26 %40 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                         f32 %117 = OpDot %113 %116 
                                Private f32* %118 = OpAccessChain %56 %19 
                                                      OpStore %118 %117 
                                       f32_4 %120 = OpLoad %56 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_4 %122 = OpLoad %56 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                         f32 %124 = OpDot %121 %123 
                                                      OpStore %119 %124 
                                         f32 %125 = OpLoad %119 
                                         f32 %127 = OpExtInst %1 40 %125 %126 
                                                      OpStore %119 %127 
                                         f32 %128 = OpLoad %119 
                                         f32 %129 = OpExtInst %1 32 %128 
                                                      OpStore %119 %129 
                                         f32 %130 = OpLoad %119 
                                       f32_3 %131 = OpCompositeConstruct %130 %130 %130 
                                       f32_4 %132 = OpLoad %56 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_3 %134 = OpFMul %131 %133 
                                       f32_4 %135 = OpLoad %56 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 6 3 
                                                      OpStore %56 %136 
                                       f32_4 %139 = OpLoad %56 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                                      OpStore vs_TEXCOORD1 %140 
                                       f32_3 %142 = OpLoad %9 
                                       f32_3 %143 = OpFNegate %142 
                              Uniform f32_3* %145 = OpAccessChain %62 %25 
                                       f32_3 %146 = OpLoad %145 
                                       f32_3 %147 = OpFAdd %143 %146 
                                                      OpStore vs_TEXCOORD2 %147 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 1 1 1 
                              Uniform f32_4* %152 = OpAccessChain %23 %25 %26 
                                       f32_4 %153 = OpLoad %152 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                       f32_3 %155 = OpFMul %151 %154 
                                                      OpStore %148 %155 
                              Uniform f32_4* %156 = OpAccessChain %23 %25 %25 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                       f32_4 %159 = OpLoad %149 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 0 0 
                                       f32_3 %161 = OpFMul %158 %160 
                                       f32_3 %162 = OpLoad %148 
                                       f32_3 %163 = OpFAdd %161 %162 
                                                      OpStore %148 %163 
                              Uniform f32_4* %164 = OpAccessChain %23 %25 %40 
                                       f32_4 %165 = OpLoad %164 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                       f32_4 %167 = OpLoad %149 
                                       f32_3 %168 = OpVectorShuffle %167 %167 2 2 2 
                                       f32_3 %169 = OpFMul %166 %168 
                                       f32_3 %170 = OpLoad %148 
                                       f32_3 %171 = OpFAdd %169 %170 
                                                      OpStore %148 %171 
                                       f32_3 %172 = OpLoad %148 
                                       f32_3 %173 = OpLoad %148 
                                         f32 %174 = OpDot %172 %173 
                                                      OpStore %119 %174 
                                         f32 %175 = OpLoad %119 
                                         f32 %176 = OpExtInst %1 40 %175 %126 
                                                      OpStore %119 %176 
                                         f32 %177 = OpLoad %119 
                                         f32 %178 = OpExtInst %1 32 %177 
                                                      OpStore %119 %178 
                                         f32 %179 = OpLoad %119 
                                       f32_3 %180 = OpCompositeConstruct %179 %179 %179 
                                       f32_3 %181 = OpLoad %148 
                                       f32_3 %182 = OpFMul %180 %181 
                                                      OpStore %148 %182 
                                       f32_3 %184 = OpLoad %148 
                                                      OpStore vs_TEXCOORD3 %184 
                                       f32_4 %186 = OpLoad %56 
                                       f32_3 %187 = OpVectorShuffle %186 %186 2 0 1 
                                       f32_3 %188 = OpLoad %148 
                                       f32_3 %189 = OpVectorShuffle %188 %188 1 2 0 
                                       f32_3 %190 = OpFMul %187 %189 
                                                      OpStore %185 %190 
                                       f32_4 %191 = OpLoad %56 
                                       f32_3 %192 = OpVectorShuffle %191 %191 1 2 0 
                                       f32_3 %193 = OpLoad %148 
                                       f32_3 %194 = OpVectorShuffle %193 %193 2 0 1 
                                       f32_3 %195 = OpFMul %192 %194 
                                       f32_3 %196 = OpLoad %185 
                                       f32_3 %197 = OpFNegate %196 
                                       f32_3 %198 = OpFAdd %195 %197 
                                       f32_4 %199 = OpLoad %56 
                                       f32_4 %200 = OpVectorShuffle %199 %198 4 5 6 3 
                                                      OpStore %56 %200 
                                  Input f32* %203 = OpAccessChain %149 %201 
                                         f32 %204 = OpLoad %203 
                                Uniform f32* %206 = OpAccessChain %23 %50 %201 
                                         f32 %207 = OpLoad %206 
                                         f32 %208 = OpFMul %204 %207 
                                                      OpStore %119 %208 
                                         f32 %210 = OpLoad %119 
                                       f32_3 %211 = OpCompositeConstruct %210 %210 %210 
                                       f32_4 %212 = OpLoad %56 
                                       f32_3 %213 = OpVectorShuffle %212 %212 0 1 2 
                                       f32_3 %214 = OpFMul %211 %213 
                                                      OpStore vs_TEXCOORD4 %214 
                                       f32_3 %216 = OpLoad %9 
                                                      OpStore vs_TEXCOORD5 %216 
                                       f32_4 %219 = OpLoad %218 
                                                      OpStore vs_TEXCOORD6 %219 
                                       f32_3 %220 = OpLoad %9 
                              Uniform f32_4* %226 = OpAccessChain %225 %26 
                                       f32_4 %227 = OpLoad %226 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                       f32_3 %229 = OpFNegate %228 
                                       f32_3 %230 = OpFAdd %220 %229 
                                       f32_4 %231 = OpLoad %56 
                                       f32_4 %232 = OpVectorShuffle %231 %230 4 5 6 3 
                                                      OpStore %56 %232 
                                       f32_4 %233 = OpLoad %56 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                       f32_4 %235 = OpLoad %56 
                                       f32_3 %236 = OpVectorShuffle %235 %235 0 1 2 
                                         f32 %237 = OpDot %234 %236 
                                Private f32* %238 = OpAccessChain %56 %104 
                                                      OpStore %238 %237 
                                       f32_3 %239 = OpLoad %9 
                              Uniform f32_4* %240 = OpAccessChain %225 %40 
                                       f32_4 %241 = OpLoad %240 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 1 2 
                                       f32_3 %243 = OpFNegate %242 
                                       f32_3 %244 = OpFAdd %239 %243 
                                                      OpStore %148 %244 
                                       f32_3 %245 = OpLoad %148 
                                       f32_3 %246 = OpLoad %148 
                                         f32 %247 = OpDot %245 %246 
                                Private f32* %248 = OpAccessChain %56 %80 
                                                      OpStore %248 %247 
                                       f32_3 %249 = OpLoad %9 
                              Uniform f32_4* %250 = OpAccessChain %225 %50 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                       f32_3 %253 = OpFNegate %252 
                                       f32_3 %254 = OpFAdd %249 %253 
                                                      OpStore %148 %254 
                                       f32_3 %255 = OpLoad %148 
                                       f32_3 %256 = OpLoad %148 
                                         f32 %257 = OpDot %255 %256 
                                Private f32* %258 = OpAccessChain %56 %19 
                                                      OpStore %258 %257 
                                       f32_3 %259 = OpLoad %9 
                              Uniform f32_4* %261 = OpAccessChain %225 %260 
                                       f32_4 %262 = OpLoad %261 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                       f32_3 %264 = OpFNegate %263 
                                       f32_3 %265 = OpFAdd %259 %264 
                                                      OpStore %148 %265 
                                       f32_3 %266 = OpLoad %148 
                                       f32_3 %267 = OpLoad %148 
                                         f32 %268 = OpDot %266 %267 
                                Private f32* %269 = OpAccessChain %56 %201 
                                                      OpStore %269 %268 
                                       f32_4 %274 = OpLoad %56 
                              Uniform f32_4* %276 = OpAccessChain %225 %275 
                                       f32_4 %277 = OpLoad %276 
                                      bool_4 %278 = OpFOrdLessThan %274 %277 
                                                      OpStore %273 %278 
                               Private bool* %281 = OpAccessChain %273 %104 
                                        bool %282 = OpLoad %281 
                                         f32 %285 = OpSelect %282 %283 %284 
                                Private f32* %286 = OpAccessChain %279 %104 
                                                      OpStore %286 %285 
                               Private bool* %287 = OpAccessChain %273 %80 
                                        bool %288 = OpLoad %287 
                                         f32 %289 = OpSelect %288 %283 %284 
                                Private f32* %290 = OpAccessChain %279 %80 
                                                      OpStore %290 %289 
                               Private bool* %291 = OpAccessChain %273 %19 
                                        bool %292 = OpLoad %291 
                                         f32 %293 = OpSelect %292 %283 %284 
                                Private f32* %294 = OpAccessChain %279 %19 
                                                      OpStore %294 %293 
                               Private bool* %296 = OpAccessChain %273 %104 
                                        bool %297 = OpLoad %296 
                                         f32 %300 = OpSelect %297 %298 %299 
                                Private f32* %301 = OpAccessChain %295 %104 
                                                      OpStore %301 %300 
                               Private bool* %302 = OpAccessChain %273 %80 
                                        bool %303 = OpLoad %302 
                                         f32 %304 = OpSelect %303 %298 %299 
                                Private f32* %305 = OpAccessChain %295 %80 
                                                      OpStore %305 %304 
                               Private bool* %306 = OpAccessChain %273 %19 
                                        bool %307 = OpLoad %306 
                                         f32 %308 = OpSelect %307 %298 %299 
                                Private f32* %309 = OpAccessChain %295 %19 
                                                      OpStore %309 %308 
                               Private bool* %310 = OpAccessChain %273 %201 
                                        bool %311 = OpLoad %310 
                                         f32 %312 = OpSelect %311 %298 %299 
                                Private f32* %313 = OpAccessChain %295 %201 
                                                      OpStore %313 %312 
                                       f32_3 %314 = OpLoad %279 
                                       f32_4 %315 = OpLoad %295 
                                       f32_3 %316 = OpVectorShuffle %315 %315 1 2 3 
                                       f32_3 %317 = OpFAdd %314 %316 
                                                      OpStore %279 %317 
                                       f32_3 %318 = OpLoad %279 
                                       f32_3 %320 = OpExtInst %1 40 %318 %319 
                                       f32_4 %321 = OpLoad %295 
                                       f32_4 %322 = OpVectorShuffle %321 %320 0 4 5 6 
                                                      OpStore %295 %322 
                                       f32_4 %323 = OpLoad %295 
                                         f32 %328 = OpDot %323 %327 
                                Private f32* %329 = OpAccessChain %279 %104 
                                                      OpStore %329 %328 
                                Private f32* %330 = OpAccessChain %279 %104 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpFNegate %331 
                                         f32 %333 = OpFAdd %332 %324 
                                Private f32* %334 = OpAccessChain %279 %104 
                                                      OpStore %334 %333 
                                Private f32* %337 = OpAccessChain %279 %104 
                                         f32 %338 = OpLoad %337 
                                         u32 %339 = OpConvertFToU %338 
                                                      OpStore %336 %339 
                                         u32 %342 = OpLoad %336 
                                         i32 %343 = OpBitcast %342 
                                         i32 %344 = OpShiftLeftLogical %343 %40 
                                                      OpStore %341 %344 
                                       f32_3 %345 = OpLoad %9 
                                       f32_4 %346 = OpVectorShuffle %345 %345 1 1 1 1 
                                         i32 %347 = OpLoad %341 
                                         i32 %348 = OpIAdd %347 %26 
                              Uniform f32_4* %349 = OpAccessChain %225 %25 %348 
                                       f32_4 %350 = OpLoad %349 
                                       f32_4 %351 = OpFMul %346 %350 
                                                      OpStore %56 %351 
                                         i32 %352 = OpLoad %341 
                              Uniform f32_4* %353 = OpAccessChain %225 %25 %352 
                                       f32_4 %354 = OpLoad %353 
                                       f32_3 %355 = OpLoad %9 
                                       f32_4 %356 = OpVectorShuffle %355 %355 0 0 0 0 
                                       f32_4 %357 = OpFMul %354 %356 
                                       f32_4 %358 = OpLoad %56 
                                       f32_4 %359 = OpFAdd %357 %358 
                                                      OpStore %56 %359 
                                         i32 %360 = OpLoad %341 
                                         i32 %361 = OpIAdd %360 %40 
                              Uniform f32_4* %362 = OpAccessChain %225 %25 %361 
                                       f32_4 %363 = OpLoad %362 
                                       f32_3 %364 = OpLoad %9 
                                       f32_4 %365 = OpVectorShuffle %364 %364 2 2 2 2 
                                       f32_4 %366 = OpFMul %363 %365 
                                       f32_4 %367 = OpLoad %56 
                                       f32_4 %368 = OpFAdd %366 %367 
                                                      OpStore %56 %368 
                                       f32_4 %370 = OpLoad %56 
                                         i32 %371 = OpLoad %341 
                                         i32 %372 = OpIAdd %371 %50 
                              Uniform f32_4* %373 = OpAccessChain %225 %25 %372 
                                       f32_4 %374 = OpLoad %373 
                                       f32_4 %375 = OpFAdd %370 %374 
                                                      OpStore vs_TEXCOORD7 %375 
                                 Output f32* %377 = OpAccessChain %84 %25 %80 
                                         f32 %378 = OpLoad %377 
                                         f32 %379 = OpFNegate %378 
                                 Output f32* %380 = OpAccessChain %84 %25 %80 
                                                      OpStore %380 %379 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 1143
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %91 %140 %259 %264 %271 %525 %1133 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate vs_TEXCOORD7 Location 12 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %28 DescriptorSet 28 
                                                      OpDecorate %28 Binding 28 
                                                      OpDecorate %29 RelaxedPrecision 
                                                      OpDecorate %32 RelaxedPrecision 
                                                      OpDecorate %32 DescriptorSet 32 
                                                      OpDecorate %32 Binding 32 
                                                      OpDecorate %33 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %44 ArrayStride 44 
                                                      OpMemberDecorate %45 0 Offset 45 
                                                      OpMemberDecorate %45 1 Offset 45 
                                                      OpMemberDecorate %45 2 Offset 45 
                                                      OpMemberDecorate %45 3 Offset 45 
                                                      OpMemberDecorate %45 4 Offset 45 
                                                      OpMemberDecorate %45 5 Offset 45 
                                                      OpMemberDecorate %45 6 RelaxedPrecision 
                                                      OpMemberDecorate %45 6 Offset 45 
                                                      OpMemberDecorate %45 7 RelaxedPrecision 
                                                      OpMemberDecorate %45 7 Offset 45 
                                                      OpMemberDecorate %45 8 RelaxedPrecision 
                                                      OpMemberDecorate %45 8 Offset 45 
                                                      OpMemberDecorate %45 9 RelaxedPrecision 
                                                      OpMemberDecorate %45 9 Offset 45 
                                                      OpMemberDecorate %45 10 RelaxedPrecision 
                                                      OpMemberDecorate %45 10 Offset 45 
                                                      OpMemberDecorate %45 11 Offset 45 
                                                      OpDecorate %45 Block 
                                                      OpDecorate %47 DescriptorSet 47 
                                                      OpDecorate %47 Binding 47 
                                                      OpDecorate %53 RelaxedPrecision 
                                                      OpDecorate %54 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %58 RelaxedPrecision 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %63 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD2 Location 91 
                                                      OpDecorate %112 ArrayStride 112 
                                                      OpDecorate %113 ArrayStride 113 
                                                      OpMemberDecorate %114 0 Offset 114 
                                                      OpMemberDecorate %114 1 RelaxedPrecision 
                                                      OpMemberDecorate %114 1 Offset 114 
                                                      OpMemberDecorate %114 2 RelaxedPrecision 
                                                      OpMemberDecorate %114 2 Offset 114 
                                                      OpMemberDecorate %114 3 Offset 114 
                                                      OpMemberDecorate %114 4 Offset 114 
                                                      OpDecorate %114 Block 
                                                      OpDecorate %116 DescriptorSet 116 
                                                      OpDecorate %116 Binding 116 
                                                      OpDecorate vs_TEXCOORD0 Location 140 
                                                      OpMemberDecorate %142 0 Offset 142 
                                                      OpMemberDecorate %142 1 Offset 142 
                                                      OpMemberDecorate %142 2 Offset 142 
                                                      OpMemberDecorate %142 3 Offset 142 
                                                      OpMemberDecorate %142 4 Offset 142 
                                                      OpMemberDecorate %142 5 Offset 142 
                                                      OpMemberDecorate %142 6 Offset 142 
                                                      OpMemberDecorate %142 7 Offset 142 
                                                      OpMemberDecorate %142 8 Offset 142 
                                                      OpMemberDecorate %142 9 Offset 142 
                                                      OpMemberDecorate %142 10 Offset 142 
                                                      OpDecorate %142 Block 
                                                      OpDecorate %144 DescriptorSet 144 
                                                      OpDecorate %144 Binding 144 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %157 DescriptorSet 157 
                                                      OpDecorate %157 Binding 157 
                                                      OpDecorate %158 RelaxedPrecision 
                                                      OpDecorate %159 RelaxedPrecision 
                                                      OpDecorate %159 DescriptorSet 159 
                                                      OpDecorate %159 Binding 159 
                                                      OpDecorate %160 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %168 DescriptorSet 168 
                                                      OpDecorate %168 Binding 168 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %170 DescriptorSet 170 
                                                      OpDecorate %170 Binding 170 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %186 DescriptorSet 186 
                                                      OpDecorate %186 Binding 186 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %188 DescriptorSet 188 
                                                      OpDecorate %188 Binding 188 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %249 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 259 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD3 Location 264 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 271 
                                                      OpDecorate %320 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %399 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %420 DescriptorSet 420 
                                                      OpDecorate %420 Binding 420 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %422 DescriptorSet 422 
                                                      OpDecorate %422 Binding 422 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %428 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %438 RelaxedPrecision 
                                                      OpDecorate %439 RelaxedPrecision 
                                                      OpDecorate %440 RelaxedPrecision 
                                                      OpDecorate %441 RelaxedPrecision 
                                                      OpDecorate %442 RelaxedPrecision 
                                                      OpDecorate %443 RelaxedPrecision 
                                                      OpDecorate %445 RelaxedPrecision 
                                                      OpDecorate %450 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %467 ArrayStride 467 
                                                      OpDecorate %468 ArrayStride 468 
                                                      OpDecorate %469 ArrayStride 469 
                                                      OpMemberDecorate %470 0 Offset 470 
                                                      OpMemberDecorate %470 1 Offset 470 
                                                      OpMemberDecorate %470 2 Offset 470 
                                                      OpMemberDecorate %470 3 RelaxedPrecision 
                                                      OpMemberDecorate %470 3 Offset 470 
                                                      OpMemberDecorate %470 4 RelaxedPrecision 
                                                      OpMemberDecorate %470 4 Offset 470 
                                                      OpMemberDecorate %470 5 RelaxedPrecision 
                                                      OpMemberDecorate %470 5 Offset 470 
                                                      OpMemberDecorate %470 6 Offset 470 
                                                      OpMemberDecorate %470 7 RelaxedPrecision 
                                                      OpMemberDecorate %470 7 Offset 470 
                                                      OpMemberDecorate %470 8 Offset 470 
                                                      OpMemberDecorate %470 9 Offset 470 
                                                      OpMemberDecorate %470 10 RelaxedPrecision 
                                                      OpMemberDecorate %470 10 Offset 470 
                                                      OpMemberDecorate %470 11 RelaxedPrecision 
                                                      OpMemberDecorate %470 11 Offset 470 
                                                      OpMemberDecorate %470 12 RelaxedPrecision 
                                                      OpMemberDecorate %470 12 Offset 470 
                                                      OpMemberDecorate %470 13 RelaxedPrecision 
                                                      OpMemberDecorate %470 13 Offset 470 
                                                      OpMemberDecorate %470 14 RelaxedPrecision 
                                                      OpMemberDecorate %470 14 Offset 470 
                                                      OpMemberDecorate %470 15 RelaxedPrecision 
                                                      OpMemberDecorate %470 15 Offset 470 
                                                      OpMemberDecorate %470 16 RelaxedPrecision 
                                                      OpMemberDecorate %470 16 Offset 470 
                                                      OpDecorate %470 Block 
                                                      OpDecorate %472 DescriptorSet 472 
                                                      OpDecorate %472 Binding 472 
                                                      OpDecorate %474 RelaxedPrecision 
                                                      OpDecorate %475 RelaxedPrecision 
                                                      OpDecorate %478 RelaxedPrecision 
                                                      OpDecorate %505 RelaxedPrecision 
                                                      OpDecorate %522 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 525 
                                                      OpDecorate %529 ArrayStride 529 
                                                      OpDecorate %530 ArrayStride 530 
                                                      OpDecorate %531 ArrayStride 531 
                                                      OpDecorate %532 ArrayStride 532 
                                                      OpDecorate %533 ArrayStride 533 
                                                      OpMemberDecorate %534 0 Offset 534 
                                                      OpMemberDecorate %534 1 RelaxedPrecision 
                                                      OpMemberDecorate %534 1 Offset 534 
                                                      OpMemberDecorate %534 2 RelaxedPrecision 
                                                      OpMemberDecorate %534 2 Offset 534 
                                                      OpMemberDecorate %534 3 RelaxedPrecision 
                                                      OpMemberDecorate %534 3 Offset 534 
                                                      OpMemberDecorate %534 4 RelaxedPrecision 
                                                      OpMemberDecorate %534 4 Offset 534 
                                                      OpDecorate %534 Block 
                                                      OpDecorate %536 DescriptorSet 536 
                                                      OpDecorate %536 Binding 536 
                                                      OpDecorate %566 RelaxedPrecision 
                                                      OpDecorate %570 RelaxedPrecision 
                                                      OpDecorate %579 RelaxedPrecision 
                                                      OpDecorate %580 RelaxedPrecision 
                                                      OpDecorate %583 RelaxedPrecision 
                                                      OpDecorate %586 RelaxedPrecision 
                                                      OpDecorate %587 RelaxedPrecision 
                                                      OpDecorate %590 RelaxedPrecision 
                                                      OpDecorate %591 RelaxedPrecision 
                                                      OpDecorate %592 RelaxedPrecision 
                                                      OpDecorate %593 RelaxedPrecision 
                                                      OpDecorate %594 RelaxedPrecision 
                                                      OpDecorate %595 RelaxedPrecision 
                                                      OpDecorate %596 RelaxedPrecision 
                                                      OpDecorate %598 RelaxedPrecision 
                                                      OpDecorate %607 RelaxedPrecision 
                                                      OpDecorate %608 RelaxedPrecision 
                                                      OpDecorate %609 RelaxedPrecision 
                                                      OpDecorate %614 RelaxedPrecision 
                                                      OpDecorate %615 RelaxedPrecision 
                                                      OpDecorate %622 RelaxedPrecision 
                                                      OpDecorate %623 RelaxedPrecision 
                                                      OpDecorate %624 RelaxedPrecision 
                                                      OpDecorate %625 RelaxedPrecision 
                                                      OpDecorate %626 RelaxedPrecision 
                                                      OpDecorate %627 RelaxedPrecision 
                                                      OpDecorate %628 RelaxedPrecision 
                                                      OpDecorate %629 RelaxedPrecision 
                                                      OpDecorate %632 RelaxedPrecision 
                                                      OpDecorate %635 RelaxedPrecision 
                                                      OpDecorate %636 RelaxedPrecision 
                                                      OpDecorate %637 RelaxedPrecision 
                                                      OpDecorate %638 RelaxedPrecision 
                                                      OpDecorate %640 RelaxedPrecision 
                                                      OpDecorate %641 RelaxedPrecision 
                                                      OpDecorate %644 RelaxedPrecision 
                                                      OpDecorate %645 RelaxedPrecision 
                                                      OpDecorate %646 RelaxedPrecision 
                                                      OpDecorate %687 RelaxedPrecision 
                                                      OpDecorate %689 RelaxedPrecision 
                                                      OpDecorate %690 RelaxedPrecision 
                                                      OpDecorate %691 RelaxedPrecision 
                                                      OpDecorate %693 RelaxedPrecision 
                                                      OpDecorate %695 RelaxedPrecision 
                                                      OpDecorate %696 RelaxedPrecision 
                                                      OpDecorate %697 RelaxedPrecision 
                                                      OpDecorate %700 RelaxedPrecision 
                                                      OpDecorate %716 RelaxedPrecision 
                                                      OpDecorate %718 RelaxedPrecision 
                                                      OpDecorate %727 RelaxedPrecision 
                                                      OpDecorate %729 RelaxedPrecision 
                                                      OpDecorate %730 RelaxedPrecision 
                                                      OpDecorate %733 RelaxedPrecision 
                                                      OpDecorate %736 RelaxedPrecision 
                                                      OpDecorate %741 RelaxedPrecision 
                                                      OpDecorate %752 RelaxedPrecision 
                                                      OpDecorate %754 RelaxedPrecision 
                                                      OpDecorate %755 RelaxedPrecision 
                                                      OpDecorate %756 RelaxedPrecision 
                                                      OpDecorate %761 RelaxedPrecision 
                                                      OpDecorate %765 RelaxedPrecision 
                                                      OpDecorate %771 RelaxedPrecision 
                                                      OpDecorate %777 RelaxedPrecision 
                                                      OpDecorate %786 RelaxedPrecision 
                                                      OpDecorate %789 RelaxedPrecision 
                                                      OpDecorate %790 RelaxedPrecision 
                                                      OpDecorate %791 RelaxedPrecision 
                                                      OpDecorate %795 RelaxedPrecision 
                                                      OpDecorate %796 RelaxedPrecision 
                                                      OpDecorate %797 RelaxedPrecision 
                                                      OpDecorate %801 RelaxedPrecision 
                                                      OpDecorate %802 RelaxedPrecision 
                                                      OpDecorate %803 RelaxedPrecision 
                                                      OpDecorate %815 RelaxedPrecision 
                                                      OpDecorate %816 RelaxedPrecision 
                                                      OpDecorate %820 RelaxedPrecision 
                                                      OpDecorate %821 RelaxedPrecision 
                                                      OpDecorate %822 RelaxedPrecision 
                                                      OpDecorate %823 RelaxedPrecision 
                                                      OpDecorate %824 RelaxedPrecision 
                                                      OpDecorate %825 RelaxedPrecision 
                                                      OpDecorate %826 RelaxedPrecision 
                                                      OpDecorate %827 RelaxedPrecision 
                                                      OpDecorate %828 RelaxedPrecision 
                                                      OpDecorate %829 RelaxedPrecision 
                                                      OpDecorate %830 RelaxedPrecision 
                                                      OpDecorate %832 RelaxedPrecision 
                                                      OpDecorate %833 RelaxedPrecision 
                                                      OpDecorate %834 RelaxedPrecision 
                                                      OpDecorate %835 RelaxedPrecision 
                                                      OpDecorate %864 RelaxedPrecision 
                                                      OpDecorate %865 RelaxedPrecision 
                                                      OpDecorate %867 RelaxedPrecision 
                                                      OpDecorate %868 RelaxedPrecision 
                                                      OpDecorate %872 RelaxedPrecision 
                                                      OpDecorate %873 RelaxedPrecision 
                                                      OpDecorate %875 RelaxedPrecision 
                                                      OpDecorate %877 RelaxedPrecision 
                                                      OpDecorate %879 RelaxedPrecision 
                                                      OpDecorate %880 RelaxedPrecision 
                                                      OpDecorate %881 RelaxedPrecision 
                                                      OpDecorate %884 RelaxedPrecision 
                                                      OpDecorate %886 RelaxedPrecision 
                                                      OpDecorate %887 RelaxedPrecision 
                                                      OpDecorate %888 RelaxedPrecision 
                                                      OpDecorate %888 DescriptorSet 888 
                                                      OpDecorate %888 Binding 888 
                                                      OpDecorate %889 RelaxedPrecision 
                                                      OpDecorate %890 RelaxedPrecision 
                                                      OpDecorate %890 DescriptorSet 890 
                                                      OpDecorate %890 Binding 890 
                                                      OpDecorate %891 RelaxedPrecision 
                                                      OpDecorate %893 RelaxedPrecision 
                                                      OpDecorate %894 RelaxedPrecision 
                                                      OpDecorate %895 RelaxedPrecision 
                                                      OpDecorate %896 RelaxedPrecision 
                                                      OpDecorate %897 RelaxedPrecision 
                                                      OpDecorate %899 RelaxedPrecision 
                                                      OpDecorate %901 RelaxedPrecision 
                                                      OpDecorate %902 RelaxedPrecision 
                                                      OpDecorate %903 RelaxedPrecision 
                                                      OpDecorate %953 RelaxedPrecision 
                                                      OpDecorate %954 RelaxedPrecision 
                                                      OpDecorate %965 RelaxedPrecision 
                                                      OpDecorate %976 RelaxedPrecision 
                                                      OpDecorate %977 RelaxedPrecision 
                                                      OpDecorate %978 RelaxedPrecision 
                                                      OpDecorate %979 RelaxedPrecision 
                                                      OpDecorate %982 RelaxedPrecision 
                                                      OpDecorate %986 RelaxedPrecision 
                                                      OpDecorate %989 RelaxedPrecision 
                                                      OpDecorate %990 RelaxedPrecision 
                                                      OpDecorate %1056 RelaxedPrecision 
                                                      OpDecorate %1082 RelaxedPrecision 
                                                      OpDecorate %1090 RelaxedPrecision 
                                                      OpDecorate %1091 RelaxedPrecision 
                                                      OpDecorate %1092 RelaxedPrecision 
                                                      OpDecorate %1093 RelaxedPrecision 
                                                      OpDecorate %1094 RelaxedPrecision 
                                                      OpDecorate %1095 RelaxedPrecision 
                                                      OpDecorate %1115 RelaxedPrecision 
                                                      OpDecorate %1116 RelaxedPrecision 
                                                      OpDecorate %1117 RelaxedPrecision 
                                                      OpDecorate %1120 RelaxedPrecision 
                                                      OpDecorate %1122 RelaxedPrecision 
                                                      OpDecorate %1123 RelaxedPrecision 
                                                      OpDecorate %1124 RelaxedPrecision 
                                                      OpDecorate %1125 RelaxedPrecision 
                                                      OpDecorate %1126 RelaxedPrecision 
                                                      OpDecorate %1129 RelaxedPrecision 
                                                      OpDecorate %1130 RelaxedPrecision 
                                                      OpDecorate %1131 RelaxedPrecision 
                                                      OpDecorate %1133 RelaxedPrecision 
                                                      OpDecorate %1133 Location 1133 
                                                      OpDecorate %1134 RelaxedPrecision 
                                                      OpDecorate %1135 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Function %7 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                        Input f32_4* vs_TEXCOORD7 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 2 
                                              %18 = OpTypePointer Input %6 
                                              %24 = OpTypePointer Private %6 
                                 Private f32* %25 = OpVariable Private 
                                              %26 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %27 = OpTypePointer UniformConstant %26 
         UniformConstant read_only Texture2D* %28 = OpVariable UniformConstant 
                                              %30 = OpTypeSampler 
                                              %31 = OpTypePointer UniformConstant %30 
                     UniformConstant sampler* %32 = OpVariable UniformConstant 
                                              %34 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                              %35 = OpTypeSampledImage %34 
                                          f32 %38 = OpConstant 3.674022E-40 
                                              %41 = OpTypePointer Private %10 
                               Private f32_4* %42 = OpVariable Private 
                                          u32 %43 = OpConstant 20 
                                              %44 = OpTypeArray %10 %43 
                                              %45 = OpTypeStruct %44 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 
                                              %46 = OpTypePointer Uniform %45 
Uniform struct {f32_4[20]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %47 = OpVariable Uniform 
                                              %48 = OpTypeInt 32 1 
                                          i32 %49 = OpConstant 10 
                                          u32 %50 = OpConstant 0 
                                              %51 = OpTypePointer Uniform %6 
                                          f32 %55 = OpConstant 3.674022E-40 
                                              %66 = OpTypeBool 
                                              %67 = OpTypePointer Private %66 
                                Private bool* %68 = OpVariable Private 
                                Private bool* %72 = OpVariable Private 
                                              %80 = OpTypePointer Function %6 
                               Private f32_4* %89 = OpVariable Private 
                                              %90 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                             %100 = OpTypePointer Private %7 
                              Private f32_3* %101 = OpVariable Private 
                              Private f32_3* %106 = OpVariable Private 
                                         u32 %111 = OpConstant 4 
                                             %112 = OpTypeArray %10 %111 
                                             %113 = OpTypeArray %10 %111 
                                             %114 = OpTypeStruct %10 %10 %10 %112 %113 
                                             %115 = OpTypePointer Uniform %114 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_4[4];}* %116 = OpVariable Uniform 
                                         i32 %117 = OpConstant 0 
                                             %118 = OpTypePointer Uniform %10 
                                Private f32* %127 = OpVariable Private 
                              Private f32_4* %131 = OpVariable Private 
                              Private f32_3* %138 = OpVariable Private 
                                             %139 = OpTypePointer Input %13 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                             %142 = OpTypeStruct %6 %10 %10 %6 %6 %7 %10 %6 %6 %6 %6 
                                             %143 = OpTypePointer Uniform %142 
Uniform struct {f32; f32_4; f32_4; f32; f32; f32_3; f32_4; f32; f32; f32; f32;}* %144 = OpVariable Uniform 
                                         i32 %145 = OpConstant 1 
                              Private f32_3* %156 = OpVariable Private 
        UniformConstant read_only Texture2D* %157 = OpVariable UniformConstant 
                    UniformConstant sampler* %159 = OpVariable UniformConstant 
                                             %161 = OpTypeSampledImage %26 
                              Private f32_3* %167 = OpVariable Private 
        UniformConstant read_only Texture2D* %168 = OpVariable UniformConstant 
                    UniformConstant sampler* %170 = OpVariable UniformConstant 
                              Private f32_3* %177 = OpVariable Private 
                                         f32 %179 = OpConstant 3.674022E-40 
                                       f32_3 %180 = OpConstantComposite %179 %179 %179 
                                         f32 %182 = OpConstant 3.674022E-40 
                                       f32_3 %183 = OpConstantComposite %182 %182 %182 
                              Private f32_4* %185 = OpVariable Private 
        UniformConstant read_only Texture2D* %186 = OpVariable UniformConstant 
                    UniformConstant sampler* %188 = OpVariable UniformConstant 
                                         u32 %194 = OpConstant 1 
                                         i32 %197 = OpConstant 3 
                              Private f32_3* %202 = OpVariable Private 
                                         f32 %215 = OpConstant 3.674022E-40 
                              Private f32_3* %218 = OpVariable Private 
                              Private f32_3* %223 = OpVariable Private 
                                         i32 %225 = OpConstant 2 
                                         f32 %231 = OpConstant 3.674022E-40 
                                       f32_3 %232 = OpConstantComposite %231 %231 %231 
                                         f32 %238 = OpConstant 3.674022E-40 
                                       f32_3 %239 = OpConstantComposite %238 %238 %238 
                              Private f32_3* %241 = OpVariable Private 
                                         f32 %244 = OpConstant 3.674022E-40 
                                         f32 %246 = OpConstant 3.674022E-40 
                        Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                Private f32* %276 = OpVariable Private 
                              Private f32_4* %282 = OpVariable Private 
                                         f32 %296 = OpConstant 3.674022E-40 
                                         f32 %313 = OpConstant 3.674022E-40 
                                       f32_3 %314 = OpConstantComposite %313 %296 %296 
                                Private f32* %318 = OpVariable Private 
                                         f32 %334 = OpConstant 3.674022E-40 
                                Private f32* %393 = OpVariable Private 
                                Private f32* %403 = OpVariable Private 
                              Private f32_3* %419 = OpVariable Private 
        UniformConstant read_only Texture2D* %420 = OpVariable UniformConstant 
                    UniformConstant sampler* %422 = OpVariable UniformConstant 
                              Private f32_3* %429 = OpVariable Private 
                                         i32 %431 = OpConstant 4 
                              Private f32_3* %450 = OpVariable Private 
                                             %467 = OpTypeArray %10 %111 
                                             %468 = OpTypeArray %10 %111 
                                             %469 = OpTypeArray %10 %17 
                                             %470 = OpTypeStruct %467 %468 %10 %10 %10 %469 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 
                                             %471 = OpTypePointer Uniform %470 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4; f32_4[2]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %472 = OpVariable Uniform 
                                             %476 = OpTypePointer Private %48 
                                Private i32* %477 = OpVariable Private 
                                             %481 = OpTypePointer Function %16 
                                Private i32* %492 = OpVariable Private 
                                         u32 %494 = OpConstant 3 
                                             %497 = OpTypePointer Private %16 
                                Private u32* %498 = OpVariable Private 
                                         i32 %501 = OpConstant 5 
                                             %506 = OpTypeVector %16 4 
                                             %507 = OpTypeArray %506 %111 
                                         u32 %508 = OpConstant 1065353216 
                                       u32_4 %509 = OpConstantComposite %508 %50 %50 %50 
                                       u32_4 %510 = OpConstantComposite %50 %508 %50 %50 
                                       u32_4 %511 = OpConstantComposite %50 %50 %508 %50 
                                       u32_4 %512 = OpConstantComposite %50 %50 %50 %508 
                                    u32_4[4] %513 = OpConstantComposite %509 %510 %511 %512 
                                             %515 = OpTypePointer Function %507 
                                             %517 = OpTypePointer Function %506 
                              Private f32_3* %524 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD5 = OpVariable Input 
                                         u32 %528 = OpConstant 32 
                                             %529 = OpTypeArray %10 %528 
                                             %530 = OpTypeArray %10 %528 
                                             %531 = OpTypeArray %10 %528 
                                             %532 = OpTypeArray %10 %528 
                                             %533 = OpTypeArray %10 %528 
                                             %534 = OpTypeStruct %529 %530 %531 %532 %533 
                                             %535 = OpTypePointer Uniform %534 
Uniform struct {f32_4[32]; f32_4[32]; f32_4[32]; f32_4[32]; f32_4[32];}* %536 = OpVariable Uniform 
                                Private f32* %547 = OpVariable Private 
                                         f32 %552 = OpConstant 3.674022E-40 
                                Private f32* %554 = OpVariable Private 
                              Private f32_3* %607 = OpVariable Private 
                              Private f32_3* %628 = OpVariable Private 
                                Private f32* %691 = OpVariable Private 
                                         f32 %702 = OpConstant 3.674022E-40 
                                         f32 %717 = OpConstant 3.674022E-40 
                                         f32 %728 = OpConstant 3.674022E-40 
                                         f32 %749 = OpConstant 3.674022E-40 
                                       f32_3 %750 = OpConstantComposite %749 %749 %749 
                                         i32 %769 = OpConstant 11 
                                         i32 %775 = OpConstant 12 
                              Private f32_3* %786 = OpVariable Private 
                                         i32 %787 = OpConstant 13 
                                         i32 %793 = OpConstant 14 
                                         i32 %799 = OpConstant 15 
                                         i32 %818 = OpConstant 16 
                                       f32_3 %831 = OpConstantComposite %38 %38 %38 
                                       f32_2 %866 = OpConstantComposite %334 %334 
                                         f32 %874 = OpConstant 3.674022E-40 
                                         f32 %876 = OpConstant 3.674022E-40 
                                         f32 %885 = OpConstant 3.674022E-40 
                              Private f32_3* %887 = OpVariable Private 
        UniformConstant read_only Texture2D* %888 = OpVariable UniformConstant 
                    UniformConstant sampler* %890 = OpVariable UniformConstant 
                                Private f32* %939 = OpVariable Private 
                                             %997 = OpTypePointer Uniform %7 
                                        i32 %1058 = OpConstant 8 
                                        i32 %1066 = OpConstant 7 
                                        i32 %1077 = OpConstant 6 
                                        i32 %1083 = OpConstant 9 
                                      f32_3 %1104 = OpConstantComposite %874 %874 %874 
                                        f32 %1108 = OpConstant 3.674022E-40 
                                      f32_3 %1109 = OpConstantComposite %1108 %1108 %1108 
                                        f32 %1127 = OpConstant 3.674022E-40 
                                      f32_3 %1128 = OpConstantComposite %1127 %1127 %1127 
                                            %1132 = OpTypePointer Output %10 
                              Output f32_4* %1133 = OpVariable Output 
                                            %1138 = OpTypePointer Output %6 
                              Private bool* %1141 = OpVariable Private 
                               Private u32* %1142 = OpVariable Private 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32_3* %9 = OpVariable Function 
                                Function f32* %81 = OpVariable Function 
                               Function u32* %482 = OpVariable Function 
                          Function u32_4[4]* %516 = OpVariable Function 
                                        f32_4 %14 = OpLoad vs_TEXCOORD7 
                                        f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                                   Input f32* %19 = OpAccessChain vs_TEXCOORD7 %17 
                                          f32 %20 = OpLoad %19 
                                          f32 %21 = OpCompositeExtract %15 0 
                                          f32 %22 = OpCompositeExtract %15 1 
                                        f32_3 %23 = OpCompositeConstruct %21 %22 %20 
                                                      OpStore %9 %23 
                          read_only Texture2D %29 = OpLoad %28 
                                      sampler %33 = OpLoad %32 
                   read_only Texture2DSampled %36 = OpSampledImage %29 %33 
                                        f32_3 %37 = OpLoad %9 
                                          f32 %39 = OpCompositeExtract %37 2 
                                          f32 %40 = OpImageSampleDrefExplicitLod %36 %37 %39 Lod %6 
                                                      OpStore %25 %40 
                                 Uniform f32* %52 = OpAccessChain %47 %49 %50 
                                          f32 %53 = OpLoad %52 
                                          f32 %54 = OpFNegate %53 
                                          f32 %56 = OpFAdd %54 %55 
                                 Private f32* %57 = OpAccessChain %42 %50 
                                                      OpStore %57 %56 
                                          f32 %58 = OpLoad %25 
                                 Uniform f32* %59 = OpAccessChain %47 %49 %50 
                                          f32 %60 = OpLoad %59 
                                          f32 %61 = OpFMul %58 %60 
                                 Private f32* %62 = OpAccessChain %42 %50 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpFAdd %61 %63 
                                 Private f32* %65 = OpAccessChain %42 %50 
                                                      OpStore %65 %64 
                                   Input f32* %69 = OpAccessChain vs_TEXCOORD7 %17 
                                          f32 %70 = OpLoad %69 
                                         bool %71 = OpFOrdGreaterThanEqual %38 %70 
                                                      OpStore %68 %71 
                                   Input f32* %73 = OpAccessChain vs_TEXCOORD7 %17 
                                          f32 %74 = OpLoad %73 
                                         bool %75 = OpFOrdGreaterThanEqual %74 %55 
                                                      OpStore %72 %75 
                                         bool %76 = OpLoad %72 
                                         bool %77 = OpLoad %68 
                                         bool %78 = OpLogicalOr %76 %77 
                                                      OpStore %68 %78 
                                         bool %79 = OpLoad %68 
                                                      OpSelectionMerge %83 None 
                                                      OpBranchConditional %79 %82 %84 
                                              %82 = OpLabel 
                                                      OpStore %81 %55 
                                                      OpBranch %83 
                                              %84 = OpLabel 
                                 Private f32* %85 = OpAccessChain %42 %50 
                                          f32 %86 = OpLoad %85 
                                                      OpStore %81 %86 
                                                      OpBranch %83 
                                              %83 = OpLabel 
                                          f32 %87 = OpLoad %81 
                                 Private f32* %88 = OpAccessChain %42 %50 
                                                      OpStore %88 %87 
                                        f32_3 %92 = OpLoad vs_TEXCOORD2 
                                        f32_3 %93 = OpLoad vs_TEXCOORD2 
                                          f32 %94 = OpDot %92 %93 
                                 Private f32* %95 = OpAccessChain %89 %50 
                                                      OpStore %95 %94 
                                 Private f32* %96 = OpAccessChain %89 %50 
                                          f32 %97 = OpLoad %96 
                                          f32 %98 = OpExtInst %1 32 %97 
                                 Private f32* %99 = OpAccessChain %89 %50 
                                                      OpStore %99 %98 
                                       f32_4 %102 = OpLoad %89 
                                       f32_3 %103 = OpVectorShuffle %102 %102 0 0 0 
                                       f32_3 %104 = OpLoad vs_TEXCOORD2 
                                       f32_3 %105 = OpFMul %103 %104 
                                                      OpStore %101 %105 
                                       f32_3 %107 = OpLoad vs_TEXCOORD2 
                                       f32_4 %108 = OpLoad %89 
                                       f32_3 %109 = OpVectorShuffle %108 %108 0 0 0 
                                       f32_3 %110 = OpFMul %107 %109 
                              Uniform f32_4* %119 = OpAccessChain %116 %117 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_3 %122 = OpFAdd %110 %121 
                                                      OpStore %106 %122 
                                       f32_3 %123 = OpLoad %106 
                                       f32_3 %124 = OpLoad %106 
                                         f32 %125 = OpDot %123 %124 
                                Private f32* %126 = OpAccessChain %89 %50 
                                                      OpStore %126 %125 
                                Private f32* %128 = OpAccessChain %89 %50 
                                         f32 %129 = OpLoad %128 
                                         f32 %130 = OpExtInst %1 32 %129 
                                                      OpStore %127 %130 
                                         f32 %132 = OpLoad %127 
                                       f32_3 %133 = OpCompositeConstruct %132 %132 %132 
                                       f32_3 %134 = OpLoad %106 
                                       f32_3 %135 = OpFMul %133 %134 
                                       f32_4 %136 = OpLoad %131 
                                       f32_4 %137 = OpVectorShuffle %136 %135 4 5 6 3 
                                                      OpStore %131 %137 
                                       f32_2 %141 = OpLoad vs_TEXCOORD0 
                              Uniform f32_4* %146 = OpAccessChain %144 %145 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 1 
                                       f32_2 %149 = OpFMul %141 %148 
                              Uniform f32_4* %150 = OpAccessChain %144 %145 
                                       f32_4 %151 = OpLoad %150 
                                       f32_2 %152 = OpVectorShuffle %151 %151 2 3 
                                       f32_2 %153 = OpFAdd %149 %152 
                                       f32_3 %154 = OpLoad %138 
                                       f32_3 %155 = OpVectorShuffle %154 %153 3 4 2 
                                                      OpStore %138 %155 
                         read_only Texture2D %158 = OpLoad %157 
                                     sampler %160 = OpLoad %159 
                  read_only Texture2DSampled %162 = OpSampledImage %158 %160 
                                       f32_3 %163 = OpLoad %138 
                                       f32_2 %164 = OpVectorShuffle %163 %163 0 1 
                                       f32_4 %165 = OpImageSampleImplicitLod %162 %164 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                                      OpStore %156 %166 
                         read_only Texture2D %169 = OpLoad %168 
                                     sampler %171 = OpLoad %170 
                  read_only Texture2DSampled %172 = OpSampledImage %169 %171 
                                       f32_3 %173 = OpLoad %138 
                                       f32_2 %174 = OpVectorShuffle %173 %173 0 1 
                                       f32_4 %175 = OpImageSampleImplicitLod %172 %174 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                                      OpStore %167 %176 
                                       f32_3 %178 = OpLoad %167 
                                       f32_3 %181 = OpFMul %178 %180 
                                       f32_3 %184 = OpFAdd %181 %183 
                                                      OpStore %177 %184 
                         read_only Texture2D %187 = OpLoad %186 
                                     sampler %189 = OpLoad %188 
                  read_only Texture2DSampled %190 = OpSampledImage %187 %189 
                                       f32_3 %191 = OpLoad %138 
                                       f32_2 %192 = OpVectorShuffle %191 %191 0 1 
                                       f32_4 %193 = OpImageSampleImplicitLod %190 %192 
                                                      OpStore %185 %193 
                                Private f32* %195 = OpAccessChain %185 %194 
                                         f32 %196 = OpLoad %195 
                                Uniform f32* %198 = OpAccessChain %144 %197 
                                         f32 %199 = OpLoad %198 
                                         f32 %200 = OpFNegate %199 
                                         f32 %201 = OpFAdd %196 %200 
                                                      OpStore %127 %201 
                                         f32 %203 = OpLoad %127 
                                         f32 %204 = OpFNegate %203 
                                         f32 %205 = OpFAdd %204 %55 
                                Private f32* %206 = OpAccessChain %202 %50 
                                                      OpStore %206 %205 
                                Private f32* %207 = OpAccessChain %202 %50 
                                         f32 %208 = OpLoad %207 
                                Private f32* %209 = OpAccessChain %202 %50 
                                         f32 %210 = OpLoad %209 
                                         f32 %211 = OpFMul %208 %210 
                                Private f32* %212 = OpAccessChain %202 %50 
                                                      OpStore %212 %211 
                                Private f32* %213 = OpAccessChain %202 %50 
                                         f32 %214 = OpLoad %213 
                                         f32 %216 = OpExtInst %1 40 %214 %215 
                                Private f32* %217 = OpAccessChain %202 %50 
                                                      OpStore %217 %216 
                                       f32_3 %219 = OpLoad %156 
                                       f32_4 %220 = OpLoad %185 
                                       f32_3 %221 = OpVectorShuffle %220 %220 2 2 2 
                                       f32_3 %222 = OpFMul %219 %221 
                                                      OpStore %218 %222 
                                       f32_3 %224 = OpLoad %218 
                              Uniform f32_4* %226 = OpAccessChain %144 %225 
                                       f32_4 %227 = OpLoad %226 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                       f32_3 %229 = OpFMul %224 %228 
                                                      OpStore %223 %229 
                                       f32_3 %230 = OpLoad %156 
                                       f32_3 %233 = OpFAdd %230 %232 
                                                      OpStore %218 %233 
                                       f32_4 %234 = OpLoad %185 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 0 0 
                                       f32_3 %236 = OpLoad %218 
                                       f32_3 %237 = OpFMul %235 %236 
                                       f32_3 %240 = OpFAdd %237 %239 
                                                      OpStore %218 %240 
                                Private f32* %242 = OpAccessChain %185 %50 
                                         f32 %243 = OpLoad %242 
                                         f32 %245 = OpFMul %243 %244 
                                         f32 %247 = OpFAdd %245 %246 
                                Private f32* %248 = OpAccessChain %241 %50 
                                                      OpStore %248 %247 
                                       f32_3 %249 = OpLoad %156 
                                       f32_3 %250 = OpLoad %241 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 0 0 
                                       f32_3 %252 = OpFMul %249 %251 
                                                      OpStore %241 %252 
                                       f32_4 %253 = OpLoad %185 
                                       f32_3 %254 = OpVectorShuffle %253 %253 3 3 3 
                                       f32_3 %255 = OpLoad %241 
                                       f32_3 %256 = OpFMul %254 %255 
                                                      OpStore %241 %256 
                                       f32_3 %257 = OpLoad %177 
                                       f32_3 %258 = OpVectorShuffle %257 %257 1 1 1 
                                       f32_3 %260 = OpLoad vs_TEXCOORD4 
                                       f32_3 %261 = OpFMul %258 %260 
                                                      OpStore %138 %261 
                                       f32_3 %262 = OpLoad %177 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 0 0 
                                       f32_3 %265 = OpLoad vs_TEXCOORD3 
                                       f32_3 %266 = OpFMul %263 %265 
                                       f32_3 %267 = OpLoad %138 
                                       f32_3 %268 = OpFAdd %266 %267 
                                                      OpStore %138 %268 
                                       f32_3 %269 = OpLoad %177 
                                       f32_3 %270 = OpVectorShuffle %269 %269 2 2 2 
                                       f32_3 %272 = OpLoad vs_TEXCOORD1 
                                       f32_3 %273 = OpFMul %270 %272 
                                       f32_3 %274 = OpLoad %138 
                                       f32_3 %275 = OpFAdd %273 %274 
                                                      OpStore %138 %275 
                                       f32_3 %277 = OpLoad %138 
                                       f32_3 %278 = OpLoad %138 
                                         f32 %279 = OpDot %277 %278 
                                                      OpStore %276 %279 
                                         f32 %280 = OpLoad %276 
                                         f32 %281 = OpExtInst %1 32 %280 
                                                      OpStore %276 %281 
                                         f32 %283 = OpLoad %276 
                                       f32_3 %284 = OpCompositeConstruct %283 %283 %283 
                                       f32_3 %285 = OpLoad %138 
                                       f32_3 %286 = OpFMul %284 %285 
                                       f32_4 %287 = OpLoad %282 
                                       f32_4 %288 = OpVectorShuffle %287 %286 4 5 6 3 
                                                      OpStore %282 %288 
                                       f32_4 %289 = OpLoad %282 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 1 2 
                              Uniform f32_4* %291 = OpAccessChain %116 %117 
                                       f32_4 %292 = OpLoad %291 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
                                         f32 %294 = OpDot %290 %293 
                                                      OpStore %276 %294 
                                         f32 %295 = OpLoad %276 
                                         f32 %297 = OpExtInst %1 40 %295 %296 
                                Private f32* %298 = OpAccessChain %138 %50 
                                                      OpStore %298 %297 
                                       f32_4 %299 = OpLoad %282 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
                                       f32_3 %301 = OpLoad %101 
                                         f32 %302 = OpDot %300 %301 
                                Private f32* %303 = OpAccessChain %89 %194 
                                                      OpStore %303 %302 
                              Uniform f32_4* %304 = OpAccessChain %116 %117 
                                       f32_4 %305 = OpLoad %304 
                                       f32_3 %306 = OpVectorShuffle %305 %305 0 1 2 
                                       f32_4 %307 = OpLoad %131 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
                                         f32 %309 = OpDot %306 %308 
                                Private f32* %310 = OpAccessChain %89 %17 
                                                      OpStore %310 %309 
                                       f32_4 %311 = OpLoad %89 
                                       f32_3 %312 = OpVectorShuffle %311 %311 0 1 2 
                                       f32_3 %315 = OpExtInst %1 40 %312 %314 
                                       f32_4 %316 = OpLoad %89 
                                       f32_4 %317 = OpVectorShuffle %316 %315 4 5 6 3 
                                                      OpStore %89 %317 
                                Private f32* %319 = OpAccessChain %202 %50 
                                         f32 %320 = OpLoad %319 
                                Private f32* %321 = OpAccessChain %202 %50 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpFAdd %320 %322 
                                                      OpStore %318 %323 
                                Private f32* %324 = OpAccessChain %89 %17 
                                         f32 %325 = OpLoad %324 
                                Private f32* %326 = OpAccessChain %89 %17 
                                         f32 %327 = OpLoad %326 
                                         f32 %328 = OpFMul %325 %327 
                                Private f32* %329 = OpAccessChain %131 %50 
                                                      OpStore %329 %328 
                                Private f32* %330 = OpAccessChain %131 %50 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpLoad %318 
                                         f32 %333 = OpFMul %331 %332 
                                         f32 %335 = OpFAdd %333 %334 
                                                      OpStore %318 %335 
                                         f32 %336 = OpLoad %318 
                                         f32 %337 = OpFAdd %336 %182 
                                Private f32* %338 = OpAccessChain %177 %50 
                                                      OpStore %338 %337 
                                Private f32* %339 = OpAccessChain %89 %194 
                                         f32 %340 = OpLoad %339 
                                         f32 %341 = OpFNegate %340 
                                         f32 %342 = OpFAdd %341 %55 
                                Private f32* %343 = OpAccessChain %101 %50 
                                                      OpStore %343 %342 
                                Private f32* %344 = OpAccessChain %101 %50 
                                         f32 %345 = OpLoad %344 
                                         f32 %346 = OpExtInst %1 40 %345 %38 
                                Private f32* %347 = OpAccessChain %101 %50 
                                                      OpStore %347 %346 
                                Private f32* %348 = OpAccessChain %101 %50 
                                         f32 %349 = OpLoad %348 
                                Private f32* %350 = OpAccessChain %101 %50 
                                         f32 %351 = OpLoad %350 
                                         f32 %352 = OpFMul %349 %351 
                                                      OpStore %318 %352 
                                         f32 %353 = OpLoad %318 
                                         f32 %354 = OpLoad %318 
                                         f32 %355 = OpFMul %353 %354 
                                                      OpStore %318 %355 
                                Private f32* %356 = OpAccessChain %101 %50 
                                         f32 %357 = OpLoad %356 
                                         f32 %358 = OpLoad %318 
                                         f32 %359 = OpFMul %357 %358 
                                Private f32* %360 = OpAccessChain %101 %50 
                                                      OpStore %360 %359 
                                Private f32* %361 = OpAccessChain %177 %50 
                                         f32 %362 = OpLoad %361 
                                Private f32* %363 = OpAccessChain %101 %50 
                                         f32 %364 = OpLoad %363 
                                         f32 %365 = OpFMul %362 %364 
                                         f32 %366 = OpFAdd %365 %55 
                                Private f32* %367 = OpAccessChain %101 %50 
                                                      OpStore %367 %366 
                                Private f32* %368 = OpAccessChain %138 %50 
                                         f32 %369 = OpLoad %368 
                                         f32 %370 = OpFNegate %369 
                                         f32 %371 = OpFAdd %370 %55 
                                                      OpStore %318 %371 
                                         f32 %372 = OpLoad %318 
                                         f32 %373 = OpExtInst %1 40 %372 %38 
                                                      OpStore %318 %373 
                                         f32 %374 = OpLoad %318 
                                         f32 %375 = OpLoad %318 
                                         f32 %376 = OpFMul %374 %375 
                                Private f32* %377 = OpAccessChain %131 %50 
                                                      OpStore %377 %376 
                                Private f32* %378 = OpAccessChain %131 %50 
                                         f32 %379 = OpLoad %378 
                                Private f32* %380 = OpAccessChain %131 %50 
                                         f32 %381 = OpLoad %380 
                                         f32 %382 = OpFMul %379 %381 
                                Private f32* %383 = OpAccessChain %131 %50 
                                                      OpStore %383 %382 
                                         f32 %384 = OpLoad %318 
                                Private f32* %385 = OpAccessChain %131 %50 
                                         f32 %386 = OpLoad %385 
                                         f32 %387 = OpFMul %384 %386 
                                                      OpStore %318 %387 
                                Private f32* %388 = OpAccessChain %177 %50 
                                         f32 %389 = OpLoad %388 
                                         f32 %390 = OpLoad %318 
                                         f32 %391 = OpFMul %389 %390 
                                         f32 %392 = OpFAdd %391 %55 
                                                      OpStore %318 %392 
                                Private f32* %394 = OpAccessChain %101 %50 
                                         f32 %395 = OpLoad %394 
                                         f32 %396 = OpLoad %318 
                                         f32 %397 = OpFMul %395 %396 
                                                      OpStore %393 %397 
                                         f32 %398 = OpLoad %393 
                                         f32 %399 = OpExtInst %1 37 %398 %55 
                                                      OpStore %393 %399 
                                         f32 %400 = OpLoad %276 
                                         f32 %401 = OpLoad %393 
                                         f32 %402 = OpFMul %400 %401 
                                                      OpStore %393 %402 
                                         f32 %404 = OpLoad %393 
                                         f32 %405 = OpFMul %404 %334 
                                         f32 %406 = OpFAdd %405 %334 
                                                      OpStore %403 %406 
                                         f32 %407 = OpLoad %403 
                                Private f32* %408 = OpAccessChain %131 %50 
                                                      OpStore %408 %407 
                                Uniform f32* %409 = OpAccessChain %144 %49 
                                         f32 %410 = OpLoad %409 
                                Uniform f32* %411 = OpAccessChain %144 %49 
                                         f32 %412 = OpLoad %411 
                                       f32_2 %413 = OpCompositeConstruct %410 %412 
                                         f32 %414 = OpCompositeExtract %413 0 
                                         f32 %415 = OpCompositeExtract %413 1 
                                       f32_2 %416 = OpCompositeConstruct %414 %415 
                                       f32_4 %417 = OpLoad %131 
                                       f32_4 %418 = OpVectorShuffle %417 %416 0 4 2 5 
                                                      OpStore %131 %418 
                         read_only Texture2D %421 = OpLoad %420 
                                     sampler %423 = OpLoad %422 
                  read_only Texture2DSampled %424 = OpSampledImage %421 %423 
                                       f32_4 %425 = OpLoad %131 
                                       f32_2 %426 = OpVectorShuffle %425 %425 0 1 
                                       f32_4 %427 = OpImageSampleImplicitLod %424 %426 
                                       f32_3 %428 = OpVectorShuffle %427 %427 0 1 2 
                                                      OpStore %419 %428 
                                       f32_3 %430 = OpLoad %419 
                                Uniform f32* %432 = OpAccessChain %144 %431 
                                         f32 %433 = OpLoad %432 
                                Uniform f32* %434 = OpAccessChain %144 %431 
                                         f32 %435 = OpLoad %434 
                                Uniform f32* %436 = OpAccessChain %144 %431 
                                         f32 %437 = OpLoad %436 
                                       f32_3 %438 = OpCompositeConstruct %433 %435 %437 
                                         f32 %439 = OpCompositeExtract %438 0 
                                         f32 %440 = OpCompositeExtract %438 1 
                                         f32 %441 = OpCompositeExtract %438 2 
                                       f32_3 %442 = OpCompositeConstruct %439 %440 %441 
                                       f32_3 %443 = OpFMul %430 %442 
                                                      OpStore %429 %443 
                                Private f32* %444 = OpAccessChain %42 %50 
                                         f32 %445 = OpLoad %444 
                                Private f32* %446 = OpAccessChain %131 %50 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpExtInst %1 37 %445 %447 
                                Private f32* %449 = OpAccessChain %101 %50 
                                                      OpStore %449 %448 
                                       f32_3 %451 = OpLoad %241 
                                       f32_3 %452 = OpLoad %429 
                                       f32_3 %453 = OpFMul %451 %452 
                                                      OpStore %450 %453 
                                       f32_3 %454 = OpLoad %450 
                              Uniform f32_4* %455 = OpAccessChain %116 %145 
                                       f32_4 %456 = OpLoad %455 
                                       f32_3 %457 = OpVectorShuffle %456 %456 0 1 2 
                                       f32_3 %458 = OpFMul %454 %457 
                                                      OpStore %429 %458 
                                       f32_3 %459 = OpLoad %429 
                                       f32_3 %460 = OpLoad %101 
                                       f32_3 %461 = OpVectorShuffle %460 %460 0 0 0 
                                       f32_3 %462 = OpFMul %459 %461 
                                       f32_3 %463 = OpLoad %223 
                                       f32_3 %464 = OpFAdd %462 %463 
                                                      OpStore %429 %464 
                                Uniform f32* %465 = OpAccessChain %116 %225 %50 
                                         f32 %466 = OpLoad %465 
                                Uniform f32* %473 = OpAccessChain %472 %431 %194 
                                         f32 %474 = OpLoad %473 
                                         f32 %475 = OpExtInst %1 37 %466 %474 
                                                      OpStore %393 %475 
                                         f32 %478 = OpLoad %393 
                                         i32 %479 = OpConvertFToS %478 
                                                      OpStore %477 %479 
                                       f32_3 %480 = OpLoad %429 
                                                      OpStore %450 %480 
                                                      OpStore %482 %50 
                                                      OpBranch %483 
                                             %483 = OpLabel 
                                                      OpLoopMerge %485 %486 None 
                                                      OpBranch %487 
                                             %487 = OpLabel 
                                         u32 %488 = OpLoad %482 
                                         i32 %489 = OpLoad %477 
                                         u32 %490 = OpBitcast %489 
                                        bool %491 = OpULessThan %488 %490 
                                                      OpBranchConditional %491 %484 %485 
                                             %484 = OpLabel 
                                         u32 %493 = OpLoad %482 
                                         u32 %495 = OpBitwiseAnd %493 %494 
                                         i32 %496 = OpBitcast %495 
                                                      OpStore %492 %496 
                                         u32 %499 = OpLoad %482 
                                         u32 %500 = OpShiftRightLogical %499 %17 
                                                      OpStore %498 %500 
                                         u32 %502 = OpLoad %498 
                                         i32 %503 = OpBitcast %502 
                              Uniform f32_4* %504 = OpAccessChain %472 %501 %503 
                                       f32_4 %505 = OpLoad %504 
                                         i32 %514 = OpLoad %492 
                                                      OpStore %516 %513 
                             Function u32_4* %518 = OpAccessChain %516 %514 
                                       u32_4 %519 = OpLoad %518 
                                       f32_4 %520 = OpBitcast %519 
                                         f32 %521 = OpDot %505 %520 
                                                      OpStore %393 %521 
                                         f32 %522 = OpLoad %393 
                                         i32 %523 = OpConvertFToS %522 
                                                      OpStore %492 %523 
                                       f32_3 %526 = OpLoad vs_TEXCOORD5 
                                       f32_3 %527 = OpFNegate %526 
                                         i32 %537 = OpLoad %492 
                              Uniform f32_4* %538 = OpAccessChain %536 %117 %537 
                                       f32_4 %539 = OpLoad %538 
                                       f32_3 %540 = OpVectorShuffle %539 %539 3 3 3 
                                       f32_3 %541 = OpFMul %527 %540 
                                         i32 %542 = OpLoad %492 
                              Uniform f32_4* %543 = OpAccessChain %536 %117 %542 
                                       f32_4 %544 = OpLoad %543 
                                       f32_3 %545 = OpVectorShuffle %544 %544 0 1 2 
                                       f32_3 %546 = OpFAdd %541 %545 
                                                      OpStore %524 %546 
                                       f32_3 %548 = OpLoad %524 
                                       f32_3 %549 = OpLoad %524 
                                         f32 %550 = OpDot %548 %549 
                                                      OpStore %547 %550 
                                         f32 %551 = OpLoad %547 
                                         f32 %553 = OpExtInst %1 40 %551 %552 
                                                      OpStore %547 %553 
                                         f32 %555 = OpLoad %547 
                                         f32 %556 = OpExtInst %1 32 %555 
                                                      OpStore %554 %556 
                                         f32 %557 = OpLoad %554 
                                       f32_3 %558 = OpCompositeConstruct %557 %557 %557 
                                       f32_3 %559 = OpLoad %524 
                                       f32_3 %560 = OpFMul %558 %559 
                                                      OpStore %524 %560 
                                         f32 %561 = OpLoad %547 
                                         f32 %562 = OpFDiv %55 %561 
                                                      OpStore %554 %562 
                                         f32 %563 = OpLoad %547 
                                         i32 %564 = OpLoad %492 
                                Uniform f32* %565 = OpAccessChain %536 %225 %564 %50 
                                         f32 %566 = OpLoad %565 
                                         f32 %567 = OpFMul %563 %566 
                                         i32 %568 = OpLoad %492 
                                Uniform f32* %569 = OpAccessChain %536 %225 %568 %194 
                                         f32 %570 = OpLoad %569 
                                         f32 %571 = OpFAdd %567 %570 
                                                      OpStore %547 %571 
                                         f32 %572 = OpLoad %547 
                                         f32 %573 = OpExtInst %1 43 %572 %38 %55 
                                                      OpStore %547 %573 
                                         f32 %574 = OpLoad %547 
                                         f32 %575 = OpLoad %554 
                                         f32 %576 = OpFMul %574 %575 
                                                      OpStore %547 %576 
                                         i32 %577 = OpLoad %492 
                              Uniform f32_4* %578 = OpAccessChain %536 %197 %577 
                                       f32_4 %579 = OpLoad %578 
                                       f32_3 %580 = OpVectorShuffle %579 %579 0 1 2 
                                       f32_3 %581 = OpLoad %524 
                                         f32 %582 = OpDot %580 %581 
                                                      OpStore %393 %582 
                                         f32 %583 = OpLoad %393 
                                         i32 %584 = OpLoad %492 
                                Uniform f32* %585 = OpAccessChain %536 %225 %584 %17 
                                         f32 %586 = OpLoad %585 
                                         f32 %587 = OpFMul %583 %586 
                                         i32 %588 = OpLoad %492 
                                Uniform f32* %589 = OpAccessChain %536 %225 %588 %494 
                                         f32 %590 = OpLoad %589 
                                         f32 %591 = OpFAdd %587 %590 
                                                      OpStore %393 %591 
                                         f32 %592 = OpLoad %393 
                                         f32 %593 = OpExtInst %1 43 %592 %38 %55 
                                                      OpStore %393 %593 
                                         f32 %594 = OpLoad %393 
                                         f32 %595 = OpLoad %393 
                                         f32 %596 = OpFMul %594 %595 
                                                      OpStore %393 %596 
                                         f32 %597 = OpLoad %547 
                                         f32 %598 = OpLoad %393 
                                         f32 %599 = OpFMul %597 %598 
                                                      OpStore %547 %599 
                                       f32_4 %600 = OpLoad %282 
                                       f32_3 %601 = OpVectorShuffle %600 %600 0 1 2 
                                       f32_3 %602 = OpLoad %524 
                                         f32 %603 = OpDot %601 %602 
                                                      OpStore %554 %603 
                                         f32 %604 = OpLoad %554 
                                         f32 %605 = OpExtInst %1 40 %604 %296 
                                Private f32* %606 = OpAccessChain %131 %17 
                                                      OpStore %606 %605 
                         read_only Texture2D %608 = OpLoad %420 
                                     sampler %609 = OpLoad %422 
                  read_only Texture2DSampled %610 = OpSampledImage %608 %609 
                                       f32_4 %611 = OpLoad %131 
                                       f32_2 %612 = OpVectorShuffle %611 %611 2 3 
                                       f32_4 %613 = OpImageSampleImplicitLod %610 %612 
                                       f32_3 %614 = OpVectorShuffle %613 %613 0 1 2 
                                                      OpStore %607 %614 
                                       f32_3 %615 = OpLoad %607 
                                Uniform f32* %616 = OpAccessChain %144 %431 
                                         f32 %617 = OpLoad %616 
                                Uniform f32* %618 = OpAccessChain %144 %431 
                                         f32 %619 = OpLoad %618 
                                Uniform f32* %620 = OpAccessChain %144 %431 
                                         f32 %621 = OpLoad %620 
                                       f32_3 %622 = OpCompositeConstruct %617 %619 %621 
                                         f32 %623 = OpCompositeExtract %622 0 
                                         f32 %624 = OpCompositeExtract %622 1 
                                         f32 %625 = OpCompositeExtract %622 2 
                                       f32_3 %626 = OpCompositeConstruct %623 %624 %625 
                                       f32_3 %627 = OpFMul %615 %626 
                                                      OpStore %524 %627 
                                       f32_3 %629 = OpLoad %241 
                                       f32_3 %630 = OpLoad %524 
                                       f32_3 %631 = OpFMul %629 %630 
                                                      OpStore %628 %631 
                                       f32_3 %632 = OpLoad %628 
                                         i32 %633 = OpLoad %492 
                              Uniform f32_4* %634 = OpAccessChain %536 %145 %633 
                                       f32_4 %635 = OpLoad %634 
                                       f32_3 %636 = OpVectorShuffle %635 %635 0 1 2 
                                       f32_3 %637 = OpFMul %632 %636 
                                                      OpStore %628 %637 
                                       f32_3 %638 = OpLoad %628 
                                         f32 %639 = OpLoad %547 
                                       f32_3 %640 = OpCompositeConstruct %639 %639 %639 
                                       f32_3 %641 = OpFMul %638 %640 
                                       f32_3 %642 = OpLoad %223 
                                       f32_3 %643 = OpFAdd %641 %642 
                                                      OpStore %628 %643 
                                       f32_3 %644 = OpLoad %450 
                                       f32_3 %645 = OpLoad %628 
                                       f32_3 %646 = OpFAdd %644 %645 
                                                      OpStore %450 %646 
                                                      OpBranch %486 
                                             %486 = OpLabel 
                                         u32 %647 = OpLoad %482 
                                         u32 %648 = OpIAdd %647 %145 
                                                      OpStore %482 %648 
                                                      OpBranch %483 
                                             %485 = OpLabel 
                                Private f32* %649 = OpAccessChain %89 %50 
                                         f32 %650 = OpLoad %649 
                                         f32 %651 = OpExtInst %1 32 %650 
                                Private f32* %652 = OpAccessChain %89 %50 
                                                      OpStore %652 %651 
                                       f32_4 %653 = OpLoad %89 
                                       f32_3 %654 = OpVectorShuffle %653 %653 0 0 0 
                                       f32_3 %655 = OpLoad %106 
                                       f32_3 %656 = OpFMul %654 %655 
                                       f32_4 %657 = OpLoad %89 
                                       f32_4 %658 = OpVectorShuffle %657 %656 4 5 2 6 
                                                      OpStore %89 %658 
                                       f32_4 %659 = OpLoad %282 
                                       f32_3 %660 = OpVectorShuffle %659 %659 0 1 2 
                                       f32_4 %661 = OpLoad %89 
                                       f32_3 %662 = OpVectorShuffle %661 %661 0 1 3 
                                         f32 %663 = OpDot %660 %662 
                                Private f32* %664 = OpAccessChain %106 %50 
                                                      OpStore %664 %663 
                                Private f32* %665 = OpAccessChain %106 %50 
                                         f32 %666 = OpLoad %665 
                                         f32 %667 = OpExtInst %1 43 %666 %38 %55 
                                Private f32* %668 = OpAccessChain %106 %50 
                                                      OpStore %668 %667 
                              Uniform f32_4* %669 = OpAccessChain %116 %117 
                                       f32_4 %670 = OpLoad %669 
                                       f32_3 %671 = OpVectorShuffle %670 %670 0 1 2 
                                       f32_4 %672 = OpLoad %89 
                                       f32_3 %673 = OpVectorShuffle %672 %672 0 1 3 
                                         f32 %674 = OpDot %671 %673 
                                Private f32* %675 = OpAccessChain %89 %50 
                                                      OpStore %675 %674 
                                Private f32* %676 = OpAccessChain %89 %50 
                                         f32 %677 = OpLoad %676 
                                         f32 %678 = OpExtInst %1 43 %677 %38 %55 
                                Private f32* %679 = OpAccessChain %89 %50 
                                                      OpStore %679 %678 
                                Private f32* %680 = OpAccessChain %106 %50 
                                         f32 %681 = OpLoad %680 
                                Private f32* %682 = OpAccessChain %106 %50 
                                         f32 %683 = OpLoad %682 
                                         f32 %684 = OpFMul %681 %683 
                                Private f32* %685 = OpAccessChain %101 %50 
                                                      OpStore %685 %684 
                                Private f32* %686 = OpAccessChain %202 %50 
                                         f32 %687 = OpLoad %686 
                                Private f32* %688 = OpAccessChain %202 %50 
                                         f32 %689 = OpLoad %688 
                                         f32 %690 = OpFMul %687 %689 
                                                      OpStore %393 %690 
                                Private f32* %692 = OpAccessChain %202 %50 
                                         f32 %693 = OpLoad %692 
                                Private f32* %694 = OpAccessChain %202 %50 
                                         f32 %695 = OpLoad %694 
                                         f32 %696 = OpFMul %693 %695 
                                         f32 %697 = OpFAdd %696 %182 
                                                      OpStore %691 %697 
                                Private f32* %698 = OpAccessChain %101 %50 
                                         f32 %699 = OpLoad %698 
                                         f32 %700 = OpLoad %691 
                                         f32 %701 = OpFMul %699 %700 
                                         f32 %703 = OpFAdd %701 %702 
                                Private f32* %704 = OpAccessChain %101 %50 
                                                      OpStore %704 %703 
                                Private f32* %705 = OpAccessChain %89 %50 
                                         f32 %706 = OpLoad %705 
                                Private f32* %707 = OpAccessChain %89 %50 
                                         f32 %708 = OpLoad %707 
                                         f32 %709 = OpFMul %706 %708 
                                                      OpStore %691 %709 
                                Private f32* %710 = OpAccessChain %101 %50 
                                         f32 %711 = OpLoad %710 
                                Private f32* %712 = OpAccessChain %101 %50 
                                         f32 %713 = OpLoad %712 
                                         f32 %714 = OpFMul %711 %713 
                                Private f32* %715 = OpAccessChain %89 %50 
                                                      OpStore %715 %714 
                                         f32 %716 = OpLoad %691 
                                         f32 %718 = OpExtInst %1 40 %716 %717 
                                Private f32* %719 = OpAccessChain %101 %50 
                                                      OpStore %719 %718 
                                Private f32* %720 = OpAccessChain %101 %50 
                                         f32 %721 = OpLoad %720 
                                Private f32* %722 = OpAccessChain %89 %50 
                                         f32 %723 = OpLoad %722 
                                         f32 %724 = OpFMul %721 %723 
                                Private f32* %725 = OpAccessChain %89 %50 
                                                      OpStore %725 %724 
                                Private f32* %726 = OpAccessChain %202 %50 
                                         f32 %727 = OpLoad %726 
                                         f32 %729 = OpFMul %727 %728 
                                         f32 %730 = OpFAdd %729 %179 
                                                      OpStore %691 %730 
                                Private f32* %731 = OpAccessChain %89 %50 
                                         f32 %732 = OpLoad %731 
                                         f32 %733 = OpLoad %691 
                                         f32 %734 = OpFMul %732 %733 
                                Private f32* %735 = OpAccessChain %89 %50 
                                                      OpStore %735 %734 
                                         f32 %736 = OpLoad %393 
                                Private f32* %737 = OpAccessChain %89 %50 
                                         f32 %738 = OpLoad %737 
                                         f32 %739 = OpFDiv %736 %738 
                                Private f32* %740 = OpAccessChain %89 %50 
                                                      OpStore %740 %739 
                                       f32_3 %741 = OpLoad %218 
                                       f32_4 %742 = OpLoad %89 
                                       f32_3 %743 = OpVectorShuffle %742 %742 0 0 0 
                                       f32_3 %744 = OpFMul %741 %743 
                                       f32_4 %745 = OpLoad %89 
                                       f32_4 %746 = OpVectorShuffle %745 %744 4 5 2 6 
                                                      OpStore %89 %746 
                                       f32_4 %747 = OpLoad %89 
                                       f32_3 %748 = OpVectorShuffle %747 %747 0 1 3 
                                       f32_3 %751 = OpFMul %748 %750 
                                                      OpStore %628 %751 
                                       f32_3 %752 = OpLoad %628 
                              Uniform f32_4* %753 = OpAccessChain %116 %145 
                                       f32_4 %754 = OpLoad %753 
                                       f32_3 %755 = OpVectorShuffle %754 %754 0 1 2 
                                       f32_3 %756 = OpFMul %752 %755 
                                                      OpStore %106 %756 
                                       f32_3 %757 = OpLoad %106 
                                       f32_3 %758 = OpLoad %138 
                                       f32_3 %759 = OpVectorShuffle %758 %758 0 0 0 
                                       f32_3 %760 = OpFMul %757 %759 
                                       f32_3 %761 = OpLoad %450 
                                       f32_3 %762 = OpFAdd %760 %761 
                                                      OpStore %450 %762 
                                Private f32* %763 = OpAccessChain %282 %494 
                                                      OpStore %763 %55 
                              Uniform f32_4* %764 = OpAccessChain %472 %49 
                                       f32_4 %765 = OpLoad %764 
                                       f32_4 %766 = OpLoad %282 
                                         f32 %767 = OpDot %765 %766 
                                Private f32* %768 = OpAccessChain %628 %50 
                                                      OpStore %768 %767 
                              Uniform f32_4* %770 = OpAccessChain %472 %769 
                                       f32_4 %771 = OpLoad %770 
                                       f32_4 %772 = OpLoad %282 
                                         f32 %773 = OpDot %771 %772 
                                Private f32* %774 = OpAccessChain %628 %194 
                                                      OpStore %774 %773 
                              Uniform f32_4* %776 = OpAccessChain %472 %775 
                                       f32_4 %777 = OpLoad %776 
                                       f32_4 %778 = OpLoad %282 
                                         f32 %779 = OpDot %777 %778 
                                Private f32* %780 = OpAccessChain %628 %17 
                                                      OpStore %780 %779 
                                       f32_4 %781 = OpLoad %282 
                                       f32_4 %782 = OpVectorShuffle %781 %781 1 2 2 0 
                                       f32_4 %783 = OpLoad %282 
                                       f32_4 %784 = OpVectorShuffle %783 %783 0 1 2 2 
                                       f32_4 %785 = OpFMul %782 %784 
                                                      OpStore %42 %785 
                              Uniform f32_4* %788 = OpAccessChain %472 %787 
                                       f32_4 %789 = OpLoad %788 
                                       f32_4 %790 = OpLoad %42 
                                         f32 %791 = OpDot %789 %790 
                                Private f32* %792 = OpAccessChain %786 %50 
                                                      OpStore %792 %791 
                              Uniform f32_4* %794 = OpAccessChain %472 %793 
                                       f32_4 %795 = OpLoad %794 
                                       f32_4 %796 = OpLoad %42 
                                         f32 %797 = OpDot %795 %796 
                                Private f32* %798 = OpAccessChain %786 %194 
                                                      OpStore %798 %797 
                              Uniform f32_4* %800 = OpAccessChain %472 %799 
                                       f32_4 %801 = OpLoad %800 
                                       f32_4 %802 = OpLoad %42 
                                         f32 %803 = OpDot %801 %802 
                                Private f32* %804 = OpAccessChain %786 %17 
                                                      OpStore %804 %803 
                                Private f32* %805 = OpAccessChain %282 %194 
                                         f32 %806 = OpLoad %805 
                                Private f32* %807 = OpAccessChain %282 %194 
                                         f32 %808 = OpLoad %807 
                                         f32 %809 = OpFMul %806 %808 
                                                      OpStore %393 %809 
                                Private f32* %810 = OpAccessChain %282 %50 
                                         f32 %811 = OpLoad %810 
                                Private f32* %812 = OpAccessChain %282 %50 
                                         f32 %813 = OpLoad %812 
                                         f32 %814 = OpFMul %811 %813 
                                         f32 %815 = OpLoad %393 
                                         f32 %816 = OpFNegate %815 
                                         f32 %817 = OpFAdd %814 %816 
                                                      OpStore %393 %817 
                              Uniform f32_4* %819 = OpAccessChain %472 %818 
                                       f32_4 %820 = OpLoad %819 
                                       f32_3 %821 = OpVectorShuffle %820 %820 0 1 2 
                                         f32 %822 = OpLoad %393 
                                       f32_3 %823 = OpCompositeConstruct %822 %822 %822 
                                       f32_3 %824 = OpFMul %821 %823 
                                       f32_3 %825 = OpLoad %786 
                                       f32_3 %826 = OpFAdd %824 %825 
                                                      OpStore %786 %826 
                                       f32_3 %827 = OpLoad %628 
                                       f32_3 %828 = OpLoad %786 
                                       f32_3 %829 = OpFAdd %827 %828 
                                                      OpStore %628 %829 
                                       f32_3 %830 = OpLoad %628 
                                       f32_3 %832 = OpExtInst %1 40 %830 %831 
                                                      OpStore %628 %832 
                                       f32_3 %833 = OpLoad %241 
                                       f32_3 %834 = OpLoad %628 
                                       f32_3 %835 = OpFMul %833 %834 
                                                      OpStore %241 %835 
                                Uniform f32* %836 = OpAccessChain %116 %197 %117 %50 
                                         f32 %837 = OpLoad %836 
                                Private f32* %838 = OpAccessChain %106 %50 
                                                      OpStore %838 %837 
                                Uniform f32* %839 = OpAccessChain %116 %197 %145 %50 
                                         f32 %840 = OpLoad %839 
                                Private f32* %841 = OpAccessChain %106 %194 
                                                      OpStore %841 %840 
                                Uniform f32* %842 = OpAccessChain %116 %197 %225 %50 
                                         f32 %843 = OpLoad %842 
                                Private f32* %844 = OpAccessChain %106 %17 
                                                      OpStore %844 %843 
                                       f32_3 %845 = OpLoad %106 
                                       f32_4 %846 = OpLoad %282 
                                       f32_3 %847 = OpVectorShuffle %846 %846 0 1 2 
                                         f32 %848 = OpDot %845 %847 
                                Private f32* %849 = OpAccessChain %628 %50 
                                                      OpStore %849 %848 
                                Uniform f32* %850 = OpAccessChain %116 %197 %117 %194 
                                         f32 %851 = OpLoad %850 
                                Private f32* %852 = OpAccessChain %106 %50 
                                                      OpStore %852 %851 
                                Uniform f32* %853 = OpAccessChain %116 %197 %145 %194 
                                         f32 %854 = OpLoad %853 
                                Private f32* %855 = OpAccessChain %106 %194 
                                                      OpStore %855 %854 
                                Uniform f32* %856 = OpAccessChain %116 %197 %225 %194 
                                         f32 %857 = OpLoad %856 
                                Private f32* %858 = OpAccessChain %106 %17 
                                                      OpStore %858 %857 
                                       f32_3 %859 = OpLoad %106 
                                       f32_4 %860 = OpLoad %282 
                                       f32_3 %861 = OpVectorShuffle %860 %860 0 1 2 
                                         f32 %862 = OpDot %859 %861 
                                Private f32* %863 = OpAccessChain %628 %194 
                                                      OpStore %863 %862 
                                       f32_3 %864 = OpLoad %628 
                                       f32_2 %865 = OpVectorShuffle %864 %864 0 1 
                                       f32_2 %867 = OpFMul %865 %866 
                                       f32_2 %868 = OpFAdd %867 %866 
                                       f32_3 %869 = OpLoad %628 
                                       f32_3 %870 = OpVectorShuffle %869 %868 3 4 2 
                                                      OpStore %628 %870 
                                Private f32* %871 = OpAccessChain %202 %50 
                                         f32 %872 = OpLoad %871 
                                         f32 %873 = OpFNegate %872 
                                         f32 %875 = OpFMul %873 %874 
                                         f32 %877 = OpFAdd %875 %876 
                                                      OpStore %393 %877 
                                Private f32* %878 = OpAccessChain %202 %50 
                                         f32 %879 = OpLoad %878 
                                         f32 %880 = OpLoad %393 
                                         f32 %881 = OpFMul %879 %880 
                                Private f32* %882 = OpAccessChain %202 %50 
                                                      OpStore %882 %881 
                                Private f32* %883 = OpAccessChain %202 %50 
                                         f32 %884 = OpLoad %883 
                                         f32 %886 = OpFMul %884 %885 
                                                      OpStore %393 %886 
                         read_only Texture2D %889 = OpLoad %888 
                                     sampler %891 = OpLoad %890 
                  read_only Texture2DSampled %892 = OpSampledImage %889 %891 
                                       f32_3 %893 = OpLoad %628 
                                       f32_2 %894 = OpVectorShuffle %893 %893 0 1 
                                         f32 %895 = OpLoad %393 
                                       f32_4 %896 = OpImageSampleExplicitLod %892 %894 Lod %10 
                                       f32_3 %897 = OpVectorShuffle %896 %896 0 1 2 
                                                      OpStore %887 %897 
                                Private f32* %898 = OpAccessChain %202 %50 
                                         f32 %899 = OpLoad %898 
                                Private f32* %900 = OpAccessChain %202 %50 
                                         f32 %901 = OpLoad %900 
                                         f32 %902 = OpFMul %899 %901 
                                         f32 %903 = OpFAdd %902 %55 
                                Private f32* %904 = OpAccessChain %131 %50 
                                                      OpStore %904 %903 
                                Private f32* %905 = OpAccessChain %131 %50 
                                         f32 %906 = OpLoad %905 
                                         f32 %907 = OpFDiv %55 %906 
                                Private f32* %908 = OpAccessChain %131 %50 
                                                      OpStore %908 %907 
                                Private f32* %909 = OpAccessChain %89 %194 
                                         f32 %910 = OpLoad %909 
                                Private f32* %911 = OpAccessChain %89 %50 
                                         f32 %912 = OpLoad %911 
                                         f32 %913 = OpExtInst %1 40 %910 %912 
                                Private f32* %914 = OpAccessChain %89 %50 
                                                      OpStore %914 %913 
                                Private f32* %915 = OpAccessChain %89 %494 
                                         f32 %916 = OpLoad %915 
                                Private f32* %917 = OpAccessChain %89 %50 
                                         f32 %918 = OpLoad %917 
                                         f32 %919 = OpExtInst %1 40 %916 %918 
                                Private f32* %920 = OpAccessChain %89 %50 
                                                      OpStore %920 %919 
                                         f32 %921 = OpLoad %127 
                                Private f32* %922 = OpAccessChain %89 %50 
                                         f32 %923 = OpLoad %922 
                                         f32 %924 = OpFAdd %921 %923 
                                Private f32* %925 = OpAccessChain %89 %50 
                                                      OpStore %925 %924 
                                Private f32* %926 = OpAccessChain %89 %50 
                                         f32 %927 = OpLoad %926 
                                         f32 %928 = OpExtInst %1 43 %927 %38 %55 
                                Private f32* %929 = OpAccessChain %89 %50 
                                                      OpStore %929 %928 
                                Private f32* %930 = OpAccessChain %89 %17 
                                         f32 %931 = OpLoad %930 
                                         f32 %932 = OpFNegate %931 
                                         f32 %933 = OpFAdd %932 %55 
                                Private f32* %934 = OpAccessChain %101 %50 
                                                      OpStore %934 %933 
                                Private f32* %935 = OpAccessChain %101 %50 
                                         f32 %936 = OpLoad %935 
                                         f32 %937 = OpExtInst %1 40 %936 %38 
                                Private f32* %938 = OpAccessChain %101 %50 
                                                      OpStore %938 %937 
                                Private f32* %940 = OpAccessChain %101 %50 
                                         f32 %941 = OpLoad %940 
                                Private f32* %942 = OpAccessChain %101 %50 
                                         f32 %943 = OpLoad %942 
                                         f32 %944 = OpFMul %941 %943 
                                                      OpStore %939 %944 
                                         f32 %945 = OpLoad %939 
                                         f32 %946 = OpLoad %939 
                                         f32 %947 = OpFMul %945 %946 
                                                      OpStore %939 %947 
                                Private f32* %948 = OpAccessChain %101 %50 
                                         f32 %949 = OpLoad %948 
                                         f32 %950 = OpLoad %939 
                                         f32 %951 = OpFMul %949 %950 
                                Private f32* %952 = OpAccessChain %101 %50 
                                                      OpStore %952 %951 
                                       f32_3 %953 = OpLoad %218 
                                       f32_3 %954 = OpFNegate %953 
                                       f32_4 %955 = OpLoad %89 
                                       f32_3 %956 = OpVectorShuffle %955 %955 0 0 0 
                                       f32_3 %957 = OpFAdd %954 %956 
                                       f32_4 %958 = OpLoad %89 
                                       f32_4 %959 = OpVectorShuffle %958 %957 4 1 5 6 
                                                      OpStore %89 %959 
                                       f32_3 %960 = OpLoad %101 
                                       f32_3 %961 = OpVectorShuffle %960 %960 0 0 0 
                                       f32_4 %962 = OpLoad %89 
                                       f32_3 %963 = OpVectorShuffle %962 %962 0 2 3 
                                       f32_3 %964 = OpFMul %961 %963 
                                       f32_3 %965 = OpLoad %218 
                                       f32_3 %966 = OpFAdd %964 %965 
                                       f32_4 %967 = OpLoad %89 
                                       f32_4 %968 = OpVectorShuffle %967 %966 4 5 6 3 
                                                      OpStore %89 %968 
                                       f32_4 %969 = OpLoad %131 
                                       f32_3 %970 = OpVectorShuffle %969 %969 0 0 0 
                                       f32_4 %971 = OpLoad %89 
                                       f32_3 %972 = OpVectorShuffle %971 %971 0 1 2 
                                       f32_3 %973 = OpFMul %970 %972 
                                       f32_4 %974 = OpLoad %89 
                                       f32_4 %975 = OpVectorShuffle %974 %973 4 5 6 3 
                                                      OpStore %89 %975 
                                       f32_4 %976 = OpLoad %185 
                                       f32_3 %977 = OpVectorShuffle %976 %976 3 3 3 
                                       f32_3 %978 = OpLoad %887 
                                       f32_3 %979 = OpFMul %977 %978 
                                                      OpStore %202 %979 
                                       f32_4 %980 = OpLoad %89 
                                       f32_3 %981 = OpVectorShuffle %980 %980 0 1 2 
                                       f32_3 %982 = OpLoad %202 
                                       f32_3 %983 = OpFMul %981 %982 
                                       f32_4 %984 = OpLoad %89 
                                       f32_4 %985 = OpVectorShuffle %984 %983 4 5 6 3 
                                                      OpStore %89 %985 
                                       f32_3 %986 = OpLoad %241 
                                Uniform f32* %987 = OpAccessChain %144 %117 
                                         f32 %988 = OpLoad %987 
                                       f32_3 %989 = OpCompositeConstruct %988 %988 %988 
                                       f32_3 %990 = OpFMul %986 %989 
                                       f32_4 %991 = OpLoad %89 
                                       f32_3 %992 = OpVectorShuffle %991 %991 0 1 2 
                                       f32_3 %993 = OpFAdd %990 %992 
                                                      OpStore %202 %993 
                              Uniform f32_4* %994 = OpAccessChain %116 %431 %145 
                                       f32_4 %995 = OpLoad %994 
                                       f32_3 %996 = OpVectorShuffle %995 %995 0 1 2 
                              Uniform f32_3* %998 = OpAccessChain %144 %501 
                                       f32_3 %999 = OpLoad %998 
                                      f32_3 %1000 = OpVectorShuffle %999 %999 1 1 1 
                                      f32_3 %1001 = OpFMul %996 %1000 
                                      f32_4 %1002 = OpLoad %89 
                                      f32_4 %1003 = OpVectorShuffle %1002 %1001 4 5 6 3 
                                                      OpStore %89 %1003 
                             Uniform f32_4* %1004 = OpAccessChain %116 %431 %117 
                                      f32_4 %1005 = OpLoad %1004 
                                      f32_3 %1006 = OpVectorShuffle %1005 %1005 0 1 2 
                             Uniform f32_3* %1007 = OpAccessChain %144 %501 
                                      f32_3 %1008 = OpLoad %1007 
                                      f32_3 %1009 = OpVectorShuffle %1008 %1008 0 0 0 
                                      f32_3 %1010 = OpFMul %1006 %1009 
                                      f32_4 %1011 = OpLoad %89 
                                      f32_3 %1012 = OpVectorShuffle %1011 %1011 0 1 2 
                                      f32_3 %1013 = OpFAdd %1010 %1012 
                                      f32_4 %1014 = OpLoad %89 
                                      f32_4 %1015 = OpVectorShuffle %1014 %1013 4 5 6 3 
                                                      OpStore %89 %1015 
                             Uniform f32_4* %1016 = OpAccessChain %116 %431 %225 
                                      f32_4 %1017 = OpLoad %1016 
                                      f32_3 %1018 = OpVectorShuffle %1017 %1017 0 1 2 
                             Uniform f32_3* %1019 = OpAccessChain %144 %501 
                                      f32_3 %1020 = OpLoad %1019 
                                      f32_3 %1021 = OpVectorShuffle %1020 %1020 2 2 2 
                                      f32_3 %1022 = OpFMul %1018 %1021 
                                      f32_4 %1023 = OpLoad %89 
                                      f32_3 %1024 = OpVectorShuffle %1023 %1023 0 1 2 
                                      f32_3 %1025 = OpFAdd %1022 %1024 
                                      f32_4 %1026 = OpLoad %89 
                                      f32_4 %1027 = OpVectorShuffle %1026 %1025 4 5 6 3 
                                                      OpStore %89 %1027 
                                      f32_4 %1028 = OpLoad %89 
                                      f32_3 %1029 = OpVectorShuffle %1028 %1028 0 1 2 
                                      f32_4 %1030 = OpLoad %89 
                                      f32_3 %1031 = OpVectorShuffle %1030 %1030 0 1 2 
                                        f32 %1032 = OpDot %1029 %1031 
                                                      OpStore %318 %1032 
                                        f32 %1033 = OpLoad %318 
                                        f32 %1034 = OpExtInst %1 32 %1033 
                                                      OpStore %318 %1034 
                                        f32 %1035 = OpLoad %318 
                                      f32_3 %1036 = OpCompositeConstruct %1035 %1035 %1035 
                                      f32_4 %1037 = OpLoad %89 
                                      f32_3 %1038 = OpVectorShuffle %1037 %1037 0 1 2 
                                      f32_3 %1039 = OpFMul %1036 %1038 
                                      f32_4 %1040 = OpLoad %89 
                                      f32_4 %1041 = OpVectorShuffle %1040 %1039 4 5 6 3 
                                                      OpStore %89 %1041 
                                      f32_4 %1042 = OpLoad %282 
                                      f32_3 %1043 = OpVectorShuffle %1042 %1042 0 1 2 
                                      f32_4 %1044 = OpLoad %89 
                                      f32_3 %1045 = OpVectorShuffle %1044 %1044 0 1 2 
                                        f32 %1046 = OpDot %1043 %1045 
                               Private f32* %1047 = OpAccessChain %89 %50 
                                                      OpStore %1047 %1046 
                               Private f32* %1048 = OpAccessChain %89 %50 
                                        f32 %1049 = OpLoad %1048 
                                        f32 %1050 = OpFMul %1049 %334 
                                        f32 %1051 = OpFAdd %1050 %334 
                               Private f32* %1052 = OpAccessChain %89 %50 
                                                      OpStore %1052 %1051 
                               Private f32* %1053 = OpAccessChain %89 %50 
                                        f32 %1054 = OpLoad %1053 
                               Private f32* %1055 = OpAccessChain %185 %494 
                                        f32 %1056 = OpLoad %1055 
                                        f32 %1057 = OpFMul %1054 %1056 
                               Uniform f32* %1059 = OpAccessChain %144 %1058 
                                        f32 %1060 = OpLoad %1059 
                                        f32 %1061 = OpFNegate %1060 
                                        f32 %1062 = OpFAdd %1057 %1061 
                               Private f32* %1063 = OpAccessChain %89 %50 
                                                      OpStore %1063 %1062 
                               Private f32* %1064 = OpAccessChain %89 %50 
                                        f32 %1065 = OpLoad %1064 
                               Uniform f32* %1067 = OpAccessChain %144 %1066 
                                        f32 %1068 = OpLoad %1067 
                                        f32 %1069 = OpFMul %1065 %1068 
                               Private f32* %1070 = OpAccessChain %89 %50 
                                                      OpStore %1070 %1069 
                               Private f32* %1071 = OpAccessChain %89 %50 
                                        f32 %1072 = OpLoad %1071 
                                        f32 %1073 = OpExtInst %1 43 %1072 %38 %55 
                               Private f32* %1074 = OpAccessChain %89 %50 
                                                      OpStore %1074 %1073 
                                      f32_4 %1075 = OpLoad %89 
                                      f32_3 %1076 = OpVectorShuffle %1075 %1075 0 0 0 
                             Uniform f32_4* %1078 = OpAccessChain %144 %1077 
                                      f32_4 %1079 = OpLoad %1078 
                                      f32_3 %1080 = OpVectorShuffle %1079 %1079 0 1 2 
                                      f32_3 %1081 = OpFMul %1076 %1080 
                                                      OpStore %241 %1081 
                                      f32_3 %1082 = OpLoad %241 
                               Uniform f32* %1084 = OpAccessChain %144 %1083 
                                        f32 %1085 = OpLoad %1084 
                               Uniform f32* %1086 = OpAccessChain %144 %1083 
                                        f32 %1087 = OpLoad %1086 
                               Uniform f32* %1088 = OpAccessChain %144 %1083 
                                        f32 %1089 = OpLoad %1088 
                                      f32_3 %1090 = OpCompositeConstruct %1085 %1087 %1089 
                                        f32 %1091 = OpCompositeExtract %1090 0 
                                        f32 %1092 = OpCompositeExtract %1090 1 
                                        f32 %1093 = OpCompositeExtract %1090 2 
                                      f32_3 %1094 = OpCompositeConstruct %1091 %1092 %1093 
                                      f32_3 %1095 = OpFMul %1082 %1094 
                                      f32_4 %1096 = OpLoad %89 
                                      f32_4 %1097 = OpVectorShuffle %1096 %1095 4 5 6 3 
                                                      OpStore %89 %1097 
                                      f32_3 %1098 = OpLoad %138 
                                      f32_3 %1099 = OpVectorShuffle %1098 %1098 0 0 0 
                                      f32_4 %1100 = OpLoad %89 
                                      f32_3 %1101 = OpVectorShuffle %1100 %1100 0 1 2 
                                      f32_3 %1102 = OpFMul %1099 %1101 
                                                      OpStore %106 %1102 
                                      f32_3 %1103 = OpLoad %106 
                                      f32_3 %1105 = OpFMul %1103 %1104 
                                                      OpStore %106 %1105 
                                      f32_4 %1106 = OpLoad %89 
                                      f32_3 %1107 = OpVectorShuffle %1106 %1106 0 1 2 
                                      f32_3 %1110 = OpFMul %1107 %1109 
                                      f32_3 %1111 = OpLoad %106 
                                      f32_3 %1112 = OpFAdd %1110 %1111 
                                      f32_4 %1113 = OpLoad %89 
                                      f32_4 %1114 = OpVectorShuffle %1113 %1112 4 5 6 3 
                                                      OpStore %89 %1114 
                                      f32_3 %1115 = OpLoad %450 
                                      f32_3 %1116 = OpLoad %202 
                                      f32_3 %1117 = OpFAdd %1115 %1116 
                                                      OpStore %202 %1117 
                                      f32_4 %1118 = OpLoad %89 
                                      f32_3 %1119 = OpVectorShuffle %1118 %1118 0 1 2 
                                      f32_3 %1120 = OpLoad %202 
                                      f32_3 %1121 = OpFAdd %1119 %1120 
                                                      OpStore %202 %1121 
                                      f32_3 %1122 = OpLoad %202 
                                      f32_3 %1123 = OpExtInst %1 40 %1122 %831 
                                                      OpStore %202 %1123 
                                      f32_3 %1124 = OpLoad %202 
                                      f32_3 %1125 = OpExtInst %1 30 %1124 
                                                      OpStore %202 %1125 
                                      f32_3 %1126 = OpLoad %202 
                                      f32_3 %1129 = OpFMul %1126 %1128 
                                                      OpStore %202 %1129 
                                      f32_3 %1130 = OpLoad %202 
                                      f32_3 %1131 = OpExtInst %1 29 %1130 
                                                      OpStore %202 %1131 
                                      f32_3 %1134 = OpLoad %202 
                                      f32_3 %1135 = OpExtInst %1 31 %1134 
                                      f32_4 %1136 = OpLoad %1133 
                                      f32_4 %1137 = OpVectorShuffle %1136 %1135 4 5 6 3 
                                                      OpStore %1133 %1137 
                                Output f32* %1139 = OpAccessChain %1133 %494 
                                                      OpStore %1139 %55 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS_VERTEX" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD3.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD4.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD7 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[32];
uniform 	mediump vec4 _AdditionalLightsColor[32];
uniform 	mediump vec4 _AdditionalLightsAttenuation[32];
uniform 	mediump vec4 _AdditionalLightsSpotDir[32];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _Expond;
	UNITY_UNIFORM vec4 _MainTex_ST;
	UNITY_UNIFORM vec4 _Emissioncolor;
	UNITY_UNIFORM float _Roughness;
	UNITY_UNIFORM float _sss;
	UNITY_UNIFORM vec3 _rimlightdir;
	UNITY_UNIFORM vec4 _rimcolor;
	UNITY_UNIFORM float _rimhardness;
	UNITY_UNIFORM float _rimthreshold;
	UNITY_UNIFORM float _rimintensity;
	UNITY_UNIFORM float _Curvemn;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _Normal;
UNITY_LOCATION(2) uniform mediump sampler2D _MREA;
UNITY_LOCATION(3) uniform mediump sampler2D _SSSLUT;
UNITY_LOCATION(4) uniform mediump sampler2D _reflectmap;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
int u_xlati2;
bool u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_12;
vec3 u_xlat13;
int u_xlati13;
float u_xlat15;
uint u_xlatu15;
float u_xlat16;
float u_xlat26;
float u_xlat39;
uint u_xlatu39;
float u_xlat40;
float u_xlat41;
mediump float u_xlat16_45;
mediump float u_xlat16_46;
mediump float u_xlat16_47;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat13.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xyz = vs_TEXCOORD2.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat40 = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = vec3(u_xlat40) * u_xlat1.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat16_4.xyz = texture(_MainTex, u_xlat3.xy).xyz;
    u_xlat16_5.xyz = texture(_Normal, u_xlat3.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3 = texture(_MREA, u_xlat3.xy);
    u_xlat40 = u_xlat16_3.y + (-_Roughness);
    u_xlat16_45 = (-u_xlat40) + 1.0;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;
    u_xlat16_45 = max(u_xlat16_45, 0.00200000009);
    u_xlat16_7.xyz = u_xlat16_4.xyz * u_xlat16_3.zzz;
    u_xlat5.xyz = u_xlat16_7.xyz * _Emissioncolor.xyz;
    u_xlat16_7.xyz = u_xlat16_4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_7.xyz = u_xlat16_3.xxx * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_46 = u_xlat16_3.x * -0.959999979 + 0.959999979;
    u_xlat16_8.xyz = u_xlat16_4.xyz * vec3(u_xlat16_46);
    u_xlat16_8.xyz = u_xlat16_3.www * u_xlat16_8.xyz;
    u_xlat3.xyz = u_xlat16_6.yyy * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = u_xlat16_6.xxx * vs_TEXCOORD3.xyz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat16_6.zzz * vs_TEXCOORD1.xyz + u_xlat3.xyz;
    u_xlat41 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat41 = inversesqrt(u_xlat41);
    u_xlat4.xyz = vec3(u_xlat41) * u_xlat3.xyz;
    u_xlat41 = dot(u_xlat4.xyz, _MainLightPosition.xyz);
    u_xlat3.x = max(u_xlat41, 9.99999975e-06);
    u_xlat0.y = dot(u_xlat4.xyz, u_xlat13.xyz);
    u_xlat0.z = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(1.17549435e-38, 9.99999975e-06, 9.99999975e-06));
    u_xlat39 = u_xlat16_45 + u_xlat16_45;
    u_xlat2.x = u_xlat0.z * u_xlat0.z;
    u_xlat39 = u_xlat2.x * u_xlat39 + 0.5;
    u_xlat16_6.x = u_xlat39 + -1.0;
    u_xlat13.x = (-u_xlat0.y) + 1.0;
    u_xlat13.x = max(u_xlat13.x, 0.0);
    u_xlat39 = u_xlat13.x * u_xlat13.x;
    u_xlat39 = u_xlat39 * u_xlat39;
    u_xlat13.x = u_xlat13.x * u_xlat39;
    u_xlat13.x = u_xlat16_6.x * u_xlat13.x + 1.0;
    u_xlat39 = (-u_xlat3.x) + 1.0;
    u_xlat39 = max(u_xlat39, 0.0);
    u_xlat2.x = u_xlat39 * u_xlat39;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat39 = u_xlat39 * u_xlat2.x;
    u_xlat39 = u_xlat16_6.x * u_xlat39 + 1.0;
    u_xlat16_6.x = u_xlat13.x * u_xlat39;
    u_xlat16_6.x = min(u_xlat16_6.x, 1.0);
    u_xlat16_6.x = u_xlat41 * u_xlat16_6.x;
    u_xlat16_2.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat2.x = u_xlat16_2.x;
    u_xlat2.yw = vec2(vec2(_Curvemn, _Curvemn));
    u_xlat16_9.xyz = texture(_SSSLUT, u_xlat2.xy).xyz;
    u_xlat9.xyz = u_xlat16_9.xyz * vec3(vec3(_sss, _sss, _sss));
    u_xlat13.x = min(u_xlat2.x, 1.0);
    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat9.xyz;
    u_xlat9.xyz = u_xlat16_6.xyz * _MainLightColor.xyz;
    u_xlat9.xyz = u_xlat9.xyz * u_xlat13.xxx + u_xlat5.xyz;
    u_xlat16_6.x = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlati13 = int(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat9.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<uint(u_xlati13) ; u_xlatu_loop_1++)
    {
        u_xlati2 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu15 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_46 = dot(unity_LightIndices[int(u_xlatu15)], ImmCB_0[u_xlati2]);
        u_xlati2 = int(u_xlat16_46);
        u_xlat10.xyz = (-vs_TEXCOORD5.xyz) * _AdditionalLightsPosition[u_xlati2].www + _AdditionalLightsPosition[u_xlati2].xyz;
        u_xlat15 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat15 = max(u_xlat15, 6.10351563e-05);
        u_xlat16 = inversesqrt(u_xlat15);
        u_xlat10.xyz = vec3(u_xlat16) * u_xlat10.xyz;
        u_xlat16 = float(1.0) / float(u_xlat15);
        u_xlat15 = u_xlat15 * _AdditionalLightsAttenuation[u_xlati2].x + _AdditionalLightsAttenuation[u_xlati2].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
        u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
        u_xlat15 = u_xlat15 * u_xlat16;
        u_xlat16_46 = dot(_AdditionalLightsSpotDir[u_xlati2].xyz, u_xlat10.xyz);
        u_xlat16_46 = u_xlat16_46 * _AdditionalLightsAttenuation[u_xlati2].z + _AdditionalLightsAttenuation[u_xlati2].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_46 = min(max(u_xlat16_46, 0.0), 1.0);
#else
        u_xlat16_46 = clamp(u_xlat16_46, 0.0, 1.0);
#endif
        u_xlat16_46 = u_xlat16_46 * u_xlat16_46;
        u_xlat15 = u_xlat15 * u_xlat16_46;
        u_xlat16 = dot(u_xlat4.xyz, u_xlat10.xyz);
        u_xlat2.z = max(u_xlat16, 9.99999975e-06);
        u_xlat16_10.xyz = texture(_SSSLUT, u_xlat2.zw).xyz;
        u_xlat10.xyz = u_xlat16_10.xyz * vec3(vec3(_sss, _sss, _sss));
        u_xlat16_11.xyz = u_xlat16_8.xyz * u_xlat10.xyz;
        u_xlat16_11.xyz = u_xlat16_11.xyz * _AdditionalLightsColor[u_xlati2].xyz;
        u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(u_xlat15) + u_xlat5.xyz;
        u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_11.xyz;
    }
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyw = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat0.xyw);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat0.xyw);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_46 = u_xlat16_45 * u_xlat16_45;
    u_xlat16_47 = u_xlat16_45 * u_xlat16_45 + -1.0;
    u_xlat13.x = u_xlat13.x * u_xlat16_47 + 1.00001001;
    u_xlat16_47 = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat13.x * u_xlat13.x;
    u_xlat13.x = max(u_xlat16_47, 0.100000001);
    u_xlat0.x = u_xlat13.x * u_xlat0.x;
    u_xlat16_47 = u_xlat16_45 * 4.0 + 2.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_47;
    u_xlat0.x = u_xlat16_46 / u_xlat0.x;
    u_xlat0.xyw = u_xlat16_7.xyz * u_xlat0.xxx;
    u_xlat16_11.xyz = u_xlat0.xyw * vec3(3.14159274, 3.14159274, 3.14159274);
    u_xlat1.xyz = u_xlat16_11.xyz * _MainLightColor.xyz;
    u_xlat16_6.xyz = u_xlat1.xyz * u_xlat3.xxx + u_xlat16_6.xyz;
    u_xlat4.w = 1.0;
    u_xlat16_11.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_11.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_11.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_2 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_12.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_12.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_12.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_46 = u_xlat4.y * u_xlat4.y;
    u_xlat16_46 = u_xlat4.x * u_xlat4.x + (-u_xlat16_46);
    u_xlat16_12.xyz = unity_SHC.xyz * vec3(u_xlat16_46) + u_xlat16_12.xyz;
    u_xlat16_11.xyz = u_xlat16_11.xyz + u_xlat16_12.xyz;
    u_xlat16_11.xyz = max(u_xlat16_11.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_11.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].x;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat16_11.x = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].y;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].y;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].y;
    u_xlat16_11.y = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat16_11.xy = u_xlat16_11.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat16_46 = (-u_xlat16_45) * 0.699999988 + 1.70000005;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_46;
    u_xlat16_46 = u_xlat16_45 * 8.0;
    u_xlat16_1.xyz = textureLod(_reflectmap, u_xlat16_11.xy, u_xlat16_46).xyz;
    u_xlat16 = u_xlat16_45 * u_xlat16_45 + 1.0;
    u_xlat16 = float(1.0) / u_xlat16;
    u_xlat0.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat0.x = max(u_xlat0.w, u_xlat0.x);
    u_xlat0.x = u_xlat40 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13.x = (-u_xlat0.z) + 1.0;
    u_xlat13.x = max(u_xlat13.x, 0.0);
    u_xlat26 = u_xlat13.x * u_xlat13.x;
    u_xlat26 = u_xlat26 * u_xlat26;
    u_xlat13.x = u_xlat13.x * u_xlat26;
    u_xlat0.xzw = (-u_xlat16_7.xyz) + u_xlat0.xxx;
    u_xlat0.xyz = u_xlat13.xxx * u_xlat0.xzw + u_xlat16_7.xyz;
    u_xlat0.xyz = vec3(u_xlat16) * u_xlat0.xyz;
    u_xlat16_7.xyz = u_xlat16_3.www * u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_8.xyz * vec3(_Expond) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixInvV[1].xyz * _rimlightdir.yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixInvV[0].xyz * _rimlightdir.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixInvV[2].xyz * _rimlightdir.zzz + u_xlat0.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat0.x = u_xlat0.x * u_xlat16_3.w + (-_rimthreshold);
    u_xlat0.x = u_xlat0.x * _rimhardness;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = u_xlat0.xxx * _rimcolor.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz * vec3(vec3(_rimintensity, _rimintensity, _rimintensity));
    u_xlat1.xyz = u_xlat3.xxx * u_xlat0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = u_xlat0.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(2.20000005, 2.20000005, 2.20000005);
    u_xlat16_6.xyz = exp2(u_xlat16_6.xyz);
    SV_Target0.xyz = sqrt(u_xlat16_6.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 268
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %94 %103 %105 %108 %148 %151 %161 %195 %221 %227 %230 %231 %257 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 RelaxedPrecision 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 RelaxedPrecision 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 RelaxedPrecision 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 RelaxedPrecision 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 RelaxedPrecision 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 RelaxedPrecision 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpMemberDecorate %21 16 RelaxedPrecision 
                                                      OpMemberDecorate %21 16 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpDecorate %69 ArrayStride 69 
                                                      OpMemberDecorate %70 0 Offset 70 
                                                      OpMemberDecorate %70 1 Offset 70 
                                                      OpDecorate %70 Block 
                                                      OpDecorate %72 DescriptorSet 72 
                                                      OpDecorate %72 Binding 72 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 103 
                                                      OpDecorate %105 Location 105 
                                                      OpDecorate %108 Location 108 
                                                      OpDecorate vs_TEXCOORD1 Location 148 
                                                      OpDecorate vs_TEXCOORD2 Location 151 
                                                      OpDecorate %161 Location 161 
                                                      OpDecorate vs_TEXCOORD3 Location 195 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 221 
                                                      OpDecorate vs_TEXCOORD5 Location 227 
                                                      OpDecorate vs_TEXCOORD6 Location 230 
                                                      OpDecorate %231 Location 231 
                                                      OpDecorate %236 ArrayStride 236 
                                                      OpMemberDecorate %237 0 Offset 237 
                                                      OpMemberDecorate %237 1 Offset 237 
                                                      OpMemberDecorate %237 2 Offset 237 
                                                      OpMemberDecorate %237 3 Offset 237 
                                                      OpMemberDecorate %237 4 Offset 237 
                                                      OpMemberDecorate %237 5 Offset 237 
                                                      OpMemberDecorate %237 6 RelaxedPrecision 
                                                      OpMemberDecorate %237 6 Offset 237 
                                                      OpMemberDecorate %237 7 RelaxedPrecision 
                                                      OpMemberDecorate %237 7 Offset 237 
                                                      OpMemberDecorate %237 8 RelaxedPrecision 
                                                      OpMemberDecorate %237 8 Offset 237 
                                                      OpMemberDecorate %237 9 RelaxedPrecision 
                                                      OpMemberDecorate %237 9 Offset 237 
                                                      OpMemberDecorate %237 10 RelaxedPrecision 
                                                      OpMemberDecorate %237 10 Offset 237 
                                                      OpMemberDecorate %237 11 Offset 237 
                                                      OpDecorate %237 Block 
                                                      OpDecorate %239 DescriptorSet 239 
                                                      OpDecorate %239 Binding 239 
                                                      OpDecorate vs_TEXCOORD7 Location 257 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 3 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeArray %7 %16 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypeArray %7 %19 
                                              %21 = OpTypeStruct %17 %18 %7 %7 %7 %20 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4; f32_4[2]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 0 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %45 = OpConstant 2 
                                          i32 %59 = OpConstant 3 
                               Private f32_4* %66 = OpVariable Private 
                                              %69 = OpTypeArray %7 %16 
                                              %70 = OpTypeStruct %12 %69 
                                              %71 = OpTypePointer Uniform %70 
           Uniform struct {f32_3; f32_4[4];}* %72 = OpVariable Uniform 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %99 = OpTypePointer Output %7 
                                             %101 = OpTypeVector %6 2 
                                             %102 = OpTypePointer Output %101 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %104 = OpTypePointer Input %101 
                                Input f32_2* %105 = OpVariable Input 
                                             %107 = OpTypePointer Input %12 
                                Input f32_3* %108 = OpVariable Input 
                                         u32 %114 = OpConstant 0 
                                             %115 = OpTypePointer Private %6 
                                Private f32* %129 = OpVariable Private 
                                         f32 %136 = OpConstant 3.674022E-40 
                                             %147 = OpTypePointer Output %12 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %155 = OpTypePointer Uniform %12 
                                             %159 = OpTypePointer Private %12 
                              Private f32_3* %160 = OpVariable Private 
                                Input f32_4* %161 = OpVariable Input 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                              Private f32_3* %197 = OpVariable Private 
                                         u32 %213 = OpConstant 3 
                                             %214 = OpTypePointer Input %6 
                                             %217 = OpTypePointer Uniform %6 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD5 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                Input f32_4* %231 = OpVariable Input 
                                         u32 %235 = OpConstant 20 
                                             %236 = OpTypeArray %7 %235 
                                             %237 = OpTypeStruct %236 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 
                                             %238 = OpTypePointer Uniform %237 
Uniform struct {f32_4[20]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %239 = OpVariable Uniform 
                       Output f32_4* vs_TEXCOORD7 = OpVariable Output 
                                             %262 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %11 
                                        f32_3 %14 = OpVectorShuffle %13 %13 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_3 %30 = OpVectorShuffle %29 %29 0 1 2 
                                        f32_3 %31 = OpFMul %14 %30 
                                        f32_4 %32 = OpLoad %9 
                                        f32_4 %33 = OpVectorShuffle %32 %31 4 5 6 3 
                                                      OpStore %9 %33 
                               Uniform f32_4* %34 = OpAccessChain %23 %25 %25 
                                        f32_4 %35 = OpLoad %34 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 1 2 
                                        f32_4 %37 = OpLoad %11 
                                        f32_3 %38 = OpVectorShuffle %37 %37 0 0 0 
                                        f32_3 %39 = OpFMul %36 %38 
                                        f32_4 %40 = OpLoad %9 
                                        f32_3 %41 = OpVectorShuffle %40 %40 0 1 2 
                                        f32_3 %42 = OpFAdd %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpVectorShuffle %43 %42 4 5 6 3 
                                                      OpStore %9 %44 
                               Uniform f32_4* %46 = OpAccessChain %23 %25 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_3 %48 = OpVectorShuffle %47 %47 0 1 2 
                                        f32_4 %49 = OpLoad %11 
                                        f32_3 %50 = OpVectorShuffle %49 %49 2 2 2 
                                        f32_3 %51 = OpFMul %48 %50 
                                        f32_4 %52 = OpLoad %9 
                                        f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                        f32_3 %54 = OpFAdd %51 %53 
                                        f32_4 %55 = OpLoad %9 
                                        f32_4 %56 = OpVectorShuffle %55 %54 4 5 6 3 
                                                      OpStore %9 %56 
                                        f32_4 %57 = OpLoad %9 
                                        f32_3 %58 = OpVectorShuffle %57 %57 0 1 2 
                               Uniform f32_4* %60 = OpAccessChain %23 %25 %59 
                                        f32_4 %61 = OpLoad %60 
                                        f32_3 %62 = OpVectorShuffle %61 %61 0 1 2 
                                        f32_3 %63 = OpFAdd %58 %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %63 4 5 6 3 
                                                      OpStore %9 %65 
                                        f32_4 %67 = OpLoad %9 
                                        f32_4 %68 = OpVectorShuffle %67 %67 1 1 1 1 
                               Uniform f32_4* %73 = OpAccessChain %72 %26 %26 
                                        f32_4 %74 = OpLoad %73 
                                        f32_4 %75 = OpFMul %68 %74 
                                                      OpStore %66 %75 
                               Uniform f32_4* %76 = OpAccessChain %72 %26 %25 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %9 
                                        f32_4 %79 = OpVectorShuffle %78 %78 0 0 0 0 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %66 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %66 %82 
                               Uniform f32_4* %83 = OpAccessChain %72 %26 %45 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %9 
                                        f32_4 %86 = OpVectorShuffle %85 %85 2 2 2 2 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %66 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %66 %89 
                                        f32_4 %95 = OpLoad %66 
                               Uniform f32_4* %96 = OpAccessChain %72 %26 %59 
                                        f32_4 %97 = OpLoad %96 
                                        f32_4 %98 = OpFAdd %95 %97 
                               Output f32_4* %100 = OpAccessChain %94 %25 
                                                      OpStore %100 %98 
                                       f32_2 %106 = OpLoad %105 
                                                      OpStore vs_TEXCOORD0 %106 
                                       f32_3 %109 = OpLoad %108 
                              Uniform f32_4* %110 = OpAccessChain %23 %26 %25 
                                       f32_4 %111 = OpLoad %110 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
                                         f32 %113 = OpDot %109 %112 
                                Private f32* %116 = OpAccessChain %66 %114 
                                                      OpStore %116 %113 
                                       f32_3 %117 = OpLoad %108 
                              Uniform f32_4* %118 = OpAccessChain %23 %26 %26 
                                       f32_4 %119 = OpLoad %118 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                         f32 %121 = OpDot %117 %120 
                                Private f32* %122 = OpAccessChain %66 %90 
                                                      OpStore %122 %121 
                                       f32_3 %123 = OpLoad %108 
                              Uniform f32_4* %124 = OpAccessChain %23 %26 %45 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                         f32 %127 = OpDot %123 %126 
                                Private f32* %128 = OpAccessChain %66 %19 
                                                      OpStore %128 %127 
                                       f32_4 %130 = OpLoad %66 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_4 %132 = OpLoad %66 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                         f32 %134 = OpDot %131 %133 
                                                      OpStore %129 %134 
                                         f32 %135 = OpLoad %129 
                                         f32 %137 = OpExtInst %1 40 %135 %136 
                                                      OpStore %129 %137 
                                         f32 %138 = OpLoad %129 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %129 %139 
                                         f32 %140 = OpLoad %129 
                                       f32_3 %141 = OpCompositeConstruct %140 %140 %140 
                                       f32_4 %142 = OpLoad %66 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                       f32_3 %144 = OpFMul %141 %143 
                                       f32_4 %145 = OpLoad %66 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %66 %146 
                                       f32_4 %149 = OpLoad %66 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                                      OpStore vs_TEXCOORD1 %150 
                                       f32_4 %152 = OpLoad %9 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                       f32_3 %154 = OpFNegate %153 
                              Uniform f32_3* %156 = OpAccessChain %72 %25 
                                       f32_3 %157 = OpLoad %156 
                                       f32_3 %158 = OpFAdd %154 %157 
                                                      OpStore vs_TEXCOORD2 %158 
                                       f32_4 %162 = OpLoad %161 
                                       f32_3 %163 = OpVectorShuffle %162 %162 1 1 1 
                              Uniform f32_4* %164 = OpAccessChain %23 %25 %26 
                                       f32_4 %165 = OpLoad %164 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                       f32_3 %167 = OpFMul %163 %166 
                                                      OpStore %160 %167 
                              Uniform f32_4* %168 = OpAccessChain %23 %25 %25 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                       f32_4 %171 = OpLoad %161 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 0 0 
                                       f32_3 %173 = OpFMul %170 %172 
                                       f32_3 %174 = OpLoad %160 
                                       f32_3 %175 = OpFAdd %173 %174 
                                                      OpStore %160 %175 
                              Uniform f32_4* %176 = OpAccessChain %23 %25 %45 
                                       f32_4 %177 = OpLoad %176 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                       f32_4 %179 = OpLoad %161 
                                       f32_3 %180 = OpVectorShuffle %179 %179 2 2 2 
                                       f32_3 %181 = OpFMul %178 %180 
                                       f32_3 %182 = OpLoad %160 
                                       f32_3 %183 = OpFAdd %181 %182 
                                                      OpStore %160 %183 
                                       f32_3 %184 = OpLoad %160 
                                       f32_3 %185 = OpLoad %160 
                                         f32 %186 = OpDot %184 %185 
                                                      OpStore %129 %186 
                                         f32 %187 = OpLoad %129 
                                         f32 %188 = OpExtInst %1 40 %187 %136 
                                                      OpStore %129 %188 
                                         f32 %189 = OpLoad %129 
                                         f32 %190 = OpExtInst %1 32 %189 
                                                      OpStore %129 %190 
                                         f32 %191 = OpLoad %129 
                                       f32_3 %192 = OpCompositeConstruct %191 %191 %191 
                                       f32_3 %193 = OpLoad %160 
                                       f32_3 %194 = OpFMul %192 %193 
                                                      OpStore %160 %194 
                                       f32_3 %196 = OpLoad %160 
                                                      OpStore vs_TEXCOORD3 %196 
                                       f32_4 %198 = OpLoad %66 
                                       f32_3 %199 = OpVectorShuffle %198 %198 2 0 1 
                                       f32_3 %200 = OpLoad %160 
                                       f32_3 %201 = OpVectorShuffle %200 %200 1 2 0 
                                       f32_3 %202 = OpFMul %199 %201 
                                                      OpStore %197 %202 
                                       f32_4 %203 = OpLoad %66 
                                       f32_3 %204 = OpVectorShuffle %203 %203 1 2 0 
                                       f32_3 %205 = OpLoad %160 
                                       f32_3 %206 = OpVectorShuffle %205 %205 2 0 1 
                                       f32_3 %207 = OpFMul %204 %206 
                                       f32_3 %208 = OpLoad %197 
                                       f32_3 %209 = OpFNegate %208 
                                       f32_3 %210 = OpFAdd %207 %209 
                                       f32_4 %211 = OpLoad %66 
                                       f32_4 %212 = OpVectorShuffle %211 %210 4 5 6 3 
                                                      OpStore %66 %212 
                                  Input f32* %215 = OpAccessChain %161 %213 
                                         f32 %216 = OpLoad %215 
                                Uniform f32* %218 = OpAccessChain %23 %59 %213 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpFMul %216 %219 
                                                      OpStore %129 %220 
                                         f32 %222 = OpLoad %129 
                                       f32_3 %223 = OpCompositeConstruct %222 %222 %222 
                                       f32_4 %224 = OpLoad %66 
                                       f32_3 %225 = OpVectorShuffle %224 %224 0 1 2 
                                       f32_3 %226 = OpFMul %223 %225 
                                                      OpStore vs_TEXCOORD4 %226 
                                       f32_4 %228 = OpLoad %9 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 2 
                                                      OpStore vs_TEXCOORD5 %229 
                                       f32_4 %232 = OpLoad %231 
                                                      OpStore vs_TEXCOORD6 %232 
                                       f32_4 %233 = OpLoad %9 
                                       f32_4 %234 = OpVectorShuffle %233 %233 1 1 1 1 
                              Uniform f32_4* %240 = OpAccessChain %239 %25 %26 
                                       f32_4 %241 = OpLoad %240 
                                       f32_4 %242 = OpFMul %234 %241 
                                                      OpStore %66 %242 
                              Uniform f32_4* %243 = OpAccessChain %239 %25 %25 
                                       f32_4 %244 = OpLoad %243 
                                       f32_4 %245 = OpLoad %9 
                                       f32_4 %246 = OpVectorShuffle %245 %245 0 0 0 0 
                                       f32_4 %247 = OpFMul %244 %246 
                                       f32_4 %248 = OpLoad %66 
                                       f32_4 %249 = OpFAdd %247 %248 
                                                      OpStore %66 %249 
                              Uniform f32_4* %250 = OpAccessChain %239 %25 %45 
                                       f32_4 %251 = OpLoad %250 
                                       f32_4 %252 = OpLoad %9 
                                       f32_4 %253 = OpVectorShuffle %252 %252 2 2 2 2 
                                       f32_4 %254 = OpFMul %251 %253 
                                       f32_4 %255 = OpLoad %66 
                                       f32_4 %256 = OpFAdd %254 %255 
                                                      OpStore %9 %256 
                                       f32_4 %258 = OpLoad %9 
                              Uniform f32_4* %259 = OpAccessChain %239 %25 %59 
                                       f32_4 %260 = OpLoad %259 
                                       f32_4 %261 = OpFAdd %258 %260 
                                                      OpStore vs_TEXCOORD7 %261 
                                 Output f32* %263 = OpAccessChain %94 %25 %90 
                                         f32 %264 = OpLoad %263 
                                         f32 %265 = OpFNegate %264 
                                 Output f32* %266 = OpAccessChain %94 %25 %90 
                                                      OpStore %266 %265 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 1143
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %91 %140 %259 %264 %271 %525 %1133 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate vs_TEXCOORD7 Location 12 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %28 DescriptorSet 28 
                                                      OpDecorate %28 Binding 28 
                                                      OpDecorate %29 RelaxedPrecision 
                                                      OpDecorate %32 RelaxedPrecision 
                                                      OpDecorate %32 DescriptorSet 32 
                                                      OpDecorate %32 Binding 32 
                                                      OpDecorate %33 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %44 ArrayStride 44 
                                                      OpMemberDecorate %45 0 Offset 45 
                                                      OpMemberDecorate %45 1 Offset 45 
                                                      OpMemberDecorate %45 2 Offset 45 
                                                      OpMemberDecorate %45 3 Offset 45 
                                                      OpMemberDecorate %45 4 Offset 45 
                                                      OpMemberDecorate %45 5 Offset 45 
                                                      OpMemberDecorate %45 6 RelaxedPrecision 
                                                      OpMemberDecorate %45 6 Offset 45 
                                                      OpMemberDecorate %45 7 RelaxedPrecision 
                                                      OpMemberDecorate %45 7 Offset 45 
                                                      OpMemberDecorate %45 8 RelaxedPrecision 
                                                      OpMemberDecorate %45 8 Offset 45 
                                                      OpMemberDecorate %45 9 RelaxedPrecision 
                                                      OpMemberDecorate %45 9 Offset 45 
                                                      OpMemberDecorate %45 10 RelaxedPrecision 
                                                      OpMemberDecorate %45 10 Offset 45 
                                                      OpMemberDecorate %45 11 Offset 45 
                                                      OpDecorate %45 Block 
                                                      OpDecorate %47 DescriptorSet 47 
                                                      OpDecorate %47 Binding 47 
                                                      OpDecorate %53 RelaxedPrecision 
                                                      OpDecorate %54 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %58 RelaxedPrecision 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %63 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD2 Location 91 
                                                      OpDecorate %112 ArrayStride 112 
                                                      OpDecorate %113 ArrayStride 113 
                                                      OpMemberDecorate %114 0 Offset 114 
                                                      OpMemberDecorate %114 1 RelaxedPrecision 
                                                      OpMemberDecorate %114 1 Offset 114 
                                                      OpMemberDecorate %114 2 RelaxedPrecision 
                                                      OpMemberDecorate %114 2 Offset 114 
                                                      OpMemberDecorate %114 3 Offset 114 
                                                      OpMemberDecorate %114 4 Offset 114 
                                                      OpDecorate %114 Block 
                                                      OpDecorate %116 DescriptorSet 116 
                                                      OpDecorate %116 Binding 116 
                                                      OpDecorate vs_TEXCOORD0 Location 140 
                                                      OpMemberDecorate %142 0 Offset 142 
                                                      OpMemberDecorate %142 1 Offset 142 
                                                      OpMemberDecorate %142 2 Offset 142 
                                                      OpMemberDecorate %142 3 Offset 142 
                                                      OpMemberDecorate %142 4 Offset 142 
                                                      OpMemberDecorate %142 5 Offset 142 
                                                      OpMemberDecorate %142 6 Offset 142 
                                                      OpMemberDecorate %142 7 Offset 142 
                                                      OpMemberDecorate %142 8 Offset 142 
                                                      OpMemberDecorate %142 9 Offset 142 
                                                      OpMemberDecorate %142 10 Offset 142 
                                                      OpDecorate %142 Block 
                                                      OpDecorate %144 DescriptorSet 144 
                                                      OpDecorate %144 Binding 144 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %157 DescriptorSet 157 
                                                      OpDecorate %157 Binding 157 
                                                      OpDecorate %158 RelaxedPrecision 
                                                      OpDecorate %159 RelaxedPrecision 
                                                      OpDecorate %159 DescriptorSet 159 
                                                      OpDecorate %159 Binding 159 
                                                      OpDecorate %160 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %168 DescriptorSet 168 
                                                      OpDecorate %168 Binding 168 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %170 DescriptorSet 170 
                                                      OpDecorate %170 Binding 170 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %186 DescriptorSet 186 
                                                      OpDecorate %186 Binding 186 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %188 DescriptorSet 188 
                                                      OpDecorate %188 Binding 188 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %249 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 259 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD3 Location 264 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 271 
                                                      OpDecorate %320 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %399 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %420 DescriptorSet 420 
                                                      OpDecorate %420 Binding 420 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %422 DescriptorSet 422 
                                                      OpDecorate %422 Binding 422 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %428 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %438 RelaxedPrecision 
                                                      OpDecorate %439 RelaxedPrecision 
                                                      OpDecorate %440 RelaxedPrecision 
                                                      OpDecorate %441 RelaxedPrecision 
                                                      OpDecorate %442 RelaxedPrecision 
                                                      OpDecorate %443 RelaxedPrecision 
                                                      OpDecorate %445 RelaxedPrecision 
                                                      OpDecorate %450 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %467 ArrayStride 467 
                                                      OpDecorate %468 ArrayStride 468 
                                                      OpDecorate %469 ArrayStride 469 
                                                      OpMemberDecorate %470 0 Offset 470 
                                                      OpMemberDecorate %470 1 Offset 470 
                                                      OpMemberDecorate %470 2 Offset 470 
                                                      OpMemberDecorate %470 3 RelaxedPrecision 
                                                      OpMemberDecorate %470 3 Offset 470 
                                                      OpMemberDecorate %470 4 RelaxedPrecision 
                                                      OpMemberDecorate %470 4 Offset 470 
                                                      OpMemberDecorate %470 5 RelaxedPrecision 
                                                      OpMemberDecorate %470 5 Offset 470 
                                                      OpMemberDecorate %470 6 Offset 470 
                                                      OpMemberDecorate %470 7 RelaxedPrecision 
                                                      OpMemberDecorate %470 7 Offset 470 
                                                      OpMemberDecorate %470 8 Offset 470 
                                                      OpMemberDecorate %470 9 Offset 470 
                                                      OpMemberDecorate %470 10 RelaxedPrecision 
                                                      OpMemberDecorate %470 10 Offset 470 
                                                      OpMemberDecorate %470 11 RelaxedPrecision 
                                                      OpMemberDecorate %470 11 Offset 470 
                                                      OpMemberDecorate %470 12 RelaxedPrecision 
                                                      OpMemberDecorate %470 12 Offset 470 
                                                      OpMemberDecorate %470 13 RelaxedPrecision 
                                                      OpMemberDecorate %470 13 Offset 470 
                                                      OpMemberDecorate %470 14 RelaxedPrecision 
                                                      OpMemberDecorate %470 14 Offset 470 
                                                      OpMemberDecorate %470 15 RelaxedPrecision 
                                                      OpMemberDecorate %470 15 Offset 470 
                                                      OpMemberDecorate %470 16 RelaxedPrecision 
                                                      OpMemberDecorate %470 16 Offset 470 
                                                      OpDecorate %470 Block 
                                                      OpDecorate %472 DescriptorSet 472 
                                                      OpDecorate %472 Binding 472 
                                                      OpDecorate %474 RelaxedPrecision 
                                                      OpDecorate %475 RelaxedPrecision 
                                                      OpDecorate %478 RelaxedPrecision 
                                                      OpDecorate %505 RelaxedPrecision 
                                                      OpDecorate %522 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 525 
                                                      OpDecorate %529 ArrayStride 529 
                                                      OpDecorate %530 ArrayStride 530 
                                                      OpDecorate %531 ArrayStride 531 
                                                      OpDecorate %532 ArrayStride 532 
                                                      OpDecorate %533 ArrayStride 533 
                                                      OpMemberDecorate %534 0 Offset 534 
                                                      OpMemberDecorate %534 1 RelaxedPrecision 
                                                      OpMemberDecorate %534 1 Offset 534 
                                                      OpMemberDecorate %534 2 RelaxedPrecision 
                                                      OpMemberDecorate %534 2 Offset 534 
                                                      OpMemberDecorate %534 3 RelaxedPrecision 
                                                      OpMemberDecorate %534 3 Offset 534 
                                                      OpMemberDecorate %534 4 RelaxedPrecision 
                                                      OpMemberDecorate %534 4 Offset 534 
                                                      OpDecorate %534 Block 
                                                      OpDecorate %536 DescriptorSet 536 
                                                      OpDecorate %536 Binding 536 
                                                      OpDecorate %566 RelaxedPrecision 
                                                      OpDecorate %570 RelaxedPrecision 
                                                      OpDecorate %579 RelaxedPrecision 
                                                      OpDecorate %580 RelaxedPrecision 
                                                      OpDecorate %583 RelaxedPrecision 
                                                      OpDecorate %586 RelaxedPrecision 
                                                      OpDecorate %587 RelaxedPrecision 
                                                      OpDecorate %590 RelaxedPrecision 
                                                      OpDecorate %591 RelaxedPrecision 
                                                      OpDecorate %592 RelaxedPrecision 
                                                      OpDecorate %593 RelaxedPrecision 
                                                      OpDecorate %594 RelaxedPrecision 
                                                      OpDecorate %595 RelaxedPrecision 
                                                      OpDecorate %596 RelaxedPrecision 
                                                      OpDecorate %598 RelaxedPrecision 
                                                      OpDecorate %607 RelaxedPrecision 
                                                      OpDecorate %608 RelaxedPrecision 
                                                      OpDecorate %609 RelaxedPrecision 
                                                      OpDecorate %614 RelaxedPrecision 
                                                      OpDecorate %615 RelaxedPrecision 
                                                      OpDecorate %622 RelaxedPrecision 
                                                      OpDecorate %623 RelaxedPrecision 
                                                      OpDecorate %624 RelaxedPrecision 
                                                      OpDecorate %625 RelaxedPrecision 
                                                      OpDecorate %626 RelaxedPrecision 
                                                      OpDecorate %627 RelaxedPrecision 
                                                      OpDecorate %628 RelaxedPrecision 
                                                      OpDecorate %629 RelaxedPrecision 
                                                      OpDecorate %632 RelaxedPrecision 
                                                      OpDecorate %635 RelaxedPrecision 
                                                      OpDecorate %636 RelaxedPrecision 
                                                      OpDecorate %637 RelaxedPrecision 
                                                      OpDecorate %638 RelaxedPrecision 
                                                      OpDecorate %640 RelaxedPrecision 
                                                      OpDecorate %641 RelaxedPrecision 
                                                      OpDecorate %644 RelaxedPrecision 
                                                      OpDecorate %645 RelaxedPrecision 
                                                      OpDecorate %646 RelaxedPrecision 
                                                      OpDecorate %687 RelaxedPrecision 
                                                      OpDecorate %689 RelaxedPrecision 
                                                      OpDecorate %690 RelaxedPrecision 
                                                      OpDecorate %691 RelaxedPrecision 
                                                      OpDecorate %693 RelaxedPrecision 
                                                      OpDecorate %695 RelaxedPrecision 
                                                      OpDecorate %696 RelaxedPrecision 
                                                      OpDecorate %697 RelaxedPrecision 
                                                      OpDecorate %700 RelaxedPrecision 
                                                      OpDecorate %716 RelaxedPrecision 
                                                      OpDecorate %718 RelaxedPrecision 
                                                      OpDecorate %727 RelaxedPrecision 
                                                      OpDecorate %729 RelaxedPrecision 
                                                      OpDecorate %730 RelaxedPrecision 
                                                      OpDecorate %733 RelaxedPrecision 
                                                      OpDecorate %736 RelaxedPrecision 
                                                      OpDecorate %741 RelaxedPrecision 
                                                      OpDecorate %752 RelaxedPrecision 
                                                      OpDecorate %754 RelaxedPrecision 
                                                      OpDecorate %755 RelaxedPrecision 
                                                      OpDecorate %756 RelaxedPrecision 
                                                      OpDecorate %761 RelaxedPrecision 
                                                      OpDecorate %765 RelaxedPrecision 
                                                      OpDecorate %771 RelaxedPrecision 
                                                      OpDecorate %777 RelaxedPrecision 
                                                      OpDecorate %786 RelaxedPrecision 
                                                      OpDecorate %789 RelaxedPrecision 
                                                      OpDecorate %790 RelaxedPrecision 
                                                      OpDecorate %791 RelaxedPrecision 
                                                      OpDecorate %795 RelaxedPrecision 
                                                      OpDecorate %796 RelaxedPrecision 
                                                      OpDecorate %797 RelaxedPrecision 
                                                      OpDecorate %801 RelaxedPrecision 
                                                      OpDecorate %802 RelaxedPrecision 
                                                      OpDecorate %803 RelaxedPrecision 
                                                      OpDecorate %815 RelaxedPrecision 
                                                      OpDecorate %816 RelaxedPrecision 
                                                      OpDecorate %820 RelaxedPrecision 
                                                      OpDecorate %821 RelaxedPrecision 
                                                      OpDecorate %822 RelaxedPrecision 
                                                      OpDecorate %823 RelaxedPrecision 
                                                      OpDecorate %824 RelaxedPrecision 
                                                      OpDecorate %825 RelaxedPrecision 
                                                      OpDecorate %826 RelaxedPrecision 
                                                      OpDecorate %827 RelaxedPrecision 
                                                      OpDecorate %828 RelaxedPrecision 
                                                      OpDecorate %829 RelaxedPrecision 
                                                      OpDecorate %830 RelaxedPrecision 
                                                      OpDecorate %832 RelaxedPrecision 
                                                      OpDecorate %833 RelaxedPrecision 
                                                      OpDecorate %834 RelaxedPrecision 
                                                      OpDecorate %835 RelaxedPrecision 
                                                      OpDecorate %864 RelaxedPrecision 
                                                      OpDecorate %865 RelaxedPrecision 
                                                      OpDecorate %867 RelaxedPrecision 
                                                      OpDecorate %868 RelaxedPrecision 
                                                      OpDecorate %872 RelaxedPrecision 
                                                      OpDecorate %873 RelaxedPrecision 
                                                      OpDecorate %875 RelaxedPrecision 
                                                      OpDecorate %877 RelaxedPrecision 
                                                      OpDecorate %879 RelaxedPrecision 
                                                      OpDecorate %880 RelaxedPrecision 
                                                      OpDecorate %881 RelaxedPrecision 
                                                      OpDecorate %884 RelaxedPrecision 
                                                      OpDecorate %886 RelaxedPrecision 
                                                      OpDecorate %887 RelaxedPrecision 
                                                      OpDecorate %888 RelaxedPrecision 
                                                      OpDecorate %888 DescriptorSet 888 
                                                      OpDecorate %888 Binding 888 
                                                      OpDecorate %889 RelaxedPrecision 
                                                      OpDecorate %890 RelaxedPrecision 
                                                      OpDecorate %890 DescriptorSet 890 
                                                      OpDecorate %890 Binding 890 
                                                      OpDecorate %891 RelaxedPrecision 
                                                      OpDecorate %893 RelaxedPrecision 
                                                      OpDecorate %894 RelaxedPrecision 
                                                      OpDecorate %895 RelaxedPrecision 
                                                      OpDecorate %896 RelaxedPrecision 
                                                      OpDecorate %897 RelaxedPrecision 
                                                      OpDecorate %899 RelaxedPrecision 
                                                      OpDecorate %901 RelaxedPrecision 
                                                      OpDecorate %902 RelaxedPrecision 
                                                      OpDecorate %903 RelaxedPrecision 
                                                      OpDecorate %953 RelaxedPrecision 
                                                      OpDecorate %954 RelaxedPrecision 
                                                      OpDecorate %965 RelaxedPrecision 
                                                      OpDecorate %976 RelaxedPrecision 
                                                      OpDecorate %977 RelaxedPrecision 
                                                      OpDecorate %978 RelaxedPrecision 
                                                      OpDecorate %979 RelaxedPrecision 
                                                      OpDecorate %982 RelaxedPrecision 
                                                      OpDecorate %986 RelaxedPrecision 
                                                      OpDecorate %989 RelaxedPrecision 
                                                      OpDecorate %990 RelaxedPrecision 
                                                      OpDecorate %1056 RelaxedPrecision 
                                                      OpDecorate %1082 RelaxedPrecision 
                                                      OpDecorate %1090 RelaxedPrecision 
                                                      OpDecorate %1091 RelaxedPrecision 
                                                      OpDecorate %1092 RelaxedPrecision 
                                                      OpDecorate %1093 RelaxedPrecision 
                                                      OpDecorate %1094 RelaxedPrecision 
                                                      OpDecorate %1095 RelaxedPrecision 
                                                      OpDecorate %1115 RelaxedPrecision 
                                                      OpDecorate %1116 RelaxedPrecision 
                                                      OpDecorate %1117 RelaxedPrecision 
                                                      OpDecorate %1120 RelaxedPrecision 
                                                      OpDecorate %1122 RelaxedPrecision 
                                                      OpDecorate %1123 RelaxedPrecision 
                                                      OpDecorate %1124 RelaxedPrecision 
                                                      OpDecorate %1125 RelaxedPrecision 
                                                      OpDecorate %1126 RelaxedPrecision 
                                                      OpDecorate %1129 RelaxedPrecision 
                                                      OpDecorate %1130 RelaxedPrecision 
                                                      OpDecorate %1131 RelaxedPrecision 
                                                      OpDecorate %1133 RelaxedPrecision 
                                                      OpDecorate %1133 Location 1133 
                                                      OpDecorate %1134 RelaxedPrecision 
                                                      OpDecorate %1135 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Function %7 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                        Input f32_4* vs_TEXCOORD7 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 2 
                                              %18 = OpTypePointer Input %6 
                                              %24 = OpTypePointer Private %6 
                                 Private f32* %25 = OpVariable Private 
                                              %26 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %27 = OpTypePointer UniformConstant %26 
         UniformConstant read_only Texture2D* %28 = OpVariable UniformConstant 
                                              %30 = OpTypeSampler 
                                              %31 = OpTypePointer UniformConstant %30 
                     UniformConstant sampler* %32 = OpVariable UniformConstant 
                                              %34 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                              %35 = OpTypeSampledImage %34 
                                          f32 %38 = OpConstant 3.674022E-40 
                                              %41 = OpTypePointer Private %10 
                               Private f32_4* %42 = OpVariable Private 
                                          u32 %43 = OpConstant 20 
                                              %44 = OpTypeArray %10 %43 
                                              %45 = OpTypeStruct %44 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 
                                              %46 = OpTypePointer Uniform %45 
Uniform struct {f32_4[20]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %47 = OpVariable Uniform 
                                              %48 = OpTypeInt 32 1 
                                          i32 %49 = OpConstant 10 
                                          u32 %50 = OpConstant 0 
                                              %51 = OpTypePointer Uniform %6 
                                          f32 %55 = OpConstant 3.674022E-40 
                                              %66 = OpTypeBool 
                                              %67 = OpTypePointer Private %66 
                                Private bool* %68 = OpVariable Private 
                                Private bool* %72 = OpVariable Private 
                                              %80 = OpTypePointer Function %6 
                               Private f32_4* %89 = OpVariable Private 
                                              %90 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                             %100 = OpTypePointer Private %7 
                              Private f32_3* %101 = OpVariable Private 
                              Private f32_3* %106 = OpVariable Private 
                                         u32 %111 = OpConstant 4 
                                             %112 = OpTypeArray %10 %111 
                                             %113 = OpTypeArray %10 %111 
                                             %114 = OpTypeStruct %10 %10 %10 %112 %113 
                                             %115 = OpTypePointer Uniform %114 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_4[4];}* %116 = OpVariable Uniform 
                                         i32 %117 = OpConstant 0 
                                             %118 = OpTypePointer Uniform %10 
                                Private f32* %127 = OpVariable Private 
                              Private f32_4* %131 = OpVariable Private 
                              Private f32_3* %138 = OpVariable Private 
                                             %139 = OpTypePointer Input %13 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                             %142 = OpTypeStruct %6 %10 %10 %6 %6 %7 %10 %6 %6 %6 %6 
                                             %143 = OpTypePointer Uniform %142 
Uniform struct {f32; f32_4; f32_4; f32; f32; f32_3; f32_4; f32; f32; f32; f32;}* %144 = OpVariable Uniform 
                                         i32 %145 = OpConstant 1 
                              Private f32_3* %156 = OpVariable Private 
        UniformConstant read_only Texture2D* %157 = OpVariable UniformConstant 
                    UniformConstant sampler* %159 = OpVariable UniformConstant 
                                             %161 = OpTypeSampledImage %26 
                              Private f32_3* %167 = OpVariable Private 
        UniformConstant read_only Texture2D* %168 = OpVariable UniformConstant 
                    UniformConstant sampler* %170 = OpVariable UniformConstant 
                              Private f32_3* %177 = OpVariable Private 
                                         f32 %179 = OpConstant 3.674022E-40 
                                       f32_3 %180 = OpConstantComposite %179 %179 %179 
                                         f32 %182 = OpConstant 3.674022E-40 
                                       f32_3 %183 = OpConstantComposite %182 %182 %182 
                              Private f32_4* %185 = OpVariable Private 
        UniformConstant read_only Texture2D* %186 = OpVariable UniformConstant 
                    UniformConstant sampler* %188 = OpVariable UniformConstant 
                                         u32 %194 = OpConstant 1 
                                         i32 %197 = OpConstant 3 
                              Private f32_3* %202 = OpVariable Private 
                                         f32 %215 = OpConstant 3.674022E-40 
                              Private f32_3* %218 = OpVariable Private 
                              Private f32_3* %223 = OpVariable Private 
                                         i32 %225 = OpConstant 2 
                                         f32 %231 = OpConstant 3.674022E-40 
                                       f32_3 %232 = OpConstantComposite %231 %231 %231 
                                         f32 %238 = OpConstant 3.674022E-40 
                                       f32_3 %239 = OpConstantComposite %238 %238 %238 
                              Private f32_3* %241 = OpVariable Private 
                                         f32 %244 = OpConstant 3.674022E-40 
                                         f32 %246 = OpConstant 3.674022E-40 
                        Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                Private f32* %276 = OpVariable Private 
                              Private f32_4* %282 = OpVariable Private 
                                         f32 %296 = OpConstant 3.674022E-40 
                                         f32 %313 = OpConstant 3.674022E-40 
                                       f32_3 %314 = OpConstantComposite %313 %296 %296 
                                Private f32* %318 = OpVariable Private 
                                         f32 %334 = OpConstant 3.674022E-40 
                                Private f32* %393 = OpVariable Private 
                                Private f32* %403 = OpVariable Private 
                              Private f32_3* %419 = OpVariable Private 
        UniformConstant read_only Texture2D* %420 = OpVariable UniformConstant 
                    UniformConstant sampler* %422 = OpVariable UniformConstant 
                              Private f32_3* %429 = OpVariable Private 
                                         i32 %431 = OpConstant 4 
                              Private f32_3* %450 = OpVariable Private 
                                             %467 = OpTypeArray %10 %111 
                                             %468 = OpTypeArray %10 %111 
                                             %469 = OpTypeArray %10 %17 
                                             %470 = OpTypeStruct %467 %468 %10 %10 %10 %469 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 
                                             %471 = OpTypePointer Uniform %470 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4; f32_4[2]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %472 = OpVariable Uniform 
                                             %476 = OpTypePointer Private %48 
                                Private i32* %477 = OpVariable Private 
                                             %481 = OpTypePointer Function %16 
                                Private i32* %492 = OpVariable Private 
                                         u32 %494 = OpConstant 3 
                                             %497 = OpTypePointer Private %16 
                                Private u32* %498 = OpVariable Private 
                                         i32 %501 = OpConstant 5 
                                             %506 = OpTypeVector %16 4 
                                             %507 = OpTypeArray %506 %111 
                                         u32 %508 = OpConstant 1065353216 
                                       u32_4 %509 = OpConstantComposite %508 %50 %50 %50 
                                       u32_4 %510 = OpConstantComposite %50 %508 %50 %50 
                                       u32_4 %511 = OpConstantComposite %50 %50 %508 %50 
                                       u32_4 %512 = OpConstantComposite %50 %50 %50 %508 
                                    u32_4[4] %513 = OpConstantComposite %509 %510 %511 %512 
                                             %515 = OpTypePointer Function %507 
                                             %517 = OpTypePointer Function %506 
                              Private f32_3* %524 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD5 = OpVariable Input 
                                         u32 %528 = OpConstant 32 
                                             %529 = OpTypeArray %10 %528 
                                             %530 = OpTypeArray %10 %528 
                                             %531 = OpTypeArray %10 %528 
                                             %532 = OpTypeArray %10 %528 
                                             %533 = OpTypeArray %10 %528 
                                             %534 = OpTypeStruct %529 %530 %531 %532 %533 
                                             %535 = OpTypePointer Uniform %534 
Uniform struct {f32_4[32]; f32_4[32]; f32_4[32]; f32_4[32]; f32_4[32];}* %536 = OpVariable Uniform 
                                Private f32* %547 = OpVariable Private 
                                         f32 %552 = OpConstant 3.674022E-40 
                                Private f32* %554 = OpVariable Private 
                              Private f32_3* %607 = OpVariable Private 
                              Private f32_3* %628 = OpVariable Private 
                                Private f32* %691 = OpVariable Private 
                                         f32 %702 = OpConstant 3.674022E-40 
                                         f32 %717 = OpConstant 3.674022E-40 
                                         f32 %728 = OpConstant 3.674022E-40 
                                         f32 %749 = OpConstant 3.674022E-40 
                                       f32_3 %750 = OpConstantComposite %749 %749 %749 
                                         i32 %769 = OpConstant 11 
                                         i32 %775 = OpConstant 12 
                              Private f32_3* %786 = OpVariable Private 
                                         i32 %787 = OpConstant 13 
                                         i32 %793 = OpConstant 14 
                                         i32 %799 = OpConstant 15 
                                         i32 %818 = OpConstant 16 
                                       f32_3 %831 = OpConstantComposite %38 %38 %38 
                                       f32_2 %866 = OpConstantComposite %334 %334 
                                         f32 %874 = OpConstant 3.674022E-40 
                                         f32 %876 = OpConstant 3.674022E-40 
                                         f32 %885 = OpConstant 3.674022E-40 
                              Private f32_3* %887 = OpVariable Private 
        UniformConstant read_only Texture2D* %888 = OpVariable UniformConstant 
                    UniformConstant sampler* %890 = OpVariable UniformConstant 
                                Private f32* %939 = OpVariable Private 
                                             %997 = OpTypePointer Uniform %7 
                                        i32 %1058 = OpConstant 8 
                                        i32 %1066 = OpConstant 7 
                                        i32 %1077 = OpConstant 6 
                                        i32 %1083 = OpConstant 9 
                                      f32_3 %1104 = OpConstantComposite %874 %874 %874 
                                        f32 %1108 = OpConstant 3.674022E-40 
                                      f32_3 %1109 = OpConstantComposite %1108 %1108 %1108 
                                        f32 %1127 = OpConstant 3.674022E-40 
                                      f32_3 %1128 = OpConstantComposite %1127 %1127 %1127 
                                            %1132 = OpTypePointer Output %10 
                              Output f32_4* %1133 = OpVariable Output 
                                            %1138 = OpTypePointer Output %6 
                              Private bool* %1141 = OpVariable Private 
                               Private u32* %1142 = OpVariable Private 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32_3* %9 = OpVariable Function 
                                Function f32* %81 = OpVariable Function 
                               Function u32* %482 = OpVariable Function 
                          Function u32_4[4]* %516 = OpVariable Function 
                                        f32_4 %14 = OpLoad vs_TEXCOORD7 
                                        f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                                   Input f32* %19 = OpAccessChain vs_TEXCOORD7 %17 
                                          f32 %20 = OpLoad %19 
                                          f32 %21 = OpCompositeExtract %15 0 
                                          f32 %22 = OpCompositeExtract %15 1 
                                        f32_3 %23 = OpCompositeConstruct %21 %22 %20 
                                                      OpStore %9 %23 
                          read_only Texture2D %29 = OpLoad %28 
                                      sampler %33 = OpLoad %32 
                   read_only Texture2DSampled %36 = OpSampledImage %29 %33 
                                        f32_3 %37 = OpLoad %9 
                                          f32 %39 = OpCompositeExtract %37 2 
                                          f32 %40 = OpImageSampleDrefExplicitLod %36 %37 %39 Lod %6 
                                                      OpStore %25 %40 
                                 Uniform f32* %52 = OpAccessChain %47 %49 %50 
                                          f32 %53 = OpLoad %52 
                                          f32 %54 = OpFNegate %53 
                                          f32 %56 = OpFAdd %54 %55 
                                 Private f32* %57 = OpAccessChain %42 %50 
                                                      OpStore %57 %56 
                                          f32 %58 = OpLoad %25 
                                 Uniform f32* %59 = OpAccessChain %47 %49 %50 
                                          f32 %60 = OpLoad %59 
                                          f32 %61 = OpFMul %58 %60 
                                 Private f32* %62 = OpAccessChain %42 %50 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpFAdd %61 %63 
                                 Private f32* %65 = OpAccessChain %42 %50 
                                                      OpStore %65 %64 
                                   Input f32* %69 = OpAccessChain vs_TEXCOORD7 %17 
                                          f32 %70 = OpLoad %69 
                                         bool %71 = OpFOrdGreaterThanEqual %38 %70 
                                                      OpStore %68 %71 
                                   Input f32* %73 = OpAccessChain vs_TEXCOORD7 %17 
                                          f32 %74 = OpLoad %73 
                                         bool %75 = OpFOrdGreaterThanEqual %74 %55 
                                                      OpStore %72 %75 
                                         bool %76 = OpLoad %72 
                                         bool %77 = OpLoad %68 
                                         bool %78 = OpLogicalOr %76 %77 
                                                      OpStore %68 %78 
                                         bool %79 = OpLoad %68 
                                                      OpSelectionMerge %83 None 
                                                      OpBranchConditional %79 %82 %84 
                                              %82 = OpLabel 
                                                      OpStore %81 %55 
                                                      OpBranch %83 
                                              %84 = OpLabel 
                                 Private f32* %85 = OpAccessChain %42 %50 
                                          f32 %86 = OpLoad %85 
                                                      OpStore %81 %86 
                                                      OpBranch %83 
                                              %83 = OpLabel 
                                          f32 %87 = OpLoad %81 
                                 Private f32* %88 = OpAccessChain %42 %50 
                                                      OpStore %88 %87 
                                        f32_3 %92 = OpLoad vs_TEXCOORD2 
                                        f32_3 %93 = OpLoad vs_TEXCOORD2 
                                          f32 %94 = OpDot %92 %93 
                                 Private f32* %95 = OpAccessChain %89 %50 
                                                      OpStore %95 %94 
                                 Private f32* %96 = OpAccessChain %89 %50 
                                          f32 %97 = OpLoad %96 
                                          f32 %98 = OpExtInst %1 32 %97 
                                 Private f32* %99 = OpAccessChain %89 %50 
                                                      OpStore %99 %98 
                                       f32_4 %102 = OpLoad %89 
                                       f32_3 %103 = OpVectorShuffle %102 %102 0 0 0 
                                       f32_3 %104 = OpLoad vs_TEXCOORD2 
                                       f32_3 %105 = OpFMul %103 %104 
                                                      OpStore %101 %105 
                                       f32_3 %107 = OpLoad vs_TEXCOORD2 
                                       f32_4 %108 = OpLoad %89 
                                       f32_3 %109 = OpVectorShuffle %108 %108 0 0 0 
                                       f32_3 %110 = OpFMul %107 %109 
                              Uniform f32_4* %119 = OpAccessChain %116 %117 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_3 %122 = OpFAdd %110 %121 
                                                      OpStore %106 %122 
                                       f32_3 %123 = OpLoad %106 
                                       f32_3 %124 = OpLoad %106 
                                         f32 %125 = OpDot %123 %124 
                                Private f32* %126 = OpAccessChain %89 %50 
                                                      OpStore %126 %125 
                                Private f32* %128 = OpAccessChain %89 %50 
                                         f32 %129 = OpLoad %128 
                                         f32 %130 = OpExtInst %1 32 %129 
                                                      OpStore %127 %130 
                                         f32 %132 = OpLoad %127 
                                       f32_3 %133 = OpCompositeConstruct %132 %132 %132 
                                       f32_3 %134 = OpLoad %106 
                                       f32_3 %135 = OpFMul %133 %134 
                                       f32_4 %136 = OpLoad %131 
                                       f32_4 %137 = OpVectorShuffle %136 %135 4 5 6 3 
                                                      OpStore %131 %137 
                                       f32_2 %141 = OpLoad vs_TEXCOORD0 
                              Uniform f32_4* %146 = OpAccessChain %144 %145 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 1 
                                       f32_2 %149 = OpFMul %141 %148 
                              Uniform f32_4* %150 = OpAccessChain %144 %145 
                                       f32_4 %151 = OpLoad %150 
                                       f32_2 %152 = OpVectorShuffle %151 %151 2 3 
                                       f32_2 %153 = OpFAdd %149 %152 
                                       f32_3 %154 = OpLoad %138 
                                       f32_3 %155 = OpVectorShuffle %154 %153 3 4 2 
                                                      OpStore %138 %155 
                         read_only Texture2D %158 = OpLoad %157 
                                     sampler %160 = OpLoad %159 
                  read_only Texture2DSampled %162 = OpSampledImage %158 %160 
                                       f32_3 %163 = OpLoad %138 
                                       f32_2 %164 = OpVectorShuffle %163 %163 0 1 
                                       f32_4 %165 = OpImageSampleImplicitLod %162 %164 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                                      OpStore %156 %166 
                         read_only Texture2D %169 = OpLoad %168 
                                     sampler %171 = OpLoad %170 
                  read_only Texture2DSampled %172 = OpSampledImage %169 %171 
                                       f32_3 %173 = OpLoad %138 
                                       f32_2 %174 = OpVectorShuffle %173 %173 0 1 
                                       f32_4 %175 = OpImageSampleImplicitLod %172 %174 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                                      OpStore %167 %176 
                                       f32_3 %178 = OpLoad %167 
                                       f32_3 %181 = OpFMul %178 %180 
                                       f32_3 %184 = OpFAdd %181 %183 
                                                      OpStore %177 %184 
                         read_only Texture2D %187 = OpLoad %186 
                                     sampler %189 = OpLoad %188 
                  read_only Texture2DSampled %190 = OpSampledImage %187 %189 
                                       f32_3 %191 = OpLoad %138 
                                       f32_2 %192 = OpVectorShuffle %191 %191 0 1 
                                       f32_4 %193 = OpImageSampleImplicitLod %190 %192 
                                                      OpStore %185 %193 
                                Private f32* %195 = OpAccessChain %185 %194 
                                         f32 %196 = OpLoad %195 
                                Uniform f32* %198 = OpAccessChain %144 %197 
                                         f32 %199 = OpLoad %198 
                                         f32 %200 = OpFNegate %199 
                                         f32 %201 = OpFAdd %196 %200 
                                                      OpStore %127 %201 
                                         f32 %203 = OpLoad %127 
                                         f32 %204 = OpFNegate %203 
                                         f32 %205 = OpFAdd %204 %55 
                                Private f32* %206 = OpAccessChain %202 %50 
                                                      OpStore %206 %205 
                                Private f32* %207 = OpAccessChain %202 %50 
                                         f32 %208 = OpLoad %207 
                                Private f32* %209 = OpAccessChain %202 %50 
                                         f32 %210 = OpLoad %209 
                                         f32 %211 = OpFMul %208 %210 
                                Private f32* %212 = OpAccessChain %202 %50 
                                                      OpStore %212 %211 
                                Private f32* %213 = OpAccessChain %202 %50 
                                         f32 %214 = OpLoad %213 
                                         f32 %216 = OpExtInst %1 40 %214 %215 
                                Private f32* %217 = OpAccessChain %202 %50 
                                                      OpStore %217 %216 
                                       f32_3 %219 = OpLoad %156 
                                       f32_4 %220 = OpLoad %185 
                                       f32_3 %221 = OpVectorShuffle %220 %220 2 2 2 
                                       f32_3 %222 = OpFMul %219 %221 
                                                      OpStore %218 %222 
                                       f32_3 %224 = OpLoad %218 
                              Uniform f32_4* %226 = OpAccessChain %144 %225 
                                       f32_4 %227 = OpLoad %226 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                       f32_3 %229 = OpFMul %224 %228 
                                                      OpStore %223 %229 
                                       f32_3 %230 = OpLoad %156 
                                       f32_3 %233 = OpFAdd %230 %232 
                                                      OpStore %218 %233 
                                       f32_4 %234 = OpLoad %185 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 0 0 
                                       f32_3 %236 = OpLoad %218 
                                       f32_3 %237 = OpFMul %235 %236 
                                       f32_3 %240 = OpFAdd %237 %239 
                                                      OpStore %218 %240 
                                Private f32* %242 = OpAccessChain %185 %50 
                                         f32 %243 = OpLoad %242 
                                         f32 %245 = OpFMul %243 %244 
                                         f32 %247 = OpFAdd %245 %246 
                                Private f32* %248 = OpAccessChain %241 %50 
                                                      OpStore %248 %247 
                                       f32_3 %249 = OpLoad %156 
                                       f32_3 %250 = OpLoad %241 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 0 0 
                                       f32_3 %252 = OpFMul %249 %251 
                                                      OpStore %241 %252 
                                       f32_4 %253 = OpLoad %185 
                                       f32_3 %254 = OpVectorShuffle %253 %253 3 3 3 
                                       f32_3 %255 = OpLoad %241 
                                       f32_3 %256 = OpFMul %254 %255 
                                                      OpStore %241 %256 
                                       f32_3 %257 = OpLoad %177 
                                       f32_3 %258 = OpVectorShuffle %257 %257 1 1 1 
                                       f32_3 %260 = OpLoad vs_TEXCOORD4 
                                       f32_3 %261 = OpFMul %258 %260 
                                                      OpStore %138 %261 
                                       f32_3 %262 = OpLoad %177 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 0 0 
                                       f32_3 %265 = OpLoad vs_TEXCOORD3 
                                       f32_3 %266 = OpFMul %263 %265 
                                       f32_3 %267 = OpLoad %138 
                                       f32_3 %268 = OpFAdd %266 %267 
                                                      OpStore %138 %268 
                                       f32_3 %269 = OpLoad %177 
                                       f32_3 %270 = OpVectorShuffle %269 %269 2 2 2 
                                       f32_3 %272 = OpLoad vs_TEXCOORD1 
                                       f32_3 %273 = OpFMul %270 %272 
                                       f32_3 %274 = OpLoad %138 
                                       f32_3 %275 = OpFAdd %273 %274 
                                                      OpStore %138 %275 
                                       f32_3 %277 = OpLoad %138 
                                       f32_3 %278 = OpLoad %138 
                                         f32 %279 = OpDot %277 %278 
                                                      OpStore %276 %279 
                                         f32 %280 = OpLoad %276 
                                         f32 %281 = OpExtInst %1 32 %280 
                                                      OpStore %276 %281 
                                         f32 %283 = OpLoad %276 
                                       f32_3 %284 = OpCompositeConstruct %283 %283 %283 
                                       f32_3 %285 = OpLoad %138 
                                       f32_3 %286 = OpFMul %284 %285 
                                       f32_4 %287 = OpLoad %282 
                                       f32_4 %288 = OpVectorShuffle %287 %286 4 5 6 3 
                                                      OpStore %282 %288 
                                       f32_4 %289 = OpLoad %282 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 1 2 
                              Uniform f32_4* %291 = OpAccessChain %116 %117 
                                       f32_4 %292 = OpLoad %291 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
                                         f32 %294 = OpDot %290 %293 
                                                      OpStore %276 %294 
                                         f32 %295 = OpLoad %276 
                                         f32 %297 = OpExtInst %1 40 %295 %296 
                                Private f32* %298 = OpAccessChain %138 %50 
                                                      OpStore %298 %297 
                                       f32_4 %299 = OpLoad %282 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
                                       f32_3 %301 = OpLoad %101 
                                         f32 %302 = OpDot %300 %301 
                                Private f32* %303 = OpAccessChain %89 %194 
                                                      OpStore %303 %302 
                              Uniform f32_4* %304 = OpAccessChain %116 %117 
                                       f32_4 %305 = OpLoad %304 
                                       f32_3 %306 = OpVectorShuffle %305 %305 0 1 2 
                                       f32_4 %307 = OpLoad %131 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
                                         f32 %309 = OpDot %306 %308 
                                Private f32* %310 = OpAccessChain %89 %17 
                                                      OpStore %310 %309 
                                       f32_4 %311 = OpLoad %89 
                                       f32_3 %312 = OpVectorShuffle %311 %311 0 1 2 
                                       f32_3 %315 = OpExtInst %1 40 %312 %314 
                                       f32_4 %316 = OpLoad %89 
                                       f32_4 %317 = OpVectorShuffle %316 %315 4 5 6 3 
                                                      OpStore %89 %317 
                                Private f32* %319 = OpAccessChain %202 %50 
                                         f32 %320 = OpLoad %319 
                                Private f32* %321 = OpAccessChain %202 %50 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpFAdd %320 %322 
                                                      OpStore %318 %323 
                                Private f32* %324 = OpAccessChain %89 %17 
                                         f32 %325 = OpLoad %324 
                                Private f32* %326 = OpAccessChain %89 %17 
                                         f32 %327 = OpLoad %326 
                                         f32 %328 = OpFMul %325 %327 
                                Private f32* %329 = OpAccessChain %131 %50 
                                                      OpStore %329 %328 
                                Private f32* %330 = OpAccessChain %131 %50 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpLoad %318 
                                         f32 %333 = OpFMul %331 %332 
                                         f32 %335 = OpFAdd %333 %334 
                                                      OpStore %318 %335 
                                         f32 %336 = OpLoad %318 
                                         f32 %337 = OpFAdd %336 %182 
                                Private f32* %338 = OpAccessChain %177 %50 
                                                      OpStore %338 %337 
                                Private f32* %339 = OpAccessChain %89 %194 
                                         f32 %340 = OpLoad %339 
                                         f32 %341 = OpFNegate %340 
                                         f32 %342 = OpFAdd %341 %55 
                                Private f32* %343 = OpAccessChain %101 %50 
                                                      OpStore %343 %342 
                                Private f32* %344 = OpAccessChain %101 %50 
                                         f32 %345 = OpLoad %344 
                                         f32 %346 = OpExtInst %1 40 %345 %38 
                                Private f32* %347 = OpAccessChain %101 %50 
                                                      OpStore %347 %346 
                                Private f32* %348 = OpAccessChain %101 %50 
                                         f32 %349 = OpLoad %348 
                                Private f32* %350 = OpAccessChain %101 %50 
                                         f32 %351 = OpLoad %350 
                                         f32 %352 = OpFMul %349 %351 
                                                      OpStore %318 %352 
                                         f32 %353 = OpLoad %318 
                                         f32 %354 = OpLoad %318 
                                         f32 %355 = OpFMul %353 %354 
                                                      OpStore %318 %355 
                                Private f32* %356 = OpAccessChain %101 %50 
                                         f32 %357 = OpLoad %356 
                                         f32 %358 = OpLoad %318 
                                         f32 %359 = OpFMul %357 %358 
                                Private f32* %360 = OpAccessChain %101 %50 
                                                      OpStore %360 %359 
                                Private f32* %361 = OpAccessChain %177 %50 
                                         f32 %362 = OpLoad %361 
                                Private f32* %363 = OpAccessChain %101 %50 
                                         f32 %364 = OpLoad %363 
                                         f32 %365 = OpFMul %362 %364 
                                         f32 %366 = OpFAdd %365 %55 
                                Private f32* %367 = OpAccessChain %101 %50 
                                                      OpStore %367 %366 
                                Private f32* %368 = OpAccessChain %138 %50 
                                         f32 %369 = OpLoad %368 
                                         f32 %370 = OpFNegate %369 
                                         f32 %371 = OpFAdd %370 %55 
                                                      OpStore %318 %371 
                                         f32 %372 = OpLoad %318 
                                         f32 %373 = OpExtInst %1 40 %372 %38 
                                                      OpStore %318 %373 
                                         f32 %374 = OpLoad %318 
                                         f32 %375 = OpLoad %318 
                                         f32 %376 = OpFMul %374 %375 
                                Private f32* %377 = OpAccessChain %131 %50 
                                                      OpStore %377 %376 
                                Private f32* %378 = OpAccessChain %131 %50 
                                         f32 %379 = OpLoad %378 
                                Private f32* %380 = OpAccessChain %131 %50 
                                         f32 %381 = OpLoad %380 
                                         f32 %382 = OpFMul %379 %381 
                                Private f32* %383 = OpAccessChain %131 %50 
                                                      OpStore %383 %382 
                                         f32 %384 = OpLoad %318 
                                Private f32* %385 = OpAccessChain %131 %50 
                                         f32 %386 = OpLoad %385 
                                         f32 %387 = OpFMul %384 %386 
                                                      OpStore %318 %387 
                                Private f32* %388 = OpAccessChain %177 %50 
                                         f32 %389 = OpLoad %388 
                                         f32 %390 = OpLoad %318 
                                         f32 %391 = OpFMul %389 %390 
                                         f32 %392 = OpFAdd %391 %55 
                                                      OpStore %318 %392 
                                Private f32* %394 = OpAccessChain %101 %50 
                                         f32 %395 = OpLoad %394 
                                         f32 %396 = OpLoad %318 
                                         f32 %397 = OpFMul %395 %396 
                                                      OpStore %393 %397 
                                         f32 %398 = OpLoad %393 
                                         f32 %399 = OpExtInst %1 37 %398 %55 
                                                      OpStore %393 %399 
                                         f32 %400 = OpLoad %276 
                                         f32 %401 = OpLoad %393 
                                         f32 %402 = OpFMul %400 %401 
                                                      OpStore %393 %402 
                                         f32 %404 = OpLoad %393 
                                         f32 %405 = OpFMul %404 %334 
                                         f32 %406 = OpFAdd %405 %334 
                                                      OpStore %403 %406 
                                         f32 %407 = OpLoad %403 
                                Private f32* %408 = OpAccessChain %131 %50 
                                                      OpStore %408 %407 
                                Uniform f32* %409 = OpAccessChain %144 %49 
                                         f32 %410 = OpLoad %409 
                                Uniform f32* %411 = OpAccessChain %144 %49 
                                         f32 %412 = OpLoad %411 
                                       f32_2 %413 = OpCompositeConstruct %410 %412 
                                         f32 %414 = OpCompositeExtract %413 0 
                                         f32 %415 = OpCompositeExtract %413 1 
                                       f32_2 %416 = OpCompositeConstruct %414 %415 
                                       f32_4 %417 = OpLoad %131 
                                       f32_4 %418 = OpVectorShuffle %417 %416 0 4 2 5 
                                                      OpStore %131 %418 
                         read_only Texture2D %421 = OpLoad %420 
                                     sampler %423 = OpLoad %422 
                  read_only Texture2DSampled %424 = OpSampledImage %421 %423 
                                       f32_4 %425 = OpLoad %131 
                                       f32_2 %426 = OpVectorShuffle %425 %425 0 1 
                                       f32_4 %427 = OpImageSampleImplicitLod %424 %426 
                                       f32_3 %428 = OpVectorShuffle %427 %427 0 1 2 
                                                      OpStore %419 %428 
                                       f32_3 %430 = OpLoad %419 
                                Uniform f32* %432 = OpAccessChain %144 %431 
                                         f32 %433 = OpLoad %432 
                                Uniform f32* %434 = OpAccessChain %144 %431 
                                         f32 %435 = OpLoad %434 
                                Uniform f32* %436 = OpAccessChain %144 %431 
                                         f32 %437 = OpLoad %436 
                                       f32_3 %438 = OpCompositeConstruct %433 %435 %437 
                                         f32 %439 = OpCompositeExtract %438 0 
                                         f32 %440 = OpCompositeExtract %438 1 
                                         f32 %441 = OpCompositeExtract %438 2 
                                       f32_3 %442 = OpCompositeConstruct %439 %440 %441 
                                       f32_3 %443 = OpFMul %430 %442 
                                                      OpStore %429 %443 
                                Private f32* %444 = OpAccessChain %42 %50 
                                         f32 %445 = OpLoad %444 
                                Private f32* %446 = OpAccessChain %131 %50 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpExtInst %1 37 %445 %447 
                                Private f32* %449 = OpAccessChain %101 %50 
                                                      OpStore %449 %448 
                                       f32_3 %451 = OpLoad %241 
                                       f32_3 %452 = OpLoad %429 
                                       f32_3 %453 = OpFMul %451 %452 
                                                      OpStore %450 %453 
                                       f32_3 %454 = OpLoad %450 
                              Uniform f32_4* %455 = OpAccessChain %116 %145 
                                       f32_4 %456 = OpLoad %455 
                                       f32_3 %457 = OpVectorShuffle %456 %456 0 1 2 
                                       f32_3 %458 = OpFMul %454 %457 
                                                      OpStore %429 %458 
                                       f32_3 %459 = OpLoad %429 
                                       f32_3 %460 = OpLoad %101 
                                       f32_3 %461 = OpVectorShuffle %460 %460 0 0 0 
                                       f32_3 %462 = OpFMul %459 %461 
                                       f32_3 %463 = OpLoad %223 
                                       f32_3 %464 = OpFAdd %462 %463 
                                                      OpStore %429 %464 
                                Uniform f32* %465 = OpAccessChain %116 %225 %50 
                                         f32 %466 = OpLoad %465 
                                Uniform f32* %473 = OpAccessChain %472 %431 %194 
                                         f32 %474 = OpLoad %473 
                                         f32 %475 = OpExtInst %1 37 %466 %474 
                                                      OpStore %393 %475 
                                         f32 %478 = OpLoad %393 
                                         i32 %479 = OpConvertFToS %478 
                                                      OpStore %477 %479 
                                       f32_3 %480 = OpLoad %429 
                                                      OpStore %450 %480 
                                                      OpStore %482 %50 
                                                      OpBranch %483 
                                             %483 = OpLabel 
                                                      OpLoopMerge %485 %486 None 
                                                      OpBranch %487 
                                             %487 = OpLabel 
                                         u32 %488 = OpLoad %482 
                                         i32 %489 = OpLoad %477 
                                         u32 %490 = OpBitcast %489 
                                        bool %491 = OpULessThan %488 %490 
                                                      OpBranchConditional %491 %484 %485 
                                             %484 = OpLabel 
                                         u32 %493 = OpLoad %482 
                                         u32 %495 = OpBitwiseAnd %493 %494 
                                         i32 %496 = OpBitcast %495 
                                                      OpStore %492 %496 
                                         u32 %499 = OpLoad %482 
                                         u32 %500 = OpShiftRightLogical %499 %17 
                                                      OpStore %498 %500 
                                         u32 %502 = OpLoad %498 
                                         i32 %503 = OpBitcast %502 
                              Uniform f32_4* %504 = OpAccessChain %472 %501 %503 
                                       f32_4 %505 = OpLoad %504 
                                         i32 %514 = OpLoad %492 
                                                      OpStore %516 %513 
                             Function u32_4* %518 = OpAccessChain %516 %514 
                                       u32_4 %519 = OpLoad %518 
                                       f32_4 %520 = OpBitcast %519 
                                         f32 %521 = OpDot %505 %520 
                                                      OpStore %393 %521 
                                         f32 %522 = OpLoad %393 
                                         i32 %523 = OpConvertFToS %522 
                                                      OpStore %492 %523 
                                       f32_3 %526 = OpLoad vs_TEXCOORD5 
                                       f32_3 %527 = OpFNegate %526 
                                         i32 %537 = OpLoad %492 
                              Uniform f32_4* %538 = OpAccessChain %536 %117 %537 
                                       f32_4 %539 = OpLoad %538 
                                       f32_3 %540 = OpVectorShuffle %539 %539 3 3 3 
                                       f32_3 %541 = OpFMul %527 %540 
                                         i32 %542 = OpLoad %492 
                              Uniform f32_4* %543 = OpAccessChain %536 %117 %542 
                                       f32_4 %544 = OpLoad %543 
                                       f32_3 %545 = OpVectorShuffle %544 %544 0 1 2 
                                       f32_3 %546 = OpFAdd %541 %545 
                                                      OpStore %524 %546 
                                       f32_3 %548 = OpLoad %524 
                                       f32_3 %549 = OpLoad %524 
                                         f32 %550 = OpDot %548 %549 
                                                      OpStore %547 %550 
                                         f32 %551 = OpLoad %547 
                                         f32 %553 = OpExtInst %1 40 %551 %552 
                                                      OpStore %547 %553 
                                         f32 %555 = OpLoad %547 
                                         f32 %556 = OpExtInst %1 32 %555 
                                                      OpStore %554 %556 
                                         f32 %557 = OpLoad %554 
                                       f32_3 %558 = OpCompositeConstruct %557 %557 %557 
                                       f32_3 %559 = OpLoad %524 
                                       f32_3 %560 = OpFMul %558 %559 
                                                      OpStore %524 %560 
                                         f32 %561 = OpLoad %547 
                                         f32 %562 = OpFDiv %55 %561 
                                                      OpStore %554 %562 
                                         f32 %563 = OpLoad %547 
                                         i32 %564 = OpLoad %492 
                                Uniform f32* %565 = OpAccessChain %536 %225 %564 %50 
                                         f32 %566 = OpLoad %565 
                                         f32 %567 = OpFMul %563 %566 
                                         i32 %568 = OpLoad %492 
                                Uniform f32* %569 = OpAccessChain %536 %225 %568 %194 
                                         f32 %570 = OpLoad %569 
                                         f32 %571 = OpFAdd %567 %570 
                                                      OpStore %547 %571 
                                         f32 %572 = OpLoad %547 
                                         f32 %573 = OpExtInst %1 43 %572 %38 %55 
                                                      OpStore %547 %573 
                                         f32 %574 = OpLoad %547 
                                         f32 %575 = OpLoad %554 
                                         f32 %576 = OpFMul %574 %575 
                                                      OpStore %547 %576 
                                         i32 %577 = OpLoad %492 
                              Uniform f32_4* %578 = OpAccessChain %536 %197 %577 
                                       f32_4 %579 = OpLoad %578 
                                       f32_3 %580 = OpVectorShuffle %579 %579 0 1 2 
                                       f32_3 %581 = OpLoad %524 
                                         f32 %582 = OpDot %580 %581 
                                                      OpStore %393 %582 
                                         f32 %583 = OpLoad %393 
                                         i32 %584 = OpLoad %492 
                                Uniform f32* %585 = OpAccessChain %536 %225 %584 %17 
                                         f32 %586 = OpLoad %585 
                                         f32 %587 = OpFMul %583 %586 
                                         i32 %588 = OpLoad %492 
                                Uniform f32* %589 = OpAccessChain %536 %225 %588 %494 
                                         f32 %590 = OpLoad %589 
                                         f32 %591 = OpFAdd %587 %590 
                                                      OpStore %393 %591 
                                         f32 %592 = OpLoad %393 
                                         f32 %593 = OpExtInst %1 43 %592 %38 %55 
                                                      OpStore %393 %593 
                                         f32 %594 = OpLoad %393 
                                         f32 %595 = OpLoad %393 
                                         f32 %596 = OpFMul %594 %595 
                                                      OpStore %393 %596 
                                         f32 %597 = OpLoad %547 
                                         f32 %598 = OpLoad %393 
                                         f32 %599 = OpFMul %597 %598 
                                                      OpStore %547 %599 
                                       f32_4 %600 = OpLoad %282 
                                       f32_3 %601 = OpVectorShuffle %600 %600 0 1 2 
                                       f32_3 %602 = OpLoad %524 
                                         f32 %603 = OpDot %601 %602 
                                                      OpStore %554 %603 
                                         f32 %604 = OpLoad %554 
                                         f32 %605 = OpExtInst %1 40 %604 %296 
                                Private f32* %606 = OpAccessChain %131 %17 
                                                      OpStore %606 %605 
                         read_only Texture2D %608 = OpLoad %420 
                                     sampler %609 = OpLoad %422 
                  read_only Texture2DSampled %610 = OpSampledImage %608 %609 
                                       f32_4 %611 = OpLoad %131 
                                       f32_2 %612 = OpVectorShuffle %611 %611 2 3 
                                       f32_4 %613 = OpImageSampleImplicitLod %610 %612 
                                       f32_3 %614 = OpVectorShuffle %613 %613 0 1 2 
                                                      OpStore %607 %614 
                                       f32_3 %615 = OpLoad %607 
                                Uniform f32* %616 = OpAccessChain %144 %431 
                                         f32 %617 = OpLoad %616 
                                Uniform f32* %618 = OpAccessChain %144 %431 
                                         f32 %619 = OpLoad %618 
                                Uniform f32* %620 = OpAccessChain %144 %431 
                                         f32 %621 = OpLoad %620 
                                       f32_3 %622 = OpCompositeConstruct %617 %619 %621 
                                         f32 %623 = OpCompositeExtract %622 0 
                                         f32 %624 = OpCompositeExtract %622 1 
                                         f32 %625 = OpCompositeExtract %622 2 
                                       f32_3 %626 = OpCompositeConstruct %623 %624 %625 
                                       f32_3 %627 = OpFMul %615 %626 
                                                      OpStore %524 %627 
                                       f32_3 %629 = OpLoad %241 
                                       f32_3 %630 = OpLoad %524 
                                       f32_3 %631 = OpFMul %629 %630 
                                                      OpStore %628 %631 
                                       f32_3 %632 = OpLoad %628 
                                         i32 %633 = OpLoad %492 
                              Uniform f32_4* %634 = OpAccessChain %536 %145 %633 
                                       f32_4 %635 = OpLoad %634 
                                       f32_3 %636 = OpVectorShuffle %635 %635 0 1 2 
                                       f32_3 %637 = OpFMul %632 %636 
                                                      OpStore %628 %637 
                                       f32_3 %638 = OpLoad %628 
                                         f32 %639 = OpLoad %547 
                                       f32_3 %640 = OpCompositeConstruct %639 %639 %639 
                                       f32_3 %641 = OpFMul %638 %640 
                                       f32_3 %642 = OpLoad %223 
                                       f32_3 %643 = OpFAdd %641 %642 
                                                      OpStore %628 %643 
                                       f32_3 %644 = OpLoad %450 
                                       f32_3 %645 = OpLoad %628 
                                       f32_3 %646 = OpFAdd %644 %645 
                                                      OpStore %450 %646 
                                                      OpBranch %486 
                                             %486 = OpLabel 
                                         u32 %647 = OpLoad %482 
                                         u32 %648 = OpIAdd %647 %145 
                                                      OpStore %482 %648 
                                                      OpBranch %483 
                                             %485 = OpLabel 
                                Private f32* %649 = OpAccessChain %89 %50 
                                         f32 %650 = OpLoad %649 
                                         f32 %651 = OpExtInst %1 32 %650 
                                Private f32* %652 = OpAccessChain %89 %50 
                                                      OpStore %652 %651 
                                       f32_4 %653 = OpLoad %89 
                                       f32_3 %654 = OpVectorShuffle %653 %653 0 0 0 
                                       f32_3 %655 = OpLoad %106 
                                       f32_3 %656 = OpFMul %654 %655 
                                       f32_4 %657 = OpLoad %89 
                                       f32_4 %658 = OpVectorShuffle %657 %656 4 5 2 6 
                                                      OpStore %89 %658 
                                       f32_4 %659 = OpLoad %282 
                                       f32_3 %660 = OpVectorShuffle %659 %659 0 1 2 
                                       f32_4 %661 = OpLoad %89 
                                       f32_3 %662 = OpVectorShuffle %661 %661 0 1 3 
                                         f32 %663 = OpDot %660 %662 
                                Private f32* %664 = OpAccessChain %106 %50 
                                                      OpStore %664 %663 
                                Private f32* %665 = OpAccessChain %106 %50 
                                         f32 %666 = OpLoad %665 
                                         f32 %667 = OpExtInst %1 43 %666 %38 %55 
                                Private f32* %668 = OpAccessChain %106 %50 
                                                      OpStore %668 %667 
                              Uniform f32_4* %669 = OpAccessChain %116 %117 
                                       f32_4 %670 = OpLoad %669 
                                       f32_3 %671 = OpVectorShuffle %670 %670 0 1 2 
                                       f32_4 %672 = OpLoad %89 
                                       f32_3 %673 = OpVectorShuffle %672 %672 0 1 3 
                                         f32 %674 = OpDot %671 %673 
                                Private f32* %675 = OpAccessChain %89 %50 
                                                      OpStore %675 %674 
                                Private f32* %676 = OpAccessChain %89 %50 
                                         f32 %677 = OpLoad %676 
                                         f32 %678 = OpExtInst %1 43 %677 %38 %55 
                                Private f32* %679 = OpAccessChain %89 %50 
                                                      OpStore %679 %678 
                                Private f32* %680 = OpAccessChain %106 %50 
                                         f32 %681 = OpLoad %680 
                                Private f32* %682 = OpAccessChain %106 %50 
                                         f32 %683 = OpLoad %682 
                                         f32 %684 = OpFMul %681 %683 
                                Private f32* %685 = OpAccessChain %101 %50 
                                                      OpStore %685 %684 
                                Private f32* %686 = OpAccessChain %202 %50 
                                         f32 %687 = OpLoad %686 
                                Private f32* %688 = OpAccessChain %202 %50 
                                         f32 %689 = OpLoad %688 
                                         f32 %690 = OpFMul %687 %689 
                                                      OpStore %393 %690 
                                Private f32* %692 = OpAccessChain %202 %50 
                                         f32 %693 = OpLoad %692 
                                Private f32* %694 = OpAccessChain %202 %50 
                                         f32 %695 = OpLoad %694 
                                         f32 %696 = OpFMul %693 %695 
                                         f32 %697 = OpFAdd %696 %182 
                                                      OpStore %691 %697 
                                Private f32* %698 = OpAccessChain %101 %50 
                                         f32 %699 = OpLoad %698 
                                         f32 %700 = OpLoad %691 
                                         f32 %701 = OpFMul %699 %700 
                                         f32 %703 = OpFAdd %701 %702 
                                Private f32* %704 = OpAccessChain %101 %50 
                                                      OpStore %704 %703 
                                Private f32* %705 = OpAccessChain %89 %50 
                                         f32 %706 = OpLoad %705 
                                Private f32* %707 = OpAccessChain %89 %50 
                                         f32 %708 = OpLoad %707 
                                         f32 %709 = OpFMul %706 %708 
                                                      OpStore %691 %709 
                                Private f32* %710 = OpAccessChain %101 %50 
                                         f32 %711 = OpLoad %710 
                                Private f32* %712 = OpAccessChain %101 %50 
                                         f32 %713 = OpLoad %712 
                                         f32 %714 = OpFMul %711 %713 
                                Private f32* %715 = OpAccessChain %89 %50 
                                                      OpStore %715 %714 
                                         f32 %716 = OpLoad %691 
                                         f32 %718 = OpExtInst %1 40 %716 %717 
                                Private f32* %719 = OpAccessChain %101 %50 
                                                      OpStore %719 %718 
                                Private f32* %720 = OpAccessChain %101 %50 
                                         f32 %721 = OpLoad %720 
                                Private f32* %722 = OpAccessChain %89 %50 
                                         f32 %723 = OpLoad %722 
                                         f32 %724 = OpFMul %721 %723 
                                Private f32* %725 = OpAccessChain %89 %50 
                                                      OpStore %725 %724 
                                Private f32* %726 = OpAccessChain %202 %50 
                                         f32 %727 = OpLoad %726 
                                         f32 %729 = OpFMul %727 %728 
                                         f32 %730 = OpFAdd %729 %179 
                                                      OpStore %691 %730 
                                Private f32* %731 = OpAccessChain %89 %50 
                                         f32 %732 = OpLoad %731 
                                         f32 %733 = OpLoad %691 
                                         f32 %734 = OpFMul %732 %733 
                                Private f32* %735 = OpAccessChain %89 %50 
                                                      OpStore %735 %734 
                                         f32 %736 = OpLoad %393 
                                Private f32* %737 = OpAccessChain %89 %50 
                                         f32 %738 = OpLoad %737 
                                         f32 %739 = OpFDiv %736 %738 
                                Private f32* %740 = OpAccessChain %89 %50 
                                                      OpStore %740 %739 
                                       f32_3 %741 = OpLoad %218 
                                       f32_4 %742 = OpLoad %89 
                                       f32_3 %743 = OpVectorShuffle %742 %742 0 0 0 
                                       f32_3 %744 = OpFMul %741 %743 
                                       f32_4 %745 = OpLoad %89 
                                       f32_4 %746 = OpVectorShuffle %745 %744 4 5 2 6 
                                                      OpStore %89 %746 
                                       f32_4 %747 = OpLoad %89 
                                       f32_3 %748 = OpVectorShuffle %747 %747 0 1 3 
                                       f32_3 %751 = OpFMul %748 %750 
                                                      OpStore %628 %751 
                                       f32_3 %752 = OpLoad %628 
                              Uniform f32_4* %753 = OpAccessChain %116 %145 
                                       f32_4 %754 = OpLoad %753 
                                       f32_3 %755 = OpVectorShuffle %754 %754 0 1 2 
                                       f32_3 %756 = OpFMul %752 %755 
                                                      OpStore %106 %756 
                                       f32_3 %757 = OpLoad %106 
                                       f32_3 %758 = OpLoad %138 
                                       f32_3 %759 = OpVectorShuffle %758 %758 0 0 0 
                                       f32_3 %760 = OpFMul %757 %759 
                                       f32_3 %761 = OpLoad %450 
                                       f32_3 %762 = OpFAdd %760 %761 
                                                      OpStore %450 %762 
                                Private f32* %763 = OpAccessChain %282 %494 
                                                      OpStore %763 %55 
                              Uniform f32_4* %764 = OpAccessChain %472 %49 
                                       f32_4 %765 = OpLoad %764 
                                       f32_4 %766 = OpLoad %282 
                                         f32 %767 = OpDot %765 %766 
                                Private f32* %768 = OpAccessChain %628 %50 
                                                      OpStore %768 %767 
                              Uniform f32_4* %770 = OpAccessChain %472 %769 
                                       f32_4 %771 = OpLoad %770 
                                       f32_4 %772 = OpLoad %282 
                                         f32 %773 = OpDot %771 %772 
                                Private f32* %774 = OpAccessChain %628 %194 
                                                      OpStore %774 %773 
                              Uniform f32_4* %776 = OpAccessChain %472 %775 
                                       f32_4 %777 = OpLoad %776 
                                       f32_4 %778 = OpLoad %282 
                                         f32 %779 = OpDot %777 %778 
                                Private f32* %780 = OpAccessChain %628 %17 
                                                      OpStore %780 %779 
                                       f32_4 %781 = OpLoad %282 
                                       f32_4 %782 = OpVectorShuffle %781 %781 1 2 2 0 
                                       f32_4 %783 = OpLoad %282 
                                       f32_4 %784 = OpVectorShuffle %783 %783 0 1 2 2 
                                       f32_4 %785 = OpFMul %782 %784 
                                                      OpStore %42 %785 
                              Uniform f32_4* %788 = OpAccessChain %472 %787 
                                       f32_4 %789 = OpLoad %788 
                                       f32_4 %790 = OpLoad %42 
                                         f32 %791 = OpDot %789 %790 
                                Private f32* %792 = OpAccessChain %786 %50 
                                                      OpStore %792 %791 
                              Uniform f32_4* %794 = OpAccessChain %472 %793 
                                       f32_4 %795 = OpLoad %794 
                                       f32_4 %796 = OpLoad %42 
                                         f32 %797 = OpDot %795 %796 
                                Private f32* %798 = OpAccessChain %786 %194 
                                                      OpStore %798 %797 
                              Uniform f32_4* %800 = OpAccessChain %472 %799 
                                       f32_4 %801 = OpLoad %800 
                                       f32_4 %802 = OpLoad %42 
                                         f32 %803 = OpDot %801 %802 
                                Private f32* %804 = OpAccessChain %786 %17 
                                                      OpStore %804 %803 
                                Private f32* %805 = OpAccessChain %282 %194 
                                         f32 %806 = OpLoad %805 
                                Private f32* %807 = OpAccessChain %282 %194 
                                         f32 %808 = OpLoad %807 
                                         f32 %809 = OpFMul %806 %808 
                                                      OpStore %393 %809 
                                Private f32* %810 = OpAccessChain %282 %50 
                                         f32 %811 = OpLoad %810 
                                Private f32* %812 = OpAccessChain %282 %50 
                                         f32 %813 = OpLoad %812 
                                         f32 %814 = OpFMul %811 %813 
                                         f32 %815 = OpLoad %393 
                                         f32 %816 = OpFNegate %815 
                                         f32 %817 = OpFAdd %814 %816 
                                                      OpStore %393 %817 
                              Uniform f32_4* %819 = OpAccessChain %472 %818 
                                       f32_4 %820 = OpLoad %819 
                                       f32_3 %821 = OpVectorShuffle %820 %820 0 1 2 
                                         f32 %822 = OpLoad %393 
                                       f32_3 %823 = OpCompositeConstruct %822 %822 %822 
                                       f32_3 %824 = OpFMul %821 %823 
                                       f32_3 %825 = OpLoad %786 
                                       f32_3 %826 = OpFAdd %824 %825 
                                                      OpStore %786 %826 
                                       f32_3 %827 = OpLoad %628 
                                       f32_3 %828 = OpLoad %786 
                                       f32_3 %829 = OpFAdd %827 %828 
                                                      OpStore %628 %829 
                                       f32_3 %830 = OpLoad %628 
                                       f32_3 %832 = OpExtInst %1 40 %830 %831 
                                                      OpStore %628 %832 
                                       f32_3 %833 = OpLoad %241 
                                       f32_3 %834 = OpLoad %628 
                                       f32_3 %835 = OpFMul %833 %834 
                                                      OpStore %241 %835 
                                Uniform f32* %836 = OpAccessChain %116 %197 %117 %50 
                                         f32 %837 = OpLoad %836 
                                Private f32* %838 = OpAccessChain %106 %50 
                                                      OpStore %838 %837 
                                Uniform f32* %839 = OpAccessChain %116 %197 %145 %50 
                                         f32 %840 = OpLoad %839 
                                Private f32* %841 = OpAccessChain %106 %194 
                                                      OpStore %841 %840 
                                Uniform f32* %842 = OpAccessChain %116 %197 %225 %50 
                                         f32 %843 = OpLoad %842 
                                Private f32* %844 = OpAccessChain %106 %17 
                                                      OpStore %844 %843 
                                       f32_3 %845 = OpLoad %106 
                                       f32_4 %846 = OpLoad %282 
                                       f32_3 %847 = OpVectorShuffle %846 %846 0 1 2 
                                         f32 %848 = OpDot %845 %847 
                                Private f32* %849 = OpAccessChain %628 %50 
                                                      OpStore %849 %848 
                                Uniform f32* %850 = OpAccessChain %116 %197 %117 %194 
                                         f32 %851 = OpLoad %850 
                                Private f32* %852 = OpAccessChain %106 %50 
                                                      OpStore %852 %851 
                                Uniform f32* %853 = OpAccessChain %116 %197 %145 %194 
                                         f32 %854 = OpLoad %853 
                                Private f32* %855 = OpAccessChain %106 %194 
                                                      OpStore %855 %854 
                                Uniform f32* %856 = OpAccessChain %116 %197 %225 %194 
                                         f32 %857 = OpLoad %856 
                                Private f32* %858 = OpAccessChain %106 %17 
                                                      OpStore %858 %857 
                                       f32_3 %859 = OpLoad %106 
                                       f32_4 %860 = OpLoad %282 
                                       f32_3 %861 = OpVectorShuffle %860 %860 0 1 2 
                                         f32 %862 = OpDot %859 %861 
                                Private f32* %863 = OpAccessChain %628 %194 
                                                      OpStore %863 %862 
                                       f32_3 %864 = OpLoad %628 
                                       f32_2 %865 = OpVectorShuffle %864 %864 0 1 
                                       f32_2 %867 = OpFMul %865 %866 
                                       f32_2 %868 = OpFAdd %867 %866 
                                       f32_3 %869 = OpLoad %628 
                                       f32_3 %870 = OpVectorShuffle %869 %868 3 4 2 
                                                      OpStore %628 %870 
                                Private f32* %871 = OpAccessChain %202 %50 
                                         f32 %872 = OpLoad %871 
                                         f32 %873 = OpFNegate %872 
                                         f32 %875 = OpFMul %873 %874 
                                         f32 %877 = OpFAdd %875 %876 
                                                      OpStore %393 %877 
                                Private f32* %878 = OpAccessChain %202 %50 
                                         f32 %879 = OpLoad %878 
                                         f32 %880 = OpLoad %393 
                                         f32 %881 = OpFMul %879 %880 
                                Private f32* %882 = OpAccessChain %202 %50 
                                                      OpStore %882 %881 
                                Private f32* %883 = OpAccessChain %202 %50 
                                         f32 %884 = OpLoad %883 
                                         f32 %886 = OpFMul %884 %885 
                                                      OpStore %393 %886 
                         read_only Texture2D %889 = OpLoad %888 
                                     sampler %891 = OpLoad %890 
                  read_only Texture2DSampled %892 = OpSampledImage %889 %891 
                                       f32_3 %893 = OpLoad %628 
                                       f32_2 %894 = OpVectorShuffle %893 %893 0 1 
                                         f32 %895 = OpLoad %393 
                                       f32_4 %896 = OpImageSampleExplicitLod %892 %894 Lod %10 
                                       f32_3 %897 = OpVectorShuffle %896 %896 0 1 2 
                                                      OpStore %887 %897 
                                Private f32* %898 = OpAccessChain %202 %50 
                                         f32 %899 = OpLoad %898 
                                Private f32* %900 = OpAccessChain %202 %50 
                                         f32 %901 = OpLoad %900 
                                         f32 %902 = OpFMul %899 %901 
                                         f32 %903 = OpFAdd %902 %55 
                                Private f32* %904 = OpAccessChain %131 %50 
                                                      OpStore %904 %903 
                                Private f32* %905 = OpAccessChain %131 %50 
                                         f32 %906 = OpLoad %905 
                                         f32 %907 = OpFDiv %55 %906 
                                Private f32* %908 = OpAccessChain %131 %50 
                                                      OpStore %908 %907 
                                Private f32* %909 = OpAccessChain %89 %194 
                                         f32 %910 = OpLoad %909 
                                Private f32* %911 = OpAccessChain %89 %50 
                                         f32 %912 = OpLoad %911 
                                         f32 %913 = OpExtInst %1 40 %910 %912 
                                Private f32* %914 = OpAccessChain %89 %50 
                                                      OpStore %914 %913 
                                Private f32* %915 = OpAccessChain %89 %494 
                                         f32 %916 = OpLoad %915 
                                Private f32* %917 = OpAccessChain %89 %50 
                                         f32 %918 = OpLoad %917 
                                         f32 %919 = OpExtInst %1 40 %916 %918 
                                Private f32* %920 = OpAccessChain %89 %50 
                                                      OpStore %920 %919 
                                         f32 %921 = OpLoad %127 
                                Private f32* %922 = OpAccessChain %89 %50 
                                         f32 %923 = OpLoad %922 
                                         f32 %924 = OpFAdd %921 %923 
                                Private f32* %925 = OpAccessChain %89 %50 
                                                      OpStore %925 %924 
                                Private f32* %926 = OpAccessChain %89 %50 
                                         f32 %927 = OpLoad %926 
                                         f32 %928 = OpExtInst %1 43 %927 %38 %55 
                                Private f32* %929 = OpAccessChain %89 %50 
                                                      OpStore %929 %928 
                                Private f32* %930 = OpAccessChain %89 %17 
                                         f32 %931 = OpLoad %930 
                                         f32 %932 = OpFNegate %931 
                                         f32 %933 = OpFAdd %932 %55 
                                Private f32* %934 = OpAccessChain %101 %50 
                                                      OpStore %934 %933 
                                Private f32* %935 = OpAccessChain %101 %50 
                                         f32 %936 = OpLoad %935 
                                         f32 %937 = OpExtInst %1 40 %936 %38 
                                Private f32* %938 = OpAccessChain %101 %50 
                                                      OpStore %938 %937 
                                Private f32* %940 = OpAccessChain %101 %50 
                                         f32 %941 = OpLoad %940 
                                Private f32* %942 = OpAccessChain %101 %50 
                                         f32 %943 = OpLoad %942 
                                         f32 %944 = OpFMul %941 %943 
                                                      OpStore %939 %944 
                                         f32 %945 = OpLoad %939 
                                         f32 %946 = OpLoad %939 
                                         f32 %947 = OpFMul %945 %946 
                                                      OpStore %939 %947 
                                Private f32* %948 = OpAccessChain %101 %50 
                                         f32 %949 = OpLoad %948 
                                         f32 %950 = OpLoad %939 
                                         f32 %951 = OpFMul %949 %950 
                                Private f32* %952 = OpAccessChain %101 %50 
                                                      OpStore %952 %951 
                                       f32_3 %953 = OpLoad %218 
                                       f32_3 %954 = OpFNegate %953 
                                       f32_4 %955 = OpLoad %89 
                                       f32_3 %956 = OpVectorShuffle %955 %955 0 0 0 
                                       f32_3 %957 = OpFAdd %954 %956 
                                       f32_4 %958 = OpLoad %89 
                                       f32_4 %959 = OpVectorShuffle %958 %957 4 1 5 6 
                                                      OpStore %89 %959 
                                       f32_3 %960 = OpLoad %101 
                                       f32_3 %961 = OpVectorShuffle %960 %960 0 0 0 
                                       f32_4 %962 = OpLoad %89 
                                       f32_3 %963 = OpVectorShuffle %962 %962 0 2 3 
                                       f32_3 %964 = OpFMul %961 %963 
                                       f32_3 %965 = OpLoad %218 
                                       f32_3 %966 = OpFAdd %964 %965 
                                       f32_4 %967 = OpLoad %89 
                                       f32_4 %968 = OpVectorShuffle %967 %966 4 5 6 3 
                                                      OpStore %89 %968 
                                       f32_4 %969 = OpLoad %131 
                                       f32_3 %970 = OpVectorShuffle %969 %969 0 0 0 
                                       f32_4 %971 = OpLoad %89 
                                       f32_3 %972 = OpVectorShuffle %971 %971 0 1 2 
                                       f32_3 %973 = OpFMul %970 %972 
                                       f32_4 %974 = OpLoad %89 
                                       f32_4 %975 = OpVectorShuffle %974 %973 4 5 6 3 
                                                      OpStore %89 %975 
                                       f32_4 %976 = OpLoad %185 
                                       f32_3 %977 = OpVectorShuffle %976 %976 3 3 3 
                                       f32_3 %978 = OpLoad %887 
                                       f32_3 %979 = OpFMul %977 %978 
                                                      OpStore %202 %979 
                                       f32_4 %980 = OpLoad %89 
                                       f32_3 %981 = OpVectorShuffle %980 %980 0 1 2 
                                       f32_3 %982 = OpLoad %202 
                                       f32_3 %983 = OpFMul %981 %982 
                                       f32_4 %984 = OpLoad %89 
                                       f32_4 %985 = OpVectorShuffle %984 %983 4 5 6 3 
                                                      OpStore %89 %985 
                                       f32_3 %986 = OpLoad %241 
                                Uniform f32* %987 = OpAccessChain %144 %117 
                                         f32 %988 = OpLoad %987 
                                       f32_3 %989 = OpCompositeConstruct %988 %988 %988 
                                       f32_3 %990 = OpFMul %986 %989 
                                       f32_4 %991 = OpLoad %89 
                                       f32_3 %992 = OpVectorShuffle %991 %991 0 1 2 
                                       f32_3 %993 = OpFAdd %990 %992 
                                                      OpStore %202 %993 
                              Uniform f32_4* %994 = OpAccessChain %116 %431 %145 
                                       f32_4 %995 = OpLoad %994 
                                       f32_3 %996 = OpVectorShuffle %995 %995 0 1 2 
                              Uniform f32_3* %998 = OpAccessChain %144 %501 
                                       f32_3 %999 = OpLoad %998 
                                      f32_3 %1000 = OpVectorShuffle %999 %999 1 1 1 
                                      f32_3 %1001 = OpFMul %996 %1000 
                                      f32_4 %1002 = OpLoad %89 
                                      f32_4 %1003 = OpVectorShuffle %1002 %1001 4 5 6 3 
                                                      OpStore %89 %1003 
                             Uniform f32_4* %1004 = OpAccessChain %116 %431 %117 
                                      f32_4 %1005 = OpLoad %1004 
                                      f32_3 %1006 = OpVectorShuffle %1005 %1005 0 1 2 
                             Uniform f32_3* %1007 = OpAccessChain %144 %501 
                                      f32_3 %1008 = OpLoad %1007 
                                      f32_3 %1009 = OpVectorShuffle %1008 %1008 0 0 0 
                                      f32_3 %1010 = OpFMul %1006 %1009 
                                      f32_4 %1011 = OpLoad %89 
                                      f32_3 %1012 = OpVectorShuffle %1011 %1011 0 1 2 
                                      f32_3 %1013 = OpFAdd %1010 %1012 
                                      f32_4 %1014 = OpLoad %89 
                                      f32_4 %1015 = OpVectorShuffle %1014 %1013 4 5 6 3 
                                                      OpStore %89 %1015 
                             Uniform f32_4* %1016 = OpAccessChain %116 %431 %225 
                                      f32_4 %1017 = OpLoad %1016 
                                      f32_3 %1018 = OpVectorShuffle %1017 %1017 0 1 2 
                             Uniform f32_3* %1019 = OpAccessChain %144 %501 
                                      f32_3 %1020 = OpLoad %1019 
                                      f32_3 %1021 = OpVectorShuffle %1020 %1020 2 2 2 
                                      f32_3 %1022 = OpFMul %1018 %1021 
                                      f32_4 %1023 = OpLoad %89 
                                      f32_3 %1024 = OpVectorShuffle %1023 %1023 0 1 2 
                                      f32_3 %1025 = OpFAdd %1022 %1024 
                                      f32_4 %1026 = OpLoad %89 
                                      f32_4 %1027 = OpVectorShuffle %1026 %1025 4 5 6 3 
                                                      OpStore %89 %1027 
                                      f32_4 %1028 = OpLoad %89 
                                      f32_3 %1029 = OpVectorShuffle %1028 %1028 0 1 2 
                                      f32_4 %1030 = OpLoad %89 
                                      f32_3 %1031 = OpVectorShuffle %1030 %1030 0 1 2 
                                        f32 %1032 = OpDot %1029 %1031 
                                                      OpStore %318 %1032 
                                        f32 %1033 = OpLoad %318 
                                        f32 %1034 = OpExtInst %1 32 %1033 
                                                      OpStore %318 %1034 
                                        f32 %1035 = OpLoad %318 
                                      f32_3 %1036 = OpCompositeConstruct %1035 %1035 %1035 
                                      f32_4 %1037 = OpLoad %89 
                                      f32_3 %1038 = OpVectorShuffle %1037 %1037 0 1 2 
                                      f32_3 %1039 = OpFMul %1036 %1038 
                                      f32_4 %1040 = OpLoad %89 
                                      f32_4 %1041 = OpVectorShuffle %1040 %1039 4 5 6 3 
                                                      OpStore %89 %1041 
                                      f32_4 %1042 = OpLoad %282 
                                      f32_3 %1043 = OpVectorShuffle %1042 %1042 0 1 2 
                                      f32_4 %1044 = OpLoad %89 
                                      f32_3 %1045 = OpVectorShuffle %1044 %1044 0 1 2 
                                        f32 %1046 = OpDot %1043 %1045 
                               Private f32* %1047 = OpAccessChain %89 %50 
                                                      OpStore %1047 %1046 
                               Private f32* %1048 = OpAccessChain %89 %50 
                                        f32 %1049 = OpLoad %1048 
                                        f32 %1050 = OpFMul %1049 %334 
                                        f32 %1051 = OpFAdd %1050 %334 
                               Private f32* %1052 = OpAccessChain %89 %50 
                                                      OpStore %1052 %1051 
                               Private f32* %1053 = OpAccessChain %89 %50 
                                        f32 %1054 = OpLoad %1053 
                               Private f32* %1055 = OpAccessChain %185 %494 
                                        f32 %1056 = OpLoad %1055 
                                        f32 %1057 = OpFMul %1054 %1056 
                               Uniform f32* %1059 = OpAccessChain %144 %1058 
                                        f32 %1060 = OpLoad %1059 
                                        f32 %1061 = OpFNegate %1060 
                                        f32 %1062 = OpFAdd %1057 %1061 
                               Private f32* %1063 = OpAccessChain %89 %50 
                                                      OpStore %1063 %1062 
                               Private f32* %1064 = OpAccessChain %89 %50 
                                        f32 %1065 = OpLoad %1064 
                               Uniform f32* %1067 = OpAccessChain %144 %1066 
                                        f32 %1068 = OpLoad %1067 
                                        f32 %1069 = OpFMul %1065 %1068 
                               Private f32* %1070 = OpAccessChain %89 %50 
                                                      OpStore %1070 %1069 
                               Private f32* %1071 = OpAccessChain %89 %50 
                                        f32 %1072 = OpLoad %1071 
                                        f32 %1073 = OpExtInst %1 43 %1072 %38 %55 
                               Private f32* %1074 = OpAccessChain %89 %50 
                                                      OpStore %1074 %1073 
                                      f32_4 %1075 = OpLoad %89 
                                      f32_3 %1076 = OpVectorShuffle %1075 %1075 0 0 0 
                             Uniform f32_4* %1078 = OpAccessChain %144 %1077 
                                      f32_4 %1079 = OpLoad %1078 
                                      f32_3 %1080 = OpVectorShuffle %1079 %1079 0 1 2 
                                      f32_3 %1081 = OpFMul %1076 %1080 
                                                      OpStore %241 %1081 
                                      f32_3 %1082 = OpLoad %241 
                               Uniform f32* %1084 = OpAccessChain %144 %1083 
                                        f32 %1085 = OpLoad %1084 
                               Uniform f32* %1086 = OpAccessChain %144 %1083 
                                        f32 %1087 = OpLoad %1086 
                               Uniform f32* %1088 = OpAccessChain %144 %1083 
                                        f32 %1089 = OpLoad %1088 
                                      f32_3 %1090 = OpCompositeConstruct %1085 %1087 %1089 
                                        f32 %1091 = OpCompositeExtract %1090 0 
                                        f32 %1092 = OpCompositeExtract %1090 1 
                                        f32 %1093 = OpCompositeExtract %1090 2 
                                      f32_3 %1094 = OpCompositeConstruct %1091 %1092 %1093 
                                      f32_3 %1095 = OpFMul %1082 %1094 
                                      f32_4 %1096 = OpLoad %89 
                                      f32_4 %1097 = OpVectorShuffle %1096 %1095 4 5 6 3 
                                                      OpStore %89 %1097 
                                      f32_3 %1098 = OpLoad %138 
                                      f32_3 %1099 = OpVectorShuffle %1098 %1098 0 0 0 
                                      f32_4 %1100 = OpLoad %89 
                                      f32_3 %1101 = OpVectorShuffle %1100 %1100 0 1 2 
                                      f32_3 %1102 = OpFMul %1099 %1101 
                                                      OpStore %106 %1102 
                                      f32_3 %1103 = OpLoad %106 
                                      f32_3 %1105 = OpFMul %1103 %1104 
                                                      OpStore %106 %1105 
                                      f32_4 %1106 = OpLoad %89 
                                      f32_3 %1107 = OpVectorShuffle %1106 %1106 0 1 2 
                                      f32_3 %1110 = OpFMul %1107 %1109 
                                      f32_3 %1111 = OpLoad %106 
                                      f32_3 %1112 = OpFAdd %1110 %1111 
                                      f32_4 %1113 = OpLoad %89 
                                      f32_4 %1114 = OpVectorShuffle %1113 %1112 4 5 6 3 
                                                      OpStore %89 %1114 
                                      f32_3 %1115 = OpLoad %450 
                                      f32_3 %1116 = OpLoad %202 
                                      f32_3 %1117 = OpFAdd %1115 %1116 
                                                      OpStore %202 %1117 
                                      f32_4 %1118 = OpLoad %89 
                                      f32_3 %1119 = OpVectorShuffle %1118 %1118 0 1 2 
                                      f32_3 %1120 = OpLoad %202 
                                      f32_3 %1121 = OpFAdd %1119 %1120 
                                                      OpStore %202 %1121 
                                      f32_3 %1122 = OpLoad %202 
                                      f32_3 %1123 = OpExtInst %1 40 %1122 %831 
                                                      OpStore %202 %1123 
                                      f32_3 %1124 = OpLoad %202 
                                      f32_3 %1125 = OpExtInst %1 30 %1124 
                                                      OpStore %202 %1125 
                                      f32_3 %1126 = OpLoad %202 
                                      f32_3 %1129 = OpFMul %1126 %1128 
                                                      OpStore %202 %1129 
                                      f32_3 %1130 = OpLoad %202 
                                      f32_3 %1131 = OpExtInst %1 29 %1130 
                                                      OpStore %202 %1131 
                                      f32_3 %1134 = OpLoad %202 
                                      f32_3 %1135 = OpExtInst %1 31 %1134 
                                      f32_4 %1136 = OpLoad %1133 
                                      f32_4 %1137 = OpVectorShuffle %1136 %1135 4 5 6 3 
                                                      OpStore %1133 %1137 
                                Output f32* %1139 = OpAccessChain %1133 %494 
                                                      OpStore %1139 %55 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD3.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD4.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD7 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[32];
uniform 	mediump vec4 _AdditionalLightsColor[32];
uniform 	mediump vec4 _AdditionalLightsAttenuation[32];
uniform 	mediump vec4 _AdditionalLightsSpotDir[32];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _Expond;
	UNITY_UNIFORM vec4 _MainTex_ST;
	UNITY_UNIFORM vec4 _Emissioncolor;
	UNITY_UNIFORM float _Roughness;
	UNITY_UNIFORM float _sss;
	UNITY_UNIFORM vec3 _rimlightdir;
	UNITY_UNIFORM vec4 _rimcolor;
	UNITY_UNIFORM float _rimhardness;
	UNITY_UNIFORM float _rimthreshold;
	UNITY_UNIFORM float _rimintensity;
	UNITY_UNIFORM float _Curvemn;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(3) uniform mediump sampler2D _Normal;
UNITY_LOCATION(4) uniform mediump sampler2D _MREA;
UNITY_LOCATION(5) uniform mediump sampler2D _SSSLUT;
UNITY_LOCATION(6) uniform mediump sampler2D _reflectmap;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump float u_xlat16_3;
int u_xlati3;
bool u_xlatb3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
vec4 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
mediump vec3 u_xlat16_13;
mediump vec3 u_xlat16_14;
vec3 u_xlat15;
int u_xlati15;
bool u_xlatb15;
mediump vec3 u_xlat16_16;
float u_xlat18;
uint u_xlatu18;
float u_xlat19;
mediump vec3 u_xlat16_22;
float u_xlat30;
float u_xlat45;
uint u_xlatu45;
float u_xlat47;
float u_xlat48;
mediump float u_xlat16_54;
mediump float u_xlat16_56;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_0 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_1.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_1.x = u_xlat16_0 * _MainLightShadowParams.x + u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0>=vs_TEXCOORD7.z);
#else
    u_xlatb0 = 0.0>=vs_TEXCOORD7.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vs_TEXCOORD7.z>=1.0);
#else
    u_xlatb15 = vs_TEXCOORD7.z>=1.0;
#endif
    u_xlatb0 = u_xlatb15 || u_xlatb0;
    u_xlat16_1.x = (u_xlatb0) ? 1.0 : u_xlat16_1.x;
    u_xlat0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat15.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat2.xyz = vs_TEXCOORD2.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat47 = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = vec3(u_xlat47) * u_xlat2.xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat4.xy).xyz;
    u_xlat16_6.xyz = texture(_Normal, u_xlat4.xy).xyz;
    u_xlat16_16.xyz = u_xlat16_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4 = texture(_MREA, u_xlat4.xy);
    u_xlat47 = u_xlat16_4.y + (-_Roughness);
    u_xlat16_7.x = (-u_xlat47) + 1.0;
    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
    u_xlat16_7.x = max(u_xlat16_7.x, 0.00200000009);
    u_xlat16_22.xyz = u_xlat16_5.xyz * u_xlat16_4.zzz;
    u_xlat8.xyz = u_xlat16_22.xyz * _Emissioncolor.xyz;
    u_xlat16_22.xyz = u_xlat16_5.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_22.xyz = u_xlat16_4.xxx * u_xlat16_22.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_9.x = u_xlat16_4.x * -0.959999979 + 0.959999979;
    u_xlat16_9.xyz = u_xlat16_5.xyz * u_xlat16_9.xxx;
    u_xlat16_9.xyz = u_xlat16_4.www * u_xlat16_9.xyz;
    u_xlat4.xyz = u_xlat16_16.yyy * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = u_xlat16_16.xxx * vs_TEXCOORD3.xyz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat16_16.zzz * vs_TEXCOORD1.xyz + u_xlat4.xyz;
    u_xlat48 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat48 = inversesqrt(u_xlat48);
    u_xlat5.xyz = vec3(u_xlat48) * u_xlat4.xyz;
    u_xlat48 = dot(u_xlat5.xyz, _MainLightPosition.xyz);
    u_xlat4.x = max(u_xlat48, 9.99999975e-06);
    u_xlat0.y = dot(u_xlat5.xyz, u_xlat15.xyz);
    u_xlat0.z = dot(_MainLightPosition.xyz, u_xlat3.xyz);
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(1.17549435e-38, 9.99999975e-06, 9.99999975e-06));
    u_xlat45 = u_xlat16_7.x + u_xlat16_7.x;
    u_xlat3.x = u_xlat0.z * u_xlat0.z;
    u_xlat45 = u_xlat3.x * u_xlat45 + 0.5;
    u_xlat16_16.x = u_xlat45 + -1.0;
    u_xlat15.x = (-u_xlat0.y) + 1.0;
    u_xlat15.x = max(u_xlat15.x, 0.0);
    u_xlat45 = u_xlat15.x * u_xlat15.x;
    u_xlat45 = u_xlat45 * u_xlat45;
    u_xlat15.x = u_xlat15.x * u_xlat45;
    u_xlat15.x = u_xlat16_16.x * u_xlat15.x + 1.0;
    u_xlat45 = (-u_xlat4.x) + 1.0;
    u_xlat45 = max(u_xlat45, 0.0);
    u_xlat3.x = u_xlat45 * u_xlat45;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat45 = u_xlat45 * u_xlat3.x;
    u_xlat45 = u_xlat16_16.x * u_xlat45 + 1.0;
    u_xlat16_54 = u_xlat15.x * u_xlat45;
    u_xlat16_54 = min(u_xlat16_54, 1.0);
    u_xlat16_54 = u_xlat48 * u_xlat16_54;
    u_xlat16_3 = u_xlat16_54 * 0.5 + 0.5;
    u_xlat3.x = u_xlat16_3;
    u_xlat3.yw = vec2(vec2(_Curvemn, _Curvemn));
    u_xlat16_10.xyz = texture(_SSSLUT, u_xlat3.xy).xyz;
    u_xlat10.xyz = u_xlat16_10.xyz * vec3(vec3(_sss, _sss, _sss));
    u_xlat15.x = min(u_xlat16_1.x, u_xlat3.x);
    u_xlat16_11.xyz = u_xlat16_9.xyz * u_xlat10.xyz;
    u_xlat10.xyz = u_xlat16_11.xyz * _MainLightColor.xyz;
    u_xlat10.xyz = u_xlat10.xyz * u_xlat15.xxx + u_xlat8.xyz;
    u_xlat16_54 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlati15 = int(u_xlat16_54);
    u_xlat16_11.xyz = u_xlat10.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<uint(u_xlati15) ; u_xlatu_loop_1++)
    {
        u_xlati3 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu18 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_54 = dot(unity_LightIndices[int(u_xlatu18)], ImmCB_0[u_xlati3]);
        u_xlati3 = int(u_xlat16_54);
        u_xlat12.xyz = (-vs_TEXCOORD5.xyz) * _AdditionalLightsPosition[u_xlati3].www + _AdditionalLightsPosition[u_xlati3].xyz;
        u_xlat18 = dot(u_xlat12.xyz, u_xlat12.xyz);
        u_xlat18 = max(u_xlat18, 6.10351563e-05);
        u_xlat19 = inversesqrt(u_xlat18);
        u_xlat12.xyz = vec3(u_xlat19) * u_xlat12.xyz;
        u_xlat19 = float(1.0) / float(u_xlat18);
        u_xlat18 = u_xlat18 * _AdditionalLightsAttenuation[u_xlati3].x + _AdditionalLightsAttenuation[u_xlati3].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
        u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
        u_xlat18 = u_xlat18 * u_xlat19;
        u_xlat16_54 = dot(_AdditionalLightsSpotDir[u_xlati3].xyz, u_xlat12.xyz);
        u_xlat16_54 = u_xlat16_54 * _AdditionalLightsAttenuation[u_xlati3].z + _AdditionalLightsAttenuation[u_xlati3].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_54 = min(max(u_xlat16_54, 0.0), 1.0);
#else
        u_xlat16_54 = clamp(u_xlat16_54, 0.0, 1.0);
#endif
        u_xlat16_54 = u_xlat16_54 * u_xlat16_54;
        u_xlat18 = u_xlat18 * u_xlat16_54;
        u_xlat19 = dot(u_xlat5.xyz, u_xlat12.xyz);
        u_xlat3.z = max(u_xlat19, 9.99999975e-06);
        u_xlat16_12.xyz = texture(_SSSLUT, u_xlat3.zw).xyz;
        u_xlat12.xyz = u_xlat16_12.xyz * vec3(vec3(_sss, _sss, _sss));
        u_xlat16_13.xyz = u_xlat16_9.xyz * u_xlat12.xyz;
        u_xlat16_13.xyz = u_xlat16_13.xyz * _AdditionalLightsColor[u_xlati3].xyz;
        u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat18) + u_xlat8.xyz;
        u_xlat16_11.xyz = u_xlat16_11.xyz + u_xlat16_13.xyz;
    }
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyw = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat0.xyw);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat0.xyw);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat15.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_54 = u_xlat16_7.x * u_xlat16_7.x;
    u_xlat16_56 = u_xlat16_7.x * u_xlat16_7.x + -1.0;
    u_xlat15.x = u_xlat15.x * u_xlat16_56 + 1.00001001;
    u_xlat16_56 = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat15.x * u_xlat15.x;
    u_xlat15.x = max(u_xlat16_56, 0.100000001);
    u_xlat0.x = u_xlat15.x * u_xlat0.x;
    u_xlat16_56 = u_xlat16_7.x * 4.0 + 2.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_56;
    u_xlat0.x = u_xlat16_54 / u_xlat0.x;
    u_xlat0.xyw = u_xlat16_22.xyz * u_xlat0.xxx;
    u_xlat16_13.xyz = u_xlat0.xyw * vec3(3.14159274, 3.14159274, 3.14159274);
    u_xlat2.xyz = u_xlat16_13.xyz * _MainLightColor.xyz;
    u_xlat16_11.xyz = u_xlat2.xyz * u_xlat4.xxx + u_xlat16_11.xyz;
    u_xlat5.w = 1.0;
    u_xlat16_13.x = dot(unity_SHAr, u_xlat5);
    u_xlat16_13.y = dot(unity_SHAg, u_xlat5);
    u_xlat16_13.z = dot(unity_SHAb, u_xlat5);
    u_xlat16_1 = u_xlat5.yzzx * u_xlat5.xyzz;
    u_xlat16_14.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_14.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_14.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_54 = u_xlat5.y * u_xlat5.y;
    u_xlat16_54 = u_xlat5.x * u_xlat5.x + (-u_xlat16_54);
    u_xlat16_14.xyz = unity_SHC.xyz * vec3(u_xlat16_54) + u_xlat16_14.xyz;
    u_xlat16_13.xyz = u_xlat16_13.xyz + u_xlat16_14.xyz;
    u_xlat16_13.xyz = max(u_xlat16_13.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_13.xyz;
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].x;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat16_13.x = dot(u_xlat2.xyz, u_xlat5.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].y;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].y;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].y;
    u_xlat16_13.y = dot(u_xlat2.xyz, u_xlat5.xyz);
    u_xlat16_13.xy = u_xlat16_13.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat16_54 = (-u_xlat16_7.x) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_54;
    u_xlat16_54 = u_xlat16_7.x * 8.0;
    u_xlat16_2.xyz = textureLod(_reflectmap, u_xlat16_13.xy, u_xlat16_54).xyz;
    u_xlat3.x = u_xlat16_7.x * u_xlat16_7.x + 1.0;
    u_xlat3.x = float(1.0) / u_xlat3.x;
    u_xlat0.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat0.x = max(u_xlat0.w, u_xlat0.x);
    u_xlat0.x = u_xlat47 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat15.x = (-u_xlat0.z) + 1.0;
    u_xlat15.x = max(u_xlat15.x, 0.0);
    u_xlat30 = u_xlat15.x * u_xlat15.x;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat15.x = u_xlat15.x * u_xlat30;
    u_xlat0.xzw = (-u_xlat16_22.xyz) + u_xlat0.xxx;
    u_xlat0.xyz = u_xlat15.xxx * u_xlat0.xzw + u_xlat16_22.xyz;
    u_xlat0.xyz = u_xlat3.xxx * u_xlat0.xyz;
    u_xlat16_7.xyz = u_xlat16_4.www * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_9.xyz * vec3(_Expond) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixInvV[1].xyz * _rimlightdir.yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixInvV[0].xyz * _rimlightdir.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixInvV[2].xyz * _rimlightdir.zzz + u_xlat0.xyz;
    u_xlat45 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat45 = inversesqrt(u_xlat45);
    u_xlat0.xyz = vec3(u_xlat45) * u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat0.x = u_xlat0.x * u_xlat16_4.w + (-_rimthreshold);
    u_xlat0.x = u_xlat0.x * _rimhardness;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_9.xyz = u_xlat0.xxx * _rimcolor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_rimintensity, _rimintensity, _rimintensity));
    u_xlat2.xyz = u_xlat4.xxx * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat2.xyz;
    u_xlat16_7.xyz = u_xlat16_11.xyz + u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(2.20000005, 2.20000005, 2.20000005);
    u_xlat16_7.xyz = exp2(u_xlat16_7.xyz);
    SV_Target0.xyz = sqrt(u_xlat16_7.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "_ADDITIONAL_LIGHTS_VERTEX" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 268
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %94 %103 %105 %108 %148 %151 %161 %195 %221 %227 %230 %231 %257 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 RelaxedPrecision 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 RelaxedPrecision 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 RelaxedPrecision 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 RelaxedPrecision 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 RelaxedPrecision 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 RelaxedPrecision 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpMemberDecorate %21 16 RelaxedPrecision 
                                                      OpMemberDecorate %21 16 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpDecorate %69 ArrayStride 69 
                                                      OpMemberDecorate %70 0 Offset 70 
                                                      OpMemberDecorate %70 1 Offset 70 
                                                      OpDecorate %70 Block 
                                                      OpDecorate %72 DescriptorSet 72 
                                                      OpDecorate %72 Binding 72 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 103 
                                                      OpDecorate %105 Location 105 
                                                      OpDecorate %108 Location 108 
                                                      OpDecorate vs_TEXCOORD1 Location 148 
                                                      OpDecorate vs_TEXCOORD2 Location 151 
                                                      OpDecorate %161 Location 161 
                                                      OpDecorate vs_TEXCOORD3 Location 195 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 221 
                                                      OpDecorate vs_TEXCOORD5 Location 227 
                                                      OpDecorate vs_TEXCOORD6 Location 230 
                                                      OpDecorate %231 Location 231 
                                                      OpDecorate %236 ArrayStride 236 
                                                      OpMemberDecorate %237 0 Offset 237 
                                                      OpMemberDecorate %237 1 Offset 237 
                                                      OpMemberDecorate %237 2 Offset 237 
                                                      OpMemberDecorate %237 3 Offset 237 
                                                      OpMemberDecorate %237 4 Offset 237 
                                                      OpMemberDecorate %237 5 Offset 237 
                                                      OpMemberDecorate %237 6 RelaxedPrecision 
                                                      OpMemberDecorate %237 6 Offset 237 
                                                      OpMemberDecorate %237 7 RelaxedPrecision 
                                                      OpMemberDecorate %237 7 Offset 237 
                                                      OpMemberDecorate %237 8 RelaxedPrecision 
                                                      OpMemberDecorate %237 8 Offset 237 
                                                      OpMemberDecorate %237 9 RelaxedPrecision 
                                                      OpMemberDecorate %237 9 Offset 237 
                                                      OpMemberDecorate %237 10 RelaxedPrecision 
                                                      OpMemberDecorate %237 10 Offset 237 
                                                      OpMemberDecorate %237 11 Offset 237 
                                                      OpDecorate %237 Block 
                                                      OpDecorate %239 DescriptorSet 239 
                                                      OpDecorate %239 Binding 239 
                                                      OpDecorate vs_TEXCOORD7 Location 257 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 3 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeArray %7 %16 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypeArray %7 %19 
                                              %21 = OpTypeStruct %17 %18 %7 %7 %7 %20 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4; f32_4[2]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 0 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %45 = OpConstant 2 
                                          i32 %59 = OpConstant 3 
                               Private f32_4* %66 = OpVariable Private 
                                              %69 = OpTypeArray %7 %16 
                                              %70 = OpTypeStruct %12 %69 
                                              %71 = OpTypePointer Uniform %70 
           Uniform struct {f32_3; f32_4[4];}* %72 = OpVariable Uniform 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %99 = OpTypePointer Output %7 
                                             %101 = OpTypeVector %6 2 
                                             %102 = OpTypePointer Output %101 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %104 = OpTypePointer Input %101 
                                Input f32_2* %105 = OpVariable Input 
                                             %107 = OpTypePointer Input %12 
                                Input f32_3* %108 = OpVariable Input 
                                         u32 %114 = OpConstant 0 
                                             %115 = OpTypePointer Private %6 
                                Private f32* %129 = OpVariable Private 
                                         f32 %136 = OpConstant 3.674022E-40 
                                             %147 = OpTypePointer Output %12 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %155 = OpTypePointer Uniform %12 
                                             %159 = OpTypePointer Private %12 
                              Private f32_3* %160 = OpVariable Private 
                                Input f32_4* %161 = OpVariable Input 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                              Private f32_3* %197 = OpVariable Private 
                                         u32 %213 = OpConstant 3 
                                             %214 = OpTypePointer Input %6 
                                             %217 = OpTypePointer Uniform %6 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD5 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                Input f32_4* %231 = OpVariable Input 
                                         u32 %235 = OpConstant 20 
                                             %236 = OpTypeArray %7 %235 
                                             %237 = OpTypeStruct %236 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 
                                             %238 = OpTypePointer Uniform %237 
Uniform struct {f32_4[20]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %239 = OpVariable Uniform 
                       Output f32_4* vs_TEXCOORD7 = OpVariable Output 
                                             %262 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %11 
                                        f32_3 %14 = OpVectorShuffle %13 %13 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_3 %30 = OpVectorShuffle %29 %29 0 1 2 
                                        f32_3 %31 = OpFMul %14 %30 
                                        f32_4 %32 = OpLoad %9 
                                        f32_4 %33 = OpVectorShuffle %32 %31 4 5 6 3 
                                                      OpStore %9 %33 
                               Uniform f32_4* %34 = OpAccessChain %23 %25 %25 
                                        f32_4 %35 = OpLoad %34 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 1 2 
                                        f32_4 %37 = OpLoad %11 
                                        f32_3 %38 = OpVectorShuffle %37 %37 0 0 0 
                                        f32_3 %39 = OpFMul %36 %38 
                                        f32_4 %40 = OpLoad %9 
                                        f32_3 %41 = OpVectorShuffle %40 %40 0 1 2 
                                        f32_3 %42 = OpFAdd %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpVectorShuffle %43 %42 4 5 6 3 
                                                      OpStore %9 %44 
                               Uniform f32_4* %46 = OpAccessChain %23 %25 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_3 %48 = OpVectorShuffle %47 %47 0 1 2 
                                        f32_4 %49 = OpLoad %11 
                                        f32_3 %50 = OpVectorShuffle %49 %49 2 2 2 
                                        f32_3 %51 = OpFMul %48 %50 
                                        f32_4 %52 = OpLoad %9 
                                        f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                        f32_3 %54 = OpFAdd %51 %53 
                                        f32_4 %55 = OpLoad %9 
                                        f32_4 %56 = OpVectorShuffle %55 %54 4 5 6 3 
                                                      OpStore %9 %56 
                                        f32_4 %57 = OpLoad %9 
                                        f32_3 %58 = OpVectorShuffle %57 %57 0 1 2 
                               Uniform f32_4* %60 = OpAccessChain %23 %25 %59 
                                        f32_4 %61 = OpLoad %60 
                                        f32_3 %62 = OpVectorShuffle %61 %61 0 1 2 
                                        f32_3 %63 = OpFAdd %58 %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %63 4 5 6 3 
                                                      OpStore %9 %65 
                                        f32_4 %67 = OpLoad %9 
                                        f32_4 %68 = OpVectorShuffle %67 %67 1 1 1 1 
                               Uniform f32_4* %73 = OpAccessChain %72 %26 %26 
                                        f32_4 %74 = OpLoad %73 
                                        f32_4 %75 = OpFMul %68 %74 
                                                      OpStore %66 %75 
                               Uniform f32_4* %76 = OpAccessChain %72 %26 %25 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %9 
                                        f32_4 %79 = OpVectorShuffle %78 %78 0 0 0 0 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %66 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %66 %82 
                               Uniform f32_4* %83 = OpAccessChain %72 %26 %45 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %9 
                                        f32_4 %86 = OpVectorShuffle %85 %85 2 2 2 2 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %66 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %66 %89 
                                        f32_4 %95 = OpLoad %66 
                               Uniform f32_4* %96 = OpAccessChain %72 %26 %59 
                                        f32_4 %97 = OpLoad %96 
                                        f32_4 %98 = OpFAdd %95 %97 
                               Output f32_4* %100 = OpAccessChain %94 %25 
                                                      OpStore %100 %98 
                                       f32_2 %106 = OpLoad %105 
                                                      OpStore vs_TEXCOORD0 %106 
                                       f32_3 %109 = OpLoad %108 
                              Uniform f32_4* %110 = OpAccessChain %23 %26 %25 
                                       f32_4 %111 = OpLoad %110 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
                                         f32 %113 = OpDot %109 %112 
                                Private f32* %116 = OpAccessChain %66 %114 
                                                      OpStore %116 %113 
                                       f32_3 %117 = OpLoad %108 
                              Uniform f32_4* %118 = OpAccessChain %23 %26 %26 
                                       f32_4 %119 = OpLoad %118 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                         f32 %121 = OpDot %117 %120 
                                Private f32* %122 = OpAccessChain %66 %90 
                                                      OpStore %122 %121 
                                       f32_3 %123 = OpLoad %108 
                              Uniform f32_4* %124 = OpAccessChain %23 %26 %45 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                         f32 %127 = OpDot %123 %126 
                                Private f32* %128 = OpAccessChain %66 %19 
                                                      OpStore %128 %127 
                                       f32_4 %130 = OpLoad %66 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_4 %132 = OpLoad %66 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                         f32 %134 = OpDot %131 %133 
                                                      OpStore %129 %134 
                                         f32 %135 = OpLoad %129 
                                         f32 %137 = OpExtInst %1 40 %135 %136 
                                                      OpStore %129 %137 
                                         f32 %138 = OpLoad %129 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %129 %139 
                                         f32 %140 = OpLoad %129 
                                       f32_3 %141 = OpCompositeConstruct %140 %140 %140 
                                       f32_4 %142 = OpLoad %66 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                       f32_3 %144 = OpFMul %141 %143 
                                       f32_4 %145 = OpLoad %66 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %66 %146 
                                       f32_4 %149 = OpLoad %66 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                                      OpStore vs_TEXCOORD1 %150 
                                       f32_4 %152 = OpLoad %9 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                       f32_3 %154 = OpFNegate %153 
                              Uniform f32_3* %156 = OpAccessChain %72 %25 
                                       f32_3 %157 = OpLoad %156 
                                       f32_3 %158 = OpFAdd %154 %157 
                                                      OpStore vs_TEXCOORD2 %158 
                                       f32_4 %162 = OpLoad %161 
                                       f32_3 %163 = OpVectorShuffle %162 %162 1 1 1 
                              Uniform f32_4* %164 = OpAccessChain %23 %25 %26 
                                       f32_4 %165 = OpLoad %164 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                       f32_3 %167 = OpFMul %163 %166 
                                                      OpStore %160 %167 
                              Uniform f32_4* %168 = OpAccessChain %23 %25 %25 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                       f32_4 %171 = OpLoad %161 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 0 0 
                                       f32_3 %173 = OpFMul %170 %172 
                                       f32_3 %174 = OpLoad %160 
                                       f32_3 %175 = OpFAdd %173 %174 
                                                      OpStore %160 %175 
                              Uniform f32_4* %176 = OpAccessChain %23 %25 %45 
                                       f32_4 %177 = OpLoad %176 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                       f32_4 %179 = OpLoad %161 
                                       f32_3 %180 = OpVectorShuffle %179 %179 2 2 2 
                                       f32_3 %181 = OpFMul %178 %180 
                                       f32_3 %182 = OpLoad %160 
                                       f32_3 %183 = OpFAdd %181 %182 
                                                      OpStore %160 %183 
                                       f32_3 %184 = OpLoad %160 
                                       f32_3 %185 = OpLoad %160 
                                         f32 %186 = OpDot %184 %185 
                                                      OpStore %129 %186 
                                         f32 %187 = OpLoad %129 
                                         f32 %188 = OpExtInst %1 40 %187 %136 
                                                      OpStore %129 %188 
                                         f32 %189 = OpLoad %129 
                                         f32 %190 = OpExtInst %1 32 %189 
                                                      OpStore %129 %190 
                                         f32 %191 = OpLoad %129 
                                       f32_3 %192 = OpCompositeConstruct %191 %191 %191 
                                       f32_3 %193 = OpLoad %160 
                                       f32_3 %194 = OpFMul %192 %193 
                                                      OpStore %160 %194 
                                       f32_3 %196 = OpLoad %160 
                                                      OpStore vs_TEXCOORD3 %196 
                                       f32_4 %198 = OpLoad %66 
                                       f32_3 %199 = OpVectorShuffle %198 %198 2 0 1 
                                       f32_3 %200 = OpLoad %160 
                                       f32_3 %201 = OpVectorShuffle %200 %200 1 2 0 
                                       f32_3 %202 = OpFMul %199 %201 
                                                      OpStore %197 %202 
                                       f32_4 %203 = OpLoad %66 
                                       f32_3 %204 = OpVectorShuffle %203 %203 1 2 0 
                                       f32_3 %205 = OpLoad %160 
                                       f32_3 %206 = OpVectorShuffle %205 %205 2 0 1 
                                       f32_3 %207 = OpFMul %204 %206 
                                       f32_3 %208 = OpLoad %197 
                                       f32_3 %209 = OpFNegate %208 
                                       f32_3 %210 = OpFAdd %207 %209 
                                       f32_4 %211 = OpLoad %66 
                                       f32_4 %212 = OpVectorShuffle %211 %210 4 5 6 3 
                                                      OpStore %66 %212 
                                  Input f32* %215 = OpAccessChain %161 %213 
                                         f32 %216 = OpLoad %215 
                                Uniform f32* %218 = OpAccessChain %23 %59 %213 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpFMul %216 %219 
                                                      OpStore %129 %220 
                                         f32 %222 = OpLoad %129 
                                       f32_3 %223 = OpCompositeConstruct %222 %222 %222 
                                       f32_4 %224 = OpLoad %66 
                                       f32_3 %225 = OpVectorShuffle %224 %224 0 1 2 
                                       f32_3 %226 = OpFMul %223 %225 
                                                      OpStore vs_TEXCOORD4 %226 
                                       f32_4 %228 = OpLoad %9 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 2 
                                                      OpStore vs_TEXCOORD5 %229 
                                       f32_4 %232 = OpLoad %231 
                                                      OpStore vs_TEXCOORD6 %232 
                                       f32_4 %233 = OpLoad %9 
                                       f32_4 %234 = OpVectorShuffle %233 %233 1 1 1 1 
                              Uniform f32_4* %240 = OpAccessChain %239 %25 %26 
                                       f32_4 %241 = OpLoad %240 
                                       f32_4 %242 = OpFMul %234 %241 
                                                      OpStore %66 %242 
                              Uniform f32_4* %243 = OpAccessChain %239 %25 %25 
                                       f32_4 %244 = OpLoad %243 
                                       f32_4 %245 = OpLoad %9 
                                       f32_4 %246 = OpVectorShuffle %245 %245 0 0 0 0 
                                       f32_4 %247 = OpFMul %244 %246 
                                       f32_4 %248 = OpLoad %66 
                                       f32_4 %249 = OpFAdd %247 %248 
                                                      OpStore %66 %249 
                              Uniform f32_4* %250 = OpAccessChain %239 %25 %45 
                                       f32_4 %251 = OpLoad %250 
                                       f32_4 %252 = OpLoad %9 
                                       f32_4 %253 = OpVectorShuffle %252 %252 2 2 2 2 
                                       f32_4 %254 = OpFMul %251 %253 
                                       f32_4 %255 = OpLoad %66 
                                       f32_4 %256 = OpFAdd %254 %255 
                                                      OpStore %9 %256 
                                       f32_4 %258 = OpLoad %9 
                              Uniform f32_4* %259 = OpAccessChain %239 %25 %59 
                                       f32_4 %260 = OpLoad %259 
                                       f32_4 %261 = OpFAdd %258 %260 
                                                      OpStore vs_TEXCOORD7 %261 
                                 Output f32* %263 = OpAccessChain %94 %25 %90 
                                         f32 %264 = OpLoad %263 
                                         f32 %265 = OpFNegate %264 
                                 Output f32* %266 = OpAccessChain %94 %25 %90 
                                                      OpStore %266 %265 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 1064
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %66 %185 %190 %197 %459 %1053 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate vs_TEXCOORD2 Location 12 
                                                      OpDecorate %36 ArrayStride 36 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpMemberDecorate %38 1 RelaxedPrecision 
                                                      OpMemberDecorate %38 1 Offset 38 
                                                      OpMemberDecorate %38 2 RelaxedPrecision 
                                                      OpMemberDecorate %38 2 Offset 38 
                                                      OpMemberDecorate %38 3 Offset 38 
                                                      OpMemberDecorate %38 4 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate vs_TEXCOORD0 Location 66 
                                                      OpMemberDecorate %68 0 Offset 68 
                                                      OpMemberDecorate %68 1 Offset 68 
                                                      OpMemberDecorate %68 2 Offset 68 
                                                      OpMemberDecorate %68 3 Offset 68 
                                                      OpMemberDecorate %68 4 Offset 68 
                                                      OpMemberDecorate %68 5 Offset 68 
                                                      OpMemberDecorate %68 6 Offset 68 
                                                      OpMemberDecorate %68 7 Offset 68 
                                                      OpMemberDecorate %68 8 Offset 68 
                                                      OpMemberDecorate %68 9 Offset 68 
                                                      OpMemberDecorate %68 10 Offset 68 
                                                      OpDecorate %68 Block 
                                                      OpDecorate %70 DescriptorSet 70 
                                                      OpDecorate %70 Binding 70 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %85 DescriptorSet 85 
                                                      OpDecorate %85 Binding 85 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %89 DescriptorSet 89 
                                                      OpDecorate %89 Binding 89 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %96 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %98 DescriptorSet 98 
                                                      OpDecorate %98 Binding 98 
                                                      OpDecorate %99 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %100 DescriptorSet 100 
                                                      OpDecorate %100 Binding 100 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate %107 RelaxedPrecision 
                                                      OpDecorate %108 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate %116 RelaxedPrecision 
                                                      OpDecorate %116 DescriptorSet 116 
                                                      OpDecorate %116 Binding 116 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %118 DescriptorSet 118 
                                                      OpDecorate %118 Binding 118 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %140 RelaxedPrecision 
                                                      OpDecorate %141 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %144 RelaxedPrecision 
                                                      OpDecorate %145 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %147 RelaxedPrecision 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %150 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %159 RelaxedPrecision 
                                                      OpDecorate %160 RelaxedPrecision 
                                                      OpDecorate %161 RelaxedPrecision 
                                                      OpDecorate %162 RelaxedPrecision 
                                                      OpDecorate %163 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 185 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD3 Location 190 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 197 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %325 RelaxedPrecision 
                                                      OpDecorate %326 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %335 RelaxedPrecision 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %337 RelaxedPrecision 
                                                      OpDecorate %340 RelaxedPrecision 
                                                      OpDecorate %353 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %354 DescriptorSet 354 
                                                      OpDecorate %354 Binding 354 
                                                      OpDecorate %355 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %356 DescriptorSet 356 
                                                      OpDecorate %356 Binding 356 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %372 RelaxedPrecision 
                                                      OpDecorate %373 RelaxedPrecision 
                                                      OpDecorate %374 RelaxedPrecision 
                                                      OpDecorate %375 RelaxedPrecision 
                                                      OpDecorate %376 RelaxedPrecision 
                                                      OpDecorate %377 RelaxedPrecision 
                                                      OpDecorate %382 RelaxedPrecision 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %387 RelaxedPrecision 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %397 RelaxedPrecision 
                                                      OpDecorate %398 ArrayStride 398 
                                                      OpDecorate %399 ArrayStride 399 
                                                      OpDecorate %400 ArrayStride 400 
                                                      OpMemberDecorate %401 0 Offset 401 
                                                      OpMemberDecorate %401 1 Offset 401 
                                                      OpMemberDecorate %401 2 Offset 401 
                                                      OpMemberDecorate %401 3 RelaxedPrecision 
                                                      OpMemberDecorate %401 3 Offset 401 
                                                      OpMemberDecorate %401 4 RelaxedPrecision 
                                                      OpMemberDecorate %401 4 Offset 401 
                                                      OpMemberDecorate %401 5 RelaxedPrecision 
                                                      OpMemberDecorate %401 5 Offset 401 
                                                      OpMemberDecorate %401 6 Offset 401 
                                                      OpMemberDecorate %401 7 RelaxedPrecision 
                                                      OpMemberDecorate %401 7 Offset 401 
                                                      OpMemberDecorate %401 8 Offset 401 
                                                      OpMemberDecorate %401 9 Offset 401 
                                                      OpMemberDecorate %401 10 RelaxedPrecision 
                                                      OpMemberDecorate %401 10 Offset 401 
                                                      OpMemberDecorate %401 11 RelaxedPrecision 
                                                      OpMemberDecorate %401 11 Offset 401 
                                                      OpMemberDecorate %401 12 RelaxedPrecision 
                                                      OpMemberDecorate %401 12 Offset 401 
                                                      OpMemberDecorate %401 13 RelaxedPrecision 
                                                      OpMemberDecorate %401 13 Offset 401 
                                                      OpMemberDecorate %401 14 RelaxedPrecision 
                                                      OpMemberDecorate %401 14 Offset 401 
                                                      OpMemberDecorate %401 15 RelaxedPrecision 
                                                      OpMemberDecorate %401 15 Offset 401 
                                                      OpMemberDecorate %401 16 RelaxedPrecision 
                                                      OpMemberDecorate %401 16 Offset 401 
                                                      OpDecorate %401 Block 
                                                      OpDecorate %403 DescriptorSet 403 
                                                      OpDecorate %403 Binding 403 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %439 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 459 
                                                      OpDecorate %463 ArrayStride 463 
                                                      OpDecorate %464 ArrayStride 464 
                                                      OpDecorate %465 ArrayStride 465 
                                                      OpDecorate %466 ArrayStride 466 
                                                      OpDecorate %467 ArrayStride 467 
                                                      OpMemberDecorate %468 0 Offset 468 
                                                      OpMemberDecorate %468 1 RelaxedPrecision 
                                                      OpMemberDecorate %468 1 Offset 468 
                                                      OpMemberDecorate %468 2 RelaxedPrecision 
                                                      OpMemberDecorate %468 2 Offset 468 
                                                      OpMemberDecorate %468 3 RelaxedPrecision 
                                                      OpMemberDecorate %468 3 Offset 468 
                                                      OpMemberDecorate %468 4 RelaxedPrecision 
                                                      OpMemberDecorate %468 4 Offset 468 
                                                      OpDecorate %468 Block 
                                                      OpDecorate %470 DescriptorSet 470 
                                                      OpDecorate %470 Binding 470 
                                                      OpDecorate %500 RelaxedPrecision 
                                                      OpDecorate %504 RelaxedPrecision 
                                                      OpDecorate %513 RelaxedPrecision 
                                                      OpDecorate %514 RelaxedPrecision 
                                                      OpDecorate %517 RelaxedPrecision 
                                                      OpDecorate %520 RelaxedPrecision 
                                                      OpDecorate %521 RelaxedPrecision 
                                                      OpDecorate %524 RelaxedPrecision 
                                                      OpDecorate %525 RelaxedPrecision 
                                                      OpDecorate %526 RelaxedPrecision 
                                                      OpDecorate %527 RelaxedPrecision 
                                                      OpDecorate %528 RelaxedPrecision 
                                                      OpDecorate %529 RelaxedPrecision 
                                                      OpDecorate %530 RelaxedPrecision 
                                                      OpDecorate %532 RelaxedPrecision 
                                                      OpDecorate %541 RelaxedPrecision 
                                                      OpDecorate %542 RelaxedPrecision 
                                                      OpDecorate %543 RelaxedPrecision 
                                                      OpDecorate %548 RelaxedPrecision 
                                                      OpDecorate %549 RelaxedPrecision 
                                                      OpDecorate %556 RelaxedPrecision 
                                                      OpDecorate %557 RelaxedPrecision 
                                                      OpDecorate %558 RelaxedPrecision 
                                                      OpDecorate %559 RelaxedPrecision 
                                                      OpDecorate %560 RelaxedPrecision 
                                                      OpDecorate %561 RelaxedPrecision 
                                                      OpDecorate %562 RelaxedPrecision 
                                                      OpDecorate %563 RelaxedPrecision 
                                                      OpDecorate %566 RelaxedPrecision 
                                                      OpDecorate %569 RelaxedPrecision 
                                                      OpDecorate %570 RelaxedPrecision 
                                                      OpDecorate %571 RelaxedPrecision 
                                                      OpDecorate %572 RelaxedPrecision 
                                                      OpDecorate %574 RelaxedPrecision 
                                                      OpDecorate %575 RelaxedPrecision 
                                                      OpDecorate %578 RelaxedPrecision 
                                                      OpDecorate %579 RelaxedPrecision 
                                                      OpDecorate %580 RelaxedPrecision 
                                                      OpDecorate %620 RelaxedPrecision 
                                                      OpDecorate %621 RelaxedPrecision 
                                                      OpDecorate %622 RelaxedPrecision 
                                                      OpDecorate %623 RelaxedPrecision 
                                                      OpDecorate %624 RelaxedPrecision 
                                                      OpDecorate %625 RelaxedPrecision 
                                                      OpDecorate %626 RelaxedPrecision 
                                                      OpDecorate %627 RelaxedPrecision 
                                                      OpDecorate %630 RelaxedPrecision 
                                                      OpDecorate %646 RelaxedPrecision 
                                                      OpDecorate %648 RelaxedPrecision 
                                                      OpDecorate %656 RelaxedPrecision 
                                                      OpDecorate %658 RelaxedPrecision 
                                                      OpDecorate %659 RelaxedPrecision 
                                                      OpDecorate %662 RelaxedPrecision 
                                                      OpDecorate %665 RelaxedPrecision 
                                                      OpDecorate %670 RelaxedPrecision 
                                                      OpDecorate %681 RelaxedPrecision 
                                                      OpDecorate %683 RelaxedPrecision 
                                                      OpDecorate %684 RelaxedPrecision 
                                                      OpDecorate %685 RelaxedPrecision 
                                                      OpDecorate %690 RelaxedPrecision 
                                                      OpDecorate %694 RelaxedPrecision 
                                                      OpDecorate %700 RelaxedPrecision 
                                                      OpDecorate %706 RelaxedPrecision 
                                                      OpDecorate %715 RelaxedPrecision 
                                                      OpDecorate %718 RelaxedPrecision 
                                                      OpDecorate %719 RelaxedPrecision 
                                                      OpDecorate %720 RelaxedPrecision 
                                                      OpDecorate %724 RelaxedPrecision 
                                                      OpDecorate %725 RelaxedPrecision 
                                                      OpDecorate %726 RelaxedPrecision 
                                                      OpDecorate %730 RelaxedPrecision 
                                                      OpDecorate %731 RelaxedPrecision 
                                                      OpDecorate %732 RelaxedPrecision 
                                                      OpDecorate %744 RelaxedPrecision 
                                                      OpDecorate %745 RelaxedPrecision 
                                                      OpDecorate %749 RelaxedPrecision 
                                                      OpDecorate %750 RelaxedPrecision 
                                                      OpDecorate %751 RelaxedPrecision 
                                                      OpDecorate %752 RelaxedPrecision 
                                                      OpDecorate %753 RelaxedPrecision 
                                                      OpDecorate %754 RelaxedPrecision 
                                                      OpDecorate %755 RelaxedPrecision 
                                                      OpDecorate %756 RelaxedPrecision 
                                                      OpDecorate %757 RelaxedPrecision 
                                                      OpDecorate %758 RelaxedPrecision 
                                                      OpDecorate %759 RelaxedPrecision 
                                                      OpDecorate %761 RelaxedPrecision 
                                                      OpDecorate %762 RelaxedPrecision 
                                                      OpDecorate %763 RelaxedPrecision 
                                                      OpDecorate %764 RelaxedPrecision 
                                                      OpDecorate %793 RelaxedPrecision 
                                                      OpDecorate %794 RelaxedPrecision 
                                                      OpDecorate %796 RelaxedPrecision 
                                                      OpDecorate %797 RelaxedPrecision 
                                                      OpDecorate %800 RelaxedPrecision 
                                                      OpDecorate %801 RelaxedPrecision 
                                                      OpDecorate %803 RelaxedPrecision 
                                                      OpDecorate %805 RelaxedPrecision 
                                                      OpDecorate %806 RelaxedPrecision 
                                                      OpDecorate %807 RelaxedPrecision 
                                                      OpDecorate %808 RelaxedPrecision 
                                                      OpDecorate %809 RelaxedPrecision 
                                                      OpDecorate %811 RelaxedPrecision 
                                                      OpDecorate %812 RelaxedPrecision 
                                                      OpDecorate %813 RelaxedPrecision 
                                                      OpDecorate %813 DescriptorSet 813 
                                                      OpDecorate %813 Binding 813 
                                                      OpDecorate %814 RelaxedPrecision 
                                                      OpDecorate %815 RelaxedPrecision 
                                                      OpDecorate %815 DescriptorSet 815 
                                                      OpDecorate %815 Binding 815 
                                                      OpDecorate %816 RelaxedPrecision 
                                                      OpDecorate %818 RelaxedPrecision 
                                                      OpDecorate %819 RelaxedPrecision 
                                                      OpDecorate %820 RelaxedPrecision 
                                                      OpDecorate %821 RelaxedPrecision 
                                                      OpDecorate %822 RelaxedPrecision 
                                                      OpDecorate %823 RelaxedPrecision 
                                                      OpDecorate %824 RelaxedPrecision 
                                                      OpDecorate %825 RelaxedPrecision 
                                                      OpDecorate %826 RelaxedPrecision 
                                                      OpDecorate %873 RelaxedPrecision 
                                                      OpDecorate %874 RelaxedPrecision 
                                                      OpDecorate %885 RelaxedPrecision 
                                                      OpDecorate %896 RelaxedPrecision 
                                                      OpDecorate %897 RelaxedPrecision 
                                                      OpDecorate %898 RelaxedPrecision 
                                                      OpDecorate %899 RelaxedPrecision 
                                                      OpDecorate %902 RelaxedPrecision 
                                                      OpDecorate %906 RelaxedPrecision 
                                                      OpDecorate %909 RelaxedPrecision 
                                                      OpDecorate %910 RelaxedPrecision 
                                                      OpDecorate %976 RelaxedPrecision 
                                                      OpDecorate %1002 RelaxedPrecision 
                                                      OpDecorate %1010 RelaxedPrecision 
                                                      OpDecorate %1011 RelaxedPrecision 
                                                      OpDecorate %1012 RelaxedPrecision 
                                                      OpDecorate %1013 RelaxedPrecision 
                                                      OpDecorate %1014 RelaxedPrecision 
                                                      OpDecorate %1015 RelaxedPrecision 
                                                      OpDecorate %1035 RelaxedPrecision 
                                                      OpDecorate %1036 RelaxedPrecision 
                                                      OpDecorate %1037 RelaxedPrecision 
                                                      OpDecorate %1040 RelaxedPrecision 
                                                      OpDecorate %1042 RelaxedPrecision 
                                                      OpDecorate %1043 RelaxedPrecision 
                                                      OpDecorate %1044 RelaxedPrecision 
                                                      OpDecorate %1045 RelaxedPrecision 
                                                      OpDecorate %1046 RelaxedPrecision 
                                                      OpDecorate %1049 RelaxedPrecision 
                                                      OpDecorate %1050 RelaxedPrecision 
                                                      OpDecorate %1051 RelaxedPrecision 
                                                      OpDecorate %1053 RelaxedPrecision 
                                                      OpDecorate %1053 Location 1053 
                                                      OpDecorate %1054 RelaxedPrecision 
                                                      OpDecorate %1055 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 0 
                                              %18 = OpTypePointer Private %6 
                                              %24 = OpTypePointer Private %10 
                               Private f32_3* %25 = OpVariable Private 
                               Private f32_3* %30 = OpVariable Private 
                                          u32 %35 = OpConstant 4 
                                              %36 = OpTypeArray %7 %35 
                                              %37 = OpTypeArray %7 %35 
                                              %38 = OpTypeStruct %7 %7 %7 %36 %37 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_4[4];}* %40 = OpVariable Uniform 
                                              %41 = OpTypeInt 32 1 
                                          i32 %42 = OpConstant 0 
                                              %43 = OpTypePointer Uniform %7 
                                 Private f32* %52 = OpVariable Private 
                               Private f32_4* %56 = OpVariable Private 
                               Private f32_3* %63 = OpVariable Private 
                                              %64 = OpTypeVector %6 2 
                                              %65 = OpTypePointer Input %64 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %68 = OpTypeStruct %6 %7 %7 %6 %6 %10 %7 %6 %6 %6 %6 
                                              %69 = OpTypePointer Uniform %68 
Uniform struct {f32; f32_4; f32_4; f32; f32; f32_3; f32_4; f32; f32; f32; f32;}* %70 = OpVariable Uniform 
                                          i32 %71 = OpConstant 1 
                               Private f32_3* %82 = OpVariable Private 
                                              %83 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %84 = OpTypePointer UniformConstant %83 
         UniformConstant read_only Texture2D* %85 = OpVariable UniformConstant 
                                              %87 = OpTypeSampler 
                                              %88 = OpTypePointer UniformConstant %87 
                     UniformConstant sampler* %89 = OpVariable UniformConstant 
                                              %91 = OpTypeSampledImage %83 
                               Private f32_3* %97 = OpVariable Private 
         UniformConstant read_only Texture2D* %98 = OpVariable UniformConstant 
                    UniformConstant sampler* %100 = OpVariable UniformConstant 
                              Private f32_3* %107 = OpVariable Private 
                                         f32 %109 = OpConstant 3.674022E-40 
                                       f32_3 %110 = OpConstantComposite %109 %109 %109 
                                         f32 %112 = OpConstant 3.674022E-40 
                                       f32_3 %113 = OpConstantComposite %112 %112 %112 
                              Private f32_4* %115 = OpVariable Private 
        UniformConstant read_only Texture2D* %116 = OpVariable UniformConstant 
                    UniformConstant sampler* %118 = OpVariable UniformConstant 
                                         u32 %124 = OpConstant 1 
                                         i32 %127 = OpConstant 3 
                                             %128 = OpTypePointer Uniform %6 
                                Private f32* %133 = OpVariable Private 
                                         f32 %136 = OpConstant 3.674022E-40 
                                         f32 %142 = OpConstant 3.674022E-40 
                              Private f32_3* %144 = OpVariable Private 
                              Private f32_3* %149 = OpVariable Private 
                                         i32 %151 = OpConstant 2 
                                         f32 %157 = OpConstant 3.674022E-40 
                                       f32_3 %158 = OpConstantComposite %157 %157 %157 
                                         f32 %164 = OpConstant 3.674022E-40 
                                       f32_3 %165 = OpConstantComposite %164 %164 %164 
                                Private f32* %167 = OpVariable Private 
                                         f32 %170 = OpConstant 3.674022E-40 
                                         f32 %172 = OpConstant 3.674022E-40 
                              Private f32_3* %174 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                Private f32* %202 = OpVariable Private 
                              Private f32_4* %208 = OpVariable Private 
                                         f32 %222 = OpConstant 3.674022E-40 
                                         u32 %236 = OpConstant 2 
                                         f32 %240 = OpConstant 3.674022E-40 
                                       f32_3 %241 = OpConstantComposite %240 %222 %222 
                                Private f32* %245 = OpVariable Private 
                                         f32 %259 = OpConstant 3.674022E-40 
                                         f32 %271 = OpConstant 3.674022E-40 
                              Private f32_4* %333 = OpVariable Private 
                                         i32 %342 = OpConstant 10 
                              Private f32_3* %353 = OpVariable Private 
        UniformConstant read_only Texture2D* %354 = OpVariable UniformConstant 
                    UniformConstant sampler* %356 = OpVariable UniformConstant 
                              Private f32_3* %363 = OpVariable Private 
                                         i32 %365 = OpConstant 4 
                                             %398 = OpTypeArray %7 %35 
                                             %399 = OpTypeArray %7 %35 
                                             %400 = OpTypeArray %7 %236 
                                             %401 = OpTypeStruct %398 %399 %7 %7 %7 %400 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 
                                             %402 = OpTypePointer Uniform %401 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4; f32_4[2]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %403 = OpVariable Uniform 
                                             %408 = OpTypePointer Private %41 
                                Private i32* %409 = OpVariable Private 
                                             %414 = OpTypePointer Function %16 
                                             %424 = OpTypeBool 
                                Private i32* %426 = OpVariable Private 
                                         u32 %428 = OpConstant 3 
                                             %431 = OpTypePointer Private %16 
                                Private u32* %432 = OpVariable Private 
                                         i32 %435 = OpConstant 5 
                                             %440 = OpTypeVector %16 4 
                                             %441 = OpTypeArray %440 %35 
                                         u32 %442 = OpConstant 1065353216 
                                       u32_4 %443 = OpConstantComposite %442 %17 %17 %17 
                                       u32_4 %444 = OpConstantComposite %17 %442 %17 %17 
                                       u32_4 %445 = OpConstantComposite %17 %17 %442 %17 
                                       u32_4 %446 = OpConstantComposite %17 %17 %17 %442 
                                    u32_4[4] %447 = OpConstantComposite %443 %444 %445 %446 
                                             %449 = OpTypePointer Function %441 
                                             %451 = OpTypePointer Function %440 
                              Private f32_3* %458 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD5 = OpVariable Input 
                                         u32 %462 = OpConstant 32 
                                             %463 = OpTypeArray %7 %462 
                                             %464 = OpTypeArray %7 %462 
                                             %465 = OpTypeArray %7 %462 
                                             %466 = OpTypeArray %7 %462 
                                             %467 = OpTypeArray %7 %462 
                                             %468 = OpTypeStruct %463 %464 %465 %466 %467 
                                             %469 = OpTypePointer Uniform %468 
Uniform struct {f32_4[32]; f32_4[32]; f32_4[32]; f32_4[32]; f32_4[32];}* %470 = OpVariable Uniform 
                                Private f32* %481 = OpVariable Private 
                                         f32 %486 = OpConstant 3.674022E-40 
                                Private f32* %488 = OpVariable Private 
                              Private f32_3* %541 = OpVariable Private 
                              Private f32_3* %562 = OpVariable Private 
                                Private f32* %623 = OpVariable Private 
                                         f32 %632 = OpConstant 3.674022E-40 
                                         f32 %647 = OpConstant 3.674022E-40 
                                         f32 %657 = OpConstant 3.674022E-40 
                                         f32 %678 = OpConstant 3.674022E-40 
                                       f32_3 %679 = OpConstantComposite %678 %678 %678 
                                         i32 %698 = OpConstant 11 
                                         i32 %704 = OpConstant 12 
                              Private f32_3* %715 = OpVariable Private 
                                         i32 %716 = OpConstant 13 
                                         i32 %722 = OpConstant 14 
                                         i32 %728 = OpConstant 15 
                                         i32 %747 = OpConstant 16 
                                       f32_3 %760 = OpConstantComposite %271 %271 %271 
                                       f32_2 %795 = OpConstantComposite %259 %259 
                                         f32 %802 = OpConstant 3.674022E-40 
                                         f32 %804 = OpConstant 3.674022E-40 
                                         f32 %810 = OpConstant 3.674022E-40 
                              Private f32_3* %812 = OpVariable Private 
        UniformConstant read_only Texture2D* %813 = OpVariable UniformConstant 
                    UniformConstant sampler* %815 = OpVariable UniformConstant 
                                Private f32* %859 = OpVariable Private 
                                             %917 = OpTypePointer Uniform %10 
                                         i32 %978 = OpConstant 8 
                                         i32 %986 = OpConstant 7 
                                         i32 %997 = OpConstant 6 
                                        i32 %1003 = OpConstant 9 
                                      f32_3 %1024 = OpConstantComposite %802 %802 %802 
                                        f32 %1028 = OpConstant 3.674022E-40 
                                      f32_3 %1029 = OpConstantComposite %1028 %1028 %1028 
                                        f32 %1047 = OpConstant 3.674022E-40 
                                      f32_3 %1048 = OpConstantComposite %1047 %1047 %1047 
                                            %1052 = OpTypePointer Output %7 
                              Output f32_4* %1053 = OpVariable Output 
                                            %1058 = OpTypePointer Output %6 
                                            %1061 = OpTypePointer Private %424 
                              Private bool* %1062 = OpVariable Private 
                               Private u32* %1063 = OpVariable Private 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function u32* %415 = OpVariable Function 
                          Function u32_4[4]* %450 = OpVariable Function 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                                        f32_3 %14 = OpLoad vs_TEXCOORD2 
                                          f32 %15 = OpDot %13 %14 
                                 Private f32* %19 = OpAccessChain %9 %17 
                                                      OpStore %19 %15 
                                 Private f32* %20 = OpAccessChain %9 %17 
                                          f32 %21 = OpLoad %20 
                                          f32 %22 = OpExtInst %1 32 %21 
                                 Private f32* %23 = OpAccessChain %9 %17 
                                                      OpStore %23 %22 
                                        f32_4 %26 = OpLoad %9 
                                        f32_3 %27 = OpVectorShuffle %26 %26 0 0 0 
                                        f32_3 %28 = OpLoad vs_TEXCOORD2 
                                        f32_3 %29 = OpFMul %27 %28 
                                                      OpStore %25 %29 
                                        f32_3 %31 = OpLoad vs_TEXCOORD2 
                                        f32_4 %32 = OpLoad %9 
                                        f32_3 %33 = OpVectorShuffle %32 %32 0 0 0 
                                        f32_3 %34 = OpFMul %31 %33 
                               Uniform f32_4* %44 = OpAccessChain %40 %42 
                                        f32_4 %45 = OpLoad %44 
                                        f32_3 %46 = OpVectorShuffle %45 %45 0 1 2 
                                        f32_3 %47 = OpFAdd %34 %46 
                                                      OpStore %30 %47 
                                        f32_3 %48 = OpLoad %30 
                                        f32_3 %49 = OpLoad %30 
                                          f32 %50 = OpDot %48 %49 
                                 Private f32* %51 = OpAccessChain %9 %17 
                                                      OpStore %51 %50 
                                 Private f32* %53 = OpAccessChain %9 %17 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpExtInst %1 32 %54 
                                                      OpStore %52 %55 
                                          f32 %57 = OpLoad %52 
                                        f32_3 %58 = OpCompositeConstruct %57 %57 %57 
                                        f32_3 %59 = OpLoad %30 
                                        f32_3 %60 = OpFMul %58 %59 
                                        f32_4 %61 = OpLoad %56 
                                        f32_4 %62 = OpVectorShuffle %61 %60 4 5 6 3 
                                                      OpStore %56 %62 
                                        f32_2 %67 = OpLoad vs_TEXCOORD0 
                               Uniform f32_4* %72 = OpAccessChain %70 %71 
                                        f32_4 %73 = OpLoad %72 
                                        f32_2 %74 = OpVectorShuffle %73 %73 0 1 
                                        f32_2 %75 = OpFMul %67 %74 
                               Uniform f32_4* %76 = OpAccessChain %70 %71 
                                        f32_4 %77 = OpLoad %76 
                                        f32_2 %78 = OpVectorShuffle %77 %77 2 3 
                                        f32_2 %79 = OpFAdd %75 %78 
                                        f32_3 %80 = OpLoad %63 
                                        f32_3 %81 = OpVectorShuffle %80 %79 3 4 2 
                                                      OpStore %63 %81 
                          read_only Texture2D %86 = OpLoad %85 
                                      sampler %90 = OpLoad %89 
                   read_only Texture2DSampled %92 = OpSampledImage %86 %90 
                                        f32_3 %93 = OpLoad %63 
                                        f32_2 %94 = OpVectorShuffle %93 %93 0 1 
                                        f32_4 %95 = OpImageSampleImplicitLod %92 %94 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 1 2 
                                                      OpStore %82 %96 
                          read_only Texture2D %99 = OpLoad %98 
                                     sampler %101 = OpLoad %100 
                  read_only Texture2DSampled %102 = OpSampledImage %99 %101 
                                       f32_3 %103 = OpLoad %63 
                                       f32_2 %104 = OpVectorShuffle %103 %103 0 1 
                                       f32_4 %105 = OpImageSampleImplicitLod %102 %104 
                                       f32_3 %106 = OpVectorShuffle %105 %105 0 1 2 
                                                      OpStore %97 %106 
                                       f32_3 %108 = OpLoad %97 
                                       f32_3 %111 = OpFMul %108 %110 
                                       f32_3 %114 = OpFAdd %111 %113 
                                                      OpStore %107 %114 
                         read_only Texture2D %117 = OpLoad %116 
                                     sampler %119 = OpLoad %118 
                  read_only Texture2DSampled %120 = OpSampledImage %117 %119 
                                       f32_3 %121 = OpLoad %63 
                                       f32_2 %122 = OpVectorShuffle %121 %121 0 1 
                                       f32_4 %123 = OpImageSampleImplicitLod %120 %122 
                                                      OpStore %115 %123 
                                Private f32* %125 = OpAccessChain %115 %124 
                                         f32 %126 = OpLoad %125 
                                Uniform f32* %129 = OpAccessChain %70 %127 
                                         f32 %130 = OpLoad %129 
                                         f32 %131 = OpFNegate %130 
                                         f32 %132 = OpFAdd %126 %131 
                                                      OpStore %52 %132 
                                         f32 %134 = OpLoad %52 
                                         f32 %135 = OpFNegate %134 
                                         f32 %137 = OpFAdd %135 %136 
                                                      OpStore %133 %137 
                                         f32 %138 = OpLoad %133 
                                         f32 %139 = OpLoad %133 
                                         f32 %140 = OpFMul %138 %139 
                                                      OpStore %133 %140 
                                         f32 %141 = OpLoad %133 
                                         f32 %143 = OpExtInst %1 40 %141 %142 
                                                      OpStore %133 %143 
                                       f32_3 %145 = OpLoad %82 
                                       f32_4 %146 = OpLoad %115 
                                       f32_3 %147 = OpVectorShuffle %146 %146 2 2 2 
                                       f32_3 %148 = OpFMul %145 %147 
                                                      OpStore %144 %148 
                                       f32_3 %150 = OpLoad %144 
                              Uniform f32_4* %152 = OpAccessChain %70 %151 
                                       f32_4 %153 = OpLoad %152 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                       f32_3 %155 = OpFMul %150 %154 
                                                      OpStore %149 %155 
                                       f32_3 %156 = OpLoad %82 
                                       f32_3 %159 = OpFAdd %156 %158 
                                                      OpStore %144 %159 
                                       f32_4 %160 = OpLoad %115 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 0 0 
                                       f32_3 %162 = OpLoad %144 
                                       f32_3 %163 = OpFMul %161 %162 
                                       f32_3 %166 = OpFAdd %163 %165 
                                                      OpStore %144 %166 
                                Private f32* %168 = OpAccessChain %115 %17 
                                         f32 %169 = OpLoad %168 
                                         f32 %171 = OpFMul %169 %170 
                                         f32 %173 = OpFAdd %171 %172 
                                                      OpStore %167 %173 
                                       f32_3 %175 = OpLoad %82 
                                         f32 %176 = OpLoad %167 
                                       f32_3 %177 = OpCompositeConstruct %176 %176 %176 
                                       f32_3 %178 = OpFMul %175 %177 
                                                      OpStore %174 %178 
                                       f32_4 %179 = OpLoad %115 
                                       f32_3 %180 = OpVectorShuffle %179 %179 3 3 3 
                                       f32_3 %181 = OpLoad %174 
                                       f32_3 %182 = OpFMul %180 %181 
                                                      OpStore %174 %182 
                                       f32_3 %183 = OpLoad %107 
                                       f32_3 %184 = OpVectorShuffle %183 %183 1 1 1 
                                       f32_3 %186 = OpLoad vs_TEXCOORD4 
                                       f32_3 %187 = OpFMul %184 %186 
                                                      OpStore %63 %187 
                                       f32_3 %188 = OpLoad %107 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 0 0 
                                       f32_3 %191 = OpLoad vs_TEXCOORD3 
                                       f32_3 %192 = OpFMul %189 %191 
                                       f32_3 %193 = OpLoad %63 
                                       f32_3 %194 = OpFAdd %192 %193 
                                                      OpStore %63 %194 
                                       f32_3 %195 = OpLoad %107 
                                       f32_3 %196 = OpVectorShuffle %195 %195 2 2 2 
                                       f32_3 %198 = OpLoad vs_TEXCOORD1 
                                       f32_3 %199 = OpFMul %196 %198 
                                       f32_3 %200 = OpLoad %63 
                                       f32_3 %201 = OpFAdd %199 %200 
                                                      OpStore %63 %201 
                                       f32_3 %203 = OpLoad %63 
                                       f32_3 %204 = OpLoad %63 
                                         f32 %205 = OpDot %203 %204 
                                                      OpStore %202 %205 
                                         f32 %206 = OpLoad %202 
                                         f32 %207 = OpExtInst %1 32 %206 
                                                      OpStore %202 %207 
                                         f32 %209 = OpLoad %202 
                                       f32_3 %210 = OpCompositeConstruct %209 %209 %209 
                                       f32_3 %211 = OpLoad %63 
                                       f32_3 %212 = OpFMul %210 %211 
                                       f32_4 %213 = OpLoad %208 
                                       f32_4 %214 = OpVectorShuffle %213 %212 4 5 6 3 
                                                      OpStore %208 %214 
                                       f32_4 %215 = OpLoad %208 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                              Uniform f32_4* %217 = OpAccessChain %40 %42 
                                       f32_4 %218 = OpLoad %217 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
                                         f32 %220 = OpDot %216 %219 
                                                      OpStore %202 %220 
                                         f32 %221 = OpLoad %202 
                                         f32 %223 = OpExtInst %1 40 %221 %222 
                                Private f32* %224 = OpAccessChain %63 %17 
                                                      OpStore %224 %223 
                                       f32_4 %225 = OpLoad %208 
                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
                                       f32_3 %227 = OpLoad %25 
                                         f32 %228 = OpDot %226 %227 
                                Private f32* %229 = OpAccessChain %9 %124 
                                                      OpStore %229 %228 
                              Uniform f32_4* %230 = OpAccessChain %40 %42 
                                       f32_4 %231 = OpLoad %230 
                                       f32_3 %232 = OpVectorShuffle %231 %231 0 1 2 
                                       f32_4 %233 = OpLoad %56 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                         f32 %235 = OpDot %232 %234 
                                Private f32* %237 = OpAccessChain %9 %236 
                                                      OpStore %237 %235 
                                       f32_4 %238 = OpLoad %9 
                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
                                       f32_3 %242 = OpExtInst %1 40 %239 %241 
                                       f32_4 %243 = OpLoad %9 
                                       f32_4 %244 = OpVectorShuffle %243 %242 4 5 6 3 
                                                      OpStore %9 %244 
                                         f32 %246 = OpLoad %133 
                                         f32 %247 = OpLoad %133 
                                         f32 %248 = OpFAdd %246 %247 
                                                      OpStore %245 %248 
                                Private f32* %249 = OpAccessChain %9 %236 
                                         f32 %250 = OpLoad %249 
                                Private f32* %251 = OpAccessChain %9 %236 
                                         f32 %252 = OpLoad %251 
                                         f32 %253 = OpFMul %250 %252 
                                Private f32* %254 = OpAccessChain %56 %17 
                                                      OpStore %254 %253 
                                Private f32* %255 = OpAccessChain %56 %17 
                                         f32 %256 = OpLoad %255 
                                         f32 %257 = OpLoad %245 
                                         f32 %258 = OpFMul %256 %257 
                                         f32 %260 = OpFAdd %258 %259 
                                                      OpStore %245 %260 
                                         f32 %261 = OpLoad %245 
                                         f32 %262 = OpFAdd %261 %112 
                                Private f32* %263 = OpAccessChain %107 %17 
                                                      OpStore %263 %262 
                                Private f32* %264 = OpAccessChain %9 %124 
                                         f32 %265 = OpLoad %264 
                                         f32 %266 = OpFNegate %265 
                                         f32 %267 = OpFAdd %266 %136 
                                Private f32* %268 = OpAccessChain %25 %17 
                                                      OpStore %268 %267 
                                Private f32* %269 = OpAccessChain %25 %17 
                                         f32 %270 = OpLoad %269 
                                         f32 %272 = OpExtInst %1 40 %270 %271 
                                Private f32* %273 = OpAccessChain %25 %17 
                                                      OpStore %273 %272 
                                Private f32* %274 = OpAccessChain %25 %17 
                                         f32 %275 = OpLoad %274 
                                Private f32* %276 = OpAccessChain %25 %17 
                                         f32 %277 = OpLoad %276 
                                         f32 %278 = OpFMul %275 %277 
                                                      OpStore %245 %278 
                                         f32 %279 = OpLoad %245 
                                         f32 %280 = OpLoad %245 
                                         f32 %281 = OpFMul %279 %280 
                                                      OpStore %245 %281 
                                Private f32* %282 = OpAccessChain %25 %17 
                                         f32 %283 = OpLoad %282 
                                         f32 %284 = OpLoad %245 
                                         f32 %285 = OpFMul %283 %284 
                                Private f32* %286 = OpAccessChain %25 %17 
                                                      OpStore %286 %285 
                                Private f32* %287 = OpAccessChain %107 %17 
                                         f32 %288 = OpLoad %287 
                                Private f32* %289 = OpAccessChain %25 %17 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpFMul %288 %290 
                                         f32 %292 = OpFAdd %291 %136 
                                Private f32* %293 = OpAccessChain %25 %17 
                                                      OpStore %293 %292 
                                Private f32* %294 = OpAccessChain %63 %17 
                                         f32 %295 = OpLoad %294 
                                         f32 %296 = OpFNegate %295 
                                         f32 %297 = OpFAdd %296 %136 
                                                      OpStore %245 %297 
                                         f32 %298 = OpLoad %245 
                                         f32 %299 = OpExtInst %1 40 %298 %271 
                                                      OpStore %245 %299 
                                         f32 %300 = OpLoad %245 
                                         f32 %301 = OpLoad %245 
                                         f32 %302 = OpFMul %300 %301 
                                Private f32* %303 = OpAccessChain %56 %17 
                                                      OpStore %303 %302 
                                Private f32* %304 = OpAccessChain %56 %17 
                                         f32 %305 = OpLoad %304 
                                Private f32* %306 = OpAccessChain %56 %17 
                                         f32 %307 = OpLoad %306 
                                         f32 %308 = OpFMul %305 %307 
                                Private f32* %309 = OpAccessChain %56 %17 
                                                      OpStore %309 %308 
                                         f32 %310 = OpLoad %245 
                                Private f32* %311 = OpAccessChain %56 %17 
                                         f32 %312 = OpLoad %311 
                                         f32 %313 = OpFMul %310 %312 
                                                      OpStore %245 %313 
                                Private f32* %314 = OpAccessChain %107 %17 
                                         f32 %315 = OpLoad %314 
                                         f32 %316 = OpLoad %245 
                                         f32 %317 = OpFMul %315 %316 
                                         f32 %318 = OpFAdd %317 %136 
                                                      OpStore %245 %318 
                                Private f32* %319 = OpAccessChain %25 %17 
                                         f32 %320 = OpLoad %319 
                                         f32 %321 = OpLoad %245 
                                         f32 %322 = OpFMul %320 %321 
                                Private f32* %323 = OpAccessChain %107 %17 
                                                      OpStore %323 %322 
                                Private f32* %324 = OpAccessChain %107 %17 
                                         f32 %325 = OpLoad %324 
                                         f32 %326 = OpExtInst %1 37 %325 %136 
                                Private f32* %327 = OpAccessChain %107 %17 
                                                      OpStore %327 %326 
                                         f32 %328 = OpLoad %202 
                                Private f32* %329 = OpAccessChain %107 %17 
                                         f32 %330 = OpLoad %329 
                                         f32 %331 = OpFMul %328 %330 
                                Private f32* %332 = OpAccessChain %107 %17 
                                                      OpStore %332 %331 
                                Private f32* %334 = OpAccessChain %107 %17 
                                         f32 %335 = OpLoad %334 
                                         f32 %336 = OpFMul %335 %259 
                                         f32 %337 = OpFAdd %336 %259 
                                Private f32* %338 = OpAccessChain %333 %17 
                                                      OpStore %338 %337 
                                Private f32* %339 = OpAccessChain %333 %17 
                                         f32 %340 = OpLoad %339 
                                Private f32* %341 = OpAccessChain %56 %17 
                                                      OpStore %341 %340 
                                Uniform f32* %343 = OpAccessChain %70 %342 
                                         f32 %344 = OpLoad %343 
                                Uniform f32* %345 = OpAccessChain %70 %342 
                                         f32 %346 = OpLoad %345 
                                       f32_2 %347 = OpCompositeConstruct %344 %346 
                                         f32 %348 = OpCompositeExtract %347 0 
                                         f32 %349 = OpCompositeExtract %347 1 
                                       f32_2 %350 = OpCompositeConstruct %348 %349 
                                       f32_4 %351 = OpLoad %56 
                                       f32_4 %352 = OpVectorShuffle %351 %350 0 4 2 5 
                                                      OpStore %56 %352 
                         read_only Texture2D %355 = OpLoad %354 
                                     sampler %357 = OpLoad %356 
                  read_only Texture2DSampled %358 = OpSampledImage %355 %357 
                                       f32_4 %359 = OpLoad %56 
                                       f32_2 %360 = OpVectorShuffle %359 %359 0 1 
                                       f32_4 %361 = OpImageSampleImplicitLod %358 %360 
                                       f32_3 %362 = OpVectorShuffle %361 %361 0 1 2 
                                                      OpStore %353 %362 
                                       f32_3 %364 = OpLoad %353 
                                Uniform f32* %366 = OpAccessChain %70 %365 
                                         f32 %367 = OpLoad %366 
                                Uniform f32* %368 = OpAccessChain %70 %365 
                                         f32 %369 = OpLoad %368 
                                Uniform f32* %370 = OpAccessChain %70 %365 
                                         f32 %371 = OpLoad %370 
                                       f32_3 %372 = OpCompositeConstruct %367 %369 %371 
                                         f32 %373 = OpCompositeExtract %372 0 
                                         f32 %374 = OpCompositeExtract %372 1 
                                         f32 %375 = OpCompositeExtract %372 2 
                                       f32_3 %376 = OpCompositeConstruct %373 %374 %375 
                                       f32_3 %377 = OpFMul %364 %376 
                                                      OpStore %363 %377 
                                Private f32* %378 = OpAccessChain %56 %17 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpExtInst %1 37 %379 %136 
                                Private f32* %381 = OpAccessChain %25 %17 
                                                      OpStore %381 %380 
                                       f32_3 %382 = OpLoad %174 
                                       f32_3 %383 = OpLoad %363 
                                       f32_3 %384 = OpFMul %382 %383 
                                                      OpStore %107 %384 
                                       f32_3 %385 = OpLoad %107 
                              Uniform f32_4* %386 = OpAccessChain %40 %71 
                                       f32_4 %387 = OpLoad %386 
                                       f32_3 %388 = OpVectorShuffle %387 %387 0 1 2 
                                       f32_3 %389 = OpFMul %385 %388 
                                                      OpStore %363 %389 
                                       f32_3 %390 = OpLoad %363 
                                       f32_3 %391 = OpLoad %25 
                                       f32_3 %392 = OpVectorShuffle %391 %391 0 0 0 
                                       f32_3 %393 = OpFMul %390 %392 
                                       f32_3 %394 = OpLoad %149 
                                       f32_3 %395 = OpFAdd %393 %394 
                                                      OpStore %363 %395 
                                Uniform f32* %396 = OpAccessChain %40 %151 %17 
                                         f32 %397 = OpLoad %396 
                                Uniform f32* %404 = OpAccessChain %403 %365 %124 
                                         f32 %405 = OpLoad %404 
                                         f32 %406 = OpExtInst %1 37 %397 %405 
                                Private f32* %407 = OpAccessChain %107 %17 
                                                      OpStore %407 %406 
                                Private f32* %410 = OpAccessChain %107 %17 
                                         f32 %411 = OpLoad %410 
                                         i32 %412 = OpConvertFToS %411 
                                                      OpStore %409 %412 
                                       f32_3 %413 = OpLoad %363 
                                                      OpStore %107 %413 
                                                      OpStore %415 %17 
                                                      OpBranch %416 
                                             %416 = OpLabel 
                                                      OpLoopMerge %418 %419 None 
                                                      OpBranch %420 
                                             %420 = OpLabel 
                                         u32 %421 = OpLoad %415 
                                         i32 %422 = OpLoad %409 
                                         u32 %423 = OpBitcast %422 
                                        bool %425 = OpULessThan %421 %423 
                                                      OpBranchConditional %425 %417 %418 
                                             %417 = OpLabel 
                                         u32 %427 = OpLoad %415 
                                         u32 %429 = OpBitwiseAnd %427 %428 
                                         i32 %430 = OpBitcast %429 
                                                      OpStore %426 %430 
                                         u32 %433 = OpLoad %415 
                                         u32 %434 = OpShiftRightLogical %433 %236 
                                                      OpStore %432 %434 
                                         u32 %436 = OpLoad %432 
                                         i32 %437 = OpBitcast %436 
                              Uniform f32_4* %438 = OpAccessChain %403 %435 %437 
                                       f32_4 %439 = OpLoad %438 
                                         i32 %448 = OpLoad %426 
                                                      OpStore %450 %447 
                             Function u32_4* %452 = OpAccessChain %450 %448 
                                       u32_4 %453 = OpLoad %452 
                                       f32_4 %454 = OpBitcast %453 
                                         f32 %455 = OpDot %439 %454 
                                                      OpStore %167 %455 
                                         f32 %456 = OpLoad %167 
                                         i32 %457 = OpConvertFToS %456 
                                                      OpStore %426 %457 
                                       f32_3 %460 = OpLoad vs_TEXCOORD5 
                                       f32_3 %461 = OpFNegate %460 
                                         i32 %471 = OpLoad %426 
                              Uniform f32_4* %472 = OpAccessChain %470 %42 %471 
                                       f32_4 %473 = OpLoad %472 
                                       f32_3 %474 = OpVectorShuffle %473 %473 3 3 3 
                                       f32_3 %475 = OpFMul %461 %474 
                                         i32 %476 = OpLoad %426 
                              Uniform f32_4* %477 = OpAccessChain %470 %42 %476 
                                       f32_4 %478 = OpLoad %477 
                                       f32_3 %479 = OpVectorShuffle %478 %478 0 1 2 
                                       f32_3 %480 = OpFAdd %475 %479 
                                                      OpStore %458 %480 
                                       f32_3 %482 = OpLoad %458 
                                       f32_3 %483 = OpLoad %458 
                                         f32 %484 = OpDot %482 %483 
                                                      OpStore %481 %484 
                                         f32 %485 = OpLoad %481 
                                         f32 %487 = OpExtInst %1 40 %485 %486 
                                                      OpStore %481 %487 
                                         f32 %489 = OpLoad %481 
                                         f32 %490 = OpExtInst %1 32 %489 
                                                      OpStore %488 %490 
                                         f32 %491 = OpLoad %488 
                                       f32_3 %492 = OpCompositeConstruct %491 %491 %491 
                                       f32_3 %493 = OpLoad %458 
                                       f32_3 %494 = OpFMul %492 %493 
                                                      OpStore %458 %494 
                                         f32 %495 = OpLoad %481 
                                         f32 %496 = OpFDiv %136 %495 
                                                      OpStore %488 %496 
                                         f32 %497 = OpLoad %481 
                                         i32 %498 = OpLoad %426 
                                Uniform f32* %499 = OpAccessChain %470 %151 %498 %17 
                                         f32 %500 = OpLoad %499 
                                         f32 %501 = OpFMul %497 %500 
                                         i32 %502 = OpLoad %426 
                                Uniform f32* %503 = OpAccessChain %470 %151 %502 %124 
                                         f32 %504 = OpLoad %503 
                                         f32 %505 = OpFAdd %501 %504 
                                                      OpStore %481 %505 
                                         f32 %506 = OpLoad %481 
                                         f32 %507 = OpExtInst %1 43 %506 %271 %136 
                                                      OpStore %481 %507 
                                         f32 %508 = OpLoad %481 
                                         f32 %509 = OpLoad %488 
                                         f32 %510 = OpFMul %508 %509 
                                                      OpStore %481 %510 
                                         i32 %511 = OpLoad %426 
                              Uniform f32_4* %512 = OpAccessChain %470 %127 %511 
                                       f32_4 %513 = OpLoad %512 
                                       f32_3 %514 = OpVectorShuffle %513 %513 0 1 2 
                                       f32_3 %515 = OpLoad %458 
                                         f32 %516 = OpDot %514 %515 
                                                      OpStore %167 %516 
                                         f32 %517 = OpLoad %167 
                                         i32 %518 = OpLoad %426 
                                Uniform f32* %519 = OpAccessChain %470 %151 %518 %236 
                                         f32 %520 = OpLoad %519 
                                         f32 %521 = OpFMul %517 %520 
                                         i32 %522 = OpLoad %426 
                                Uniform f32* %523 = OpAccessChain %470 %151 %522 %428 
                                         f32 %524 = OpLoad %523 
                                         f32 %525 = OpFAdd %521 %524 
                                                      OpStore %167 %525 
                                         f32 %526 = OpLoad %167 
                                         f32 %527 = OpExtInst %1 43 %526 %271 %136 
                                                      OpStore %167 %527 
                                         f32 %528 = OpLoad %167 
                                         f32 %529 = OpLoad %167 
                                         f32 %530 = OpFMul %528 %529 
                                                      OpStore %167 %530 
                                         f32 %531 = OpLoad %481 
                                         f32 %532 = OpLoad %167 
                                         f32 %533 = OpFMul %531 %532 
                                                      OpStore %481 %533 
                                       f32_4 %534 = OpLoad %208 
                                       f32_3 %535 = OpVectorShuffle %534 %534 0 1 2 
                                       f32_3 %536 = OpLoad %458 
                                         f32 %537 = OpDot %535 %536 
                                                      OpStore %488 %537 
                                         f32 %538 = OpLoad %488 
                                         f32 %539 = OpExtInst %1 40 %538 %222 
                                Private f32* %540 = OpAccessChain %56 %236 
                                                      OpStore %540 %539 
                         read_only Texture2D %542 = OpLoad %354 
                                     sampler %543 = OpLoad %356 
                  read_only Texture2DSampled %544 = OpSampledImage %542 %543 
                                       f32_4 %545 = OpLoad %56 
                                       f32_2 %546 = OpVectorShuffle %545 %545 2 3 
                                       f32_4 %547 = OpImageSampleImplicitLod %544 %546 
                                       f32_3 %548 = OpVectorShuffle %547 %547 0 1 2 
                                                      OpStore %541 %548 
                                       f32_3 %549 = OpLoad %541 
                                Uniform f32* %550 = OpAccessChain %70 %365 
                                         f32 %551 = OpLoad %550 
                                Uniform f32* %552 = OpAccessChain %70 %365 
                                         f32 %553 = OpLoad %552 
                                Uniform f32* %554 = OpAccessChain %70 %365 
                                         f32 %555 = OpLoad %554 
                                       f32_3 %556 = OpCompositeConstruct %551 %553 %555 
                                         f32 %557 = OpCompositeExtract %556 0 
                                         f32 %558 = OpCompositeExtract %556 1 
                                         f32 %559 = OpCompositeExtract %556 2 
                                       f32_3 %560 = OpCompositeConstruct %557 %558 %559 
                                       f32_3 %561 = OpFMul %549 %560 
                                                      OpStore %458 %561 
                                       f32_3 %563 = OpLoad %174 
                                       f32_3 %564 = OpLoad %458 
                                       f32_3 %565 = OpFMul %563 %564 
                                                      OpStore %562 %565 
                                       f32_3 %566 = OpLoad %562 
                                         i32 %567 = OpLoad %426 
                              Uniform f32_4* %568 = OpAccessChain %470 %71 %567 
                                       f32_4 %569 = OpLoad %568 
                                       f32_3 %570 = OpVectorShuffle %569 %569 0 1 2 
                                       f32_3 %571 = OpFMul %566 %570 
                                                      OpStore %562 %571 
                                       f32_3 %572 = OpLoad %562 
                                         f32 %573 = OpLoad %481 
                                       f32_3 %574 = OpCompositeConstruct %573 %573 %573 
                                       f32_3 %575 = OpFMul %572 %574 
                                       f32_3 %576 = OpLoad %149 
                                       f32_3 %577 = OpFAdd %575 %576 
                                                      OpStore %562 %577 
                                       f32_3 %578 = OpLoad %107 
                                       f32_3 %579 = OpLoad %562 
                                       f32_3 %580 = OpFAdd %578 %579 
                                                      OpStore %107 %580 
                                                      OpBranch %419 
                                             %419 = OpLabel 
                                         u32 %581 = OpLoad %415 
                                         u32 %582 = OpIAdd %581 %71 
                                                      OpStore %415 %582 
                                                      OpBranch %416 
                                             %418 = OpLabel 
                                Private f32* %583 = OpAccessChain %9 %17 
                                         f32 %584 = OpLoad %583 
                                         f32 %585 = OpExtInst %1 32 %584 
                                Private f32* %586 = OpAccessChain %9 %17 
                                                      OpStore %586 %585 
                                       f32_4 %587 = OpLoad %9 
                                       f32_3 %588 = OpVectorShuffle %587 %587 0 0 0 
                                       f32_3 %589 = OpLoad %30 
                                       f32_3 %590 = OpFMul %588 %589 
                                       f32_4 %591 = OpLoad %9 
                                       f32_4 %592 = OpVectorShuffle %591 %590 4 5 2 6 
                                                      OpStore %9 %592 
                                       f32_4 %593 = OpLoad %208 
                                       f32_3 %594 = OpVectorShuffle %593 %593 0 1 2 
                                       f32_4 %595 = OpLoad %9 
                                       f32_3 %596 = OpVectorShuffle %595 %595 0 1 3 
                                         f32 %597 = OpDot %594 %596 
                                Private f32* %598 = OpAccessChain %30 %17 
                                                      OpStore %598 %597 
                                Private f32* %599 = OpAccessChain %30 %17 
                                         f32 %600 = OpLoad %599 
                                         f32 %601 = OpExtInst %1 43 %600 %271 %136 
                                Private f32* %602 = OpAccessChain %30 %17 
                                                      OpStore %602 %601 
                              Uniform f32_4* %603 = OpAccessChain %40 %42 
                                       f32_4 %604 = OpLoad %603 
                                       f32_3 %605 = OpVectorShuffle %604 %604 0 1 2 
                                       f32_4 %606 = OpLoad %9 
                                       f32_3 %607 = OpVectorShuffle %606 %606 0 1 3 
                                         f32 %608 = OpDot %605 %607 
                                Private f32* %609 = OpAccessChain %9 %17 
                                                      OpStore %609 %608 
                                Private f32* %610 = OpAccessChain %9 %17 
                                         f32 %611 = OpLoad %610 
                                         f32 %612 = OpExtInst %1 43 %611 %271 %136 
                                Private f32* %613 = OpAccessChain %9 %17 
                                                      OpStore %613 %612 
                                Private f32* %614 = OpAccessChain %30 %17 
                                         f32 %615 = OpLoad %614 
                                Private f32* %616 = OpAccessChain %30 %17 
                                         f32 %617 = OpLoad %616 
                                         f32 %618 = OpFMul %615 %617 
                                Private f32* %619 = OpAccessChain %25 %17 
                                                      OpStore %619 %618 
                                         f32 %620 = OpLoad %133 
                                         f32 %621 = OpLoad %133 
                                         f32 %622 = OpFMul %620 %621 
                                                      OpStore %167 %622 
                                         f32 %624 = OpLoad %133 
                                         f32 %625 = OpLoad %133 
                                         f32 %626 = OpFMul %624 %625 
                                         f32 %627 = OpFAdd %626 %112 
                                                      OpStore %623 %627 
                                Private f32* %628 = OpAccessChain %25 %17 
                                         f32 %629 = OpLoad %628 
                                         f32 %630 = OpLoad %623 
                                         f32 %631 = OpFMul %629 %630 
                                         f32 %633 = OpFAdd %631 %632 
                                Private f32* %634 = OpAccessChain %25 %17 
                                                      OpStore %634 %633 
                                Private f32* %635 = OpAccessChain %9 %17 
                                         f32 %636 = OpLoad %635 
                                Private f32* %637 = OpAccessChain %9 %17 
                                         f32 %638 = OpLoad %637 
                                         f32 %639 = OpFMul %636 %638 
                                                      OpStore %623 %639 
                                Private f32* %640 = OpAccessChain %25 %17 
                                         f32 %641 = OpLoad %640 
                                Private f32* %642 = OpAccessChain %25 %17 
                                         f32 %643 = OpLoad %642 
                                         f32 %644 = OpFMul %641 %643 
                                Private f32* %645 = OpAccessChain %9 %17 
                                                      OpStore %645 %644 
                                         f32 %646 = OpLoad %623 
                                         f32 %648 = OpExtInst %1 40 %646 %647 
                                Private f32* %649 = OpAccessChain %25 %17 
                                                      OpStore %649 %648 
                                Private f32* %650 = OpAccessChain %25 %17 
                                         f32 %651 = OpLoad %650 
                                Private f32* %652 = OpAccessChain %9 %17 
                                         f32 %653 = OpLoad %652 
                                         f32 %654 = OpFMul %651 %653 
                                Private f32* %655 = OpAccessChain %9 %17 
                                                      OpStore %655 %654 
                                         f32 %656 = OpLoad %133 
                                         f32 %658 = OpFMul %656 %657 
                                         f32 %659 = OpFAdd %658 %109 
                                                      OpStore %623 %659 
                                Private f32* %660 = OpAccessChain %9 %17 
                                         f32 %661 = OpLoad %660 
                                         f32 %662 = OpLoad %623 
                                         f32 %663 = OpFMul %661 %662 
                                Private f32* %664 = OpAccessChain %9 %17 
                                                      OpStore %664 %663 
                                         f32 %665 = OpLoad %167 
                                Private f32* %666 = OpAccessChain %9 %17 
                                         f32 %667 = OpLoad %666 
                                         f32 %668 = OpFDiv %665 %667 
                                Private f32* %669 = OpAccessChain %9 %17 
                                                      OpStore %669 %668 
                                       f32_3 %670 = OpLoad %144 
                                       f32_4 %671 = OpLoad %9 
                                       f32_3 %672 = OpVectorShuffle %671 %671 0 0 0 
                                       f32_3 %673 = OpFMul %670 %672 
                                       f32_4 %674 = OpLoad %9 
                                       f32_4 %675 = OpVectorShuffle %674 %673 4 5 2 6 
                                                      OpStore %9 %675 
                                       f32_4 %676 = OpLoad %9 
                                       f32_3 %677 = OpVectorShuffle %676 %676 0 1 3 
                                       f32_3 %680 = OpFMul %677 %679 
                                                      OpStore %562 %680 
                                       f32_3 %681 = OpLoad %562 
                              Uniform f32_4* %682 = OpAccessChain %40 %71 
                                       f32_4 %683 = OpLoad %682 
                                       f32_3 %684 = OpVectorShuffle %683 %683 0 1 2 
                                       f32_3 %685 = OpFMul %681 %684 
                                                      OpStore %30 %685 
                                       f32_3 %686 = OpLoad %30 
                                       f32_3 %687 = OpLoad %63 
                                       f32_3 %688 = OpVectorShuffle %687 %687 0 0 0 
                                       f32_3 %689 = OpFMul %686 %688 
                                       f32_3 %690 = OpLoad %107 
                                       f32_3 %691 = OpFAdd %689 %690 
                                                      OpStore %107 %691 
                                Private f32* %692 = OpAccessChain %208 %428 
                                                      OpStore %692 %136 
                              Uniform f32_4* %693 = OpAccessChain %403 %342 
                                       f32_4 %694 = OpLoad %693 
                                       f32_4 %695 = OpLoad %208 
                                         f32 %696 = OpDot %694 %695 
                                Private f32* %697 = OpAccessChain %562 %17 
                                                      OpStore %697 %696 
                              Uniform f32_4* %699 = OpAccessChain %403 %698 
                                       f32_4 %700 = OpLoad %699 
                                       f32_4 %701 = OpLoad %208 
                                         f32 %702 = OpDot %700 %701 
                                Private f32* %703 = OpAccessChain %562 %124 
                                                      OpStore %703 %702 
                              Uniform f32_4* %705 = OpAccessChain %403 %704 
                                       f32_4 %706 = OpLoad %705 
                                       f32_4 %707 = OpLoad %208 
                                         f32 %708 = OpDot %706 %707 
                                Private f32* %709 = OpAccessChain %562 %236 
                                                      OpStore %709 %708 
                                       f32_4 %710 = OpLoad %208 
                                       f32_4 %711 = OpVectorShuffle %710 %710 1 2 2 0 
                                       f32_4 %712 = OpLoad %208 
                                       f32_4 %713 = OpVectorShuffle %712 %712 0 1 2 2 
                                       f32_4 %714 = OpFMul %711 %713 
                                                      OpStore %333 %714 
                              Uniform f32_4* %717 = OpAccessChain %403 %716 
                                       f32_4 %718 = OpLoad %717 
                                       f32_4 %719 = OpLoad %333 
                                         f32 %720 = OpDot %718 %719 
                                Private f32* %721 = OpAccessChain %715 %17 
                                                      OpStore %721 %720 
                              Uniform f32_4* %723 = OpAccessChain %403 %722 
                                       f32_4 %724 = OpLoad %723 
                                       f32_4 %725 = OpLoad %333 
                                         f32 %726 = OpDot %724 %725 
                                Private f32* %727 = OpAccessChain %715 %124 
                                                      OpStore %727 %726 
                              Uniform f32_4* %729 = OpAccessChain %403 %728 
                                       f32_4 %730 = OpLoad %729 
                                       f32_4 %731 = OpLoad %333 
                                         f32 %732 = OpDot %730 %731 
                                Private f32* %733 = OpAccessChain %715 %236 
                                                      OpStore %733 %732 
                                Private f32* %734 = OpAccessChain %208 %124 
                                         f32 %735 = OpLoad %734 
                                Private f32* %736 = OpAccessChain %208 %124 
                                         f32 %737 = OpLoad %736 
                                         f32 %738 = OpFMul %735 %737 
                                                      OpStore %167 %738 
                                Private f32* %739 = OpAccessChain %208 %17 
                                         f32 %740 = OpLoad %739 
                                Private f32* %741 = OpAccessChain %208 %17 
                                         f32 %742 = OpLoad %741 
                                         f32 %743 = OpFMul %740 %742 
                                         f32 %744 = OpLoad %167 
                                         f32 %745 = OpFNegate %744 
                                         f32 %746 = OpFAdd %743 %745 
                                                      OpStore %167 %746 
                              Uniform f32_4* %748 = OpAccessChain %403 %747 
                                       f32_4 %749 = OpLoad %748 
                                       f32_3 %750 = OpVectorShuffle %749 %749 0 1 2 
                                         f32 %751 = OpLoad %167 
                                       f32_3 %752 = OpCompositeConstruct %751 %751 %751 
                                       f32_3 %753 = OpFMul %750 %752 
                                       f32_3 %754 = OpLoad %715 
                                       f32_3 %755 = OpFAdd %753 %754 
                                                      OpStore %715 %755 
                                       f32_3 %756 = OpLoad %562 
                                       f32_3 %757 = OpLoad %715 
                                       f32_3 %758 = OpFAdd %756 %757 
                                                      OpStore %562 %758 
                                       f32_3 %759 = OpLoad %562 
                                       f32_3 %761 = OpExtInst %1 40 %759 %760 
                                                      OpStore %562 %761 
                                       f32_3 %762 = OpLoad %174 
                                       f32_3 %763 = OpLoad %562 
                                       f32_3 %764 = OpFMul %762 %763 
                                                      OpStore %174 %764 
                                Uniform f32* %765 = OpAccessChain %40 %127 %42 %17 
                                         f32 %766 = OpLoad %765 
                                Private f32* %767 = OpAccessChain %30 %17 
                                                      OpStore %767 %766 
                                Uniform f32* %768 = OpAccessChain %40 %127 %71 %17 
                                         f32 %769 = OpLoad %768 
                                Private f32* %770 = OpAccessChain %30 %124 
                                                      OpStore %770 %769 
                                Uniform f32* %771 = OpAccessChain %40 %127 %151 %17 
                                         f32 %772 = OpLoad %771 
                                Private f32* %773 = OpAccessChain %30 %236 
                                                      OpStore %773 %772 
                                       f32_3 %774 = OpLoad %30 
                                       f32_4 %775 = OpLoad %208 
                                       f32_3 %776 = OpVectorShuffle %775 %775 0 1 2 
                                         f32 %777 = OpDot %774 %776 
                                Private f32* %778 = OpAccessChain %562 %17 
                                                      OpStore %778 %777 
                                Uniform f32* %779 = OpAccessChain %40 %127 %42 %124 
                                         f32 %780 = OpLoad %779 
                                Private f32* %781 = OpAccessChain %30 %17 
                                                      OpStore %781 %780 
                                Uniform f32* %782 = OpAccessChain %40 %127 %71 %124 
                                         f32 %783 = OpLoad %782 
                                Private f32* %784 = OpAccessChain %30 %124 
                                                      OpStore %784 %783 
                                Uniform f32* %785 = OpAccessChain %40 %127 %151 %124 
                                         f32 %786 = OpLoad %785 
                                Private f32* %787 = OpAccessChain %30 %236 
                                                      OpStore %787 %786 
                                       f32_3 %788 = OpLoad %30 
                                       f32_4 %789 = OpLoad %208 
                                       f32_3 %790 = OpVectorShuffle %789 %789 0 1 2 
                                         f32 %791 = OpDot %788 %790 
                                Private f32* %792 = OpAccessChain %562 %124 
                                                      OpStore %792 %791 
                                       f32_3 %793 = OpLoad %562 
                                       f32_2 %794 = OpVectorShuffle %793 %793 0 1 
                                       f32_2 %796 = OpFMul %794 %795 
                                       f32_2 %797 = OpFAdd %796 %795 
                                       f32_3 %798 = OpLoad %562 
                                       f32_3 %799 = OpVectorShuffle %798 %797 3 4 2 
                                                      OpStore %562 %799 
                                         f32 %800 = OpLoad %133 
                                         f32 %801 = OpFNegate %800 
                                         f32 %803 = OpFMul %801 %802 
                                         f32 %805 = OpFAdd %803 %804 
                                                      OpStore %167 %805 
                                         f32 %806 = OpLoad %133 
                                         f32 %807 = OpLoad %167 
                                         f32 %808 = OpFMul %806 %807 
                                                      OpStore %133 %808 
                                         f32 %809 = OpLoad %133 
                                         f32 %811 = OpFMul %809 %810 
                                                      OpStore %167 %811 
                         read_only Texture2D %814 = OpLoad %813 
                                     sampler %816 = OpLoad %815 
                  read_only Texture2DSampled %817 = OpSampledImage %814 %816 
                                       f32_3 %818 = OpLoad %562 
                                       f32_2 %819 = OpVectorShuffle %818 %818 0 1 
                                         f32 %820 = OpLoad %167 
                                       f32_4 %821 = OpImageSampleExplicitLod %817 %819 Lod %7 
                                       f32_3 %822 = OpVectorShuffle %821 %821 0 1 2 
                                                      OpStore %812 %822 
                                         f32 %823 = OpLoad %133 
                                         f32 %824 = OpLoad %133 
                                         f32 %825 = OpFMul %823 %824 
                                         f32 %826 = OpFAdd %825 %136 
                                                      OpStore %488 %826 
                                         f32 %827 = OpLoad %488 
                                         f32 %828 = OpFDiv %136 %827 
                                                      OpStore %488 %828 
                                Private f32* %829 = OpAccessChain %9 %124 
                                         f32 %830 = OpLoad %829 
                                Private f32* %831 = OpAccessChain %9 %17 
                                         f32 %832 = OpLoad %831 
                                         f32 %833 = OpExtInst %1 40 %830 %832 
                                Private f32* %834 = OpAccessChain %9 %17 
                                                      OpStore %834 %833 
                                Private f32* %835 = OpAccessChain %9 %428 
                                         f32 %836 = OpLoad %835 
                                Private f32* %837 = OpAccessChain %9 %17 
                                         f32 %838 = OpLoad %837 
                                         f32 %839 = OpExtInst %1 40 %836 %838 
                                Private f32* %840 = OpAccessChain %9 %17 
                                                      OpStore %840 %839 
                                         f32 %841 = OpLoad %52 
                                Private f32* %842 = OpAccessChain %9 %17 
                                         f32 %843 = OpLoad %842 
                                         f32 %844 = OpFAdd %841 %843 
                                Private f32* %845 = OpAccessChain %9 %17 
                                                      OpStore %845 %844 
                                Private f32* %846 = OpAccessChain %9 %17 
                                         f32 %847 = OpLoad %846 
                                         f32 %848 = OpExtInst %1 43 %847 %271 %136 
                                Private f32* %849 = OpAccessChain %9 %17 
                                                      OpStore %849 %848 
                                Private f32* %850 = OpAccessChain %9 %236 
                                         f32 %851 = OpLoad %850 
                                         f32 %852 = OpFNegate %851 
                                         f32 %853 = OpFAdd %852 %136 
                                Private f32* %854 = OpAccessChain %25 %17 
                                                      OpStore %854 %853 
                                Private f32* %855 = OpAccessChain %25 %17 
                                         f32 %856 = OpLoad %855 
                                         f32 %857 = OpExtInst %1 40 %856 %271 
                                Private f32* %858 = OpAccessChain %25 %17 
                                                      OpStore %858 %857 
                                Private f32* %860 = OpAccessChain %25 %17 
                                         f32 %861 = OpLoad %860 
                                Private f32* %862 = OpAccessChain %25 %17 
                                         f32 %863 = OpLoad %862 
                                         f32 %864 = OpFMul %861 %863 
                                                      OpStore %859 %864 
                                         f32 %865 = OpLoad %859 
                                         f32 %866 = OpLoad %859 
                                         f32 %867 = OpFMul %865 %866 
                                                      OpStore %859 %867 
                                Private f32* %868 = OpAccessChain %25 %17 
                                         f32 %869 = OpLoad %868 
                                         f32 %870 = OpLoad %859 
                                         f32 %871 = OpFMul %869 %870 
                                Private f32* %872 = OpAccessChain %25 %17 
                                                      OpStore %872 %871 
                                       f32_3 %873 = OpLoad %144 
                                       f32_3 %874 = OpFNegate %873 
                                       f32_4 %875 = OpLoad %9 
                                       f32_3 %876 = OpVectorShuffle %875 %875 0 0 0 
                                       f32_3 %877 = OpFAdd %874 %876 
                                       f32_4 %878 = OpLoad %9 
                                       f32_4 %879 = OpVectorShuffle %878 %877 4 1 5 6 
                                                      OpStore %9 %879 
                                       f32_3 %880 = OpLoad %25 
                                       f32_3 %881 = OpVectorShuffle %880 %880 0 0 0 
                                       f32_4 %882 = OpLoad %9 
                                       f32_3 %883 = OpVectorShuffle %882 %882 0 2 3 
                                       f32_3 %884 = OpFMul %881 %883 
                                       f32_3 %885 = OpLoad %144 
                                       f32_3 %886 = OpFAdd %884 %885 
                                       f32_4 %887 = OpLoad %9 
                                       f32_4 %888 = OpVectorShuffle %887 %886 4 5 6 3 
                                                      OpStore %9 %888 
                                         f32 %889 = OpLoad %488 
                                       f32_3 %890 = OpCompositeConstruct %889 %889 %889 
                                       f32_4 %891 = OpLoad %9 
                                       f32_3 %892 = OpVectorShuffle %891 %891 0 1 2 
                                       f32_3 %893 = OpFMul %890 %892 
                                       f32_4 %894 = OpLoad %9 
                                       f32_4 %895 = OpVectorShuffle %894 %893 4 5 6 3 
                                                      OpStore %9 %895 
                                       f32_4 %896 = OpLoad %115 
                                       f32_3 %897 = OpVectorShuffle %896 %896 3 3 3 
                                       f32_3 %898 = OpLoad %812 
                                       f32_3 %899 = OpFMul %897 %898 
                                                      OpStore %144 %899 
                                       f32_4 %900 = OpLoad %9 
                                       f32_3 %901 = OpVectorShuffle %900 %900 0 1 2 
                                       f32_3 %902 = OpLoad %144 
                                       f32_3 %903 = OpFMul %901 %902 
                                       f32_4 %904 = OpLoad %9 
                                       f32_4 %905 = OpVectorShuffle %904 %903 4 5 6 3 
                                                      OpStore %9 %905 
                                       f32_3 %906 = OpLoad %174 
                                Uniform f32* %907 = OpAccessChain %70 %42 
                                         f32 %908 = OpLoad %907 
                                       f32_3 %909 = OpCompositeConstruct %908 %908 %908 
                                       f32_3 %910 = OpFMul %906 %909 
                                       f32_4 %911 = OpLoad %9 
                                       f32_3 %912 = OpVectorShuffle %911 %911 0 1 2 
                                       f32_3 %913 = OpFAdd %910 %912 
                                                      OpStore %144 %913 
                              Uniform f32_4* %914 = OpAccessChain %40 %365 %71 
                                       f32_4 %915 = OpLoad %914 
                                       f32_3 %916 = OpVectorShuffle %915 %915 0 1 2 
                              Uniform f32_3* %918 = OpAccessChain %70 %435 
                                       f32_3 %919 = OpLoad %918 
                                       f32_3 %920 = OpVectorShuffle %919 %919 1 1 1 
                                       f32_3 %921 = OpFMul %916 %920 
                                       f32_4 %922 = OpLoad %9 
                                       f32_4 %923 = OpVectorShuffle %922 %921 4 5 6 3 
                                                      OpStore %9 %923 
                              Uniform f32_4* %924 = OpAccessChain %40 %365 %42 
                                       f32_4 %925 = OpLoad %924 
                                       f32_3 %926 = OpVectorShuffle %925 %925 0 1 2 
                              Uniform f32_3* %927 = OpAccessChain %70 %435 
                                       f32_3 %928 = OpLoad %927 
                                       f32_3 %929 = OpVectorShuffle %928 %928 0 0 0 
                                       f32_3 %930 = OpFMul %926 %929 
                                       f32_4 %931 = OpLoad %9 
                                       f32_3 %932 = OpVectorShuffle %931 %931 0 1 2 
                                       f32_3 %933 = OpFAdd %930 %932 
                                       f32_4 %934 = OpLoad %9 
                                       f32_4 %935 = OpVectorShuffle %934 %933 4 5 6 3 
                                                      OpStore %9 %935 
                              Uniform f32_4* %936 = OpAccessChain %40 %365 %151 
                                       f32_4 %937 = OpLoad %936 
                                       f32_3 %938 = OpVectorShuffle %937 %937 0 1 2 
                              Uniform f32_3* %939 = OpAccessChain %70 %435 
                                       f32_3 %940 = OpLoad %939 
                                       f32_3 %941 = OpVectorShuffle %940 %940 2 2 2 
                                       f32_3 %942 = OpFMul %938 %941 
                                       f32_4 %943 = OpLoad %9 
                                       f32_3 %944 = OpVectorShuffle %943 %943 0 1 2 
                                       f32_3 %945 = OpFAdd %942 %944 
                                       f32_4 %946 = OpLoad %9 
                                       f32_4 %947 = OpVectorShuffle %946 %945 4 5 6 3 
                                                      OpStore %9 %947 
                                       f32_4 %948 = OpLoad %9 
                                       f32_3 %949 = OpVectorShuffle %948 %948 0 1 2 
                                       f32_4 %950 = OpLoad %9 
                                       f32_3 %951 = OpVectorShuffle %950 %950 0 1 2 
                                         f32 %952 = OpDot %949 %951 
                                                      OpStore %245 %952 
                                         f32 %953 = OpLoad %245 
                                         f32 %954 = OpExtInst %1 32 %953 
                                                      OpStore %245 %954 
                                         f32 %955 = OpLoad %245 
                                       f32_3 %956 = OpCompositeConstruct %955 %955 %955 
                                       f32_4 %957 = OpLoad %9 
                                       f32_3 %958 = OpVectorShuffle %957 %957 0 1 2 
                                       f32_3 %959 = OpFMul %956 %958 
                                       f32_4 %960 = OpLoad %9 
                                       f32_4 %961 = OpVectorShuffle %960 %959 4 5 6 3 
                                                      OpStore %9 %961 
                                       f32_4 %962 = OpLoad %208 
                                       f32_3 %963 = OpVectorShuffle %962 %962 0 1 2 
                                       f32_4 %964 = OpLoad %9 
                                       f32_3 %965 = OpVectorShuffle %964 %964 0 1 2 
                                         f32 %966 = OpDot %963 %965 
                                Private f32* %967 = OpAccessChain %9 %17 
                                                      OpStore %967 %966 
                                Private f32* %968 = OpAccessChain %9 %17 
                                         f32 %969 = OpLoad %968 
                                         f32 %970 = OpFMul %969 %259 
                                         f32 %971 = OpFAdd %970 %259 
                                Private f32* %972 = OpAccessChain %9 %17 
                                                      OpStore %972 %971 
                                Private f32* %973 = OpAccessChain %9 %17 
                                         f32 %974 = OpLoad %973 
                                Private f32* %975 = OpAccessChain %115 %428 
                                         f32 %976 = OpLoad %975 
                                         f32 %977 = OpFMul %974 %976 
                                Uniform f32* %979 = OpAccessChain %70 %978 
                                         f32 %980 = OpLoad %979 
                                         f32 %981 = OpFNegate %980 
                                         f32 %982 = OpFAdd %977 %981 
                                Private f32* %983 = OpAccessChain %9 %17 
                                                      OpStore %983 %982 
                                Private f32* %984 = OpAccessChain %9 %17 
                                         f32 %985 = OpLoad %984 
                                Uniform f32* %987 = OpAccessChain %70 %986 
                                         f32 %988 = OpLoad %987 
                                         f32 %989 = OpFMul %985 %988 
                                Private f32* %990 = OpAccessChain %9 %17 
                                                      OpStore %990 %989 
                                Private f32* %991 = OpAccessChain %9 %17 
                                         f32 %992 = OpLoad %991 
                                         f32 %993 = OpExtInst %1 43 %992 %271 %136 
                                Private f32* %994 = OpAccessChain %9 %17 
                                                      OpStore %994 %993 
                                       f32_4 %995 = OpLoad %9 
                                       f32_3 %996 = OpVectorShuffle %995 %995 0 0 0 
                              Uniform f32_4* %998 = OpAccessChain %70 %997 
                                       f32_4 %999 = OpLoad %998 
                                      f32_3 %1000 = OpVectorShuffle %999 %999 0 1 2 
                                      f32_3 %1001 = OpFMul %996 %1000 
                                                      OpStore %174 %1001 
                                      f32_3 %1002 = OpLoad %174 
                               Uniform f32* %1004 = OpAccessChain %70 %1003 
                                        f32 %1005 = OpLoad %1004 
                               Uniform f32* %1006 = OpAccessChain %70 %1003 
                                        f32 %1007 = OpLoad %1006 
                               Uniform f32* %1008 = OpAccessChain %70 %1003 
                                        f32 %1009 = OpLoad %1008 
                                      f32_3 %1010 = OpCompositeConstruct %1005 %1007 %1009 
                                        f32 %1011 = OpCompositeExtract %1010 0 
                                        f32 %1012 = OpCompositeExtract %1010 1 
                                        f32 %1013 = OpCompositeExtract %1010 2 
                                      f32_3 %1014 = OpCompositeConstruct %1011 %1012 %1013 
                                      f32_3 %1015 = OpFMul %1002 %1014 
                                      f32_4 %1016 = OpLoad %9 
                                      f32_4 %1017 = OpVectorShuffle %1016 %1015 4 5 6 3 
                                                      OpStore %9 %1017 
                                      f32_3 %1018 = OpLoad %63 
                                      f32_3 %1019 = OpVectorShuffle %1018 %1018 0 0 0 
                                      f32_4 %1020 = OpLoad %9 
                                      f32_3 %1021 = OpVectorShuffle %1020 %1020 0 1 2 
                                      f32_3 %1022 = OpFMul %1019 %1021 
                                                      OpStore %30 %1022 
                                      f32_3 %1023 = OpLoad %30 
                                      f32_3 %1025 = OpFMul %1023 %1024 
                                                      OpStore %30 %1025 
                                      f32_4 %1026 = OpLoad %9 
                                      f32_3 %1027 = OpVectorShuffle %1026 %1026 0 1 2 
                                      f32_3 %1030 = OpFMul %1027 %1029 
                                      f32_3 %1031 = OpLoad %30 
                                      f32_3 %1032 = OpFAdd %1030 %1031 
                                      f32_4 %1033 = OpLoad %9 
                                      f32_4 %1034 = OpVectorShuffle %1033 %1032 4 5 6 3 
                                                      OpStore %9 %1034 
                                      f32_3 %1035 = OpLoad %107 
                                      f32_3 %1036 = OpLoad %144 
                                      f32_3 %1037 = OpFAdd %1035 %1036 
                                                      OpStore %107 %1037 
                                      f32_4 %1038 = OpLoad %9 
                                      f32_3 %1039 = OpVectorShuffle %1038 %1038 0 1 2 
                                      f32_3 %1040 = OpLoad %107 
                                      f32_3 %1041 = OpFAdd %1039 %1040 
                                                      OpStore %107 %1041 
                                      f32_3 %1042 = OpLoad %107 
                                      f32_3 %1043 = OpExtInst %1 40 %1042 %760 
                                                      OpStore %107 %1043 
                                      f32_3 %1044 = OpLoad %107 
                                      f32_3 %1045 = OpExtInst %1 30 %1044 
                                                      OpStore %107 %1045 
                                      f32_3 %1046 = OpLoad %107 
                                      f32_3 %1049 = OpFMul %1046 %1048 
                                                      OpStore %107 %1049 
                                      f32_3 %1050 = OpLoad %107 
                                      f32_3 %1051 = OpExtInst %1 29 %1050 
                                                      OpStore %107 %1051 
                                      f32_3 %1054 = OpLoad %107 
                                      f32_3 %1055 = OpExtInst %1 31 %1054 
                                      f32_4 %1056 = OpLoad %1053 
                                      f32_4 %1057 = OpVectorShuffle %1056 %1055 4 5 6 3 
                                                      OpStore %1053 %1057 
                                Output f32* %1059 = OpAccessChain %1053 %428 
                                                      OpStore %1059 %136 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec3 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
bvec4 u_xlatb1;
vec3 u_xlat2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
float u_xlat15;
int u_xlati15;
uint u_xlatu15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    vs_TEXCOORD3.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD4.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat1.z = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat1.w = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = lessThan(u_xlat1, _CascadeShadowSplitSphereRadii);
    u_xlat16_4.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_4.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_4.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.x = (u_xlatb1.x) ? float(1.0) : float(0.0);
    u_xlat16_1.y = (u_xlatb1.y) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb1.z) ? float(1.0) : float(0.0);
    u_xlat16_1.w = (u_xlatb1.w) ? float(1.0) : float(0.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_1.yzw;
    u_xlat16_1.yzw = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.x = dot(u_xlat16_1, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_4.x = (-u_xlat16_4.x) + 4.0;
    u_xlatu15 = uint(u_xlat16_4.x);
    u_xlati15 = int(int(u_xlatu15) << 2);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati15 + 1)];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati15] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati15 + 2)] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD7 = u_xlat1 + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati15 + 3)];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[32];
uniform 	mediump vec4 _AdditionalLightsColor[32];
uniform 	mediump vec4 _AdditionalLightsAttenuation[32];
uniform 	mediump vec4 _AdditionalLightsSpotDir[32];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _Expond;
	UNITY_UNIFORM vec4 _MainTex_ST;
	UNITY_UNIFORM vec4 _Emissioncolor;
	UNITY_UNIFORM float _Roughness;
	UNITY_UNIFORM float _sss;
	UNITY_UNIFORM vec3 _rimlightdir;
	UNITY_UNIFORM vec4 _rimcolor;
	UNITY_UNIFORM float _rimhardness;
	UNITY_UNIFORM float _rimthreshold;
	UNITY_UNIFORM float _rimintensity;
	UNITY_UNIFORM float _Curvemn;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(3) uniform mediump sampler2D _Normal;
UNITY_LOCATION(4) uniform mediump sampler2D _MREA;
UNITY_LOCATION(5) uniform mediump sampler2D _SSSLUT;
UNITY_LOCATION(6) uniform mediump sampler2D _reflectmap;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump float u_xlat16_3;
int u_xlati3;
bool u_xlatb3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
vec4 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
mediump vec3 u_xlat16_13;
mediump vec3 u_xlat16_14;
vec3 u_xlat15;
int u_xlati15;
bool u_xlatb15;
mediump vec3 u_xlat16_16;
float u_xlat18;
uint u_xlatu18;
float u_xlat19;
mediump vec3 u_xlat16_22;
float u_xlat30;
float u_xlat45;
uint u_xlatu45;
float u_xlat47;
float u_xlat48;
mediump float u_xlat16_54;
mediump float u_xlat16_56;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_0 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_1.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_1.x = u_xlat16_0 * _MainLightShadowParams.x + u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0>=vs_TEXCOORD7.z);
#else
    u_xlatb0 = 0.0>=vs_TEXCOORD7.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vs_TEXCOORD7.z>=1.0);
#else
    u_xlatb15 = vs_TEXCOORD7.z>=1.0;
#endif
    u_xlatb0 = u_xlatb15 || u_xlatb0;
    u_xlat16_1.x = (u_xlatb0) ? 1.0 : u_xlat16_1.x;
    u_xlat0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat15.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat2.xyz = vs_TEXCOORD2.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat47 = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = vec3(u_xlat47) * u_xlat2.xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat4.xy).xyz;
    u_xlat16_6.xyz = texture(_Normal, u_xlat4.xy).xyz;
    u_xlat16_16.xyz = u_xlat16_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4 = texture(_MREA, u_xlat4.xy);
    u_xlat47 = u_xlat16_4.y + (-_Roughness);
    u_xlat16_7.x = (-u_xlat47) + 1.0;
    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
    u_xlat16_7.x = max(u_xlat16_7.x, 0.00200000009);
    u_xlat16_22.xyz = u_xlat16_5.xyz * u_xlat16_4.zzz;
    u_xlat8.xyz = u_xlat16_22.xyz * _Emissioncolor.xyz;
    u_xlat16_22.xyz = u_xlat16_5.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_22.xyz = u_xlat16_4.xxx * u_xlat16_22.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_9.x = u_xlat16_4.x * -0.959999979 + 0.959999979;
    u_xlat16_9.xyz = u_xlat16_5.xyz * u_xlat16_9.xxx;
    u_xlat16_9.xyz = u_xlat16_4.www * u_xlat16_9.xyz;
    u_xlat4.xyz = u_xlat16_16.yyy * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = u_xlat16_16.xxx * vs_TEXCOORD3.xyz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat16_16.zzz * vs_TEXCOORD1.xyz + u_xlat4.xyz;
    u_xlat48 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat48 = inversesqrt(u_xlat48);
    u_xlat5.xyz = vec3(u_xlat48) * u_xlat4.xyz;
    u_xlat48 = dot(u_xlat5.xyz, _MainLightPosition.xyz);
    u_xlat4.x = max(u_xlat48, 9.99999975e-06);
    u_xlat0.y = dot(u_xlat5.xyz, u_xlat15.xyz);
    u_xlat0.z = dot(_MainLightPosition.xyz, u_xlat3.xyz);
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(1.17549435e-38, 9.99999975e-06, 9.99999975e-06));
    u_xlat45 = u_xlat16_7.x + u_xlat16_7.x;
    u_xlat3.x = u_xlat0.z * u_xlat0.z;
    u_xlat45 = u_xlat3.x * u_xlat45 + 0.5;
    u_xlat16_16.x = u_xlat45 + -1.0;
    u_xlat15.x = (-u_xlat0.y) + 1.0;
    u_xlat15.x = max(u_xlat15.x, 0.0);
    u_xlat45 = u_xlat15.x * u_xlat15.x;
    u_xlat45 = u_xlat45 * u_xlat45;
    u_xlat15.x = u_xlat15.x * u_xlat45;
    u_xlat15.x = u_xlat16_16.x * u_xlat15.x + 1.0;
    u_xlat45 = (-u_xlat4.x) + 1.0;
    u_xlat45 = max(u_xlat45, 0.0);
    u_xlat3.x = u_xlat45 * u_xlat45;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat45 = u_xlat45 * u_xlat3.x;
    u_xlat45 = u_xlat16_16.x * u_xlat45 + 1.0;
    u_xlat16_54 = u_xlat15.x * u_xlat45;
    u_xlat16_54 = min(u_xlat16_54, 1.0);
    u_xlat16_54 = u_xlat48 * u_xlat16_54;
    u_xlat16_3 = u_xlat16_54 * 0.5 + 0.5;
    u_xlat3.x = u_xlat16_3;
    u_xlat3.yw = vec2(vec2(_Curvemn, _Curvemn));
    u_xlat16_10.xyz = texture(_SSSLUT, u_xlat3.xy).xyz;
    u_xlat10.xyz = u_xlat16_10.xyz * vec3(vec3(_sss, _sss, _sss));
    u_xlat15.x = min(u_xlat16_1.x, u_xlat3.x);
    u_xlat16_11.xyz = u_xlat16_9.xyz * u_xlat10.xyz;
    u_xlat10.xyz = u_xlat16_11.xyz * _MainLightColor.xyz;
    u_xlat10.xyz = u_xlat10.xyz * u_xlat15.xxx + u_xlat8.xyz;
    u_xlat16_54 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlati15 = int(u_xlat16_54);
    u_xlat16_11.xyz = u_xlat10.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<uint(u_xlati15) ; u_xlatu_loop_1++)
    {
        u_xlati3 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu18 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_54 = dot(unity_LightIndices[int(u_xlatu18)], ImmCB_0[u_xlati3]);
        u_xlati3 = int(u_xlat16_54);
        u_xlat12.xyz = (-vs_TEXCOORD5.xyz) * _AdditionalLightsPosition[u_xlati3].www + _AdditionalLightsPosition[u_xlati3].xyz;
        u_xlat18 = dot(u_xlat12.xyz, u_xlat12.xyz);
        u_xlat18 = max(u_xlat18, 6.10351563e-05);
        u_xlat19 = inversesqrt(u_xlat18);
        u_xlat12.xyz = vec3(u_xlat19) * u_xlat12.xyz;
        u_xlat19 = float(1.0) / float(u_xlat18);
        u_xlat18 = u_xlat18 * _AdditionalLightsAttenuation[u_xlati3].x + _AdditionalLightsAttenuation[u_xlati3].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
        u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
        u_xlat18 = u_xlat18 * u_xlat19;
        u_xlat16_54 = dot(_AdditionalLightsSpotDir[u_xlati3].xyz, u_xlat12.xyz);
        u_xlat16_54 = u_xlat16_54 * _AdditionalLightsAttenuation[u_xlati3].z + _AdditionalLightsAttenuation[u_xlati3].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_54 = min(max(u_xlat16_54, 0.0), 1.0);
#else
        u_xlat16_54 = clamp(u_xlat16_54, 0.0, 1.0);
#endif
        u_xlat16_54 = u_xlat16_54 * u_xlat16_54;
        u_xlat18 = u_xlat18 * u_xlat16_54;
        u_xlat19 = dot(u_xlat5.xyz, u_xlat12.xyz);
        u_xlat3.z = max(u_xlat19, 9.99999975e-06);
        u_xlat16_12.xyz = texture(_SSSLUT, u_xlat3.zw).xyz;
        u_xlat12.xyz = u_xlat16_12.xyz * vec3(vec3(_sss, _sss, _sss));
        u_xlat16_13.xyz = u_xlat16_9.xyz * u_xlat12.xyz;
        u_xlat16_13.xyz = u_xlat16_13.xyz * _AdditionalLightsColor[u_xlati3].xyz;
        u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat18) + u_xlat8.xyz;
        u_xlat16_11.xyz = u_xlat16_11.xyz + u_xlat16_13.xyz;
    }
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyw = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat0.xyw);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat0.xyw);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat15.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_54 = u_xlat16_7.x * u_xlat16_7.x;
    u_xlat16_56 = u_xlat16_7.x * u_xlat16_7.x + -1.0;
    u_xlat15.x = u_xlat15.x * u_xlat16_56 + 1.00001001;
    u_xlat16_56 = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat15.x * u_xlat15.x;
    u_xlat15.x = max(u_xlat16_56, 0.100000001);
    u_xlat0.x = u_xlat15.x * u_xlat0.x;
    u_xlat16_56 = u_xlat16_7.x * 4.0 + 2.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_56;
    u_xlat0.x = u_xlat16_54 / u_xlat0.x;
    u_xlat0.xyw = u_xlat16_22.xyz * u_xlat0.xxx;
    u_xlat16_13.xyz = u_xlat0.xyw * vec3(3.14159274, 3.14159274, 3.14159274);
    u_xlat2.xyz = u_xlat16_13.xyz * _MainLightColor.xyz;
    u_xlat16_11.xyz = u_xlat2.xyz * u_xlat4.xxx + u_xlat16_11.xyz;
    u_xlat5.w = 1.0;
    u_xlat16_13.x = dot(unity_SHAr, u_xlat5);
    u_xlat16_13.y = dot(unity_SHAg, u_xlat5);
    u_xlat16_13.z = dot(unity_SHAb, u_xlat5);
    u_xlat16_1 = u_xlat5.yzzx * u_xlat5.xyzz;
    u_xlat16_14.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_14.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_14.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_54 = u_xlat5.y * u_xlat5.y;
    u_xlat16_54 = u_xlat5.x * u_xlat5.x + (-u_xlat16_54);
    u_xlat16_14.xyz = unity_SHC.xyz * vec3(u_xlat16_54) + u_xlat16_14.xyz;
    u_xlat16_13.xyz = u_xlat16_13.xyz + u_xlat16_14.xyz;
    u_xlat16_13.xyz = max(u_xlat16_13.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_13.xyz;
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].x;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat16_13.x = dot(u_xlat2.xyz, u_xlat5.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].y;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].y;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].y;
    u_xlat16_13.y = dot(u_xlat2.xyz, u_xlat5.xyz);
    u_xlat16_13.xy = u_xlat16_13.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat16_54 = (-u_xlat16_7.x) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_54;
    u_xlat16_54 = u_xlat16_7.x * 8.0;
    u_xlat16_2.xyz = textureLod(_reflectmap, u_xlat16_13.xy, u_xlat16_54).xyz;
    u_xlat3.x = u_xlat16_7.x * u_xlat16_7.x + 1.0;
    u_xlat3.x = float(1.0) / u_xlat3.x;
    u_xlat0.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat0.x = max(u_xlat0.w, u_xlat0.x);
    u_xlat0.x = u_xlat47 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat15.x = (-u_xlat0.z) + 1.0;
    u_xlat15.x = max(u_xlat15.x, 0.0);
    u_xlat30 = u_xlat15.x * u_xlat15.x;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat15.x = u_xlat15.x * u_xlat30;
    u_xlat0.xzw = (-u_xlat16_22.xyz) + u_xlat0.xxx;
    u_xlat0.xyz = u_xlat15.xxx * u_xlat0.xzw + u_xlat16_22.xyz;
    u_xlat0.xyz = u_xlat3.xxx * u_xlat0.xyz;
    u_xlat16_7.xyz = u_xlat16_4.www * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_9.xyz * vec3(_Expond) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixInvV[1].xyz * _rimlightdir.yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixInvV[0].xyz * _rimlightdir.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixInvV[2].xyz * _rimlightdir.zzz + u_xlat0.xyz;
    u_xlat45 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat45 = inversesqrt(u_xlat45);
    u_xlat0.xyz = vec3(u_xlat45) * u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat0.x = u_xlat0.x * u_xlat16_4.w + (-_rimthreshold);
    u_xlat0.x = u_xlat0.x * _rimhardness;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_9.xyz = u_xlat0.xxx * _rimcolor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_rimintensity, _rimintensity, _rimintensity));
    u_xlat2.xyz = u_xlat4.xxx * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat2.xyz;
    u_xlat16_7.xyz = u_xlat16_11.xyz + u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(2.20000005, 2.20000005, 2.20000005);
    u_xlat16_7.xyz = exp2(u_xlat16_7.xyz);
    SV_Target0.xyz = sqrt(u_xlat16_7.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 382
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %12 %84 %93 %95 %98 %138 %141 %149 %183 %209 %215 %217 %218 %369 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
                                                      OpDecorate %12 Location 12 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 RelaxedPrecision 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 RelaxedPrecision 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 RelaxedPrecision 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 RelaxedPrecision 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 RelaxedPrecision 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 RelaxedPrecision 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpMemberDecorate %21 16 RelaxedPrecision 
                                                      OpMemberDecorate %21 16 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpDecorate %59 ArrayStride 59 
                                                      OpMemberDecorate %60 0 Offset 60 
                                                      OpMemberDecorate %60 1 Offset 60 
                                                      OpDecorate %60 Block 
                                                      OpDecorate %62 DescriptorSet 62 
                                                      OpDecorate %62 Binding 62 
                                                      OpMemberDecorate %82 0 BuiltIn 82 
                                                      OpMemberDecorate %82 1 BuiltIn 82 
                                                      OpMemberDecorate %82 2 BuiltIn 82 
                                                      OpDecorate %82 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 93 
                                                      OpDecorate %95 Location 95 
                                                      OpDecorate %98 Location 98 
                                                      OpDecorate vs_TEXCOORD1 Location 138 
                                                      OpDecorate vs_TEXCOORD2 Location 141 
                                                      OpDecorate %149 Location 149 
                                                      OpDecorate vs_TEXCOORD3 Location 183 
                                                      OpDecorate %207 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 209 
                                                      OpDecorate vs_TEXCOORD5 Location 215 
                                                      OpDecorate vs_TEXCOORD6 Location 217 
                                                      OpDecorate %218 Location 218 
                                                      OpDecorate %222 ArrayStride 222 
                                                      OpMemberDecorate %223 0 Offset 223 
                                                      OpMemberDecorate %223 1 Offset 223 
                                                      OpMemberDecorate %223 2 Offset 223 
                                                      OpMemberDecorate %223 3 Offset 223 
                                                      OpMemberDecorate %223 4 Offset 223 
                                                      OpMemberDecorate %223 5 Offset 223 
                                                      OpMemberDecorate %223 6 RelaxedPrecision 
                                                      OpMemberDecorate %223 6 Offset 223 
                                                      OpMemberDecorate %223 7 RelaxedPrecision 
                                                      OpMemberDecorate %223 7 Offset 223 
                                                      OpMemberDecorate %223 8 RelaxedPrecision 
                                                      OpMemberDecorate %223 8 Offset 223 
                                                      OpMemberDecorate %223 9 RelaxedPrecision 
                                                      OpMemberDecorate %223 9 Offset 223 
                                                      OpMemberDecorate %223 10 RelaxedPrecision 
                                                      OpMemberDecorate %223 10 Offset 223 
                                                      OpMemberDecorate %223 11 Offset 223 
                                                      OpDecorate %223 Block 
                                                      OpDecorate %225 DescriptorSet 225 
                                                      OpDecorate %225 Binding 225 
                                                      OpDecorate %279 RelaxedPrecision 
                                                      OpDecorate %295 RelaxedPrecision 
                                                      OpDecorate %314 RelaxedPrecision 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %316 RelaxedPrecision 
                                                      OpDecorate %317 RelaxedPrecision 
                                                      OpDecorate %318 RelaxedPrecision 
                                                      OpDecorate %320 RelaxedPrecision 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %328 RelaxedPrecision 
                                                      OpDecorate %331 RelaxedPrecision 
                                                      OpDecorate %332 RelaxedPrecision 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %338 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD7 Location 369 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Private %7 
                                Private f32_3* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                                 Input f32_4* %12 = OpVariable Input 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %10 %16 
                                              %18 = OpTypeArray %10 %16 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypeArray %10 %19 
                                              %21 = OpTypeStruct %17 %18 %10 %10 %10 %20 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4; f32_4[2]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 0 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %10 
                                          i32 %40 = OpConstant 2 
                                          i32 %50 = OpConstant 3 
                                              %55 = OpTypePointer Private %10 
                               Private f32_4* %56 = OpVariable Private 
                                              %59 = OpTypeArray %10 %16 
                                              %60 = OpTypeStruct %7 %59 
                                              %61 = OpTypePointer Uniform %60 
           Uniform struct {f32_3; f32_4[4];}* %62 = OpVariable Uniform 
                                          u32 %80 = OpConstant 1 
                                              %81 = OpTypeArray %6 %80 
                                              %82 = OpTypeStruct %10 %6 %81 
                                              %83 = OpTypePointer Output %82 
         Output struct {f32_4; f32; f32[1];}* %84 = OpVariable Output 
                                              %89 = OpTypePointer Output %10 
                                              %91 = OpTypeVector %6 2 
                                              %92 = OpTypePointer Output %91 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                              %94 = OpTypePointer Input %91 
                                 Input f32_2* %95 = OpVariable Input 
                                              %97 = OpTypePointer Input %7 
                                 Input f32_3* %98 = OpVariable Input 
                                         u32 %104 = OpConstant 0 
                                             %105 = OpTypePointer Private %6 
                                Private f32* %119 = OpVariable Private 
                                         f32 %126 = OpConstant 3.674022E-40 
                                             %137 = OpTypePointer Output %7 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %144 = OpTypePointer Uniform %7 
                              Private f32_3* %148 = OpVariable Private 
                                Input f32_4* %149 = OpVariable Input 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                              Private f32_3* %185 = OpVariable Private 
                                         u32 %201 = OpConstant 3 
                                             %202 = OpTypePointer Input %6 
                                             %205 = OpTypePointer Uniform %6 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD5 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                Input f32_4* %218 = OpVariable Input 
                                         u32 %221 = OpConstant 20 
                                             %222 = OpTypeArray %10 %221 
                                             %223 = OpTypeStruct %222 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 
                                             %224 = OpTypePointer Uniform %223 
Uniform struct {f32_4[20]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %225 = OpVariable Uniform 
                                         i32 %260 = OpConstant 4 
                                             %270 = OpTypeBool 
                                             %271 = OpTypeVector %270 4 
                                             %272 = OpTypePointer Private %271 
                             Private bool_4* %273 = OpVariable Private 
                                         i32 %275 = OpConstant 5 
                              Private f32_3* %279 = OpVariable Private 
                                             %280 = OpTypePointer Private %270 
                                         f32 %283 = OpConstant 3.674022E-40 
                                         f32 %284 = OpConstant 3.674022E-40 
                              Private f32_4* %295 = OpVariable Private 
                                         f32 %298 = OpConstant 3.674022E-40 
                                         f32 %299 = OpConstant 3.674022E-40 
                                       f32_3 %319 = OpConstantComposite %299 %299 %299 
                                         f32 %324 = OpConstant 3.674022E-40 
                                         f32 %325 = OpConstant 3.674022E-40 
                                         f32 %326 = OpConstant 3.674022E-40 
                                       f32_4 %327 = OpConstantComposite %324 %325 %326 %298 
                                             %335 = OpTypePointer Private %15 
                                Private u32* %336 = OpVariable Private 
                                             %340 = OpTypePointer Private %24 
                                Private i32* %341 = OpVariable Private 
                       Output f32_4* vs_TEXCOORD7 = OpVariable Output 
                                             %376 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %12 
                                        f32_3 %14 = OpVectorShuffle %13 %13 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_3 %30 = OpVectorShuffle %29 %29 0 1 2 
                                        f32_3 %31 = OpFMul %14 %30 
                                                      OpStore %9 %31 
                               Uniform f32_4* %32 = OpAccessChain %23 %25 %25 
                                        f32_4 %33 = OpLoad %32 
                                        f32_3 %34 = OpVectorShuffle %33 %33 0 1 2 
                                        f32_4 %35 = OpLoad %12 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 0 0 
                                        f32_3 %37 = OpFMul %34 %36 
                                        f32_3 %38 = OpLoad %9 
                                        f32_3 %39 = OpFAdd %37 %38 
                                                      OpStore %9 %39 
                               Uniform f32_4* %41 = OpAccessChain %23 %25 %40 
                                        f32_4 %42 = OpLoad %41 
                                        f32_3 %43 = OpVectorShuffle %42 %42 0 1 2 
                                        f32_4 %44 = OpLoad %12 
                                        f32_3 %45 = OpVectorShuffle %44 %44 2 2 2 
                                        f32_3 %46 = OpFMul %43 %45 
                                        f32_3 %47 = OpLoad %9 
                                        f32_3 %48 = OpFAdd %46 %47 
                                                      OpStore %9 %48 
                                        f32_3 %49 = OpLoad %9 
                               Uniform f32_4* %51 = OpAccessChain %23 %25 %50 
                                        f32_4 %52 = OpLoad %51 
                                        f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                        f32_3 %54 = OpFAdd %49 %53 
                                                      OpStore %9 %54 
                                        f32_3 %57 = OpLoad %9 
                                        f32_4 %58 = OpVectorShuffle %57 %57 1 1 1 1 
                               Uniform f32_4* %63 = OpAccessChain %62 %26 %26 
                                        f32_4 %64 = OpLoad %63 
                                        f32_4 %65 = OpFMul %58 %64 
                                                      OpStore %56 %65 
                               Uniform f32_4* %66 = OpAccessChain %62 %26 %25 
                                        f32_4 %67 = OpLoad %66 
                                        f32_3 %68 = OpLoad %9 
                                        f32_4 %69 = OpVectorShuffle %68 %68 0 0 0 0 
                                        f32_4 %70 = OpFMul %67 %69 
                                        f32_4 %71 = OpLoad %56 
                                        f32_4 %72 = OpFAdd %70 %71 
                                                      OpStore %56 %72 
                               Uniform f32_4* %73 = OpAccessChain %62 %26 %40 
                                        f32_4 %74 = OpLoad %73 
                                        f32_3 %75 = OpLoad %9 
                                        f32_4 %76 = OpVectorShuffle %75 %75 2 2 2 2 
                                        f32_4 %77 = OpFMul %74 %76 
                                        f32_4 %78 = OpLoad %56 
                                        f32_4 %79 = OpFAdd %77 %78 
                                                      OpStore %56 %79 
                                        f32_4 %85 = OpLoad %56 
                               Uniform f32_4* %86 = OpAccessChain %62 %26 %50 
                                        f32_4 %87 = OpLoad %86 
                                        f32_4 %88 = OpFAdd %85 %87 
                                Output f32_4* %90 = OpAccessChain %84 %25 
                                                      OpStore %90 %88 
                                        f32_2 %96 = OpLoad %95 
                                                      OpStore vs_TEXCOORD0 %96 
                                        f32_3 %99 = OpLoad %98 
                              Uniform f32_4* %100 = OpAccessChain %23 %26 %25 
                                       f32_4 %101 = OpLoad %100 
                                       f32_3 %102 = OpVectorShuffle %101 %101 0 1 2 
                                         f32 %103 = OpDot %99 %102 
                                Private f32* %106 = OpAccessChain %56 %104 
                                                      OpStore %106 %103 
                                       f32_3 %107 = OpLoad %98 
                              Uniform f32_4* %108 = OpAccessChain %23 %26 %26 
                                       f32_4 %109 = OpLoad %108 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                         f32 %111 = OpDot %107 %110 
                                Private f32* %112 = OpAccessChain %56 %80 
                                                      OpStore %112 %111 
                                       f32_3 %113 = OpLoad %98 
                              Uniform f32_4* %114 = OpAccessChain %23 %26 %40 
                                       f32_4 %115 = OpLoad %114 
                                       f32_3 %116 = OpVectorShuffle %115 %115 0 1 2 
                                         f32 %117 = OpDot %113 %116 
                                Private f32* %118 = OpAccessChain %56 %19 
                                                      OpStore %118 %117 
                                       f32_4 %120 = OpLoad %56 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_4 %122 = OpLoad %56 
                                       f32_3 %123 = OpVectorShuffle %122 %122 0 1 2 
                                         f32 %124 = OpDot %121 %123 
                                                      OpStore %119 %124 
                                         f32 %125 = OpLoad %119 
                                         f32 %127 = OpExtInst %1 40 %125 %126 
                                                      OpStore %119 %127 
                                         f32 %128 = OpLoad %119 
                                         f32 %129 = OpExtInst %1 32 %128 
                                                      OpStore %119 %129 
                                         f32 %130 = OpLoad %119 
                                       f32_3 %131 = OpCompositeConstruct %130 %130 %130 
                                       f32_4 %132 = OpLoad %56 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                       f32_3 %134 = OpFMul %131 %133 
                                       f32_4 %135 = OpLoad %56 
                                       f32_4 %136 = OpVectorShuffle %135 %134 4 5 6 3 
                                                      OpStore %56 %136 
                                       f32_4 %139 = OpLoad %56 
                                       f32_3 %140 = OpVectorShuffle %139 %139 0 1 2 
                                                      OpStore vs_TEXCOORD1 %140 
                                       f32_3 %142 = OpLoad %9 
                                       f32_3 %143 = OpFNegate %142 
                              Uniform f32_3* %145 = OpAccessChain %62 %25 
                                       f32_3 %146 = OpLoad %145 
                                       f32_3 %147 = OpFAdd %143 %146 
                                                      OpStore vs_TEXCOORD2 %147 
                                       f32_4 %150 = OpLoad %149 
                                       f32_3 %151 = OpVectorShuffle %150 %150 1 1 1 
                              Uniform f32_4* %152 = OpAccessChain %23 %25 %26 
                                       f32_4 %153 = OpLoad %152 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                       f32_3 %155 = OpFMul %151 %154 
                                                      OpStore %148 %155 
                              Uniform f32_4* %156 = OpAccessChain %23 %25 %25 
                                       f32_4 %157 = OpLoad %156 
                                       f32_3 %158 = OpVectorShuffle %157 %157 0 1 2 
                                       f32_4 %159 = OpLoad %149 
                                       f32_3 %160 = OpVectorShuffle %159 %159 0 0 0 
                                       f32_3 %161 = OpFMul %158 %160 
                                       f32_3 %162 = OpLoad %148 
                                       f32_3 %163 = OpFAdd %161 %162 
                                                      OpStore %148 %163 
                              Uniform f32_4* %164 = OpAccessChain %23 %25 %40 
                                       f32_4 %165 = OpLoad %164 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                       f32_4 %167 = OpLoad %149 
                                       f32_3 %168 = OpVectorShuffle %167 %167 2 2 2 
                                       f32_3 %169 = OpFMul %166 %168 
                                       f32_3 %170 = OpLoad %148 
                                       f32_3 %171 = OpFAdd %169 %170 
                                                      OpStore %148 %171 
                                       f32_3 %172 = OpLoad %148 
                                       f32_3 %173 = OpLoad %148 
                                         f32 %174 = OpDot %172 %173 
                                                      OpStore %119 %174 
                                         f32 %175 = OpLoad %119 
                                         f32 %176 = OpExtInst %1 40 %175 %126 
                                                      OpStore %119 %176 
                                         f32 %177 = OpLoad %119 
                                         f32 %178 = OpExtInst %1 32 %177 
                                                      OpStore %119 %178 
                                         f32 %179 = OpLoad %119 
                                       f32_3 %180 = OpCompositeConstruct %179 %179 %179 
                                       f32_3 %181 = OpLoad %148 
                                       f32_3 %182 = OpFMul %180 %181 
                                                      OpStore %148 %182 
                                       f32_3 %184 = OpLoad %148 
                                                      OpStore vs_TEXCOORD3 %184 
                                       f32_4 %186 = OpLoad %56 
                                       f32_3 %187 = OpVectorShuffle %186 %186 2 0 1 
                                       f32_3 %188 = OpLoad %148 
                                       f32_3 %189 = OpVectorShuffle %188 %188 1 2 0 
                                       f32_3 %190 = OpFMul %187 %189 
                                                      OpStore %185 %190 
                                       f32_4 %191 = OpLoad %56 
                                       f32_3 %192 = OpVectorShuffle %191 %191 1 2 0 
                                       f32_3 %193 = OpLoad %148 
                                       f32_3 %194 = OpVectorShuffle %193 %193 2 0 1 
                                       f32_3 %195 = OpFMul %192 %194 
                                       f32_3 %196 = OpLoad %185 
                                       f32_3 %197 = OpFNegate %196 
                                       f32_3 %198 = OpFAdd %195 %197 
                                       f32_4 %199 = OpLoad %56 
                                       f32_4 %200 = OpVectorShuffle %199 %198 4 5 6 3 
                                                      OpStore %56 %200 
                                  Input f32* %203 = OpAccessChain %149 %201 
                                         f32 %204 = OpLoad %203 
                                Uniform f32* %206 = OpAccessChain %23 %50 %201 
                                         f32 %207 = OpLoad %206 
                                         f32 %208 = OpFMul %204 %207 
                                                      OpStore %119 %208 
                                         f32 %210 = OpLoad %119 
                                       f32_3 %211 = OpCompositeConstruct %210 %210 %210 
                                       f32_4 %212 = OpLoad %56 
                                       f32_3 %213 = OpVectorShuffle %212 %212 0 1 2 
                                       f32_3 %214 = OpFMul %211 %213 
                                                      OpStore vs_TEXCOORD4 %214 
                                       f32_3 %216 = OpLoad %9 
                                                      OpStore vs_TEXCOORD5 %216 
                                       f32_4 %219 = OpLoad %218 
                                                      OpStore vs_TEXCOORD6 %219 
                                       f32_3 %220 = OpLoad %9 
                              Uniform f32_4* %226 = OpAccessChain %225 %26 
                                       f32_4 %227 = OpLoad %226 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                       f32_3 %229 = OpFNegate %228 
                                       f32_3 %230 = OpFAdd %220 %229 
                                       f32_4 %231 = OpLoad %56 
                                       f32_4 %232 = OpVectorShuffle %231 %230 4 5 6 3 
                                                      OpStore %56 %232 
                                       f32_4 %233 = OpLoad %56 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                       f32_4 %235 = OpLoad %56 
                                       f32_3 %236 = OpVectorShuffle %235 %235 0 1 2 
                                         f32 %237 = OpDot %234 %236 
                                Private f32* %238 = OpAccessChain %56 %104 
                                                      OpStore %238 %237 
                                       f32_3 %239 = OpLoad %9 
                              Uniform f32_4* %240 = OpAccessChain %225 %40 
                                       f32_4 %241 = OpLoad %240 
                                       f32_3 %242 = OpVectorShuffle %241 %241 0 1 2 
                                       f32_3 %243 = OpFNegate %242 
                                       f32_3 %244 = OpFAdd %239 %243 
                                                      OpStore %148 %244 
                                       f32_3 %245 = OpLoad %148 
                                       f32_3 %246 = OpLoad %148 
                                         f32 %247 = OpDot %245 %246 
                                Private f32* %248 = OpAccessChain %56 %80 
                                                      OpStore %248 %247 
                                       f32_3 %249 = OpLoad %9 
                              Uniform f32_4* %250 = OpAccessChain %225 %50 
                                       f32_4 %251 = OpLoad %250 
                                       f32_3 %252 = OpVectorShuffle %251 %251 0 1 2 
                                       f32_3 %253 = OpFNegate %252 
                                       f32_3 %254 = OpFAdd %249 %253 
                                                      OpStore %148 %254 
                                       f32_3 %255 = OpLoad %148 
                                       f32_3 %256 = OpLoad %148 
                                         f32 %257 = OpDot %255 %256 
                                Private f32* %258 = OpAccessChain %56 %19 
                                                      OpStore %258 %257 
                                       f32_3 %259 = OpLoad %9 
                              Uniform f32_4* %261 = OpAccessChain %225 %260 
                                       f32_4 %262 = OpLoad %261 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 1 2 
                                       f32_3 %264 = OpFNegate %263 
                                       f32_3 %265 = OpFAdd %259 %264 
                                                      OpStore %148 %265 
                                       f32_3 %266 = OpLoad %148 
                                       f32_3 %267 = OpLoad %148 
                                         f32 %268 = OpDot %266 %267 
                                Private f32* %269 = OpAccessChain %56 %201 
                                                      OpStore %269 %268 
                                       f32_4 %274 = OpLoad %56 
                              Uniform f32_4* %276 = OpAccessChain %225 %275 
                                       f32_4 %277 = OpLoad %276 
                                      bool_4 %278 = OpFOrdLessThan %274 %277 
                                                      OpStore %273 %278 
                               Private bool* %281 = OpAccessChain %273 %104 
                                        bool %282 = OpLoad %281 
                                         f32 %285 = OpSelect %282 %283 %284 
                                Private f32* %286 = OpAccessChain %279 %104 
                                                      OpStore %286 %285 
                               Private bool* %287 = OpAccessChain %273 %80 
                                        bool %288 = OpLoad %287 
                                         f32 %289 = OpSelect %288 %283 %284 
                                Private f32* %290 = OpAccessChain %279 %80 
                                                      OpStore %290 %289 
                               Private bool* %291 = OpAccessChain %273 %19 
                                        bool %292 = OpLoad %291 
                                         f32 %293 = OpSelect %292 %283 %284 
                                Private f32* %294 = OpAccessChain %279 %19 
                                                      OpStore %294 %293 
                               Private bool* %296 = OpAccessChain %273 %104 
                                        bool %297 = OpLoad %296 
                                         f32 %300 = OpSelect %297 %298 %299 
                                Private f32* %301 = OpAccessChain %295 %104 
                                                      OpStore %301 %300 
                               Private bool* %302 = OpAccessChain %273 %80 
                                        bool %303 = OpLoad %302 
                                         f32 %304 = OpSelect %303 %298 %299 
                                Private f32* %305 = OpAccessChain %295 %80 
                                                      OpStore %305 %304 
                               Private bool* %306 = OpAccessChain %273 %19 
                                        bool %307 = OpLoad %306 
                                         f32 %308 = OpSelect %307 %298 %299 
                                Private f32* %309 = OpAccessChain %295 %19 
                                                      OpStore %309 %308 
                               Private bool* %310 = OpAccessChain %273 %201 
                                        bool %311 = OpLoad %310 
                                         f32 %312 = OpSelect %311 %298 %299 
                                Private f32* %313 = OpAccessChain %295 %201 
                                                      OpStore %313 %312 
                                       f32_3 %314 = OpLoad %279 
                                       f32_4 %315 = OpLoad %295 
                                       f32_3 %316 = OpVectorShuffle %315 %315 1 2 3 
                                       f32_3 %317 = OpFAdd %314 %316 
                                                      OpStore %279 %317 
                                       f32_3 %318 = OpLoad %279 
                                       f32_3 %320 = OpExtInst %1 40 %318 %319 
                                       f32_4 %321 = OpLoad %295 
                                       f32_4 %322 = OpVectorShuffle %321 %320 0 4 5 6 
                                                      OpStore %295 %322 
                                       f32_4 %323 = OpLoad %295 
                                         f32 %328 = OpDot %323 %327 
                                Private f32* %329 = OpAccessChain %279 %104 
                                                      OpStore %329 %328 
                                Private f32* %330 = OpAccessChain %279 %104 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpFNegate %331 
                                         f32 %333 = OpFAdd %332 %324 
                                Private f32* %334 = OpAccessChain %279 %104 
                                                      OpStore %334 %333 
                                Private f32* %337 = OpAccessChain %279 %104 
                                         f32 %338 = OpLoad %337 
                                         u32 %339 = OpConvertFToU %338 
                                                      OpStore %336 %339 
                                         u32 %342 = OpLoad %336 
                                         i32 %343 = OpBitcast %342 
                                         i32 %344 = OpShiftLeftLogical %343 %40 
                                                      OpStore %341 %344 
                                       f32_3 %345 = OpLoad %9 
                                       f32_4 %346 = OpVectorShuffle %345 %345 1 1 1 1 
                                         i32 %347 = OpLoad %341 
                                         i32 %348 = OpIAdd %347 %26 
                              Uniform f32_4* %349 = OpAccessChain %225 %25 %348 
                                       f32_4 %350 = OpLoad %349 
                                       f32_4 %351 = OpFMul %346 %350 
                                                      OpStore %56 %351 
                                         i32 %352 = OpLoad %341 
                              Uniform f32_4* %353 = OpAccessChain %225 %25 %352 
                                       f32_4 %354 = OpLoad %353 
                                       f32_3 %355 = OpLoad %9 
                                       f32_4 %356 = OpVectorShuffle %355 %355 0 0 0 0 
                                       f32_4 %357 = OpFMul %354 %356 
                                       f32_4 %358 = OpLoad %56 
                                       f32_4 %359 = OpFAdd %357 %358 
                                                      OpStore %56 %359 
                                         i32 %360 = OpLoad %341 
                                         i32 %361 = OpIAdd %360 %40 
                              Uniform f32_4* %362 = OpAccessChain %225 %25 %361 
                                       f32_4 %363 = OpLoad %362 
                                       f32_3 %364 = OpLoad %9 
                                       f32_4 %365 = OpVectorShuffle %364 %364 2 2 2 2 
                                       f32_4 %366 = OpFMul %363 %365 
                                       f32_4 %367 = OpLoad %56 
                                       f32_4 %368 = OpFAdd %366 %367 
                                                      OpStore %56 %368 
                                       f32_4 %370 = OpLoad %56 
                                         i32 %371 = OpLoad %341 
                                         i32 %372 = OpIAdd %371 %50 
                              Uniform f32_4* %373 = OpAccessChain %225 %25 %372 
                                       f32_4 %374 = OpLoad %373 
                                       f32_4 %375 = OpFAdd %370 %374 
                                                      OpStore vs_TEXCOORD7 %375 
                                 Output f32* %377 = OpAccessChain %84 %25 %80 
                                         f32 %378 = OpLoad %377 
                                         f32 %379 = OpFNegate %378 
                                 Output f32* %380 = OpAccessChain %84 %25 %80 
                                                      OpStore %380 %379 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 1143
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %91 %140 %259 %264 %271 %525 %1133 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate vs_TEXCOORD7 Location 12 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %28 DescriptorSet 28 
                                                      OpDecorate %28 Binding 28 
                                                      OpDecorate %29 RelaxedPrecision 
                                                      OpDecorate %32 RelaxedPrecision 
                                                      OpDecorate %32 DescriptorSet 32 
                                                      OpDecorate %32 Binding 32 
                                                      OpDecorate %33 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %44 ArrayStride 44 
                                                      OpMemberDecorate %45 0 Offset 45 
                                                      OpMemberDecorate %45 1 Offset 45 
                                                      OpMemberDecorate %45 2 Offset 45 
                                                      OpMemberDecorate %45 3 Offset 45 
                                                      OpMemberDecorate %45 4 Offset 45 
                                                      OpMemberDecorate %45 5 Offset 45 
                                                      OpMemberDecorate %45 6 RelaxedPrecision 
                                                      OpMemberDecorate %45 6 Offset 45 
                                                      OpMemberDecorate %45 7 RelaxedPrecision 
                                                      OpMemberDecorate %45 7 Offset 45 
                                                      OpMemberDecorate %45 8 RelaxedPrecision 
                                                      OpMemberDecorate %45 8 Offset 45 
                                                      OpMemberDecorate %45 9 RelaxedPrecision 
                                                      OpMemberDecorate %45 9 Offset 45 
                                                      OpMemberDecorate %45 10 RelaxedPrecision 
                                                      OpMemberDecorate %45 10 Offset 45 
                                                      OpMemberDecorate %45 11 Offset 45 
                                                      OpDecorate %45 Block 
                                                      OpDecorate %47 DescriptorSet 47 
                                                      OpDecorate %47 Binding 47 
                                                      OpDecorate %53 RelaxedPrecision 
                                                      OpDecorate %54 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %58 RelaxedPrecision 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %63 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD2 Location 91 
                                                      OpDecorate %112 ArrayStride 112 
                                                      OpDecorate %113 ArrayStride 113 
                                                      OpMemberDecorate %114 0 Offset 114 
                                                      OpMemberDecorate %114 1 RelaxedPrecision 
                                                      OpMemberDecorate %114 1 Offset 114 
                                                      OpMemberDecorate %114 2 RelaxedPrecision 
                                                      OpMemberDecorate %114 2 Offset 114 
                                                      OpMemberDecorate %114 3 Offset 114 
                                                      OpMemberDecorate %114 4 Offset 114 
                                                      OpDecorate %114 Block 
                                                      OpDecorate %116 DescriptorSet 116 
                                                      OpDecorate %116 Binding 116 
                                                      OpDecorate vs_TEXCOORD0 Location 140 
                                                      OpMemberDecorate %142 0 Offset 142 
                                                      OpMemberDecorate %142 1 Offset 142 
                                                      OpMemberDecorate %142 2 Offset 142 
                                                      OpMemberDecorate %142 3 Offset 142 
                                                      OpMemberDecorate %142 4 Offset 142 
                                                      OpMemberDecorate %142 5 Offset 142 
                                                      OpMemberDecorate %142 6 Offset 142 
                                                      OpMemberDecorate %142 7 Offset 142 
                                                      OpMemberDecorate %142 8 Offset 142 
                                                      OpMemberDecorate %142 9 Offset 142 
                                                      OpMemberDecorate %142 10 Offset 142 
                                                      OpDecorate %142 Block 
                                                      OpDecorate %144 DescriptorSet 144 
                                                      OpDecorate %144 Binding 144 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %157 DescriptorSet 157 
                                                      OpDecorate %157 Binding 157 
                                                      OpDecorate %158 RelaxedPrecision 
                                                      OpDecorate %159 RelaxedPrecision 
                                                      OpDecorate %159 DescriptorSet 159 
                                                      OpDecorate %159 Binding 159 
                                                      OpDecorate %160 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %168 DescriptorSet 168 
                                                      OpDecorate %168 Binding 168 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %170 DescriptorSet 170 
                                                      OpDecorate %170 Binding 170 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %186 DescriptorSet 186 
                                                      OpDecorate %186 Binding 186 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %188 DescriptorSet 188 
                                                      OpDecorate %188 Binding 188 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %249 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 259 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD3 Location 264 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 271 
                                                      OpDecorate %320 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %399 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %420 DescriptorSet 420 
                                                      OpDecorate %420 Binding 420 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %422 DescriptorSet 422 
                                                      OpDecorate %422 Binding 422 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %428 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %438 RelaxedPrecision 
                                                      OpDecorate %439 RelaxedPrecision 
                                                      OpDecorate %440 RelaxedPrecision 
                                                      OpDecorate %441 RelaxedPrecision 
                                                      OpDecorate %442 RelaxedPrecision 
                                                      OpDecorate %443 RelaxedPrecision 
                                                      OpDecorate %445 RelaxedPrecision 
                                                      OpDecorate %450 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %467 ArrayStride 467 
                                                      OpDecorate %468 ArrayStride 468 
                                                      OpDecorate %469 ArrayStride 469 
                                                      OpMemberDecorate %470 0 Offset 470 
                                                      OpMemberDecorate %470 1 Offset 470 
                                                      OpMemberDecorate %470 2 Offset 470 
                                                      OpMemberDecorate %470 3 RelaxedPrecision 
                                                      OpMemberDecorate %470 3 Offset 470 
                                                      OpMemberDecorate %470 4 RelaxedPrecision 
                                                      OpMemberDecorate %470 4 Offset 470 
                                                      OpMemberDecorate %470 5 RelaxedPrecision 
                                                      OpMemberDecorate %470 5 Offset 470 
                                                      OpMemberDecorate %470 6 Offset 470 
                                                      OpMemberDecorate %470 7 RelaxedPrecision 
                                                      OpMemberDecorate %470 7 Offset 470 
                                                      OpMemberDecorate %470 8 Offset 470 
                                                      OpMemberDecorate %470 9 Offset 470 
                                                      OpMemberDecorate %470 10 RelaxedPrecision 
                                                      OpMemberDecorate %470 10 Offset 470 
                                                      OpMemberDecorate %470 11 RelaxedPrecision 
                                                      OpMemberDecorate %470 11 Offset 470 
                                                      OpMemberDecorate %470 12 RelaxedPrecision 
                                                      OpMemberDecorate %470 12 Offset 470 
                                                      OpMemberDecorate %470 13 RelaxedPrecision 
                                                      OpMemberDecorate %470 13 Offset 470 
                                                      OpMemberDecorate %470 14 RelaxedPrecision 
                                                      OpMemberDecorate %470 14 Offset 470 
                                                      OpMemberDecorate %470 15 RelaxedPrecision 
                                                      OpMemberDecorate %470 15 Offset 470 
                                                      OpMemberDecorate %470 16 RelaxedPrecision 
                                                      OpMemberDecorate %470 16 Offset 470 
                                                      OpDecorate %470 Block 
                                                      OpDecorate %472 DescriptorSet 472 
                                                      OpDecorate %472 Binding 472 
                                                      OpDecorate %474 RelaxedPrecision 
                                                      OpDecorate %475 RelaxedPrecision 
                                                      OpDecorate %478 RelaxedPrecision 
                                                      OpDecorate %505 RelaxedPrecision 
                                                      OpDecorate %522 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 525 
                                                      OpDecorate %529 ArrayStride 529 
                                                      OpDecorate %530 ArrayStride 530 
                                                      OpDecorate %531 ArrayStride 531 
                                                      OpDecorate %532 ArrayStride 532 
                                                      OpDecorate %533 ArrayStride 533 
                                                      OpMemberDecorate %534 0 Offset 534 
                                                      OpMemberDecorate %534 1 RelaxedPrecision 
                                                      OpMemberDecorate %534 1 Offset 534 
                                                      OpMemberDecorate %534 2 RelaxedPrecision 
                                                      OpMemberDecorate %534 2 Offset 534 
                                                      OpMemberDecorate %534 3 RelaxedPrecision 
                                                      OpMemberDecorate %534 3 Offset 534 
                                                      OpMemberDecorate %534 4 RelaxedPrecision 
                                                      OpMemberDecorate %534 4 Offset 534 
                                                      OpDecorate %534 Block 
                                                      OpDecorate %536 DescriptorSet 536 
                                                      OpDecorate %536 Binding 536 
                                                      OpDecorate %566 RelaxedPrecision 
                                                      OpDecorate %570 RelaxedPrecision 
                                                      OpDecorate %579 RelaxedPrecision 
                                                      OpDecorate %580 RelaxedPrecision 
                                                      OpDecorate %583 RelaxedPrecision 
                                                      OpDecorate %586 RelaxedPrecision 
                                                      OpDecorate %587 RelaxedPrecision 
                                                      OpDecorate %590 RelaxedPrecision 
                                                      OpDecorate %591 RelaxedPrecision 
                                                      OpDecorate %592 RelaxedPrecision 
                                                      OpDecorate %593 RelaxedPrecision 
                                                      OpDecorate %594 RelaxedPrecision 
                                                      OpDecorate %595 RelaxedPrecision 
                                                      OpDecorate %596 RelaxedPrecision 
                                                      OpDecorate %598 RelaxedPrecision 
                                                      OpDecorate %607 RelaxedPrecision 
                                                      OpDecorate %608 RelaxedPrecision 
                                                      OpDecorate %609 RelaxedPrecision 
                                                      OpDecorate %614 RelaxedPrecision 
                                                      OpDecorate %615 RelaxedPrecision 
                                                      OpDecorate %622 RelaxedPrecision 
                                                      OpDecorate %623 RelaxedPrecision 
                                                      OpDecorate %624 RelaxedPrecision 
                                                      OpDecorate %625 RelaxedPrecision 
                                                      OpDecorate %626 RelaxedPrecision 
                                                      OpDecorate %627 RelaxedPrecision 
                                                      OpDecorate %628 RelaxedPrecision 
                                                      OpDecorate %629 RelaxedPrecision 
                                                      OpDecorate %632 RelaxedPrecision 
                                                      OpDecorate %635 RelaxedPrecision 
                                                      OpDecorate %636 RelaxedPrecision 
                                                      OpDecorate %637 RelaxedPrecision 
                                                      OpDecorate %638 RelaxedPrecision 
                                                      OpDecorate %640 RelaxedPrecision 
                                                      OpDecorate %641 RelaxedPrecision 
                                                      OpDecorate %644 RelaxedPrecision 
                                                      OpDecorate %645 RelaxedPrecision 
                                                      OpDecorate %646 RelaxedPrecision 
                                                      OpDecorate %687 RelaxedPrecision 
                                                      OpDecorate %689 RelaxedPrecision 
                                                      OpDecorate %690 RelaxedPrecision 
                                                      OpDecorate %691 RelaxedPrecision 
                                                      OpDecorate %693 RelaxedPrecision 
                                                      OpDecorate %695 RelaxedPrecision 
                                                      OpDecorate %696 RelaxedPrecision 
                                                      OpDecorate %697 RelaxedPrecision 
                                                      OpDecorate %700 RelaxedPrecision 
                                                      OpDecorate %716 RelaxedPrecision 
                                                      OpDecorate %718 RelaxedPrecision 
                                                      OpDecorate %727 RelaxedPrecision 
                                                      OpDecorate %729 RelaxedPrecision 
                                                      OpDecorate %730 RelaxedPrecision 
                                                      OpDecorate %733 RelaxedPrecision 
                                                      OpDecorate %736 RelaxedPrecision 
                                                      OpDecorate %741 RelaxedPrecision 
                                                      OpDecorate %752 RelaxedPrecision 
                                                      OpDecorate %754 RelaxedPrecision 
                                                      OpDecorate %755 RelaxedPrecision 
                                                      OpDecorate %756 RelaxedPrecision 
                                                      OpDecorate %761 RelaxedPrecision 
                                                      OpDecorate %765 RelaxedPrecision 
                                                      OpDecorate %771 RelaxedPrecision 
                                                      OpDecorate %777 RelaxedPrecision 
                                                      OpDecorate %786 RelaxedPrecision 
                                                      OpDecorate %789 RelaxedPrecision 
                                                      OpDecorate %790 RelaxedPrecision 
                                                      OpDecorate %791 RelaxedPrecision 
                                                      OpDecorate %795 RelaxedPrecision 
                                                      OpDecorate %796 RelaxedPrecision 
                                                      OpDecorate %797 RelaxedPrecision 
                                                      OpDecorate %801 RelaxedPrecision 
                                                      OpDecorate %802 RelaxedPrecision 
                                                      OpDecorate %803 RelaxedPrecision 
                                                      OpDecorate %815 RelaxedPrecision 
                                                      OpDecorate %816 RelaxedPrecision 
                                                      OpDecorate %820 RelaxedPrecision 
                                                      OpDecorate %821 RelaxedPrecision 
                                                      OpDecorate %822 RelaxedPrecision 
                                                      OpDecorate %823 RelaxedPrecision 
                                                      OpDecorate %824 RelaxedPrecision 
                                                      OpDecorate %825 RelaxedPrecision 
                                                      OpDecorate %826 RelaxedPrecision 
                                                      OpDecorate %827 RelaxedPrecision 
                                                      OpDecorate %828 RelaxedPrecision 
                                                      OpDecorate %829 RelaxedPrecision 
                                                      OpDecorate %830 RelaxedPrecision 
                                                      OpDecorate %832 RelaxedPrecision 
                                                      OpDecorate %833 RelaxedPrecision 
                                                      OpDecorate %834 RelaxedPrecision 
                                                      OpDecorate %835 RelaxedPrecision 
                                                      OpDecorate %864 RelaxedPrecision 
                                                      OpDecorate %865 RelaxedPrecision 
                                                      OpDecorate %867 RelaxedPrecision 
                                                      OpDecorate %868 RelaxedPrecision 
                                                      OpDecorate %872 RelaxedPrecision 
                                                      OpDecorate %873 RelaxedPrecision 
                                                      OpDecorate %875 RelaxedPrecision 
                                                      OpDecorate %877 RelaxedPrecision 
                                                      OpDecorate %879 RelaxedPrecision 
                                                      OpDecorate %880 RelaxedPrecision 
                                                      OpDecorate %881 RelaxedPrecision 
                                                      OpDecorate %884 RelaxedPrecision 
                                                      OpDecorate %886 RelaxedPrecision 
                                                      OpDecorate %887 RelaxedPrecision 
                                                      OpDecorate %888 RelaxedPrecision 
                                                      OpDecorate %888 DescriptorSet 888 
                                                      OpDecorate %888 Binding 888 
                                                      OpDecorate %889 RelaxedPrecision 
                                                      OpDecorate %890 RelaxedPrecision 
                                                      OpDecorate %890 DescriptorSet 890 
                                                      OpDecorate %890 Binding 890 
                                                      OpDecorate %891 RelaxedPrecision 
                                                      OpDecorate %893 RelaxedPrecision 
                                                      OpDecorate %894 RelaxedPrecision 
                                                      OpDecorate %895 RelaxedPrecision 
                                                      OpDecorate %896 RelaxedPrecision 
                                                      OpDecorate %897 RelaxedPrecision 
                                                      OpDecorate %899 RelaxedPrecision 
                                                      OpDecorate %901 RelaxedPrecision 
                                                      OpDecorate %902 RelaxedPrecision 
                                                      OpDecorate %903 RelaxedPrecision 
                                                      OpDecorate %953 RelaxedPrecision 
                                                      OpDecorate %954 RelaxedPrecision 
                                                      OpDecorate %965 RelaxedPrecision 
                                                      OpDecorate %976 RelaxedPrecision 
                                                      OpDecorate %977 RelaxedPrecision 
                                                      OpDecorate %978 RelaxedPrecision 
                                                      OpDecorate %979 RelaxedPrecision 
                                                      OpDecorate %982 RelaxedPrecision 
                                                      OpDecorate %986 RelaxedPrecision 
                                                      OpDecorate %989 RelaxedPrecision 
                                                      OpDecorate %990 RelaxedPrecision 
                                                      OpDecorate %1056 RelaxedPrecision 
                                                      OpDecorate %1082 RelaxedPrecision 
                                                      OpDecorate %1090 RelaxedPrecision 
                                                      OpDecorate %1091 RelaxedPrecision 
                                                      OpDecorate %1092 RelaxedPrecision 
                                                      OpDecorate %1093 RelaxedPrecision 
                                                      OpDecorate %1094 RelaxedPrecision 
                                                      OpDecorate %1095 RelaxedPrecision 
                                                      OpDecorate %1115 RelaxedPrecision 
                                                      OpDecorate %1116 RelaxedPrecision 
                                                      OpDecorate %1117 RelaxedPrecision 
                                                      OpDecorate %1120 RelaxedPrecision 
                                                      OpDecorate %1122 RelaxedPrecision 
                                                      OpDecorate %1123 RelaxedPrecision 
                                                      OpDecorate %1124 RelaxedPrecision 
                                                      OpDecorate %1125 RelaxedPrecision 
                                                      OpDecorate %1126 RelaxedPrecision 
                                                      OpDecorate %1129 RelaxedPrecision 
                                                      OpDecorate %1130 RelaxedPrecision 
                                                      OpDecorate %1131 RelaxedPrecision 
                                                      OpDecorate %1133 RelaxedPrecision 
                                                      OpDecorate %1133 Location 1133 
                                                      OpDecorate %1134 RelaxedPrecision 
                                                      OpDecorate %1135 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Function %7 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                        Input f32_4* vs_TEXCOORD7 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 2 
                                              %18 = OpTypePointer Input %6 
                                              %24 = OpTypePointer Private %6 
                                 Private f32* %25 = OpVariable Private 
                                              %26 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %27 = OpTypePointer UniformConstant %26 
         UniformConstant read_only Texture2D* %28 = OpVariable UniformConstant 
                                              %30 = OpTypeSampler 
                                              %31 = OpTypePointer UniformConstant %30 
                     UniformConstant sampler* %32 = OpVariable UniformConstant 
                                              %34 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                              %35 = OpTypeSampledImage %34 
                                          f32 %38 = OpConstant 3.674022E-40 
                                              %41 = OpTypePointer Private %10 
                               Private f32_4* %42 = OpVariable Private 
                                          u32 %43 = OpConstant 20 
                                              %44 = OpTypeArray %10 %43 
                                              %45 = OpTypeStruct %44 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 
                                              %46 = OpTypePointer Uniform %45 
Uniform struct {f32_4[20]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %47 = OpVariable Uniform 
                                              %48 = OpTypeInt 32 1 
                                          i32 %49 = OpConstant 10 
                                          u32 %50 = OpConstant 0 
                                              %51 = OpTypePointer Uniform %6 
                                          f32 %55 = OpConstant 3.674022E-40 
                                              %66 = OpTypeBool 
                                              %67 = OpTypePointer Private %66 
                                Private bool* %68 = OpVariable Private 
                                Private bool* %72 = OpVariable Private 
                                              %80 = OpTypePointer Function %6 
                               Private f32_4* %89 = OpVariable Private 
                                              %90 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                             %100 = OpTypePointer Private %7 
                              Private f32_3* %101 = OpVariable Private 
                              Private f32_3* %106 = OpVariable Private 
                                         u32 %111 = OpConstant 4 
                                             %112 = OpTypeArray %10 %111 
                                             %113 = OpTypeArray %10 %111 
                                             %114 = OpTypeStruct %10 %10 %10 %112 %113 
                                             %115 = OpTypePointer Uniform %114 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_4[4];}* %116 = OpVariable Uniform 
                                         i32 %117 = OpConstant 0 
                                             %118 = OpTypePointer Uniform %10 
                                Private f32* %127 = OpVariable Private 
                              Private f32_4* %131 = OpVariable Private 
                              Private f32_3* %138 = OpVariable Private 
                                             %139 = OpTypePointer Input %13 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                             %142 = OpTypeStruct %6 %10 %10 %6 %6 %7 %10 %6 %6 %6 %6 
                                             %143 = OpTypePointer Uniform %142 
Uniform struct {f32; f32_4; f32_4; f32; f32; f32_3; f32_4; f32; f32; f32; f32;}* %144 = OpVariable Uniform 
                                         i32 %145 = OpConstant 1 
                              Private f32_3* %156 = OpVariable Private 
        UniformConstant read_only Texture2D* %157 = OpVariable UniformConstant 
                    UniformConstant sampler* %159 = OpVariable UniformConstant 
                                             %161 = OpTypeSampledImage %26 
                              Private f32_3* %167 = OpVariable Private 
        UniformConstant read_only Texture2D* %168 = OpVariable UniformConstant 
                    UniformConstant sampler* %170 = OpVariable UniformConstant 
                              Private f32_3* %177 = OpVariable Private 
                                         f32 %179 = OpConstant 3.674022E-40 
                                       f32_3 %180 = OpConstantComposite %179 %179 %179 
                                         f32 %182 = OpConstant 3.674022E-40 
                                       f32_3 %183 = OpConstantComposite %182 %182 %182 
                              Private f32_4* %185 = OpVariable Private 
        UniformConstant read_only Texture2D* %186 = OpVariable UniformConstant 
                    UniformConstant sampler* %188 = OpVariable UniformConstant 
                                         u32 %194 = OpConstant 1 
                                         i32 %197 = OpConstant 3 
                              Private f32_3* %202 = OpVariable Private 
                                         f32 %215 = OpConstant 3.674022E-40 
                              Private f32_3* %218 = OpVariable Private 
                              Private f32_3* %223 = OpVariable Private 
                                         i32 %225 = OpConstant 2 
                                         f32 %231 = OpConstant 3.674022E-40 
                                       f32_3 %232 = OpConstantComposite %231 %231 %231 
                                         f32 %238 = OpConstant 3.674022E-40 
                                       f32_3 %239 = OpConstantComposite %238 %238 %238 
                              Private f32_3* %241 = OpVariable Private 
                                         f32 %244 = OpConstant 3.674022E-40 
                                         f32 %246 = OpConstant 3.674022E-40 
                        Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                Private f32* %276 = OpVariable Private 
                              Private f32_4* %282 = OpVariable Private 
                                         f32 %296 = OpConstant 3.674022E-40 
                                         f32 %313 = OpConstant 3.674022E-40 
                                       f32_3 %314 = OpConstantComposite %313 %296 %296 
                                Private f32* %318 = OpVariable Private 
                                         f32 %334 = OpConstant 3.674022E-40 
                                Private f32* %393 = OpVariable Private 
                                Private f32* %403 = OpVariable Private 
                              Private f32_3* %419 = OpVariable Private 
        UniformConstant read_only Texture2D* %420 = OpVariable UniformConstant 
                    UniformConstant sampler* %422 = OpVariable UniformConstant 
                              Private f32_3* %429 = OpVariable Private 
                                         i32 %431 = OpConstant 4 
                              Private f32_3* %450 = OpVariable Private 
                                             %467 = OpTypeArray %10 %111 
                                             %468 = OpTypeArray %10 %111 
                                             %469 = OpTypeArray %10 %17 
                                             %470 = OpTypeStruct %467 %468 %10 %10 %10 %469 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 
                                             %471 = OpTypePointer Uniform %470 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4; f32_4[2]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %472 = OpVariable Uniform 
                                             %476 = OpTypePointer Private %48 
                                Private i32* %477 = OpVariable Private 
                                             %481 = OpTypePointer Function %16 
                                Private i32* %492 = OpVariable Private 
                                         u32 %494 = OpConstant 3 
                                             %497 = OpTypePointer Private %16 
                                Private u32* %498 = OpVariable Private 
                                         i32 %501 = OpConstant 5 
                                             %506 = OpTypeVector %16 4 
                                             %507 = OpTypeArray %506 %111 
                                         u32 %508 = OpConstant 1065353216 
                                       u32_4 %509 = OpConstantComposite %508 %50 %50 %50 
                                       u32_4 %510 = OpConstantComposite %50 %508 %50 %50 
                                       u32_4 %511 = OpConstantComposite %50 %50 %508 %50 
                                       u32_4 %512 = OpConstantComposite %50 %50 %50 %508 
                                    u32_4[4] %513 = OpConstantComposite %509 %510 %511 %512 
                                             %515 = OpTypePointer Function %507 
                                             %517 = OpTypePointer Function %506 
                              Private f32_3* %524 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD5 = OpVariable Input 
                                         u32 %528 = OpConstant 32 
                                             %529 = OpTypeArray %10 %528 
                                             %530 = OpTypeArray %10 %528 
                                             %531 = OpTypeArray %10 %528 
                                             %532 = OpTypeArray %10 %528 
                                             %533 = OpTypeArray %10 %528 
                                             %534 = OpTypeStruct %529 %530 %531 %532 %533 
                                             %535 = OpTypePointer Uniform %534 
Uniform struct {f32_4[32]; f32_4[32]; f32_4[32]; f32_4[32]; f32_4[32];}* %536 = OpVariable Uniform 
                                Private f32* %547 = OpVariable Private 
                                         f32 %552 = OpConstant 3.674022E-40 
                                Private f32* %554 = OpVariable Private 
                              Private f32_3* %607 = OpVariable Private 
                              Private f32_3* %628 = OpVariable Private 
                                Private f32* %691 = OpVariable Private 
                                         f32 %702 = OpConstant 3.674022E-40 
                                         f32 %717 = OpConstant 3.674022E-40 
                                         f32 %728 = OpConstant 3.674022E-40 
                                         f32 %749 = OpConstant 3.674022E-40 
                                       f32_3 %750 = OpConstantComposite %749 %749 %749 
                                         i32 %769 = OpConstant 11 
                                         i32 %775 = OpConstant 12 
                              Private f32_3* %786 = OpVariable Private 
                                         i32 %787 = OpConstant 13 
                                         i32 %793 = OpConstant 14 
                                         i32 %799 = OpConstant 15 
                                         i32 %818 = OpConstant 16 
                                       f32_3 %831 = OpConstantComposite %38 %38 %38 
                                       f32_2 %866 = OpConstantComposite %334 %334 
                                         f32 %874 = OpConstant 3.674022E-40 
                                         f32 %876 = OpConstant 3.674022E-40 
                                         f32 %885 = OpConstant 3.674022E-40 
                              Private f32_3* %887 = OpVariable Private 
        UniformConstant read_only Texture2D* %888 = OpVariable UniformConstant 
                    UniformConstant sampler* %890 = OpVariable UniformConstant 
                                Private f32* %939 = OpVariable Private 
                                             %997 = OpTypePointer Uniform %7 
                                        i32 %1058 = OpConstant 8 
                                        i32 %1066 = OpConstant 7 
                                        i32 %1077 = OpConstant 6 
                                        i32 %1083 = OpConstant 9 
                                      f32_3 %1104 = OpConstantComposite %874 %874 %874 
                                        f32 %1108 = OpConstant 3.674022E-40 
                                      f32_3 %1109 = OpConstantComposite %1108 %1108 %1108 
                                        f32 %1127 = OpConstant 3.674022E-40 
                                      f32_3 %1128 = OpConstantComposite %1127 %1127 %1127 
                                            %1132 = OpTypePointer Output %10 
                              Output f32_4* %1133 = OpVariable Output 
                                            %1138 = OpTypePointer Output %6 
                              Private bool* %1141 = OpVariable Private 
                               Private u32* %1142 = OpVariable Private 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32_3* %9 = OpVariable Function 
                                Function f32* %81 = OpVariable Function 
                               Function u32* %482 = OpVariable Function 
                          Function u32_4[4]* %516 = OpVariable Function 
                                        f32_4 %14 = OpLoad vs_TEXCOORD7 
                                        f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                                   Input f32* %19 = OpAccessChain vs_TEXCOORD7 %17 
                                          f32 %20 = OpLoad %19 
                                          f32 %21 = OpCompositeExtract %15 0 
                                          f32 %22 = OpCompositeExtract %15 1 
                                        f32_3 %23 = OpCompositeConstruct %21 %22 %20 
                                                      OpStore %9 %23 
                          read_only Texture2D %29 = OpLoad %28 
                                      sampler %33 = OpLoad %32 
                   read_only Texture2DSampled %36 = OpSampledImage %29 %33 
                                        f32_3 %37 = OpLoad %9 
                                          f32 %39 = OpCompositeExtract %37 2 
                                          f32 %40 = OpImageSampleDrefExplicitLod %36 %37 %39 Lod %6 
                                                      OpStore %25 %40 
                                 Uniform f32* %52 = OpAccessChain %47 %49 %50 
                                          f32 %53 = OpLoad %52 
                                          f32 %54 = OpFNegate %53 
                                          f32 %56 = OpFAdd %54 %55 
                                 Private f32* %57 = OpAccessChain %42 %50 
                                                      OpStore %57 %56 
                                          f32 %58 = OpLoad %25 
                                 Uniform f32* %59 = OpAccessChain %47 %49 %50 
                                          f32 %60 = OpLoad %59 
                                          f32 %61 = OpFMul %58 %60 
                                 Private f32* %62 = OpAccessChain %42 %50 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpFAdd %61 %63 
                                 Private f32* %65 = OpAccessChain %42 %50 
                                                      OpStore %65 %64 
                                   Input f32* %69 = OpAccessChain vs_TEXCOORD7 %17 
                                          f32 %70 = OpLoad %69 
                                         bool %71 = OpFOrdGreaterThanEqual %38 %70 
                                                      OpStore %68 %71 
                                   Input f32* %73 = OpAccessChain vs_TEXCOORD7 %17 
                                          f32 %74 = OpLoad %73 
                                         bool %75 = OpFOrdGreaterThanEqual %74 %55 
                                                      OpStore %72 %75 
                                         bool %76 = OpLoad %72 
                                         bool %77 = OpLoad %68 
                                         bool %78 = OpLogicalOr %76 %77 
                                                      OpStore %68 %78 
                                         bool %79 = OpLoad %68 
                                                      OpSelectionMerge %83 None 
                                                      OpBranchConditional %79 %82 %84 
                                              %82 = OpLabel 
                                                      OpStore %81 %55 
                                                      OpBranch %83 
                                              %84 = OpLabel 
                                 Private f32* %85 = OpAccessChain %42 %50 
                                          f32 %86 = OpLoad %85 
                                                      OpStore %81 %86 
                                                      OpBranch %83 
                                              %83 = OpLabel 
                                          f32 %87 = OpLoad %81 
                                 Private f32* %88 = OpAccessChain %42 %50 
                                                      OpStore %88 %87 
                                        f32_3 %92 = OpLoad vs_TEXCOORD2 
                                        f32_3 %93 = OpLoad vs_TEXCOORD2 
                                          f32 %94 = OpDot %92 %93 
                                 Private f32* %95 = OpAccessChain %89 %50 
                                                      OpStore %95 %94 
                                 Private f32* %96 = OpAccessChain %89 %50 
                                          f32 %97 = OpLoad %96 
                                          f32 %98 = OpExtInst %1 32 %97 
                                 Private f32* %99 = OpAccessChain %89 %50 
                                                      OpStore %99 %98 
                                       f32_4 %102 = OpLoad %89 
                                       f32_3 %103 = OpVectorShuffle %102 %102 0 0 0 
                                       f32_3 %104 = OpLoad vs_TEXCOORD2 
                                       f32_3 %105 = OpFMul %103 %104 
                                                      OpStore %101 %105 
                                       f32_3 %107 = OpLoad vs_TEXCOORD2 
                                       f32_4 %108 = OpLoad %89 
                                       f32_3 %109 = OpVectorShuffle %108 %108 0 0 0 
                                       f32_3 %110 = OpFMul %107 %109 
                              Uniform f32_4* %119 = OpAccessChain %116 %117 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_3 %122 = OpFAdd %110 %121 
                                                      OpStore %106 %122 
                                       f32_3 %123 = OpLoad %106 
                                       f32_3 %124 = OpLoad %106 
                                         f32 %125 = OpDot %123 %124 
                                Private f32* %126 = OpAccessChain %89 %50 
                                                      OpStore %126 %125 
                                Private f32* %128 = OpAccessChain %89 %50 
                                         f32 %129 = OpLoad %128 
                                         f32 %130 = OpExtInst %1 32 %129 
                                                      OpStore %127 %130 
                                         f32 %132 = OpLoad %127 
                                       f32_3 %133 = OpCompositeConstruct %132 %132 %132 
                                       f32_3 %134 = OpLoad %106 
                                       f32_3 %135 = OpFMul %133 %134 
                                       f32_4 %136 = OpLoad %131 
                                       f32_4 %137 = OpVectorShuffle %136 %135 4 5 6 3 
                                                      OpStore %131 %137 
                                       f32_2 %141 = OpLoad vs_TEXCOORD0 
                              Uniform f32_4* %146 = OpAccessChain %144 %145 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 1 
                                       f32_2 %149 = OpFMul %141 %148 
                              Uniform f32_4* %150 = OpAccessChain %144 %145 
                                       f32_4 %151 = OpLoad %150 
                                       f32_2 %152 = OpVectorShuffle %151 %151 2 3 
                                       f32_2 %153 = OpFAdd %149 %152 
                                       f32_3 %154 = OpLoad %138 
                                       f32_3 %155 = OpVectorShuffle %154 %153 3 4 2 
                                                      OpStore %138 %155 
                         read_only Texture2D %158 = OpLoad %157 
                                     sampler %160 = OpLoad %159 
                  read_only Texture2DSampled %162 = OpSampledImage %158 %160 
                                       f32_3 %163 = OpLoad %138 
                                       f32_2 %164 = OpVectorShuffle %163 %163 0 1 
                                       f32_4 %165 = OpImageSampleImplicitLod %162 %164 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                                      OpStore %156 %166 
                         read_only Texture2D %169 = OpLoad %168 
                                     sampler %171 = OpLoad %170 
                  read_only Texture2DSampled %172 = OpSampledImage %169 %171 
                                       f32_3 %173 = OpLoad %138 
                                       f32_2 %174 = OpVectorShuffle %173 %173 0 1 
                                       f32_4 %175 = OpImageSampleImplicitLod %172 %174 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                                      OpStore %167 %176 
                                       f32_3 %178 = OpLoad %167 
                                       f32_3 %181 = OpFMul %178 %180 
                                       f32_3 %184 = OpFAdd %181 %183 
                                                      OpStore %177 %184 
                         read_only Texture2D %187 = OpLoad %186 
                                     sampler %189 = OpLoad %188 
                  read_only Texture2DSampled %190 = OpSampledImage %187 %189 
                                       f32_3 %191 = OpLoad %138 
                                       f32_2 %192 = OpVectorShuffle %191 %191 0 1 
                                       f32_4 %193 = OpImageSampleImplicitLod %190 %192 
                                                      OpStore %185 %193 
                                Private f32* %195 = OpAccessChain %185 %194 
                                         f32 %196 = OpLoad %195 
                                Uniform f32* %198 = OpAccessChain %144 %197 
                                         f32 %199 = OpLoad %198 
                                         f32 %200 = OpFNegate %199 
                                         f32 %201 = OpFAdd %196 %200 
                                                      OpStore %127 %201 
                                         f32 %203 = OpLoad %127 
                                         f32 %204 = OpFNegate %203 
                                         f32 %205 = OpFAdd %204 %55 
                                Private f32* %206 = OpAccessChain %202 %50 
                                                      OpStore %206 %205 
                                Private f32* %207 = OpAccessChain %202 %50 
                                         f32 %208 = OpLoad %207 
                                Private f32* %209 = OpAccessChain %202 %50 
                                         f32 %210 = OpLoad %209 
                                         f32 %211 = OpFMul %208 %210 
                                Private f32* %212 = OpAccessChain %202 %50 
                                                      OpStore %212 %211 
                                Private f32* %213 = OpAccessChain %202 %50 
                                         f32 %214 = OpLoad %213 
                                         f32 %216 = OpExtInst %1 40 %214 %215 
                                Private f32* %217 = OpAccessChain %202 %50 
                                                      OpStore %217 %216 
                                       f32_3 %219 = OpLoad %156 
                                       f32_4 %220 = OpLoad %185 
                                       f32_3 %221 = OpVectorShuffle %220 %220 2 2 2 
                                       f32_3 %222 = OpFMul %219 %221 
                                                      OpStore %218 %222 
                                       f32_3 %224 = OpLoad %218 
                              Uniform f32_4* %226 = OpAccessChain %144 %225 
                                       f32_4 %227 = OpLoad %226 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                       f32_3 %229 = OpFMul %224 %228 
                                                      OpStore %223 %229 
                                       f32_3 %230 = OpLoad %156 
                                       f32_3 %233 = OpFAdd %230 %232 
                                                      OpStore %218 %233 
                                       f32_4 %234 = OpLoad %185 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 0 0 
                                       f32_3 %236 = OpLoad %218 
                                       f32_3 %237 = OpFMul %235 %236 
                                       f32_3 %240 = OpFAdd %237 %239 
                                                      OpStore %218 %240 
                                Private f32* %242 = OpAccessChain %185 %50 
                                         f32 %243 = OpLoad %242 
                                         f32 %245 = OpFMul %243 %244 
                                         f32 %247 = OpFAdd %245 %246 
                                Private f32* %248 = OpAccessChain %241 %50 
                                                      OpStore %248 %247 
                                       f32_3 %249 = OpLoad %156 
                                       f32_3 %250 = OpLoad %241 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 0 0 
                                       f32_3 %252 = OpFMul %249 %251 
                                                      OpStore %241 %252 
                                       f32_4 %253 = OpLoad %185 
                                       f32_3 %254 = OpVectorShuffle %253 %253 3 3 3 
                                       f32_3 %255 = OpLoad %241 
                                       f32_3 %256 = OpFMul %254 %255 
                                                      OpStore %241 %256 
                                       f32_3 %257 = OpLoad %177 
                                       f32_3 %258 = OpVectorShuffle %257 %257 1 1 1 
                                       f32_3 %260 = OpLoad vs_TEXCOORD4 
                                       f32_3 %261 = OpFMul %258 %260 
                                                      OpStore %138 %261 
                                       f32_3 %262 = OpLoad %177 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 0 0 
                                       f32_3 %265 = OpLoad vs_TEXCOORD3 
                                       f32_3 %266 = OpFMul %263 %265 
                                       f32_3 %267 = OpLoad %138 
                                       f32_3 %268 = OpFAdd %266 %267 
                                                      OpStore %138 %268 
                                       f32_3 %269 = OpLoad %177 
                                       f32_3 %270 = OpVectorShuffle %269 %269 2 2 2 
                                       f32_3 %272 = OpLoad vs_TEXCOORD1 
                                       f32_3 %273 = OpFMul %270 %272 
                                       f32_3 %274 = OpLoad %138 
                                       f32_3 %275 = OpFAdd %273 %274 
                                                      OpStore %138 %275 
                                       f32_3 %277 = OpLoad %138 
                                       f32_3 %278 = OpLoad %138 
                                         f32 %279 = OpDot %277 %278 
                                                      OpStore %276 %279 
                                         f32 %280 = OpLoad %276 
                                         f32 %281 = OpExtInst %1 32 %280 
                                                      OpStore %276 %281 
                                         f32 %283 = OpLoad %276 
                                       f32_3 %284 = OpCompositeConstruct %283 %283 %283 
                                       f32_3 %285 = OpLoad %138 
                                       f32_3 %286 = OpFMul %284 %285 
                                       f32_4 %287 = OpLoad %282 
                                       f32_4 %288 = OpVectorShuffle %287 %286 4 5 6 3 
                                                      OpStore %282 %288 
                                       f32_4 %289 = OpLoad %282 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 1 2 
                              Uniform f32_4* %291 = OpAccessChain %116 %117 
                                       f32_4 %292 = OpLoad %291 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
                                         f32 %294 = OpDot %290 %293 
                                                      OpStore %276 %294 
                                         f32 %295 = OpLoad %276 
                                         f32 %297 = OpExtInst %1 40 %295 %296 
                                Private f32* %298 = OpAccessChain %138 %50 
                                                      OpStore %298 %297 
                                       f32_4 %299 = OpLoad %282 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
                                       f32_3 %301 = OpLoad %101 
                                         f32 %302 = OpDot %300 %301 
                                Private f32* %303 = OpAccessChain %89 %194 
                                                      OpStore %303 %302 
                              Uniform f32_4* %304 = OpAccessChain %116 %117 
                                       f32_4 %305 = OpLoad %304 
                                       f32_3 %306 = OpVectorShuffle %305 %305 0 1 2 
                                       f32_4 %307 = OpLoad %131 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
                                         f32 %309 = OpDot %306 %308 
                                Private f32* %310 = OpAccessChain %89 %17 
                                                      OpStore %310 %309 
                                       f32_4 %311 = OpLoad %89 
                                       f32_3 %312 = OpVectorShuffle %311 %311 0 1 2 
                                       f32_3 %315 = OpExtInst %1 40 %312 %314 
                                       f32_4 %316 = OpLoad %89 
                                       f32_4 %317 = OpVectorShuffle %316 %315 4 5 6 3 
                                                      OpStore %89 %317 
                                Private f32* %319 = OpAccessChain %202 %50 
                                         f32 %320 = OpLoad %319 
                                Private f32* %321 = OpAccessChain %202 %50 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpFAdd %320 %322 
                                                      OpStore %318 %323 
                                Private f32* %324 = OpAccessChain %89 %17 
                                         f32 %325 = OpLoad %324 
                                Private f32* %326 = OpAccessChain %89 %17 
                                         f32 %327 = OpLoad %326 
                                         f32 %328 = OpFMul %325 %327 
                                Private f32* %329 = OpAccessChain %131 %50 
                                                      OpStore %329 %328 
                                Private f32* %330 = OpAccessChain %131 %50 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpLoad %318 
                                         f32 %333 = OpFMul %331 %332 
                                         f32 %335 = OpFAdd %333 %334 
                                                      OpStore %318 %335 
                                         f32 %336 = OpLoad %318 
                                         f32 %337 = OpFAdd %336 %182 
                                Private f32* %338 = OpAccessChain %177 %50 
                                                      OpStore %338 %337 
                                Private f32* %339 = OpAccessChain %89 %194 
                                         f32 %340 = OpLoad %339 
                                         f32 %341 = OpFNegate %340 
                                         f32 %342 = OpFAdd %341 %55 
                                Private f32* %343 = OpAccessChain %101 %50 
                                                      OpStore %343 %342 
                                Private f32* %344 = OpAccessChain %101 %50 
                                         f32 %345 = OpLoad %344 
                                         f32 %346 = OpExtInst %1 40 %345 %38 
                                Private f32* %347 = OpAccessChain %101 %50 
                                                      OpStore %347 %346 
                                Private f32* %348 = OpAccessChain %101 %50 
                                         f32 %349 = OpLoad %348 
                                Private f32* %350 = OpAccessChain %101 %50 
                                         f32 %351 = OpLoad %350 
                                         f32 %352 = OpFMul %349 %351 
                                                      OpStore %318 %352 
                                         f32 %353 = OpLoad %318 
                                         f32 %354 = OpLoad %318 
                                         f32 %355 = OpFMul %353 %354 
                                                      OpStore %318 %355 
                                Private f32* %356 = OpAccessChain %101 %50 
                                         f32 %357 = OpLoad %356 
                                         f32 %358 = OpLoad %318 
                                         f32 %359 = OpFMul %357 %358 
                                Private f32* %360 = OpAccessChain %101 %50 
                                                      OpStore %360 %359 
                                Private f32* %361 = OpAccessChain %177 %50 
                                         f32 %362 = OpLoad %361 
                                Private f32* %363 = OpAccessChain %101 %50 
                                         f32 %364 = OpLoad %363 
                                         f32 %365 = OpFMul %362 %364 
                                         f32 %366 = OpFAdd %365 %55 
                                Private f32* %367 = OpAccessChain %101 %50 
                                                      OpStore %367 %366 
                                Private f32* %368 = OpAccessChain %138 %50 
                                         f32 %369 = OpLoad %368 
                                         f32 %370 = OpFNegate %369 
                                         f32 %371 = OpFAdd %370 %55 
                                                      OpStore %318 %371 
                                         f32 %372 = OpLoad %318 
                                         f32 %373 = OpExtInst %1 40 %372 %38 
                                                      OpStore %318 %373 
                                         f32 %374 = OpLoad %318 
                                         f32 %375 = OpLoad %318 
                                         f32 %376 = OpFMul %374 %375 
                                Private f32* %377 = OpAccessChain %131 %50 
                                                      OpStore %377 %376 
                                Private f32* %378 = OpAccessChain %131 %50 
                                         f32 %379 = OpLoad %378 
                                Private f32* %380 = OpAccessChain %131 %50 
                                         f32 %381 = OpLoad %380 
                                         f32 %382 = OpFMul %379 %381 
                                Private f32* %383 = OpAccessChain %131 %50 
                                                      OpStore %383 %382 
                                         f32 %384 = OpLoad %318 
                                Private f32* %385 = OpAccessChain %131 %50 
                                         f32 %386 = OpLoad %385 
                                         f32 %387 = OpFMul %384 %386 
                                                      OpStore %318 %387 
                                Private f32* %388 = OpAccessChain %177 %50 
                                         f32 %389 = OpLoad %388 
                                         f32 %390 = OpLoad %318 
                                         f32 %391 = OpFMul %389 %390 
                                         f32 %392 = OpFAdd %391 %55 
                                                      OpStore %318 %392 
                                Private f32* %394 = OpAccessChain %101 %50 
                                         f32 %395 = OpLoad %394 
                                         f32 %396 = OpLoad %318 
                                         f32 %397 = OpFMul %395 %396 
                                                      OpStore %393 %397 
                                         f32 %398 = OpLoad %393 
                                         f32 %399 = OpExtInst %1 37 %398 %55 
                                                      OpStore %393 %399 
                                         f32 %400 = OpLoad %276 
                                         f32 %401 = OpLoad %393 
                                         f32 %402 = OpFMul %400 %401 
                                                      OpStore %393 %402 
                                         f32 %404 = OpLoad %393 
                                         f32 %405 = OpFMul %404 %334 
                                         f32 %406 = OpFAdd %405 %334 
                                                      OpStore %403 %406 
                                         f32 %407 = OpLoad %403 
                                Private f32* %408 = OpAccessChain %131 %50 
                                                      OpStore %408 %407 
                                Uniform f32* %409 = OpAccessChain %144 %49 
                                         f32 %410 = OpLoad %409 
                                Uniform f32* %411 = OpAccessChain %144 %49 
                                         f32 %412 = OpLoad %411 
                                       f32_2 %413 = OpCompositeConstruct %410 %412 
                                         f32 %414 = OpCompositeExtract %413 0 
                                         f32 %415 = OpCompositeExtract %413 1 
                                       f32_2 %416 = OpCompositeConstruct %414 %415 
                                       f32_4 %417 = OpLoad %131 
                                       f32_4 %418 = OpVectorShuffle %417 %416 0 4 2 5 
                                                      OpStore %131 %418 
                         read_only Texture2D %421 = OpLoad %420 
                                     sampler %423 = OpLoad %422 
                  read_only Texture2DSampled %424 = OpSampledImage %421 %423 
                                       f32_4 %425 = OpLoad %131 
                                       f32_2 %426 = OpVectorShuffle %425 %425 0 1 
                                       f32_4 %427 = OpImageSampleImplicitLod %424 %426 
                                       f32_3 %428 = OpVectorShuffle %427 %427 0 1 2 
                                                      OpStore %419 %428 
                                       f32_3 %430 = OpLoad %419 
                                Uniform f32* %432 = OpAccessChain %144 %431 
                                         f32 %433 = OpLoad %432 
                                Uniform f32* %434 = OpAccessChain %144 %431 
                                         f32 %435 = OpLoad %434 
                                Uniform f32* %436 = OpAccessChain %144 %431 
                                         f32 %437 = OpLoad %436 
                                       f32_3 %438 = OpCompositeConstruct %433 %435 %437 
                                         f32 %439 = OpCompositeExtract %438 0 
                                         f32 %440 = OpCompositeExtract %438 1 
                                         f32 %441 = OpCompositeExtract %438 2 
                                       f32_3 %442 = OpCompositeConstruct %439 %440 %441 
                                       f32_3 %443 = OpFMul %430 %442 
                                                      OpStore %429 %443 
                                Private f32* %444 = OpAccessChain %42 %50 
                                         f32 %445 = OpLoad %444 
                                Private f32* %446 = OpAccessChain %131 %50 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpExtInst %1 37 %445 %447 
                                Private f32* %449 = OpAccessChain %101 %50 
                                                      OpStore %449 %448 
                                       f32_3 %451 = OpLoad %241 
                                       f32_3 %452 = OpLoad %429 
                                       f32_3 %453 = OpFMul %451 %452 
                                                      OpStore %450 %453 
                                       f32_3 %454 = OpLoad %450 
                              Uniform f32_4* %455 = OpAccessChain %116 %145 
                                       f32_4 %456 = OpLoad %455 
                                       f32_3 %457 = OpVectorShuffle %456 %456 0 1 2 
                                       f32_3 %458 = OpFMul %454 %457 
                                                      OpStore %429 %458 
                                       f32_3 %459 = OpLoad %429 
                                       f32_3 %460 = OpLoad %101 
                                       f32_3 %461 = OpVectorShuffle %460 %460 0 0 0 
                                       f32_3 %462 = OpFMul %459 %461 
                                       f32_3 %463 = OpLoad %223 
                                       f32_3 %464 = OpFAdd %462 %463 
                                                      OpStore %429 %464 
                                Uniform f32* %465 = OpAccessChain %116 %225 %50 
                                         f32 %466 = OpLoad %465 
                                Uniform f32* %473 = OpAccessChain %472 %431 %194 
                                         f32 %474 = OpLoad %473 
                                         f32 %475 = OpExtInst %1 37 %466 %474 
                                                      OpStore %393 %475 
                                         f32 %478 = OpLoad %393 
                                         i32 %479 = OpConvertFToS %478 
                                                      OpStore %477 %479 
                                       f32_3 %480 = OpLoad %429 
                                                      OpStore %450 %480 
                                                      OpStore %482 %50 
                                                      OpBranch %483 
                                             %483 = OpLabel 
                                                      OpLoopMerge %485 %486 None 
                                                      OpBranch %487 
                                             %487 = OpLabel 
                                         u32 %488 = OpLoad %482 
                                         i32 %489 = OpLoad %477 
                                         u32 %490 = OpBitcast %489 
                                        bool %491 = OpULessThan %488 %490 
                                                      OpBranchConditional %491 %484 %485 
                                             %484 = OpLabel 
                                         u32 %493 = OpLoad %482 
                                         u32 %495 = OpBitwiseAnd %493 %494 
                                         i32 %496 = OpBitcast %495 
                                                      OpStore %492 %496 
                                         u32 %499 = OpLoad %482 
                                         u32 %500 = OpShiftRightLogical %499 %17 
                                                      OpStore %498 %500 
                                         u32 %502 = OpLoad %498 
                                         i32 %503 = OpBitcast %502 
                              Uniform f32_4* %504 = OpAccessChain %472 %501 %503 
                                       f32_4 %505 = OpLoad %504 
                                         i32 %514 = OpLoad %492 
                                                      OpStore %516 %513 
                             Function u32_4* %518 = OpAccessChain %516 %514 
                                       u32_4 %519 = OpLoad %518 
                                       f32_4 %520 = OpBitcast %519 
                                         f32 %521 = OpDot %505 %520 
                                                      OpStore %393 %521 
                                         f32 %522 = OpLoad %393 
                                         i32 %523 = OpConvertFToS %522 
                                                      OpStore %492 %523 
                                       f32_3 %526 = OpLoad vs_TEXCOORD5 
                                       f32_3 %527 = OpFNegate %526 
                                         i32 %537 = OpLoad %492 
                              Uniform f32_4* %538 = OpAccessChain %536 %117 %537 
                                       f32_4 %539 = OpLoad %538 
                                       f32_3 %540 = OpVectorShuffle %539 %539 3 3 3 
                                       f32_3 %541 = OpFMul %527 %540 
                                         i32 %542 = OpLoad %492 
                              Uniform f32_4* %543 = OpAccessChain %536 %117 %542 
                                       f32_4 %544 = OpLoad %543 
                                       f32_3 %545 = OpVectorShuffle %544 %544 0 1 2 
                                       f32_3 %546 = OpFAdd %541 %545 
                                                      OpStore %524 %546 
                                       f32_3 %548 = OpLoad %524 
                                       f32_3 %549 = OpLoad %524 
                                         f32 %550 = OpDot %548 %549 
                                                      OpStore %547 %550 
                                         f32 %551 = OpLoad %547 
                                         f32 %553 = OpExtInst %1 40 %551 %552 
                                                      OpStore %547 %553 
                                         f32 %555 = OpLoad %547 
                                         f32 %556 = OpExtInst %1 32 %555 
                                                      OpStore %554 %556 
                                         f32 %557 = OpLoad %554 
                                       f32_3 %558 = OpCompositeConstruct %557 %557 %557 
                                       f32_3 %559 = OpLoad %524 
                                       f32_3 %560 = OpFMul %558 %559 
                                                      OpStore %524 %560 
                                         f32 %561 = OpLoad %547 
                                         f32 %562 = OpFDiv %55 %561 
                                                      OpStore %554 %562 
                                         f32 %563 = OpLoad %547 
                                         i32 %564 = OpLoad %492 
                                Uniform f32* %565 = OpAccessChain %536 %225 %564 %50 
                                         f32 %566 = OpLoad %565 
                                         f32 %567 = OpFMul %563 %566 
                                         i32 %568 = OpLoad %492 
                                Uniform f32* %569 = OpAccessChain %536 %225 %568 %194 
                                         f32 %570 = OpLoad %569 
                                         f32 %571 = OpFAdd %567 %570 
                                                      OpStore %547 %571 
                                         f32 %572 = OpLoad %547 
                                         f32 %573 = OpExtInst %1 43 %572 %38 %55 
                                                      OpStore %547 %573 
                                         f32 %574 = OpLoad %547 
                                         f32 %575 = OpLoad %554 
                                         f32 %576 = OpFMul %574 %575 
                                                      OpStore %547 %576 
                                         i32 %577 = OpLoad %492 
                              Uniform f32_4* %578 = OpAccessChain %536 %197 %577 
                                       f32_4 %579 = OpLoad %578 
                                       f32_3 %580 = OpVectorShuffle %579 %579 0 1 2 
                                       f32_3 %581 = OpLoad %524 
                                         f32 %582 = OpDot %580 %581 
                                                      OpStore %393 %582 
                                         f32 %583 = OpLoad %393 
                                         i32 %584 = OpLoad %492 
                                Uniform f32* %585 = OpAccessChain %536 %225 %584 %17 
                                         f32 %586 = OpLoad %585 
                                         f32 %587 = OpFMul %583 %586 
                                         i32 %588 = OpLoad %492 
                                Uniform f32* %589 = OpAccessChain %536 %225 %588 %494 
                                         f32 %590 = OpLoad %589 
                                         f32 %591 = OpFAdd %587 %590 
                                                      OpStore %393 %591 
                                         f32 %592 = OpLoad %393 
                                         f32 %593 = OpExtInst %1 43 %592 %38 %55 
                                                      OpStore %393 %593 
                                         f32 %594 = OpLoad %393 
                                         f32 %595 = OpLoad %393 
                                         f32 %596 = OpFMul %594 %595 
                                                      OpStore %393 %596 
                                         f32 %597 = OpLoad %547 
                                         f32 %598 = OpLoad %393 
                                         f32 %599 = OpFMul %597 %598 
                                                      OpStore %547 %599 
                                       f32_4 %600 = OpLoad %282 
                                       f32_3 %601 = OpVectorShuffle %600 %600 0 1 2 
                                       f32_3 %602 = OpLoad %524 
                                         f32 %603 = OpDot %601 %602 
                                                      OpStore %554 %603 
                                         f32 %604 = OpLoad %554 
                                         f32 %605 = OpExtInst %1 40 %604 %296 
                                Private f32* %606 = OpAccessChain %131 %17 
                                                      OpStore %606 %605 
                         read_only Texture2D %608 = OpLoad %420 
                                     sampler %609 = OpLoad %422 
                  read_only Texture2DSampled %610 = OpSampledImage %608 %609 
                                       f32_4 %611 = OpLoad %131 
                                       f32_2 %612 = OpVectorShuffle %611 %611 2 3 
                                       f32_4 %613 = OpImageSampleImplicitLod %610 %612 
                                       f32_3 %614 = OpVectorShuffle %613 %613 0 1 2 
                                                      OpStore %607 %614 
                                       f32_3 %615 = OpLoad %607 
                                Uniform f32* %616 = OpAccessChain %144 %431 
                                         f32 %617 = OpLoad %616 
                                Uniform f32* %618 = OpAccessChain %144 %431 
                                         f32 %619 = OpLoad %618 
                                Uniform f32* %620 = OpAccessChain %144 %431 
                                         f32 %621 = OpLoad %620 
                                       f32_3 %622 = OpCompositeConstruct %617 %619 %621 
                                         f32 %623 = OpCompositeExtract %622 0 
                                         f32 %624 = OpCompositeExtract %622 1 
                                         f32 %625 = OpCompositeExtract %622 2 
                                       f32_3 %626 = OpCompositeConstruct %623 %624 %625 
                                       f32_3 %627 = OpFMul %615 %626 
                                                      OpStore %524 %627 
                                       f32_3 %629 = OpLoad %241 
                                       f32_3 %630 = OpLoad %524 
                                       f32_3 %631 = OpFMul %629 %630 
                                                      OpStore %628 %631 
                                       f32_3 %632 = OpLoad %628 
                                         i32 %633 = OpLoad %492 
                              Uniform f32_4* %634 = OpAccessChain %536 %145 %633 
                                       f32_4 %635 = OpLoad %634 
                                       f32_3 %636 = OpVectorShuffle %635 %635 0 1 2 
                                       f32_3 %637 = OpFMul %632 %636 
                                                      OpStore %628 %637 
                                       f32_3 %638 = OpLoad %628 
                                         f32 %639 = OpLoad %547 
                                       f32_3 %640 = OpCompositeConstruct %639 %639 %639 
                                       f32_3 %641 = OpFMul %638 %640 
                                       f32_3 %642 = OpLoad %223 
                                       f32_3 %643 = OpFAdd %641 %642 
                                                      OpStore %628 %643 
                                       f32_3 %644 = OpLoad %450 
                                       f32_3 %645 = OpLoad %628 
                                       f32_3 %646 = OpFAdd %644 %645 
                                                      OpStore %450 %646 
                                                      OpBranch %486 
                                             %486 = OpLabel 
                                         u32 %647 = OpLoad %482 
                                         u32 %648 = OpIAdd %647 %145 
                                                      OpStore %482 %648 
                                                      OpBranch %483 
                                             %485 = OpLabel 
                                Private f32* %649 = OpAccessChain %89 %50 
                                         f32 %650 = OpLoad %649 
                                         f32 %651 = OpExtInst %1 32 %650 
                                Private f32* %652 = OpAccessChain %89 %50 
                                                      OpStore %652 %651 
                                       f32_4 %653 = OpLoad %89 
                                       f32_3 %654 = OpVectorShuffle %653 %653 0 0 0 
                                       f32_3 %655 = OpLoad %106 
                                       f32_3 %656 = OpFMul %654 %655 
                                       f32_4 %657 = OpLoad %89 
                                       f32_4 %658 = OpVectorShuffle %657 %656 4 5 2 6 
                                                      OpStore %89 %658 
                                       f32_4 %659 = OpLoad %282 
                                       f32_3 %660 = OpVectorShuffle %659 %659 0 1 2 
                                       f32_4 %661 = OpLoad %89 
                                       f32_3 %662 = OpVectorShuffle %661 %661 0 1 3 
                                         f32 %663 = OpDot %660 %662 
                                Private f32* %664 = OpAccessChain %106 %50 
                                                      OpStore %664 %663 
                                Private f32* %665 = OpAccessChain %106 %50 
                                         f32 %666 = OpLoad %665 
                                         f32 %667 = OpExtInst %1 43 %666 %38 %55 
                                Private f32* %668 = OpAccessChain %106 %50 
                                                      OpStore %668 %667 
                              Uniform f32_4* %669 = OpAccessChain %116 %117 
                                       f32_4 %670 = OpLoad %669 
                                       f32_3 %671 = OpVectorShuffle %670 %670 0 1 2 
                                       f32_4 %672 = OpLoad %89 
                                       f32_3 %673 = OpVectorShuffle %672 %672 0 1 3 
                                         f32 %674 = OpDot %671 %673 
                                Private f32* %675 = OpAccessChain %89 %50 
                                                      OpStore %675 %674 
                                Private f32* %676 = OpAccessChain %89 %50 
                                         f32 %677 = OpLoad %676 
                                         f32 %678 = OpExtInst %1 43 %677 %38 %55 
                                Private f32* %679 = OpAccessChain %89 %50 
                                                      OpStore %679 %678 
                                Private f32* %680 = OpAccessChain %106 %50 
                                         f32 %681 = OpLoad %680 
                                Private f32* %682 = OpAccessChain %106 %50 
                                         f32 %683 = OpLoad %682 
                                         f32 %684 = OpFMul %681 %683 
                                Private f32* %685 = OpAccessChain %101 %50 
                                                      OpStore %685 %684 
                                Private f32* %686 = OpAccessChain %202 %50 
                                         f32 %687 = OpLoad %686 
                                Private f32* %688 = OpAccessChain %202 %50 
                                         f32 %689 = OpLoad %688 
                                         f32 %690 = OpFMul %687 %689 
                                                      OpStore %393 %690 
                                Private f32* %692 = OpAccessChain %202 %50 
                                         f32 %693 = OpLoad %692 
                                Private f32* %694 = OpAccessChain %202 %50 
                                         f32 %695 = OpLoad %694 
                                         f32 %696 = OpFMul %693 %695 
                                         f32 %697 = OpFAdd %696 %182 
                                                      OpStore %691 %697 
                                Private f32* %698 = OpAccessChain %101 %50 
                                         f32 %699 = OpLoad %698 
                                         f32 %700 = OpLoad %691 
                                         f32 %701 = OpFMul %699 %700 
                                         f32 %703 = OpFAdd %701 %702 
                                Private f32* %704 = OpAccessChain %101 %50 
                                                      OpStore %704 %703 
                                Private f32* %705 = OpAccessChain %89 %50 
                                         f32 %706 = OpLoad %705 
                                Private f32* %707 = OpAccessChain %89 %50 
                                         f32 %708 = OpLoad %707 
                                         f32 %709 = OpFMul %706 %708 
                                                      OpStore %691 %709 
                                Private f32* %710 = OpAccessChain %101 %50 
                                         f32 %711 = OpLoad %710 
                                Private f32* %712 = OpAccessChain %101 %50 
                                         f32 %713 = OpLoad %712 
                                         f32 %714 = OpFMul %711 %713 
                                Private f32* %715 = OpAccessChain %89 %50 
                                                      OpStore %715 %714 
                                         f32 %716 = OpLoad %691 
                                         f32 %718 = OpExtInst %1 40 %716 %717 
                                Private f32* %719 = OpAccessChain %101 %50 
                                                      OpStore %719 %718 
                                Private f32* %720 = OpAccessChain %101 %50 
                                         f32 %721 = OpLoad %720 
                                Private f32* %722 = OpAccessChain %89 %50 
                                         f32 %723 = OpLoad %722 
                                         f32 %724 = OpFMul %721 %723 
                                Private f32* %725 = OpAccessChain %89 %50 
                                                      OpStore %725 %724 
                                Private f32* %726 = OpAccessChain %202 %50 
                                         f32 %727 = OpLoad %726 
                                         f32 %729 = OpFMul %727 %728 
                                         f32 %730 = OpFAdd %729 %179 
                                                      OpStore %691 %730 
                                Private f32* %731 = OpAccessChain %89 %50 
                                         f32 %732 = OpLoad %731 
                                         f32 %733 = OpLoad %691 
                                         f32 %734 = OpFMul %732 %733 
                                Private f32* %735 = OpAccessChain %89 %50 
                                                      OpStore %735 %734 
                                         f32 %736 = OpLoad %393 
                                Private f32* %737 = OpAccessChain %89 %50 
                                         f32 %738 = OpLoad %737 
                                         f32 %739 = OpFDiv %736 %738 
                                Private f32* %740 = OpAccessChain %89 %50 
                                                      OpStore %740 %739 
                                       f32_3 %741 = OpLoad %218 
                                       f32_4 %742 = OpLoad %89 
                                       f32_3 %743 = OpVectorShuffle %742 %742 0 0 0 
                                       f32_3 %744 = OpFMul %741 %743 
                                       f32_4 %745 = OpLoad %89 
                                       f32_4 %746 = OpVectorShuffle %745 %744 4 5 2 6 
                                                      OpStore %89 %746 
                                       f32_4 %747 = OpLoad %89 
                                       f32_3 %748 = OpVectorShuffle %747 %747 0 1 3 
                                       f32_3 %751 = OpFMul %748 %750 
                                                      OpStore %628 %751 
                                       f32_3 %752 = OpLoad %628 
                              Uniform f32_4* %753 = OpAccessChain %116 %145 
                                       f32_4 %754 = OpLoad %753 
                                       f32_3 %755 = OpVectorShuffle %754 %754 0 1 2 
                                       f32_3 %756 = OpFMul %752 %755 
                                                      OpStore %106 %756 
                                       f32_3 %757 = OpLoad %106 
                                       f32_3 %758 = OpLoad %138 
                                       f32_3 %759 = OpVectorShuffle %758 %758 0 0 0 
                                       f32_3 %760 = OpFMul %757 %759 
                                       f32_3 %761 = OpLoad %450 
                                       f32_3 %762 = OpFAdd %760 %761 
                                                      OpStore %450 %762 
                                Private f32* %763 = OpAccessChain %282 %494 
                                                      OpStore %763 %55 
                              Uniform f32_4* %764 = OpAccessChain %472 %49 
                                       f32_4 %765 = OpLoad %764 
                                       f32_4 %766 = OpLoad %282 
                                         f32 %767 = OpDot %765 %766 
                                Private f32* %768 = OpAccessChain %628 %50 
                                                      OpStore %768 %767 
                              Uniform f32_4* %770 = OpAccessChain %472 %769 
                                       f32_4 %771 = OpLoad %770 
                                       f32_4 %772 = OpLoad %282 
                                         f32 %773 = OpDot %771 %772 
                                Private f32* %774 = OpAccessChain %628 %194 
                                                      OpStore %774 %773 
                              Uniform f32_4* %776 = OpAccessChain %472 %775 
                                       f32_4 %777 = OpLoad %776 
                                       f32_4 %778 = OpLoad %282 
                                         f32 %779 = OpDot %777 %778 
                                Private f32* %780 = OpAccessChain %628 %17 
                                                      OpStore %780 %779 
                                       f32_4 %781 = OpLoad %282 
                                       f32_4 %782 = OpVectorShuffle %781 %781 1 2 2 0 
                                       f32_4 %783 = OpLoad %282 
                                       f32_4 %784 = OpVectorShuffle %783 %783 0 1 2 2 
                                       f32_4 %785 = OpFMul %782 %784 
                                                      OpStore %42 %785 
                              Uniform f32_4* %788 = OpAccessChain %472 %787 
                                       f32_4 %789 = OpLoad %788 
                                       f32_4 %790 = OpLoad %42 
                                         f32 %791 = OpDot %789 %790 
                                Private f32* %792 = OpAccessChain %786 %50 
                                                      OpStore %792 %791 
                              Uniform f32_4* %794 = OpAccessChain %472 %793 
                                       f32_4 %795 = OpLoad %794 
                                       f32_4 %796 = OpLoad %42 
                                         f32 %797 = OpDot %795 %796 
                                Private f32* %798 = OpAccessChain %786 %194 
                                                      OpStore %798 %797 
                              Uniform f32_4* %800 = OpAccessChain %472 %799 
                                       f32_4 %801 = OpLoad %800 
                                       f32_4 %802 = OpLoad %42 
                                         f32 %803 = OpDot %801 %802 
                                Private f32* %804 = OpAccessChain %786 %17 
                                                      OpStore %804 %803 
                                Private f32* %805 = OpAccessChain %282 %194 
                                         f32 %806 = OpLoad %805 
                                Private f32* %807 = OpAccessChain %282 %194 
                                         f32 %808 = OpLoad %807 
                                         f32 %809 = OpFMul %806 %808 
                                                      OpStore %393 %809 
                                Private f32* %810 = OpAccessChain %282 %50 
                                         f32 %811 = OpLoad %810 
                                Private f32* %812 = OpAccessChain %282 %50 
                                         f32 %813 = OpLoad %812 
                                         f32 %814 = OpFMul %811 %813 
                                         f32 %815 = OpLoad %393 
                                         f32 %816 = OpFNegate %815 
                                         f32 %817 = OpFAdd %814 %816 
                                                      OpStore %393 %817 
                              Uniform f32_4* %819 = OpAccessChain %472 %818 
                                       f32_4 %820 = OpLoad %819 
                                       f32_3 %821 = OpVectorShuffle %820 %820 0 1 2 
                                         f32 %822 = OpLoad %393 
                                       f32_3 %823 = OpCompositeConstruct %822 %822 %822 
                                       f32_3 %824 = OpFMul %821 %823 
                                       f32_3 %825 = OpLoad %786 
                                       f32_3 %826 = OpFAdd %824 %825 
                                                      OpStore %786 %826 
                                       f32_3 %827 = OpLoad %628 
                                       f32_3 %828 = OpLoad %786 
                                       f32_3 %829 = OpFAdd %827 %828 
                                                      OpStore %628 %829 
                                       f32_3 %830 = OpLoad %628 
                                       f32_3 %832 = OpExtInst %1 40 %830 %831 
                                                      OpStore %628 %832 
                                       f32_3 %833 = OpLoad %241 
                                       f32_3 %834 = OpLoad %628 
                                       f32_3 %835 = OpFMul %833 %834 
                                                      OpStore %241 %835 
                                Uniform f32* %836 = OpAccessChain %116 %197 %117 %50 
                                         f32 %837 = OpLoad %836 
                                Private f32* %838 = OpAccessChain %106 %50 
                                                      OpStore %838 %837 
                                Uniform f32* %839 = OpAccessChain %116 %197 %145 %50 
                                         f32 %840 = OpLoad %839 
                                Private f32* %841 = OpAccessChain %106 %194 
                                                      OpStore %841 %840 
                                Uniform f32* %842 = OpAccessChain %116 %197 %225 %50 
                                         f32 %843 = OpLoad %842 
                                Private f32* %844 = OpAccessChain %106 %17 
                                                      OpStore %844 %843 
                                       f32_3 %845 = OpLoad %106 
                                       f32_4 %846 = OpLoad %282 
                                       f32_3 %847 = OpVectorShuffle %846 %846 0 1 2 
                                         f32 %848 = OpDot %845 %847 
                                Private f32* %849 = OpAccessChain %628 %50 
                                                      OpStore %849 %848 
                                Uniform f32* %850 = OpAccessChain %116 %197 %117 %194 
                                         f32 %851 = OpLoad %850 
                                Private f32* %852 = OpAccessChain %106 %50 
                                                      OpStore %852 %851 
                                Uniform f32* %853 = OpAccessChain %116 %197 %145 %194 
                                         f32 %854 = OpLoad %853 
                                Private f32* %855 = OpAccessChain %106 %194 
                                                      OpStore %855 %854 
                                Uniform f32* %856 = OpAccessChain %116 %197 %225 %194 
                                         f32 %857 = OpLoad %856 
                                Private f32* %858 = OpAccessChain %106 %17 
                                                      OpStore %858 %857 
                                       f32_3 %859 = OpLoad %106 
                                       f32_4 %860 = OpLoad %282 
                                       f32_3 %861 = OpVectorShuffle %860 %860 0 1 2 
                                         f32 %862 = OpDot %859 %861 
                                Private f32* %863 = OpAccessChain %628 %194 
                                                      OpStore %863 %862 
                                       f32_3 %864 = OpLoad %628 
                                       f32_2 %865 = OpVectorShuffle %864 %864 0 1 
                                       f32_2 %867 = OpFMul %865 %866 
                                       f32_2 %868 = OpFAdd %867 %866 
                                       f32_3 %869 = OpLoad %628 
                                       f32_3 %870 = OpVectorShuffle %869 %868 3 4 2 
                                                      OpStore %628 %870 
                                Private f32* %871 = OpAccessChain %202 %50 
                                         f32 %872 = OpLoad %871 
                                         f32 %873 = OpFNegate %872 
                                         f32 %875 = OpFMul %873 %874 
                                         f32 %877 = OpFAdd %875 %876 
                                                      OpStore %393 %877 
                                Private f32* %878 = OpAccessChain %202 %50 
                                         f32 %879 = OpLoad %878 
                                         f32 %880 = OpLoad %393 
                                         f32 %881 = OpFMul %879 %880 
                                Private f32* %882 = OpAccessChain %202 %50 
                                                      OpStore %882 %881 
                                Private f32* %883 = OpAccessChain %202 %50 
                                         f32 %884 = OpLoad %883 
                                         f32 %886 = OpFMul %884 %885 
                                                      OpStore %393 %886 
                         read_only Texture2D %889 = OpLoad %888 
                                     sampler %891 = OpLoad %890 
                  read_only Texture2DSampled %892 = OpSampledImage %889 %891 
                                       f32_3 %893 = OpLoad %628 
                                       f32_2 %894 = OpVectorShuffle %893 %893 0 1 
                                         f32 %895 = OpLoad %393 
                                       f32_4 %896 = OpImageSampleExplicitLod %892 %894 Lod %10 
                                       f32_3 %897 = OpVectorShuffle %896 %896 0 1 2 
                                                      OpStore %887 %897 
                                Private f32* %898 = OpAccessChain %202 %50 
                                         f32 %899 = OpLoad %898 
                                Private f32* %900 = OpAccessChain %202 %50 
                                         f32 %901 = OpLoad %900 
                                         f32 %902 = OpFMul %899 %901 
                                         f32 %903 = OpFAdd %902 %55 
                                Private f32* %904 = OpAccessChain %131 %50 
                                                      OpStore %904 %903 
                                Private f32* %905 = OpAccessChain %131 %50 
                                         f32 %906 = OpLoad %905 
                                         f32 %907 = OpFDiv %55 %906 
                                Private f32* %908 = OpAccessChain %131 %50 
                                                      OpStore %908 %907 
                                Private f32* %909 = OpAccessChain %89 %194 
                                         f32 %910 = OpLoad %909 
                                Private f32* %911 = OpAccessChain %89 %50 
                                         f32 %912 = OpLoad %911 
                                         f32 %913 = OpExtInst %1 40 %910 %912 
                                Private f32* %914 = OpAccessChain %89 %50 
                                                      OpStore %914 %913 
                                Private f32* %915 = OpAccessChain %89 %494 
                                         f32 %916 = OpLoad %915 
                                Private f32* %917 = OpAccessChain %89 %50 
                                         f32 %918 = OpLoad %917 
                                         f32 %919 = OpExtInst %1 40 %916 %918 
                                Private f32* %920 = OpAccessChain %89 %50 
                                                      OpStore %920 %919 
                                         f32 %921 = OpLoad %127 
                                Private f32* %922 = OpAccessChain %89 %50 
                                         f32 %923 = OpLoad %922 
                                         f32 %924 = OpFAdd %921 %923 
                                Private f32* %925 = OpAccessChain %89 %50 
                                                      OpStore %925 %924 
                                Private f32* %926 = OpAccessChain %89 %50 
                                         f32 %927 = OpLoad %926 
                                         f32 %928 = OpExtInst %1 43 %927 %38 %55 
                                Private f32* %929 = OpAccessChain %89 %50 
                                                      OpStore %929 %928 
                                Private f32* %930 = OpAccessChain %89 %17 
                                         f32 %931 = OpLoad %930 
                                         f32 %932 = OpFNegate %931 
                                         f32 %933 = OpFAdd %932 %55 
                                Private f32* %934 = OpAccessChain %101 %50 
                                                      OpStore %934 %933 
                                Private f32* %935 = OpAccessChain %101 %50 
                                         f32 %936 = OpLoad %935 
                                         f32 %937 = OpExtInst %1 40 %936 %38 
                                Private f32* %938 = OpAccessChain %101 %50 
                                                      OpStore %938 %937 
                                Private f32* %940 = OpAccessChain %101 %50 
                                         f32 %941 = OpLoad %940 
                                Private f32* %942 = OpAccessChain %101 %50 
                                         f32 %943 = OpLoad %942 
                                         f32 %944 = OpFMul %941 %943 
                                                      OpStore %939 %944 
                                         f32 %945 = OpLoad %939 
                                         f32 %946 = OpLoad %939 
                                         f32 %947 = OpFMul %945 %946 
                                                      OpStore %939 %947 
                                Private f32* %948 = OpAccessChain %101 %50 
                                         f32 %949 = OpLoad %948 
                                         f32 %950 = OpLoad %939 
                                         f32 %951 = OpFMul %949 %950 
                                Private f32* %952 = OpAccessChain %101 %50 
                                                      OpStore %952 %951 
                                       f32_3 %953 = OpLoad %218 
                                       f32_3 %954 = OpFNegate %953 
                                       f32_4 %955 = OpLoad %89 
                                       f32_3 %956 = OpVectorShuffle %955 %955 0 0 0 
                                       f32_3 %957 = OpFAdd %954 %956 
                                       f32_4 %958 = OpLoad %89 
                                       f32_4 %959 = OpVectorShuffle %958 %957 4 1 5 6 
                                                      OpStore %89 %959 
                                       f32_3 %960 = OpLoad %101 
                                       f32_3 %961 = OpVectorShuffle %960 %960 0 0 0 
                                       f32_4 %962 = OpLoad %89 
                                       f32_3 %963 = OpVectorShuffle %962 %962 0 2 3 
                                       f32_3 %964 = OpFMul %961 %963 
                                       f32_3 %965 = OpLoad %218 
                                       f32_3 %966 = OpFAdd %964 %965 
                                       f32_4 %967 = OpLoad %89 
                                       f32_4 %968 = OpVectorShuffle %967 %966 4 5 6 3 
                                                      OpStore %89 %968 
                                       f32_4 %969 = OpLoad %131 
                                       f32_3 %970 = OpVectorShuffle %969 %969 0 0 0 
                                       f32_4 %971 = OpLoad %89 
                                       f32_3 %972 = OpVectorShuffle %971 %971 0 1 2 
                                       f32_3 %973 = OpFMul %970 %972 
                                       f32_4 %974 = OpLoad %89 
                                       f32_4 %975 = OpVectorShuffle %974 %973 4 5 6 3 
                                                      OpStore %89 %975 
                                       f32_4 %976 = OpLoad %185 
                                       f32_3 %977 = OpVectorShuffle %976 %976 3 3 3 
                                       f32_3 %978 = OpLoad %887 
                                       f32_3 %979 = OpFMul %977 %978 
                                                      OpStore %202 %979 
                                       f32_4 %980 = OpLoad %89 
                                       f32_3 %981 = OpVectorShuffle %980 %980 0 1 2 
                                       f32_3 %982 = OpLoad %202 
                                       f32_3 %983 = OpFMul %981 %982 
                                       f32_4 %984 = OpLoad %89 
                                       f32_4 %985 = OpVectorShuffle %984 %983 4 5 6 3 
                                                      OpStore %89 %985 
                                       f32_3 %986 = OpLoad %241 
                                Uniform f32* %987 = OpAccessChain %144 %117 
                                         f32 %988 = OpLoad %987 
                                       f32_3 %989 = OpCompositeConstruct %988 %988 %988 
                                       f32_3 %990 = OpFMul %986 %989 
                                       f32_4 %991 = OpLoad %89 
                                       f32_3 %992 = OpVectorShuffle %991 %991 0 1 2 
                                       f32_3 %993 = OpFAdd %990 %992 
                                                      OpStore %202 %993 
                              Uniform f32_4* %994 = OpAccessChain %116 %431 %145 
                                       f32_4 %995 = OpLoad %994 
                                       f32_3 %996 = OpVectorShuffle %995 %995 0 1 2 
                              Uniform f32_3* %998 = OpAccessChain %144 %501 
                                       f32_3 %999 = OpLoad %998 
                                      f32_3 %1000 = OpVectorShuffle %999 %999 1 1 1 
                                      f32_3 %1001 = OpFMul %996 %1000 
                                      f32_4 %1002 = OpLoad %89 
                                      f32_4 %1003 = OpVectorShuffle %1002 %1001 4 5 6 3 
                                                      OpStore %89 %1003 
                             Uniform f32_4* %1004 = OpAccessChain %116 %431 %117 
                                      f32_4 %1005 = OpLoad %1004 
                                      f32_3 %1006 = OpVectorShuffle %1005 %1005 0 1 2 
                             Uniform f32_3* %1007 = OpAccessChain %144 %501 
                                      f32_3 %1008 = OpLoad %1007 
                                      f32_3 %1009 = OpVectorShuffle %1008 %1008 0 0 0 
                                      f32_3 %1010 = OpFMul %1006 %1009 
                                      f32_4 %1011 = OpLoad %89 
                                      f32_3 %1012 = OpVectorShuffle %1011 %1011 0 1 2 
                                      f32_3 %1013 = OpFAdd %1010 %1012 
                                      f32_4 %1014 = OpLoad %89 
                                      f32_4 %1015 = OpVectorShuffle %1014 %1013 4 5 6 3 
                                                      OpStore %89 %1015 
                             Uniform f32_4* %1016 = OpAccessChain %116 %431 %225 
                                      f32_4 %1017 = OpLoad %1016 
                                      f32_3 %1018 = OpVectorShuffle %1017 %1017 0 1 2 
                             Uniform f32_3* %1019 = OpAccessChain %144 %501 
                                      f32_3 %1020 = OpLoad %1019 
                                      f32_3 %1021 = OpVectorShuffle %1020 %1020 2 2 2 
                                      f32_3 %1022 = OpFMul %1018 %1021 
                                      f32_4 %1023 = OpLoad %89 
                                      f32_3 %1024 = OpVectorShuffle %1023 %1023 0 1 2 
                                      f32_3 %1025 = OpFAdd %1022 %1024 
                                      f32_4 %1026 = OpLoad %89 
                                      f32_4 %1027 = OpVectorShuffle %1026 %1025 4 5 6 3 
                                                      OpStore %89 %1027 
                                      f32_4 %1028 = OpLoad %89 
                                      f32_3 %1029 = OpVectorShuffle %1028 %1028 0 1 2 
                                      f32_4 %1030 = OpLoad %89 
                                      f32_3 %1031 = OpVectorShuffle %1030 %1030 0 1 2 
                                        f32 %1032 = OpDot %1029 %1031 
                                                      OpStore %318 %1032 
                                        f32 %1033 = OpLoad %318 
                                        f32 %1034 = OpExtInst %1 32 %1033 
                                                      OpStore %318 %1034 
                                        f32 %1035 = OpLoad %318 
                                      f32_3 %1036 = OpCompositeConstruct %1035 %1035 %1035 
                                      f32_4 %1037 = OpLoad %89 
                                      f32_3 %1038 = OpVectorShuffle %1037 %1037 0 1 2 
                                      f32_3 %1039 = OpFMul %1036 %1038 
                                      f32_4 %1040 = OpLoad %89 
                                      f32_4 %1041 = OpVectorShuffle %1040 %1039 4 5 6 3 
                                                      OpStore %89 %1041 
                                      f32_4 %1042 = OpLoad %282 
                                      f32_3 %1043 = OpVectorShuffle %1042 %1042 0 1 2 
                                      f32_4 %1044 = OpLoad %89 
                                      f32_3 %1045 = OpVectorShuffle %1044 %1044 0 1 2 
                                        f32 %1046 = OpDot %1043 %1045 
                               Private f32* %1047 = OpAccessChain %89 %50 
                                                      OpStore %1047 %1046 
                               Private f32* %1048 = OpAccessChain %89 %50 
                                        f32 %1049 = OpLoad %1048 
                                        f32 %1050 = OpFMul %1049 %334 
                                        f32 %1051 = OpFAdd %1050 %334 
                               Private f32* %1052 = OpAccessChain %89 %50 
                                                      OpStore %1052 %1051 
                               Private f32* %1053 = OpAccessChain %89 %50 
                                        f32 %1054 = OpLoad %1053 
                               Private f32* %1055 = OpAccessChain %185 %494 
                                        f32 %1056 = OpLoad %1055 
                                        f32 %1057 = OpFMul %1054 %1056 
                               Uniform f32* %1059 = OpAccessChain %144 %1058 
                                        f32 %1060 = OpLoad %1059 
                                        f32 %1061 = OpFNegate %1060 
                                        f32 %1062 = OpFAdd %1057 %1061 
                               Private f32* %1063 = OpAccessChain %89 %50 
                                                      OpStore %1063 %1062 
                               Private f32* %1064 = OpAccessChain %89 %50 
                                        f32 %1065 = OpLoad %1064 
                               Uniform f32* %1067 = OpAccessChain %144 %1066 
                                        f32 %1068 = OpLoad %1067 
                                        f32 %1069 = OpFMul %1065 %1068 
                               Private f32* %1070 = OpAccessChain %89 %50 
                                                      OpStore %1070 %1069 
                               Private f32* %1071 = OpAccessChain %89 %50 
                                        f32 %1072 = OpLoad %1071 
                                        f32 %1073 = OpExtInst %1 43 %1072 %38 %55 
                               Private f32* %1074 = OpAccessChain %89 %50 
                                                      OpStore %1074 %1073 
                                      f32_4 %1075 = OpLoad %89 
                                      f32_3 %1076 = OpVectorShuffle %1075 %1075 0 0 0 
                             Uniform f32_4* %1078 = OpAccessChain %144 %1077 
                                      f32_4 %1079 = OpLoad %1078 
                                      f32_3 %1080 = OpVectorShuffle %1079 %1079 0 1 2 
                                      f32_3 %1081 = OpFMul %1076 %1080 
                                                      OpStore %241 %1081 
                                      f32_3 %1082 = OpLoad %241 
                               Uniform f32* %1084 = OpAccessChain %144 %1083 
                                        f32 %1085 = OpLoad %1084 
                               Uniform f32* %1086 = OpAccessChain %144 %1083 
                                        f32 %1087 = OpLoad %1086 
                               Uniform f32* %1088 = OpAccessChain %144 %1083 
                                        f32 %1089 = OpLoad %1088 
                                      f32_3 %1090 = OpCompositeConstruct %1085 %1087 %1089 
                                        f32 %1091 = OpCompositeExtract %1090 0 
                                        f32 %1092 = OpCompositeExtract %1090 1 
                                        f32 %1093 = OpCompositeExtract %1090 2 
                                      f32_3 %1094 = OpCompositeConstruct %1091 %1092 %1093 
                                      f32_3 %1095 = OpFMul %1082 %1094 
                                      f32_4 %1096 = OpLoad %89 
                                      f32_4 %1097 = OpVectorShuffle %1096 %1095 4 5 6 3 
                                                      OpStore %89 %1097 
                                      f32_3 %1098 = OpLoad %138 
                                      f32_3 %1099 = OpVectorShuffle %1098 %1098 0 0 0 
                                      f32_4 %1100 = OpLoad %89 
                                      f32_3 %1101 = OpVectorShuffle %1100 %1100 0 1 2 
                                      f32_3 %1102 = OpFMul %1099 %1101 
                                                      OpStore %106 %1102 
                                      f32_3 %1103 = OpLoad %106 
                                      f32_3 %1105 = OpFMul %1103 %1104 
                                                      OpStore %106 %1105 
                                      f32_4 %1106 = OpLoad %89 
                                      f32_3 %1107 = OpVectorShuffle %1106 %1106 0 1 2 
                                      f32_3 %1110 = OpFMul %1107 %1109 
                                      f32_3 %1111 = OpLoad %106 
                                      f32_3 %1112 = OpFAdd %1110 %1111 
                                      f32_4 %1113 = OpLoad %89 
                                      f32_4 %1114 = OpVectorShuffle %1113 %1112 4 5 6 3 
                                                      OpStore %89 %1114 
                                      f32_3 %1115 = OpLoad %450 
                                      f32_3 %1116 = OpLoad %202 
                                      f32_3 %1117 = OpFAdd %1115 %1116 
                                                      OpStore %202 %1117 
                                      f32_4 %1118 = OpLoad %89 
                                      f32_3 %1119 = OpVectorShuffle %1118 %1118 0 1 2 
                                      f32_3 %1120 = OpLoad %202 
                                      f32_3 %1121 = OpFAdd %1119 %1120 
                                                      OpStore %202 %1121 
                                      f32_3 %1122 = OpLoad %202 
                                      f32_3 %1123 = OpExtInst %1 40 %1122 %831 
                                                      OpStore %202 %1123 
                                      f32_3 %1124 = OpLoad %202 
                                      f32_3 %1125 = OpExtInst %1 30 %1124 
                                                      OpStore %202 %1125 
                                      f32_3 %1126 = OpLoad %202 
                                      f32_3 %1129 = OpFMul %1126 %1128 
                                                      OpStore %202 %1129 
                                      f32_3 %1130 = OpLoad %202 
                                      f32_3 %1131 = OpExtInst %1 29 %1130 
                                                      OpStore %202 %1131 
                                      f32_3 %1134 = OpLoad %202 
                                      f32_3 %1135 = OpExtInst %1 31 %1134 
                                      f32_4 %1136 = OpLoad %1133 
                                      f32_4 %1137 = OpVectorShuffle %1136 %1135 4 5 6 3 
                                                      OpStore %1133 %1137 
                                Output f32* %1139 = OpAccessChain %1133 %494 
                                                      OpStore %1139 %55 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec3 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
bvec4 u_xlatb1;
vec3 u_xlat2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
float u_xlat15;
int u_xlati15;
uint u_xlatu15;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = max(u_xlat15, 1.17549435e-38);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    vs_TEXCOORD3.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD4.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat1.z = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat0.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat1.w = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = lessThan(u_xlat1, _CascadeShadowSplitSphereRadii);
    u_xlat16_4.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_4.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_4.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.x = (u_xlatb1.x) ? float(1.0) : float(0.0);
    u_xlat16_1.y = (u_xlatb1.y) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb1.z) ? float(1.0) : float(0.0);
    u_xlat16_1.w = (u_xlatb1.w) ? float(1.0) : float(0.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_1.yzw;
    u_xlat16_1.yzw = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.x = dot(u_xlat16_1, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_4.x = (-u_xlat16_4.x) + 4.0;
    u_xlatu15 = uint(u_xlat16_4.x);
    u_xlati15 = int(int(u_xlatu15) << 2);
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati15 + 1)];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati15] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati15 + 2)] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD7 = u_xlat1 + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati15 + 3)];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[32];
uniform 	mediump vec4 _AdditionalLightsColor[32];
uniform 	mediump vec4 _AdditionalLightsAttenuation[32];
uniform 	mediump vec4 _AdditionalLightsSpotDir[32];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _Expond;
	UNITY_UNIFORM vec4 _MainTex_ST;
	UNITY_UNIFORM vec4 _Emissioncolor;
	UNITY_UNIFORM float _Roughness;
	UNITY_UNIFORM float _sss;
	UNITY_UNIFORM vec3 _rimlightdir;
	UNITY_UNIFORM vec4 _rimcolor;
	UNITY_UNIFORM float _rimhardness;
	UNITY_UNIFORM float _rimthreshold;
	UNITY_UNIFORM float _rimintensity;
	UNITY_UNIFORM float _Curvemn;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(3) uniform mediump sampler2D _Normal;
UNITY_LOCATION(4) uniform mediump sampler2D _MREA;
UNITY_LOCATION(5) uniform mediump sampler2D _SSSLUT;
UNITY_LOCATION(6) uniform mediump sampler2D _reflectmap;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump float u_xlat16_3;
int u_xlati3;
bool u_xlatb3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
vec4 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
mediump vec3 u_xlat16_13;
mediump vec3 u_xlat16_14;
vec3 u_xlat15;
int u_xlati15;
bool u_xlatb15;
mediump vec3 u_xlat16_16;
float u_xlat18;
uint u_xlatu18;
float u_xlat19;
mediump vec3 u_xlat16_22;
float u_xlat30;
float u_xlat45;
uint u_xlatu45;
float u_xlat47;
float u_xlat48;
mediump float u_xlat16_54;
mediump float u_xlat16_56;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_0 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_1.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_1.x = u_xlat16_0 * _MainLightShadowParams.x + u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0>=vs_TEXCOORD7.z);
#else
    u_xlatb0 = 0.0>=vs_TEXCOORD7.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vs_TEXCOORD7.z>=1.0);
#else
    u_xlatb15 = vs_TEXCOORD7.z>=1.0;
#endif
    u_xlatb0 = u_xlatb15 || u_xlatb0;
    u_xlat16_1.x = (u_xlatb0) ? 1.0 : u_xlat16_1.x;
    u_xlat0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat15.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat2.xyz = vs_TEXCOORD2.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat47 = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = vec3(u_xlat47) * u_xlat2.xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat4.xy).xyz;
    u_xlat16_6.xyz = texture(_Normal, u_xlat4.xy).xyz;
    u_xlat16_16.xyz = u_xlat16_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4 = texture(_MREA, u_xlat4.xy);
    u_xlat47 = u_xlat16_4.y + (-_Roughness);
    u_xlat16_7.x = (-u_xlat47) + 1.0;
    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
    u_xlat16_7.x = max(u_xlat16_7.x, 0.00200000009);
    u_xlat16_22.xyz = u_xlat16_5.xyz * u_xlat16_4.zzz;
    u_xlat8.xyz = u_xlat16_22.xyz * _Emissioncolor.xyz;
    u_xlat16_22.xyz = u_xlat16_5.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_22.xyz = u_xlat16_4.xxx * u_xlat16_22.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_9.x = u_xlat16_4.x * -0.959999979 + 0.959999979;
    u_xlat16_9.xyz = u_xlat16_5.xyz * u_xlat16_9.xxx;
    u_xlat16_9.xyz = u_xlat16_4.www * u_xlat16_9.xyz;
    u_xlat4.xyz = u_xlat16_16.yyy * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = u_xlat16_16.xxx * vs_TEXCOORD3.xyz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat16_16.zzz * vs_TEXCOORD1.xyz + u_xlat4.xyz;
    u_xlat48 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat48 = inversesqrt(u_xlat48);
    u_xlat5.xyz = vec3(u_xlat48) * u_xlat4.xyz;
    u_xlat48 = dot(u_xlat5.xyz, _MainLightPosition.xyz);
    u_xlat4.x = max(u_xlat48, 9.99999975e-06);
    u_xlat0.y = dot(u_xlat5.xyz, u_xlat15.xyz);
    u_xlat0.z = dot(_MainLightPosition.xyz, u_xlat3.xyz);
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(1.17549435e-38, 9.99999975e-06, 9.99999975e-06));
    u_xlat45 = u_xlat16_7.x + u_xlat16_7.x;
    u_xlat3.x = u_xlat0.z * u_xlat0.z;
    u_xlat45 = u_xlat3.x * u_xlat45 + 0.5;
    u_xlat16_16.x = u_xlat45 + -1.0;
    u_xlat15.x = (-u_xlat0.y) + 1.0;
    u_xlat15.x = max(u_xlat15.x, 0.0);
    u_xlat45 = u_xlat15.x * u_xlat15.x;
    u_xlat45 = u_xlat45 * u_xlat45;
    u_xlat15.x = u_xlat15.x * u_xlat45;
    u_xlat15.x = u_xlat16_16.x * u_xlat15.x + 1.0;
    u_xlat45 = (-u_xlat4.x) + 1.0;
    u_xlat45 = max(u_xlat45, 0.0);
    u_xlat3.x = u_xlat45 * u_xlat45;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat45 = u_xlat45 * u_xlat3.x;
    u_xlat45 = u_xlat16_16.x * u_xlat45 + 1.0;
    u_xlat16_54 = u_xlat15.x * u_xlat45;
    u_xlat16_54 = min(u_xlat16_54, 1.0);
    u_xlat16_54 = u_xlat48 * u_xlat16_54;
    u_xlat16_3 = u_xlat16_54 * 0.5 + 0.5;
    u_xlat3.x = u_xlat16_3;
    u_xlat3.yw = vec2(vec2(_Curvemn, _Curvemn));
    u_xlat16_10.xyz = texture(_SSSLUT, u_xlat3.xy).xyz;
    u_xlat10.xyz = u_xlat16_10.xyz * vec3(vec3(_sss, _sss, _sss));
    u_xlat15.x = min(u_xlat16_1.x, u_xlat3.x);
    u_xlat16_11.xyz = u_xlat16_9.xyz * u_xlat10.xyz;
    u_xlat10.xyz = u_xlat16_11.xyz * _MainLightColor.xyz;
    u_xlat10.xyz = u_xlat10.xyz * u_xlat15.xxx + u_xlat8.xyz;
    u_xlat16_54 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlati15 = int(u_xlat16_54);
    u_xlat16_11.xyz = u_xlat10.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<uint(u_xlati15) ; u_xlatu_loop_1++)
    {
        u_xlati3 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu18 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_54 = dot(unity_LightIndices[int(u_xlatu18)], ImmCB_0[u_xlati3]);
        u_xlati3 = int(u_xlat16_54);
        u_xlat12.xyz = (-vs_TEXCOORD5.xyz) * _AdditionalLightsPosition[u_xlati3].www + _AdditionalLightsPosition[u_xlati3].xyz;
        u_xlat18 = dot(u_xlat12.xyz, u_xlat12.xyz);
        u_xlat18 = max(u_xlat18, 6.10351563e-05);
        u_xlat19 = inversesqrt(u_xlat18);
        u_xlat12.xyz = vec3(u_xlat19) * u_xlat12.xyz;
        u_xlat19 = float(1.0) / float(u_xlat18);
        u_xlat18 = u_xlat18 * _AdditionalLightsAttenuation[u_xlati3].x + _AdditionalLightsAttenuation[u_xlati3].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
        u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
        u_xlat18 = u_xlat18 * u_xlat19;
        u_xlat16_54 = dot(_AdditionalLightsSpotDir[u_xlati3].xyz, u_xlat12.xyz);
        u_xlat16_54 = u_xlat16_54 * _AdditionalLightsAttenuation[u_xlati3].z + _AdditionalLightsAttenuation[u_xlati3].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_54 = min(max(u_xlat16_54, 0.0), 1.0);
#else
        u_xlat16_54 = clamp(u_xlat16_54, 0.0, 1.0);
#endif
        u_xlat16_54 = u_xlat16_54 * u_xlat16_54;
        u_xlat18 = u_xlat18 * u_xlat16_54;
        u_xlat19 = dot(u_xlat5.xyz, u_xlat12.xyz);
        u_xlat3.z = max(u_xlat19, 9.99999975e-06);
        u_xlat16_12.xyz = texture(_SSSLUT, u_xlat3.zw).xyz;
        u_xlat12.xyz = u_xlat16_12.xyz * vec3(vec3(_sss, _sss, _sss));
        u_xlat16_13.xyz = u_xlat16_9.xyz * u_xlat12.xyz;
        u_xlat16_13.xyz = u_xlat16_13.xyz * _AdditionalLightsColor[u_xlati3].xyz;
        u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat18) + u_xlat8.xyz;
        u_xlat16_11.xyz = u_xlat16_11.xyz + u_xlat16_13.xyz;
    }
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyw = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat0.xyw);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat0.xyw);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat15.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_54 = u_xlat16_7.x * u_xlat16_7.x;
    u_xlat16_56 = u_xlat16_7.x * u_xlat16_7.x + -1.0;
    u_xlat15.x = u_xlat15.x * u_xlat16_56 + 1.00001001;
    u_xlat16_56 = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat15.x * u_xlat15.x;
    u_xlat15.x = max(u_xlat16_56, 0.100000001);
    u_xlat0.x = u_xlat15.x * u_xlat0.x;
    u_xlat16_56 = u_xlat16_7.x * 4.0 + 2.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_56;
    u_xlat0.x = u_xlat16_54 / u_xlat0.x;
    u_xlat0.xyw = u_xlat16_22.xyz * u_xlat0.xxx;
    u_xlat16_13.xyz = u_xlat0.xyw * vec3(3.14159274, 3.14159274, 3.14159274);
    u_xlat2.xyz = u_xlat16_13.xyz * _MainLightColor.xyz;
    u_xlat16_11.xyz = u_xlat2.xyz * u_xlat4.xxx + u_xlat16_11.xyz;
    u_xlat5.w = 1.0;
    u_xlat16_13.x = dot(unity_SHAr, u_xlat5);
    u_xlat16_13.y = dot(unity_SHAg, u_xlat5);
    u_xlat16_13.z = dot(unity_SHAb, u_xlat5);
    u_xlat16_1 = u_xlat5.yzzx * u_xlat5.xyzz;
    u_xlat16_14.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_14.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_14.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_54 = u_xlat5.y * u_xlat5.y;
    u_xlat16_54 = u_xlat5.x * u_xlat5.x + (-u_xlat16_54);
    u_xlat16_14.xyz = unity_SHC.xyz * vec3(u_xlat16_54) + u_xlat16_14.xyz;
    u_xlat16_13.xyz = u_xlat16_13.xyz + u_xlat16_14.xyz;
    u_xlat16_13.xyz = max(u_xlat16_13.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_13.xyz;
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].x;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat16_13.x = dot(u_xlat2.xyz, u_xlat5.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].y;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].y;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].y;
    u_xlat16_13.y = dot(u_xlat2.xyz, u_xlat5.xyz);
    u_xlat16_13.xy = u_xlat16_13.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat16_54 = (-u_xlat16_7.x) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_54;
    u_xlat16_54 = u_xlat16_7.x * 8.0;
    u_xlat16_2.xyz = textureLod(_reflectmap, u_xlat16_13.xy, u_xlat16_54).xyz;
    u_xlat3.x = u_xlat16_7.x * u_xlat16_7.x + 1.0;
    u_xlat3.x = float(1.0) / u_xlat3.x;
    u_xlat0.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat0.x = max(u_xlat0.w, u_xlat0.x);
    u_xlat0.x = u_xlat47 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat15.x = (-u_xlat0.z) + 1.0;
    u_xlat15.x = max(u_xlat15.x, 0.0);
    u_xlat30 = u_xlat15.x * u_xlat15.x;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat15.x = u_xlat15.x * u_xlat30;
    u_xlat0.xzw = (-u_xlat16_22.xyz) + u_xlat0.xxx;
    u_xlat0.xyz = u_xlat15.xxx * u_xlat0.xzw + u_xlat16_22.xyz;
    u_xlat0.xyz = u_xlat3.xxx * u_xlat0.xyz;
    u_xlat16_7.xyz = u_xlat16_4.www * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_9.xyz * vec3(_Expond) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixInvV[1].xyz * _rimlightdir.yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixInvV[0].xyz * _rimlightdir.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixInvV[2].xyz * _rimlightdir.zzz + u_xlat0.xyz;
    u_xlat45 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat45 = inversesqrt(u_xlat45);
    u_xlat0.xyz = vec3(u_xlat45) * u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat0.x = u_xlat0.x * u_xlat16_4.w + (-_rimthreshold);
    u_xlat0.x = u_xlat0.x * _rimhardness;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_9.xyz = u_xlat0.xxx * _rimcolor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_rimintensity, _rimintensity, _rimintensity));
    u_xlat2.xyz = u_xlat4.xxx * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat2.xyz;
    u_xlat16_7.xyz = u_xlat16_11.xyz + u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(2.20000005, 2.20000005, 2.20000005);
    u_xlat16_7.xyz = exp2(u_xlat16_7.xyz);
    SV_Target0.xyz = sqrt(u_xlat16_7.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "_MAIN_LIGHT_SHADOWS" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 268
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %94 %103 %105 %108 %148 %151 %161 %195 %221 %227 %230 %231 %257 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 RelaxedPrecision 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 RelaxedPrecision 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 RelaxedPrecision 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 RelaxedPrecision 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 RelaxedPrecision 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 RelaxedPrecision 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpMemberDecorate %21 16 RelaxedPrecision 
                                                      OpMemberDecorate %21 16 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpDecorate %69 ArrayStride 69 
                                                      OpMemberDecorate %70 0 Offset 70 
                                                      OpMemberDecorate %70 1 Offset 70 
                                                      OpDecorate %70 Block 
                                                      OpDecorate %72 DescriptorSet 72 
                                                      OpDecorate %72 Binding 72 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 103 
                                                      OpDecorate %105 Location 105 
                                                      OpDecorate %108 Location 108 
                                                      OpDecorate vs_TEXCOORD1 Location 148 
                                                      OpDecorate vs_TEXCOORD2 Location 151 
                                                      OpDecorate %161 Location 161 
                                                      OpDecorate vs_TEXCOORD3 Location 195 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 221 
                                                      OpDecorate vs_TEXCOORD5 Location 227 
                                                      OpDecorate vs_TEXCOORD6 Location 230 
                                                      OpDecorate %231 Location 231 
                                                      OpDecorate %236 ArrayStride 236 
                                                      OpMemberDecorate %237 0 Offset 237 
                                                      OpMemberDecorate %237 1 Offset 237 
                                                      OpMemberDecorate %237 2 Offset 237 
                                                      OpMemberDecorate %237 3 Offset 237 
                                                      OpMemberDecorate %237 4 Offset 237 
                                                      OpMemberDecorate %237 5 Offset 237 
                                                      OpMemberDecorate %237 6 RelaxedPrecision 
                                                      OpMemberDecorate %237 6 Offset 237 
                                                      OpMemberDecorate %237 7 RelaxedPrecision 
                                                      OpMemberDecorate %237 7 Offset 237 
                                                      OpMemberDecorate %237 8 RelaxedPrecision 
                                                      OpMemberDecorate %237 8 Offset 237 
                                                      OpMemberDecorate %237 9 RelaxedPrecision 
                                                      OpMemberDecorate %237 9 Offset 237 
                                                      OpMemberDecorate %237 10 RelaxedPrecision 
                                                      OpMemberDecorate %237 10 Offset 237 
                                                      OpMemberDecorate %237 11 Offset 237 
                                                      OpDecorate %237 Block 
                                                      OpDecorate %239 DescriptorSet 239 
                                                      OpDecorate %239 Binding 239 
                                                      OpDecorate vs_TEXCOORD7 Location 257 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 3 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeArray %7 %16 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypeArray %7 %19 
                                              %21 = OpTypeStruct %17 %18 %7 %7 %7 %20 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4; f32_4[2]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 0 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %45 = OpConstant 2 
                                          i32 %59 = OpConstant 3 
                               Private f32_4* %66 = OpVariable Private 
                                              %69 = OpTypeArray %7 %16 
                                              %70 = OpTypeStruct %12 %69 
                                              %71 = OpTypePointer Uniform %70 
           Uniform struct {f32_3; f32_4[4];}* %72 = OpVariable Uniform 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %99 = OpTypePointer Output %7 
                                             %101 = OpTypeVector %6 2 
                                             %102 = OpTypePointer Output %101 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %104 = OpTypePointer Input %101 
                                Input f32_2* %105 = OpVariable Input 
                                             %107 = OpTypePointer Input %12 
                                Input f32_3* %108 = OpVariable Input 
                                         u32 %114 = OpConstant 0 
                                             %115 = OpTypePointer Private %6 
                                Private f32* %129 = OpVariable Private 
                                         f32 %136 = OpConstant 3.674022E-40 
                                             %147 = OpTypePointer Output %12 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %155 = OpTypePointer Uniform %12 
                                             %159 = OpTypePointer Private %12 
                              Private f32_3* %160 = OpVariable Private 
                                Input f32_4* %161 = OpVariable Input 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                              Private f32_3* %197 = OpVariable Private 
                                         u32 %213 = OpConstant 3 
                                             %214 = OpTypePointer Input %6 
                                             %217 = OpTypePointer Uniform %6 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD5 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                Input f32_4* %231 = OpVariable Input 
                                         u32 %235 = OpConstant 20 
                                             %236 = OpTypeArray %7 %235 
                                             %237 = OpTypeStruct %236 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 
                                             %238 = OpTypePointer Uniform %237 
Uniform struct {f32_4[20]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %239 = OpVariable Uniform 
                       Output f32_4* vs_TEXCOORD7 = OpVariable Output 
                                             %262 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %11 
                                        f32_3 %14 = OpVectorShuffle %13 %13 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_3 %30 = OpVectorShuffle %29 %29 0 1 2 
                                        f32_3 %31 = OpFMul %14 %30 
                                        f32_4 %32 = OpLoad %9 
                                        f32_4 %33 = OpVectorShuffle %32 %31 4 5 6 3 
                                                      OpStore %9 %33 
                               Uniform f32_4* %34 = OpAccessChain %23 %25 %25 
                                        f32_4 %35 = OpLoad %34 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 1 2 
                                        f32_4 %37 = OpLoad %11 
                                        f32_3 %38 = OpVectorShuffle %37 %37 0 0 0 
                                        f32_3 %39 = OpFMul %36 %38 
                                        f32_4 %40 = OpLoad %9 
                                        f32_3 %41 = OpVectorShuffle %40 %40 0 1 2 
                                        f32_3 %42 = OpFAdd %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpVectorShuffle %43 %42 4 5 6 3 
                                                      OpStore %9 %44 
                               Uniform f32_4* %46 = OpAccessChain %23 %25 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_3 %48 = OpVectorShuffle %47 %47 0 1 2 
                                        f32_4 %49 = OpLoad %11 
                                        f32_3 %50 = OpVectorShuffle %49 %49 2 2 2 
                                        f32_3 %51 = OpFMul %48 %50 
                                        f32_4 %52 = OpLoad %9 
                                        f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                        f32_3 %54 = OpFAdd %51 %53 
                                        f32_4 %55 = OpLoad %9 
                                        f32_4 %56 = OpVectorShuffle %55 %54 4 5 6 3 
                                                      OpStore %9 %56 
                                        f32_4 %57 = OpLoad %9 
                                        f32_3 %58 = OpVectorShuffle %57 %57 0 1 2 
                               Uniform f32_4* %60 = OpAccessChain %23 %25 %59 
                                        f32_4 %61 = OpLoad %60 
                                        f32_3 %62 = OpVectorShuffle %61 %61 0 1 2 
                                        f32_3 %63 = OpFAdd %58 %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %63 4 5 6 3 
                                                      OpStore %9 %65 
                                        f32_4 %67 = OpLoad %9 
                                        f32_4 %68 = OpVectorShuffle %67 %67 1 1 1 1 
                               Uniform f32_4* %73 = OpAccessChain %72 %26 %26 
                                        f32_4 %74 = OpLoad %73 
                                        f32_4 %75 = OpFMul %68 %74 
                                                      OpStore %66 %75 
                               Uniform f32_4* %76 = OpAccessChain %72 %26 %25 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %9 
                                        f32_4 %79 = OpVectorShuffle %78 %78 0 0 0 0 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %66 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %66 %82 
                               Uniform f32_4* %83 = OpAccessChain %72 %26 %45 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %9 
                                        f32_4 %86 = OpVectorShuffle %85 %85 2 2 2 2 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %66 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %66 %89 
                                        f32_4 %95 = OpLoad %66 
                               Uniform f32_4* %96 = OpAccessChain %72 %26 %59 
                                        f32_4 %97 = OpLoad %96 
                                        f32_4 %98 = OpFAdd %95 %97 
                               Output f32_4* %100 = OpAccessChain %94 %25 
                                                      OpStore %100 %98 
                                       f32_2 %106 = OpLoad %105 
                                                      OpStore vs_TEXCOORD0 %106 
                                       f32_3 %109 = OpLoad %108 
                              Uniform f32_4* %110 = OpAccessChain %23 %26 %25 
                                       f32_4 %111 = OpLoad %110 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
                                         f32 %113 = OpDot %109 %112 
                                Private f32* %116 = OpAccessChain %66 %114 
                                                      OpStore %116 %113 
                                       f32_3 %117 = OpLoad %108 
                              Uniform f32_4* %118 = OpAccessChain %23 %26 %26 
                                       f32_4 %119 = OpLoad %118 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                         f32 %121 = OpDot %117 %120 
                                Private f32* %122 = OpAccessChain %66 %90 
                                                      OpStore %122 %121 
                                       f32_3 %123 = OpLoad %108 
                              Uniform f32_4* %124 = OpAccessChain %23 %26 %45 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                         f32 %127 = OpDot %123 %126 
                                Private f32* %128 = OpAccessChain %66 %19 
                                                      OpStore %128 %127 
                                       f32_4 %130 = OpLoad %66 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_4 %132 = OpLoad %66 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                         f32 %134 = OpDot %131 %133 
                                                      OpStore %129 %134 
                                         f32 %135 = OpLoad %129 
                                         f32 %137 = OpExtInst %1 40 %135 %136 
                                                      OpStore %129 %137 
                                         f32 %138 = OpLoad %129 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %129 %139 
                                         f32 %140 = OpLoad %129 
                                       f32_3 %141 = OpCompositeConstruct %140 %140 %140 
                                       f32_4 %142 = OpLoad %66 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                       f32_3 %144 = OpFMul %141 %143 
                                       f32_4 %145 = OpLoad %66 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %66 %146 
                                       f32_4 %149 = OpLoad %66 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                                      OpStore vs_TEXCOORD1 %150 
                                       f32_4 %152 = OpLoad %9 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                       f32_3 %154 = OpFNegate %153 
                              Uniform f32_3* %156 = OpAccessChain %72 %25 
                                       f32_3 %157 = OpLoad %156 
                                       f32_3 %158 = OpFAdd %154 %157 
                                                      OpStore vs_TEXCOORD2 %158 
                                       f32_4 %162 = OpLoad %161 
                                       f32_3 %163 = OpVectorShuffle %162 %162 1 1 1 
                              Uniform f32_4* %164 = OpAccessChain %23 %25 %26 
                                       f32_4 %165 = OpLoad %164 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                       f32_3 %167 = OpFMul %163 %166 
                                                      OpStore %160 %167 
                              Uniform f32_4* %168 = OpAccessChain %23 %25 %25 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                       f32_4 %171 = OpLoad %161 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 0 0 
                                       f32_3 %173 = OpFMul %170 %172 
                                       f32_3 %174 = OpLoad %160 
                                       f32_3 %175 = OpFAdd %173 %174 
                                                      OpStore %160 %175 
                              Uniform f32_4* %176 = OpAccessChain %23 %25 %45 
                                       f32_4 %177 = OpLoad %176 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                       f32_4 %179 = OpLoad %161 
                                       f32_3 %180 = OpVectorShuffle %179 %179 2 2 2 
                                       f32_3 %181 = OpFMul %178 %180 
                                       f32_3 %182 = OpLoad %160 
                                       f32_3 %183 = OpFAdd %181 %182 
                                                      OpStore %160 %183 
                                       f32_3 %184 = OpLoad %160 
                                       f32_3 %185 = OpLoad %160 
                                         f32 %186 = OpDot %184 %185 
                                                      OpStore %129 %186 
                                         f32 %187 = OpLoad %129 
                                         f32 %188 = OpExtInst %1 40 %187 %136 
                                                      OpStore %129 %188 
                                         f32 %189 = OpLoad %129 
                                         f32 %190 = OpExtInst %1 32 %189 
                                                      OpStore %129 %190 
                                         f32 %191 = OpLoad %129 
                                       f32_3 %192 = OpCompositeConstruct %191 %191 %191 
                                       f32_3 %193 = OpLoad %160 
                                       f32_3 %194 = OpFMul %192 %193 
                                                      OpStore %160 %194 
                                       f32_3 %196 = OpLoad %160 
                                                      OpStore vs_TEXCOORD3 %196 
                                       f32_4 %198 = OpLoad %66 
                                       f32_3 %199 = OpVectorShuffle %198 %198 2 0 1 
                                       f32_3 %200 = OpLoad %160 
                                       f32_3 %201 = OpVectorShuffle %200 %200 1 2 0 
                                       f32_3 %202 = OpFMul %199 %201 
                                                      OpStore %197 %202 
                                       f32_4 %203 = OpLoad %66 
                                       f32_3 %204 = OpVectorShuffle %203 %203 1 2 0 
                                       f32_3 %205 = OpLoad %160 
                                       f32_3 %206 = OpVectorShuffle %205 %205 2 0 1 
                                       f32_3 %207 = OpFMul %204 %206 
                                       f32_3 %208 = OpLoad %197 
                                       f32_3 %209 = OpFNegate %208 
                                       f32_3 %210 = OpFAdd %207 %209 
                                       f32_4 %211 = OpLoad %66 
                                       f32_4 %212 = OpVectorShuffle %211 %210 4 5 6 3 
                                                      OpStore %66 %212 
                                  Input f32* %215 = OpAccessChain %161 %213 
                                         f32 %216 = OpLoad %215 
                                Uniform f32* %218 = OpAccessChain %23 %59 %213 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpFMul %216 %219 
                                                      OpStore %129 %220 
                                         f32 %222 = OpLoad %129 
                                       f32_3 %223 = OpCompositeConstruct %222 %222 %222 
                                       f32_4 %224 = OpLoad %66 
                                       f32_3 %225 = OpVectorShuffle %224 %224 0 1 2 
                                       f32_3 %226 = OpFMul %223 %225 
                                                      OpStore vs_TEXCOORD4 %226 
                                       f32_4 %228 = OpLoad %9 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 2 
                                                      OpStore vs_TEXCOORD5 %229 
                                       f32_4 %232 = OpLoad %231 
                                                      OpStore vs_TEXCOORD6 %232 
                                       f32_4 %233 = OpLoad %9 
                                       f32_4 %234 = OpVectorShuffle %233 %233 1 1 1 1 
                              Uniform f32_4* %240 = OpAccessChain %239 %25 %26 
                                       f32_4 %241 = OpLoad %240 
                                       f32_4 %242 = OpFMul %234 %241 
                                                      OpStore %66 %242 
                              Uniform f32_4* %243 = OpAccessChain %239 %25 %25 
                                       f32_4 %244 = OpLoad %243 
                                       f32_4 %245 = OpLoad %9 
                                       f32_4 %246 = OpVectorShuffle %245 %245 0 0 0 0 
                                       f32_4 %247 = OpFMul %244 %246 
                                       f32_4 %248 = OpLoad %66 
                                       f32_4 %249 = OpFAdd %247 %248 
                                                      OpStore %66 %249 
                              Uniform f32_4* %250 = OpAccessChain %239 %25 %45 
                                       f32_4 %251 = OpLoad %250 
                                       f32_4 %252 = OpLoad %9 
                                       f32_4 %253 = OpVectorShuffle %252 %252 2 2 2 2 
                                       f32_4 %254 = OpFMul %251 %253 
                                       f32_4 %255 = OpLoad %66 
                                       f32_4 %256 = OpFAdd %254 %255 
                                                      OpStore %9 %256 
                                       f32_4 %258 = OpLoad %9 
                              Uniform f32_4* %259 = OpAccessChain %239 %25 %59 
                                       f32_4 %260 = OpLoad %259 
                                       f32_4 %261 = OpFAdd %258 %260 
                                                      OpStore vs_TEXCOORD7 %261 
                                 Output f32* %263 = OpAccessChain %94 %25 %90 
                                         f32 %264 = OpLoad %263 
                                         f32 %265 = OpFNegate %264 
                                 Output f32* %266 = OpAccessChain %94 %25 %90 
                                                      OpStore %266 %265 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 1143
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %91 %140 %259 %264 %271 %525 %1133 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate vs_TEXCOORD7 Location 12 
                                                      OpDecorate %25 RelaxedPrecision 
                                                      OpDecorate %28 RelaxedPrecision 
                                                      OpDecorate %28 DescriptorSet 28 
                                                      OpDecorate %28 Binding 28 
                                                      OpDecorate %29 RelaxedPrecision 
                                                      OpDecorate %32 RelaxedPrecision 
                                                      OpDecorate %32 DescriptorSet 32 
                                                      OpDecorate %32 Binding 32 
                                                      OpDecorate %33 RelaxedPrecision 
                                                      OpDecorate %42 RelaxedPrecision 
                                                      OpDecorate %44 ArrayStride 44 
                                                      OpMemberDecorate %45 0 Offset 45 
                                                      OpMemberDecorate %45 1 Offset 45 
                                                      OpMemberDecorate %45 2 Offset 45 
                                                      OpMemberDecorate %45 3 Offset 45 
                                                      OpMemberDecorate %45 4 Offset 45 
                                                      OpMemberDecorate %45 5 Offset 45 
                                                      OpMemberDecorate %45 6 RelaxedPrecision 
                                                      OpMemberDecorate %45 6 Offset 45 
                                                      OpMemberDecorate %45 7 RelaxedPrecision 
                                                      OpMemberDecorate %45 7 Offset 45 
                                                      OpMemberDecorate %45 8 RelaxedPrecision 
                                                      OpMemberDecorate %45 8 Offset 45 
                                                      OpMemberDecorate %45 9 RelaxedPrecision 
                                                      OpMemberDecorate %45 9 Offset 45 
                                                      OpMemberDecorate %45 10 RelaxedPrecision 
                                                      OpMemberDecorate %45 10 Offset 45 
                                                      OpMemberDecorate %45 11 Offset 45 
                                                      OpDecorate %45 Block 
                                                      OpDecorate %47 DescriptorSet 47 
                                                      OpDecorate %47 Binding 47 
                                                      OpDecorate %53 RelaxedPrecision 
                                                      OpDecorate %54 RelaxedPrecision 
                                                      OpDecorate %56 RelaxedPrecision 
                                                      OpDecorate %58 RelaxedPrecision 
                                                      OpDecorate %60 RelaxedPrecision 
                                                      OpDecorate %61 RelaxedPrecision 
                                                      OpDecorate %63 RelaxedPrecision 
                                                      OpDecorate %64 RelaxedPrecision 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %87 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD2 Location 91 
                                                      OpDecorate %112 ArrayStride 112 
                                                      OpDecorate %113 ArrayStride 113 
                                                      OpMemberDecorate %114 0 Offset 114 
                                                      OpMemberDecorate %114 1 RelaxedPrecision 
                                                      OpMemberDecorate %114 1 Offset 114 
                                                      OpMemberDecorate %114 2 RelaxedPrecision 
                                                      OpMemberDecorate %114 2 Offset 114 
                                                      OpMemberDecorate %114 3 Offset 114 
                                                      OpMemberDecorate %114 4 Offset 114 
                                                      OpDecorate %114 Block 
                                                      OpDecorate %116 DescriptorSet 116 
                                                      OpDecorate %116 Binding 116 
                                                      OpDecorate vs_TEXCOORD0 Location 140 
                                                      OpMemberDecorate %142 0 Offset 142 
                                                      OpMemberDecorate %142 1 Offset 142 
                                                      OpMemberDecorate %142 2 Offset 142 
                                                      OpMemberDecorate %142 3 Offset 142 
                                                      OpMemberDecorate %142 4 Offset 142 
                                                      OpMemberDecorate %142 5 Offset 142 
                                                      OpMemberDecorate %142 6 Offset 142 
                                                      OpMemberDecorate %142 7 Offset 142 
                                                      OpMemberDecorate %142 8 Offset 142 
                                                      OpMemberDecorate %142 9 Offset 142 
                                                      OpMemberDecorate %142 10 Offset 142 
                                                      OpDecorate %142 Block 
                                                      OpDecorate %144 DescriptorSet 144 
                                                      OpDecorate %144 Binding 144 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %157 RelaxedPrecision 
                                                      OpDecorate %157 DescriptorSet 157 
                                                      OpDecorate %157 Binding 157 
                                                      OpDecorate %158 RelaxedPrecision 
                                                      OpDecorate %159 RelaxedPrecision 
                                                      OpDecorate %159 DescriptorSet 159 
                                                      OpDecorate %159 Binding 159 
                                                      OpDecorate %160 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %168 RelaxedPrecision 
                                                      OpDecorate %168 DescriptorSet 168 
                                                      OpDecorate %168 Binding 168 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %170 RelaxedPrecision 
                                                      OpDecorate %170 DescriptorSet 170 
                                                      OpDecorate %170 Binding 170 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate %185 RelaxedPrecision 
                                                      OpDecorate %186 RelaxedPrecision 
                                                      OpDecorate %186 DescriptorSet 186 
                                                      OpDecorate %186 Binding 186 
                                                      OpDecorate %187 RelaxedPrecision 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %188 DescriptorSet 188 
                                                      OpDecorate %188 Binding 188 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate %202 RelaxedPrecision 
                                                      OpDecorate %208 RelaxedPrecision 
                                                      OpDecorate %210 RelaxedPrecision 
                                                      OpDecorate %211 RelaxedPrecision 
                                                      OpDecorate %214 RelaxedPrecision 
                                                      OpDecorate %216 RelaxedPrecision 
                                                      OpDecorate %218 RelaxedPrecision 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate %220 RelaxedPrecision 
                                                      OpDecorate %221 RelaxedPrecision 
                                                      OpDecorate %222 RelaxedPrecision 
                                                      OpDecorate %224 RelaxedPrecision 
                                                      OpDecorate %230 RelaxedPrecision 
                                                      OpDecorate %233 RelaxedPrecision 
                                                      OpDecorate %234 RelaxedPrecision 
                                                      OpDecorate %235 RelaxedPrecision 
                                                      OpDecorate %236 RelaxedPrecision 
                                                      OpDecorate %237 RelaxedPrecision 
                                                      OpDecorate %240 RelaxedPrecision 
                                                      OpDecorate %241 RelaxedPrecision 
                                                      OpDecorate %243 RelaxedPrecision 
                                                      OpDecorate %245 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %249 RelaxedPrecision 
                                                      OpDecorate %250 RelaxedPrecision 
                                                      OpDecorate %251 RelaxedPrecision 
                                                      OpDecorate %252 RelaxedPrecision 
                                                      OpDecorate %253 RelaxedPrecision 
                                                      OpDecorate %254 RelaxedPrecision 
                                                      OpDecorate %255 RelaxedPrecision 
                                                      OpDecorate %256 RelaxedPrecision 
                                                      OpDecorate %257 RelaxedPrecision 
                                                      OpDecorate %258 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 259 
                                                      OpDecorate %262 RelaxedPrecision 
                                                      OpDecorate %263 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD3 Location 264 
                                                      OpDecorate %269 RelaxedPrecision 
                                                      OpDecorate %270 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 271 
                                                      OpDecorate %320 RelaxedPrecision 
                                                      OpDecorate %322 RelaxedPrecision 
                                                      OpDecorate %323 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %393 RelaxedPrecision 
                                                      OpDecorate %398 RelaxedPrecision 
                                                      OpDecorate %399 RelaxedPrecision 
                                                      OpDecorate %401 RelaxedPrecision 
                                                      OpDecorate %403 RelaxedPrecision 
                                                      OpDecorate %404 RelaxedPrecision 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %407 RelaxedPrecision 
                                                      OpDecorate %419 RelaxedPrecision 
                                                      OpDecorate %420 RelaxedPrecision 
                                                      OpDecorate %420 DescriptorSet 420 
                                                      OpDecorate %420 Binding 420 
                                                      OpDecorate %421 RelaxedPrecision 
                                                      OpDecorate %422 RelaxedPrecision 
                                                      OpDecorate %422 DescriptorSet 422 
                                                      OpDecorate %422 Binding 422 
                                                      OpDecorate %423 RelaxedPrecision 
                                                      OpDecorate %428 RelaxedPrecision 
                                                      OpDecorate %430 RelaxedPrecision 
                                                      OpDecorate %438 RelaxedPrecision 
                                                      OpDecorate %439 RelaxedPrecision 
                                                      OpDecorate %440 RelaxedPrecision 
                                                      OpDecorate %441 RelaxedPrecision 
                                                      OpDecorate %442 RelaxedPrecision 
                                                      OpDecorate %443 RelaxedPrecision 
                                                      OpDecorate %445 RelaxedPrecision 
                                                      OpDecorate %450 RelaxedPrecision 
                                                      OpDecorate %451 RelaxedPrecision 
                                                      OpDecorate %454 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate %457 RelaxedPrecision 
                                                      OpDecorate %458 RelaxedPrecision 
                                                      OpDecorate %466 RelaxedPrecision 
                                                      OpDecorate %467 ArrayStride 467 
                                                      OpDecorate %468 ArrayStride 468 
                                                      OpDecorate %469 ArrayStride 469 
                                                      OpMemberDecorate %470 0 Offset 470 
                                                      OpMemberDecorate %470 1 Offset 470 
                                                      OpMemberDecorate %470 2 Offset 470 
                                                      OpMemberDecorate %470 3 RelaxedPrecision 
                                                      OpMemberDecorate %470 3 Offset 470 
                                                      OpMemberDecorate %470 4 RelaxedPrecision 
                                                      OpMemberDecorate %470 4 Offset 470 
                                                      OpMemberDecorate %470 5 RelaxedPrecision 
                                                      OpMemberDecorate %470 5 Offset 470 
                                                      OpMemberDecorate %470 6 Offset 470 
                                                      OpMemberDecorate %470 7 RelaxedPrecision 
                                                      OpMemberDecorate %470 7 Offset 470 
                                                      OpMemberDecorate %470 8 Offset 470 
                                                      OpMemberDecorate %470 9 Offset 470 
                                                      OpMemberDecorate %470 10 RelaxedPrecision 
                                                      OpMemberDecorate %470 10 Offset 470 
                                                      OpMemberDecorate %470 11 RelaxedPrecision 
                                                      OpMemberDecorate %470 11 Offset 470 
                                                      OpMemberDecorate %470 12 RelaxedPrecision 
                                                      OpMemberDecorate %470 12 Offset 470 
                                                      OpMemberDecorate %470 13 RelaxedPrecision 
                                                      OpMemberDecorate %470 13 Offset 470 
                                                      OpMemberDecorate %470 14 RelaxedPrecision 
                                                      OpMemberDecorate %470 14 Offset 470 
                                                      OpMemberDecorate %470 15 RelaxedPrecision 
                                                      OpMemberDecorate %470 15 Offset 470 
                                                      OpMemberDecorate %470 16 RelaxedPrecision 
                                                      OpMemberDecorate %470 16 Offset 470 
                                                      OpDecorate %470 Block 
                                                      OpDecorate %472 DescriptorSet 472 
                                                      OpDecorate %472 Binding 472 
                                                      OpDecorate %474 RelaxedPrecision 
                                                      OpDecorate %475 RelaxedPrecision 
                                                      OpDecorate %478 RelaxedPrecision 
                                                      OpDecorate %505 RelaxedPrecision 
                                                      OpDecorate %522 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 525 
                                                      OpDecorate %529 ArrayStride 529 
                                                      OpDecorate %530 ArrayStride 530 
                                                      OpDecorate %531 ArrayStride 531 
                                                      OpDecorate %532 ArrayStride 532 
                                                      OpDecorate %533 ArrayStride 533 
                                                      OpMemberDecorate %534 0 Offset 534 
                                                      OpMemberDecorate %534 1 RelaxedPrecision 
                                                      OpMemberDecorate %534 1 Offset 534 
                                                      OpMemberDecorate %534 2 RelaxedPrecision 
                                                      OpMemberDecorate %534 2 Offset 534 
                                                      OpMemberDecorate %534 3 RelaxedPrecision 
                                                      OpMemberDecorate %534 3 Offset 534 
                                                      OpMemberDecorate %534 4 RelaxedPrecision 
                                                      OpMemberDecorate %534 4 Offset 534 
                                                      OpDecorate %534 Block 
                                                      OpDecorate %536 DescriptorSet 536 
                                                      OpDecorate %536 Binding 536 
                                                      OpDecorate %566 RelaxedPrecision 
                                                      OpDecorate %570 RelaxedPrecision 
                                                      OpDecorate %579 RelaxedPrecision 
                                                      OpDecorate %580 RelaxedPrecision 
                                                      OpDecorate %583 RelaxedPrecision 
                                                      OpDecorate %586 RelaxedPrecision 
                                                      OpDecorate %587 RelaxedPrecision 
                                                      OpDecorate %590 RelaxedPrecision 
                                                      OpDecorate %591 RelaxedPrecision 
                                                      OpDecorate %592 RelaxedPrecision 
                                                      OpDecorate %593 RelaxedPrecision 
                                                      OpDecorate %594 RelaxedPrecision 
                                                      OpDecorate %595 RelaxedPrecision 
                                                      OpDecorate %596 RelaxedPrecision 
                                                      OpDecorate %598 RelaxedPrecision 
                                                      OpDecorate %607 RelaxedPrecision 
                                                      OpDecorate %608 RelaxedPrecision 
                                                      OpDecorate %609 RelaxedPrecision 
                                                      OpDecorate %614 RelaxedPrecision 
                                                      OpDecorate %615 RelaxedPrecision 
                                                      OpDecorate %622 RelaxedPrecision 
                                                      OpDecorate %623 RelaxedPrecision 
                                                      OpDecorate %624 RelaxedPrecision 
                                                      OpDecorate %625 RelaxedPrecision 
                                                      OpDecorate %626 RelaxedPrecision 
                                                      OpDecorate %627 RelaxedPrecision 
                                                      OpDecorate %628 RelaxedPrecision 
                                                      OpDecorate %629 RelaxedPrecision 
                                                      OpDecorate %632 RelaxedPrecision 
                                                      OpDecorate %635 RelaxedPrecision 
                                                      OpDecorate %636 RelaxedPrecision 
                                                      OpDecorate %637 RelaxedPrecision 
                                                      OpDecorate %638 RelaxedPrecision 
                                                      OpDecorate %640 RelaxedPrecision 
                                                      OpDecorate %641 RelaxedPrecision 
                                                      OpDecorate %644 RelaxedPrecision 
                                                      OpDecorate %645 RelaxedPrecision 
                                                      OpDecorate %646 RelaxedPrecision 
                                                      OpDecorate %687 RelaxedPrecision 
                                                      OpDecorate %689 RelaxedPrecision 
                                                      OpDecorate %690 RelaxedPrecision 
                                                      OpDecorate %691 RelaxedPrecision 
                                                      OpDecorate %693 RelaxedPrecision 
                                                      OpDecorate %695 RelaxedPrecision 
                                                      OpDecorate %696 RelaxedPrecision 
                                                      OpDecorate %697 RelaxedPrecision 
                                                      OpDecorate %700 RelaxedPrecision 
                                                      OpDecorate %716 RelaxedPrecision 
                                                      OpDecorate %718 RelaxedPrecision 
                                                      OpDecorate %727 RelaxedPrecision 
                                                      OpDecorate %729 RelaxedPrecision 
                                                      OpDecorate %730 RelaxedPrecision 
                                                      OpDecorate %733 RelaxedPrecision 
                                                      OpDecorate %736 RelaxedPrecision 
                                                      OpDecorate %741 RelaxedPrecision 
                                                      OpDecorate %752 RelaxedPrecision 
                                                      OpDecorate %754 RelaxedPrecision 
                                                      OpDecorate %755 RelaxedPrecision 
                                                      OpDecorate %756 RelaxedPrecision 
                                                      OpDecorate %761 RelaxedPrecision 
                                                      OpDecorate %765 RelaxedPrecision 
                                                      OpDecorate %771 RelaxedPrecision 
                                                      OpDecorate %777 RelaxedPrecision 
                                                      OpDecorate %786 RelaxedPrecision 
                                                      OpDecorate %789 RelaxedPrecision 
                                                      OpDecorate %790 RelaxedPrecision 
                                                      OpDecorate %791 RelaxedPrecision 
                                                      OpDecorate %795 RelaxedPrecision 
                                                      OpDecorate %796 RelaxedPrecision 
                                                      OpDecorate %797 RelaxedPrecision 
                                                      OpDecorate %801 RelaxedPrecision 
                                                      OpDecorate %802 RelaxedPrecision 
                                                      OpDecorate %803 RelaxedPrecision 
                                                      OpDecorate %815 RelaxedPrecision 
                                                      OpDecorate %816 RelaxedPrecision 
                                                      OpDecorate %820 RelaxedPrecision 
                                                      OpDecorate %821 RelaxedPrecision 
                                                      OpDecorate %822 RelaxedPrecision 
                                                      OpDecorate %823 RelaxedPrecision 
                                                      OpDecorate %824 RelaxedPrecision 
                                                      OpDecorate %825 RelaxedPrecision 
                                                      OpDecorate %826 RelaxedPrecision 
                                                      OpDecorate %827 RelaxedPrecision 
                                                      OpDecorate %828 RelaxedPrecision 
                                                      OpDecorate %829 RelaxedPrecision 
                                                      OpDecorate %830 RelaxedPrecision 
                                                      OpDecorate %832 RelaxedPrecision 
                                                      OpDecorate %833 RelaxedPrecision 
                                                      OpDecorate %834 RelaxedPrecision 
                                                      OpDecorate %835 RelaxedPrecision 
                                                      OpDecorate %864 RelaxedPrecision 
                                                      OpDecorate %865 RelaxedPrecision 
                                                      OpDecorate %867 RelaxedPrecision 
                                                      OpDecorate %868 RelaxedPrecision 
                                                      OpDecorate %872 RelaxedPrecision 
                                                      OpDecorate %873 RelaxedPrecision 
                                                      OpDecorate %875 RelaxedPrecision 
                                                      OpDecorate %877 RelaxedPrecision 
                                                      OpDecorate %879 RelaxedPrecision 
                                                      OpDecorate %880 RelaxedPrecision 
                                                      OpDecorate %881 RelaxedPrecision 
                                                      OpDecorate %884 RelaxedPrecision 
                                                      OpDecorate %886 RelaxedPrecision 
                                                      OpDecorate %887 RelaxedPrecision 
                                                      OpDecorate %888 RelaxedPrecision 
                                                      OpDecorate %888 DescriptorSet 888 
                                                      OpDecorate %888 Binding 888 
                                                      OpDecorate %889 RelaxedPrecision 
                                                      OpDecorate %890 RelaxedPrecision 
                                                      OpDecorate %890 DescriptorSet 890 
                                                      OpDecorate %890 Binding 890 
                                                      OpDecorate %891 RelaxedPrecision 
                                                      OpDecorate %893 RelaxedPrecision 
                                                      OpDecorate %894 RelaxedPrecision 
                                                      OpDecorate %895 RelaxedPrecision 
                                                      OpDecorate %896 RelaxedPrecision 
                                                      OpDecorate %897 RelaxedPrecision 
                                                      OpDecorate %899 RelaxedPrecision 
                                                      OpDecorate %901 RelaxedPrecision 
                                                      OpDecorate %902 RelaxedPrecision 
                                                      OpDecorate %903 RelaxedPrecision 
                                                      OpDecorate %953 RelaxedPrecision 
                                                      OpDecorate %954 RelaxedPrecision 
                                                      OpDecorate %965 RelaxedPrecision 
                                                      OpDecorate %976 RelaxedPrecision 
                                                      OpDecorate %977 RelaxedPrecision 
                                                      OpDecorate %978 RelaxedPrecision 
                                                      OpDecorate %979 RelaxedPrecision 
                                                      OpDecorate %982 RelaxedPrecision 
                                                      OpDecorate %986 RelaxedPrecision 
                                                      OpDecorate %989 RelaxedPrecision 
                                                      OpDecorate %990 RelaxedPrecision 
                                                      OpDecorate %1056 RelaxedPrecision 
                                                      OpDecorate %1082 RelaxedPrecision 
                                                      OpDecorate %1090 RelaxedPrecision 
                                                      OpDecorate %1091 RelaxedPrecision 
                                                      OpDecorate %1092 RelaxedPrecision 
                                                      OpDecorate %1093 RelaxedPrecision 
                                                      OpDecorate %1094 RelaxedPrecision 
                                                      OpDecorate %1095 RelaxedPrecision 
                                                      OpDecorate %1115 RelaxedPrecision 
                                                      OpDecorate %1116 RelaxedPrecision 
                                                      OpDecorate %1117 RelaxedPrecision 
                                                      OpDecorate %1120 RelaxedPrecision 
                                                      OpDecorate %1122 RelaxedPrecision 
                                                      OpDecorate %1123 RelaxedPrecision 
                                                      OpDecorate %1124 RelaxedPrecision 
                                                      OpDecorate %1125 RelaxedPrecision 
                                                      OpDecorate %1126 RelaxedPrecision 
                                                      OpDecorate %1129 RelaxedPrecision 
                                                      OpDecorate %1130 RelaxedPrecision 
                                                      OpDecorate %1131 RelaxedPrecision 
                                                      OpDecorate %1133 RelaxedPrecision 
                                                      OpDecorate %1133 Location 1133 
                                                      OpDecorate %1134 RelaxedPrecision 
                                                      OpDecorate %1135 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 3 
                                               %8 = OpTypePointer Function %7 
                                              %10 = OpTypeVector %6 4 
                                              %11 = OpTypePointer Input %10 
                        Input f32_4* vs_TEXCOORD7 = OpVariable Input 
                                              %13 = OpTypeVector %6 2 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 2 
                                              %18 = OpTypePointer Input %6 
                                              %24 = OpTypePointer Private %6 
                                 Private f32* %25 = OpVariable Private 
                                              %26 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %27 = OpTypePointer UniformConstant %26 
         UniformConstant read_only Texture2D* %28 = OpVariable UniformConstant 
                                              %30 = OpTypeSampler 
                                              %31 = OpTypePointer UniformConstant %30 
                     UniformConstant sampler* %32 = OpVariable UniformConstant 
                                              %34 = OpTypeImage %6 Dim2D 1 0 0 1 Unknown 
                                              %35 = OpTypeSampledImage %34 
                                          f32 %38 = OpConstant 3.674022E-40 
                                              %41 = OpTypePointer Private %10 
                               Private f32_4* %42 = OpVariable Private 
                                          u32 %43 = OpConstant 20 
                                              %44 = OpTypeArray %10 %43 
                                              %45 = OpTypeStruct %44 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 
                                              %46 = OpTypePointer Uniform %45 
Uniform struct {f32_4[20]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %47 = OpVariable Uniform 
                                              %48 = OpTypeInt 32 1 
                                          i32 %49 = OpConstant 10 
                                          u32 %50 = OpConstant 0 
                                              %51 = OpTypePointer Uniform %6 
                                          f32 %55 = OpConstant 3.674022E-40 
                                              %66 = OpTypeBool 
                                              %67 = OpTypePointer Private %66 
                                Private bool* %68 = OpVariable Private 
                                Private bool* %72 = OpVariable Private 
                                              %80 = OpTypePointer Function %6 
                               Private f32_4* %89 = OpVariable Private 
                                              %90 = OpTypePointer Input %7 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                             %100 = OpTypePointer Private %7 
                              Private f32_3* %101 = OpVariable Private 
                              Private f32_3* %106 = OpVariable Private 
                                         u32 %111 = OpConstant 4 
                                             %112 = OpTypeArray %10 %111 
                                             %113 = OpTypeArray %10 %111 
                                             %114 = OpTypeStruct %10 %10 %10 %112 %113 
                                             %115 = OpTypePointer Uniform %114 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_4[4];}* %116 = OpVariable Uniform 
                                         i32 %117 = OpConstant 0 
                                             %118 = OpTypePointer Uniform %10 
                                Private f32* %127 = OpVariable Private 
                              Private f32_4* %131 = OpVariable Private 
                              Private f32_3* %138 = OpVariable Private 
                                             %139 = OpTypePointer Input %13 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                             %142 = OpTypeStruct %6 %10 %10 %6 %6 %7 %10 %6 %6 %6 %6 
                                             %143 = OpTypePointer Uniform %142 
Uniform struct {f32; f32_4; f32_4; f32; f32; f32_3; f32_4; f32; f32; f32; f32;}* %144 = OpVariable Uniform 
                                         i32 %145 = OpConstant 1 
                              Private f32_3* %156 = OpVariable Private 
        UniformConstant read_only Texture2D* %157 = OpVariable UniformConstant 
                    UniformConstant sampler* %159 = OpVariable UniformConstant 
                                             %161 = OpTypeSampledImage %26 
                              Private f32_3* %167 = OpVariable Private 
        UniformConstant read_only Texture2D* %168 = OpVariable UniformConstant 
                    UniformConstant sampler* %170 = OpVariable UniformConstant 
                              Private f32_3* %177 = OpVariable Private 
                                         f32 %179 = OpConstant 3.674022E-40 
                                       f32_3 %180 = OpConstantComposite %179 %179 %179 
                                         f32 %182 = OpConstant 3.674022E-40 
                                       f32_3 %183 = OpConstantComposite %182 %182 %182 
                              Private f32_4* %185 = OpVariable Private 
        UniformConstant read_only Texture2D* %186 = OpVariable UniformConstant 
                    UniformConstant sampler* %188 = OpVariable UniformConstant 
                                         u32 %194 = OpConstant 1 
                                         i32 %197 = OpConstant 3 
                              Private f32_3* %202 = OpVariable Private 
                                         f32 %215 = OpConstant 3.674022E-40 
                              Private f32_3* %218 = OpVariable Private 
                              Private f32_3* %223 = OpVariable Private 
                                         i32 %225 = OpConstant 2 
                                         f32 %231 = OpConstant 3.674022E-40 
                                       f32_3 %232 = OpConstantComposite %231 %231 %231 
                                         f32 %238 = OpConstant 3.674022E-40 
                                       f32_3 %239 = OpConstantComposite %238 %238 %238 
                              Private f32_3* %241 = OpVariable Private 
                                         f32 %244 = OpConstant 3.674022E-40 
                                         f32 %246 = OpConstant 3.674022E-40 
                        Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                Private f32* %276 = OpVariable Private 
                              Private f32_4* %282 = OpVariable Private 
                                         f32 %296 = OpConstant 3.674022E-40 
                                         f32 %313 = OpConstant 3.674022E-40 
                                       f32_3 %314 = OpConstantComposite %313 %296 %296 
                                Private f32* %318 = OpVariable Private 
                                         f32 %334 = OpConstant 3.674022E-40 
                                Private f32* %393 = OpVariable Private 
                                Private f32* %403 = OpVariable Private 
                              Private f32_3* %419 = OpVariable Private 
        UniformConstant read_only Texture2D* %420 = OpVariable UniformConstant 
                    UniformConstant sampler* %422 = OpVariable UniformConstant 
                              Private f32_3* %429 = OpVariable Private 
                                         i32 %431 = OpConstant 4 
                              Private f32_3* %450 = OpVariable Private 
                                             %467 = OpTypeArray %10 %111 
                                             %468 = OpTypeArray %10 %111 
                                             %469 = OpTypeArray %10 %17 
                                             %470 = OpTypeStruct %467 %468 %10 %10 %10 %469 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 %10 
                                             %471 = OpTypePointer Uniform %470 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4; f32_4[2]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %472 = OpVariable Uniform 
                                             %476 = OpTypePointer Private %48 
                                Private i32* %477 = OpVariable Private 
                                             %481 = OpTypePointer Function %16 
                                Private i32* %492 = OpVariable Private 
                                         u32 %494 = OpConstant 3 
                                             %497 = OpTypePointer Private %16 
                                Private u32* %498 = OpVariable Private 
                                         i32 %501 = OpConstant 5 
                                             %506 = OpTypeVector %16 4 
                                             %507 = OpTypeArray %506 %111 
                                         u32 %508 = OpConstant 1065353216 
                                       u32_4 %509 = OpConstantComposite %508 %50 %50 %50 
                                       u32_4 %510 = OpConstantComposite %50 %508 %50 %50 
                                       u32_4 %511 = OpConstantComposite %50 %50 %508 %50 
                                       u32_4 %512 = OpConstantComposite %50 %50 %50 %508 
                                    u32_4[4] %513 = OpConstantComposite %509 %510 %511 %512 
                                             %515 = OpTypePointer Function %507 
                                             %517 = OpTypePointer Function %506 
                              Private f32_3* %524 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD5 = OpVariable Input 
                                         u32 %528 = OpConstant 32 
                                             %529 = OpTypeArray %10 %528 
                                             %530 = OpTypeArray %10 %528 
                                             %531 = OpTypeArray %10 %528 
                                             %532 = OpTypeArray %10 %528 
                                             %533 = OpTypeArray %10 %528 
                                             %534 = OpTypeStruct %529 %530 %531 %532 %533 
                                             %535 = OpTypePointer Uniform %534 
Uniform struct {f32_4[32]; f32_4[32]; f32_4[32]; f32_4[32]; f32_4[32];}* %536 = OpVariable Uniform 
                                Private f32* %547 = OpVariable Private 
                                         f32 %552 = OpConstant 3.674022E-40 
                                Private f32* %554 = OpVariable Private 
                              Private f32_3* %607 = OpVariable Private 
                              Private f32_3* %628 = OpVariable Private 
                                Private f32* %691 = OpVariable Private 
                                         f32 %702 = OpConstant 3.674022E-40 
                                         f32 %717 = OpConstant 3.674022E-40 
                                         f32 %728 = OpConstant 3.674022E-40 
                                         f32 %749 = OpConstant 3.674022E-40 
                                       f32_3 %750 = OpConstantComposite %749 %749 %749 
                                         i32 %769 = OpConstant 11 
                                         i32 %775 = OpConstant 12 
                              Private f32_3* %786 = OpVariable Private 
                                         i32 %787 = OpConstant 13 
                                         i32 %793 = OpConstant 14 
                                         i32 %799 = OpConstant 15 
                                         i32 %818 = OpConstant 16 
                                       f32_3 %831 = OpConstantComposite %38 %38 %38 
                                       f32_2 %866 = OpConstantComposite %334 %334 
                                         f32 %874 = OpConstant 3.674022E-40 
                                         f32 %876 = OpConstant 3.674022E-40 
                                         f32 %885 = OpConstant 3.674022E-40 
                              Private f32_3* %887 = OpVariable Private 
        UniformConstant read_only Texture2D* %888 = OpVariable UniformConstant 
                    UniformConstant sampler* %890 = OpVariable UniformConstant 
                                Private f32* %939 = OpVariable Private 
                                             %997 = OpTypePointer Uniform %7 
                                        i32 %1058 = OpConstant 8 
                                        i32 %1066 = OpConstant 7 
                                        i32 %1077 = OpConstant 6 
                                        i32 %1083 = OpConstant 9 
                                      f32_3 %1104 = OpConstantComposite %874 %874 %874 
                                        f32 %1108 = OpConstant 3.674022E-40 
                                      f32_3 %1109 = OpConstantComposite %1108 %1108 %1108 
                                        f32 %1127 = OpConstant 3.674022E-40 
                                      f32_3 %1128 = OpConstantComposite %1127 %1127 %1127 
                                            %1132 = OpTypePointer Output %10 
                              Output f32_4* %1133 = OpVariable Output 
                                            %1138 = OpTypePointer Output %6 
                              Private bool* %1141 = OpVariable Private 
                               Private u32* %1142 = OpVariable Private 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function f32_3* %9 = OpVariable Function 
                                Function f32* %81 = OpVariable Function 
                               Function u32* %482 = OpVariable Function 
                          Function u32_4[4]* %516 = OpVariable Function 
                                        f32_4 %14 = OpLoad vs_TEXCOORD7 
                                        f32_2 %15 = OpVectorShuffle %14 %14 0 1 
                                   Input f32* %19 = OpAccessChain vs_TEXCOORD7 %17 
                                          f32 %20 = OpLoad %19 
                                          f32 %21 = OpCompositeExtract %15 0 
                                          f32 %22 = OpCompositeExtract %15 1 
                                        f32_3 %23 = OpCompositeConstruct %21 %22 %20 
                                                      OpStore %9 %23 
                          read_only Texture2D %29 = OpLoad %28 
                                      sampler %33 = OpLoad %32 
                   read_only Texture2DSampled %36 = OpSampledImage %29 %33 
                                        f32_3 %37 = OpLoad %9 
                                          f32 %39 = OpCompositeExtract %37 2 
                                          f32 %40 = OpImageSampleDrefExplicitLod %36 %37 %39 Lod %6 
                                                      OpStore %25 %40 
                                 Uniform f32* %52 = OpAccessChain %47 %49 %50 
                                          f32 %53 = OpLoad %52 
                                          f32 %54 = OpFNegate %53 
                                          f32 %56 = OpFAdd %54 %55 
                                 Private f32* %57 = OpAccessChain %42 %50 
                                                      OpStore %57 %56 
                                          f32 %58 = OpLoad %25 
                                 Uniform f32* %59 = OpAccessChain %47 %49 %50 
                                          f32 %60 = OpLoad %59 
                                          f32 %61 = OpFMul %58 %60 
                                 Private f32* %62 = OpAccessChain %42 %50 
                                          f32 %63 = OpLoad %62 
                                          f32 %64 = OpFAdd %61 %63 
                                 Private f32* %65 = OpAccessChain %42 %50 
                                                      OpStore %65 %64 
                                   Input f32* %69 = OpAccessChain vs_TEXCOORD7 %17 
                                          f32 %70 = OpLoad %69 
                                         bool %71 = OpFOrdGreaterThanEqual %38 %70 
                                                      OpStore %68 %71 
                                   Input f32* %73 = OpAccessChain vs_TEXCOORD7 %17 
                                          f32 %74 = OpLoad %73 
                                         bool %75 = OpFOrdGreaterThanEqual %74 %55 
                                                      OpStore %72 %75 
                                         bool %76 = OpLoad %72 
                                         bool %77 = OpLoad %68 
                                         bool %78 = OpLogicalOr %76 %77 
                                                      OpStore %68 %78 
                                         bool %79 = OpLoad %68 
                                                      OpSelectionMerge %83 None 
                                                      OpBranchConditional %79 %82 %84 
                                              %82 = OpLabel 
                                                      OpStore %81 %55 
                                                      OpBranch %83 
                                              %84 = OpLabel 
                                 Private f32* %85 = OpAccessChain %42 %50 
                                          f32 %86 = OpLoad %85 
                                                      OpStore %81 %86 
                                                      OpBranch %83 
                                              %83 = OpLabel 
                                          f32 %87 = OpLoad %81 
                                 Private f32* %88 = OpAccessChain %42 %50 
                                                      OpStore %88 %87 
                                        f32_3 %92 = OpLoad vs_TEXCOORD2 
                                        f32_3 %93 = OpLoad vs_TEXCOORD2 
                                          f32 %94 = OpDot %92 %93 
                                 Private f32* %95 = OpAccessChain %89 %50 
                                                      OpStore %95 %94 
                                 Private f32* %96 = OpAccessChain %89 %50 
                                          f32 %97 = OpLoad %96 
                                          f32 %98 = OpExtInst %1 32 %97 
                                 Private f32* %99 = OpAccessChain %89 %50 
                                                      OpStore %99 %98 
                                       f32_4 %102 = OpLoad %89 
                                       f32_3 %103 = OpVectorShuffle %102 %102 0 0 0 
                                       f32_3 %104 = OpLoad vs_TEXCOORD2 
                                       f32_3 %105 = OpFMul %103 %104 
                                                      OpStore %101 %105 
                                       f32_3 %107 = OpLoad vs_TEXCOORD2 
                                       f32_4 %108 = OpLoad %89 
                                       f32_3 %109 = OpVectorShuffle %108 %108 0 0 0 
                                       f32_3 %110 = OpFMul %107 %109 
                              Uniform f32_4* %119 = OpAccessChain %116 %117 
                                       f32_4 %120 = OpLoad %119 
                                       f32_3 %121 = OpVectorShuffle %120 %120 0 1 2 
                                       f32_3 %122 = OpFAdd %110 %121 
                                                      OpStore %106 %122 
                                       f32_3 %123 = OpLoad %106 
                                       f32_3 %124 = OpLoad %106 
                                         f32 %125 = OpDot %123 %124 
                                Private f32* %126 = OpAccessChain %89 %50 
                                                      OpStore %126 %125 
                                Private f32* %128 = OpAccessChain %89 %50 
                                         f32 %129 = OpLoad %128 
                                         f32 %130 = OpExtInst %1 32 %129 
                                                      OpStore %127 %130 
                                         f32 %132 = OpLoad %127 
                                       f32_3 %133 = OpCompositeConstruct %132 %132 %132 
                                       f32_3 %134 = OpLoad %106 
                                       f32_3 %135 = OpFMul %133 %134 
                                       f32_4 %136 = OpLoad %131 
                                       f32_4 %137 = OpVectorShuffle %136 %135 4 5 6 3 
                                                      OpStore %131 %137 
                                       f32_2 %141 = OpLoad vs_TEXCOORD0 
                              Uniform f32_4* %146 = OpAccessChain %144 %145 
                                       f32_4 %147 = OpLoad %146 
                                       f32_2 %148 = OpVectorShuffle %147 %147 0 1 
                                       f32_2 %149 = OpFMul %141 %148 
                              Uniform f32_4* %150 = OpAccessChain %144 %145 
                                       f32_4 %151 = OpLoad %150 
                                       f32_2 %152 = OpVectorShuffle %151 %151 2 3 
                                       f32_2 %153 = OpFAdd %149 %152 
                                       f32_3 %154 = OpLoad %138 
                                       f32_3 %155 = OpVectorShuffle %154 %153 3 4 2 
                                                      OpStore %138 %155 
                         read_only Texture2D %158 = OpLoad %157 
                                     sampler %160 = OpLoad %159 
                  read_only Texture2DSampled %162 = OpSampledImage %158 %160 
                                       f32_3 %163 = OpLoad %138 
                                       f32_2 %164 = OpVectorShuffle %163 %163 0 1 
                                       f32_4 %165 = OpImageSampleImplicitLod %162 %164 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                                      OpStore %156 %166 
                         read_only Texture2D %169 = OpLoad %168 
                                     sampler %171 = OpLoad %170 
                  read_only Texture2DSampled %172 = OpSampledImage %169 %171 
                                       f32_3 %173 = OpLoad %138 
                                       f32_2 %174 = OpVectorShuffle %173 %173 0 1 
                                       f32_4 %175 = OpImageSampleImplicitLod %172 %174 
                                       f32_3 %176 = OpVectorShuffle %175 %175 0 1 2 
                                                      OpStore %167 %176 
                                       f32_3 %178 = OpLoad %167 
                                       f32_3 %181 = OpFMul %178 %180 
                                       f32_3 %184 = OpFAdd %181 %183 
                                                      OpStore %177 %184 
                         read_only Texture2D %187 = OpLoad %186 
                                     sampler %189 = OpLoad %188 
                  read_only Texture2DSampled %190 = OpSampledImage %187 %189 
                                       f32_3 %191 = OpLoad %138 
                                       f32_2 %192 = OpVectorShuffle %191 %191 0 1 
                                       f32_4 %193 = OpImageSampleImplicitLod %190 %192 
                                                      OpStore %185 %193 
                                Private f32* %195 = OpAccessChain %185 %194 
                                         f32 %196 = OpLoad %195 
                                Uniform f32* %198 = OpAccessChain %144 %197 
                                         f32 %199 = OpLoad %198 
                                         f32 %200 = OpFNegate %199 
                                         f32 %201 = OpFAdd %196 %200 
                                                      OpStore %127 %201 
                                         f32 %203 = OpLoad %127 
                                         f32 %204 = OpFNegate %203 
                                         f32 %205 = OpFAdd %204 %55 
                                Private f32* %206 = OpAccessChain %202 %50 
                                                      OpStore %206 %205 
                                Private f32* %207 = OpAccessChain %202 %50 
                                         f32 %208 = OpLoad %207 
                                Private f32* %209 = OpAccessChain %202 %50 
                                         f32 %210 = OpLoad %209 
                                         f32 %211 = OpFMul %208 %210 
                                Private f32* %212 = OpAccessChain %202 %50 
                                                      OpStore %212 %211 
                                Private f32* %213 = OpAccessChain %202 %50 
                                         f32 %214 = OpLoad %213 
                                         f32 %216 = OpExtInst %1 40 %214 %215 
                                Private f32* %217 = OpAccessChain %202 %50 
                                                      OpStore %217 %216 
                                       f32_3 %219 = OpLoad %156 
                                       f32_4 %220 = OpLoad %185 
                                       f32_3 %221 = OpVectorShuffle %220 %220 2 2 2 
                                       f32_3 %222 = OpFMul %219 %221 
                                                      OpStore %218 %222 
                                       f32_3 %224 = OpLoad %218 
                              Uniform f32_4* %226 = OpAccessChain %144 %225 
                                       f32_4 %227 = OpLoad %226 
                                       f32_3 %228 = OpVectorShuffle %227 %227 0 1 2 
                                       f32_3 %229 = OpFMul %224 %228 
                                                      OpStore %223 %229 
                                       f32_3 %230 = OpLoad %156 
                                       f32_3 %233 = OpFAdd %230 %232 
                                                      OpStore %218 %233 
                                       f32_4 %234 = OpLoad %185 
                                       f32_3 %235 = OpVectorShuffle %234 %234 0 0 0 
                                       f32_3 %236 = OpLoad %218 
                                       f32_3 %237 = OpFMul %235 %236 
                                       f32_3 %240 = OpFAdd %237 %239 
                                                      OpStore %218 %240 
                                Private f32* %242 = OpAccessChain %185 %50 
                                         f32 %243 = OpLoad %242 
                                         f32 %245 = OpFMul %243 %244 
                                         f32 %247 = OpFAdd %245 %246 
                                Private f32* %248 = OpAccessChain %241 %50 
                                                      OpStore %248 %247 
                                       f32_3 %249 = OpLoad %156 
                                       f32_3 %250 = OpLoad %241 
                                       f32_3 %251 = OpVectorShuffle %250 %250 0 0 0 
                                       f32_3 %252 = OpFMul %249 %251 
                                                      OpStore %241 %252 
                                       f32_4 %253 = OpLoad %185 
                                       f32_3 %254 = OpVectorShuffle %253 %253 3 3 3 
                                       f32_3 %255 = OpLoad %241 
                                       f32_3 %256 = OpFMul %254 %255 
                                                      OpStore %241 %256 
                                       f32_3 %257 = OpLoad %177 
                                       f32_3 %258 = OpVectorShuffle %257 %257 1 1 1 
                                       f32_3 %260 = OpLoad vs_TEXCOORD4 
                                       f32_3 %261 = OpFMul %258 %260 
                                                      OpStore %138 %261 
                                       f32_3 %262 = OpLoad %177 
                                       f32_3 %263 = OpVectorShuffle %262 %262 0 0 0 
                                       f32_3 %265 = OpLoad vs_TEXCOORD3 
                                       f32_3 %266 = OpFMul %263 %265 
                                       f32_3 %267 = OpLoad %138 
                                       f32_3 %268 = OpFAdd %266 %267 
                                                      OpStore %138 %268 
                                       f32_3 %269 = OpLoad %177 
                                       f32_3 %270 = OpVectorShuffle %269 %269 2 2 2 
                                       f32_3 %272 = OpLoad vs_TEXCOORD1 
                                       f32_3 %273 = OpFMul %270 %272 
                                       f32_3 %274 = OpLoad %138 
                                       f32_3 %275 = OpFAdd %273 %274 
                                                      OpStore %138 %275 
                                       f32_3 %277 = OpLoad %138 
                                       f32_3 %278 = OpLoad %138 
                                         f32 %279 = OpDot %277 %278 
                                                      OpStore %276 %279 
                                         f32 %280 = OpLoad %276 
                                         f32 %281 = OpExtInst %1 32 %280 
                                                      OpStore %276 %281 
                                         f32 %283 = OpLoad %276 
                                       f32_3 %284 = OpCompositeConstruct %283 %283 %283 
                                       f32_3 %285 = OpLoad %138 
                                       f32_3 %286 = OpFMul %284 %285 
                                       f32_4 %287 = OpLoad %282 
                                       f32_4 %288 = OpVectorShuffle %287 %286 4 5 6 3 
                                                      OpStore %282 %288 
                                       f32_4 %289 = OpLoad %282 
                                       f32_3 %290 = OpVectorShuffle %289 %289 0 1 2 
                              Uniform f32_4* %291 = OpAccessChain %116 %117 
                                       f32_4 %292 = OpLoad %291 
                                       f32_3 %293 = OpVectorShuffle %292 %292 0 1 2 
                                         f32 %294 = OpDot %290 %293 
                                                      OpStore %276 %294 
                                         f32 %295 = OpLoad %276 
                                         f32 %297 = OpExtInst %1 40 %295 %296 
                                Private f32* %298 = OpAccessChain %138 %50 
                                                      OpStore %298 %297 
                                       f32_4 %299 = OpLoad %282 
                                       f32_3 %300 = OpVectorShuffle %299 %299 0 1 2 
                                       f32_3 %301 = OpLoad %101 
                                         f32 %302 = OpDot %300 %301 
                                Private f32* %303 = OpAccessChain %89 %194 
                                                      OpStore %303 %302 
                              Uniform f32_4* %304 = OpAccessChain %116 %117 
                                       f32_4 %305 = OpLoad %304 
                                       f32_3 %306 = OpVectorShuffle %305 %305 0 1 2 
                                       f32_4 %307 = OpLoad %131 
                                       f32_3 %308 = OpVectorShuffle %307 %307 0 1 2 
                                         f32 %309 = OpDot %306 %308 
                                Private f32* %310 = OpAccessChain %89 %17 
                                                      OpStore %310 %309 
                                       f32_4 %311 = OpLoad %89 
                                       f32_3 %312 = OpVectorShuffle %311 %311 0 1 2 
                                       f32_3 %315 = OpExtInst %1 40 %312 %314 
                                       f32_4 %316 = OpLoad %89 
                                       f32_4 %317 = OpVectorShuffle %316 %315 4 5 6 3 
                                                      OpStore %89 %317 
                                Private f32* %319 = OpAccessChain %202 %50 
                                         f32 %320 = OpLoad %319 
                                Private f32* %321 = OpAccessChain %202 %50 
                                         f32 %322 = OpLoad %321 
                                         f32 %323 = OpFAdd %320 %322 
                                                      OpStore %318 %323 
                                Private f32* %324 = OpAccessChain %89 %17 
                                         f32 %325 = OpLoad %324 
                                Private f32* %326 = OpAccessChain %89 %17 
                                         f32 %327 = OpLoad %326 
                                         f32 %328 = OpFMul %325 %327 
                                Private f32* %329 = OpAccessChain %131 %50 
                                                      OpStore %329 %328 
                                Private f32* %330 = OpAccessChain %131 %50 
                                         f32 %331 = OpLoad %330 
                                         f32 %332 = OpLoad %318 
                                         f32 %333 = OpFMul %331 %332 
                                         f32 %335 = OpFAdd %333 %334 
                                                      OpStore %318 %335 
                                         f32 %336 = OpLoad %318 
                                         f32 %337 = OpFAdd %336 %182 
                                Private f32* %338 = OpAccessChain %177 %50 
                                                      OpStore %338 %337 
                                Private f32* %339 = OpAccessChain %89 %194 
                                         f32 %340 = OpLoad %339 
                                         f32 %341 = OpFNegate %340 
                                         f32 %342 = OpFAdd %341 %55 
                                Private f32* %343 = OpAccessChain %101 %50 
                                                      OpStore %343 %342 
                                Private f32* %344 = OpAccessChain %101 %50 
                                         f32 %345 = OpLoad %344 
                                         f32 %346 = OpExtInst %1 40 %345 %38 
                                Private f32* %347 = OpAccessChain %101 %50 
                                                      OpStore %347 %346 
                                Private f32* %348 = OpAccessChain %101 %50 
                                         f32 %349 = OpLoad %348 
                                Private f32* %350 = OpAccessChain %101 %50 
                                         f32 %351 = OpLoad %350 
                                         f32 %352 = OpFMul %349 %351 
                                                      OpStore %318 %352 
                                         f32 %353 = OpLoad %318 
                                         f32 %354 = OpLoad %318 
                                         f32 %355 = OpFMul %353 %354 
                                                      OpStore %318 %355 
                                Private f32* %356 = OpAccessChain %101 %50 
                                         f32 %357 = OpLoad %356 
                                         f32 %358 = OpLoad %318 
                                         f32 %359 = OpFMul %357 %358 
                                Private f32* %360 = OpAccessChain %101 %50 
                                                      OpStore %360 %359 
                                Private f32* %361 = OpAccessChain %177 %50 
                                         f32 %362 = OpLoad %361 
                                Private f32* %363 = OpAccessChain %101 %50 
                                         f32 %364 = OpLoad %363 
                                         f32 %365 = OpFMul %362 %364 
                                         f32 %366 = OpFAdd %365 %55 
                                Private f32* %367 = OpAccessChain %101 %50 
                                                      OpStore %367 %366 
                                Private f32* %368 = OpAccessChain %138 %50 
                                         f32 %369 = OpLoad %368 
                                         f32 %370 = OpFNegate %369 
                                         f32 %371 = OpFAdd %370 %55 
                                                      OpStore %318 %371 
                                         f32 %372 = OpLoad %318 
                                         f32 %373 = OpExtInst %1 40 %372 %38 
                                                      OpStore %318 %373 
                                         f32 %374 = OpLoad %318 
                                         f32 %375 = OpLoad %318 
                                         f32 %376 = OpFMul %374 %375 
                                Private f32* %377 = OpAccessChain %131 %50 
                                                      OpStore %377 %376 
                                Private f32* %378 = OpAccessChain %131 %50 
                                         f32 %379 = OpLoad %378 
                                Private f32* %380 = OpAccessChain %131 %50 
                                         f32 %381 = OpLoad %380 
                                         f32 %382 = OpFMul %379 %381 
                                Private f32* %383 = OpAccessChain %131 %50 
                                                      OpStore %383 %382 
                                         f32 %384 = OpLoad %318 
                                Private f32* %385 = OpAccessChain %131 %50 
                                         f32 %386 = OpLoad %385 
                                         f32 %387 = OpFMul %384 %386 
                                                      OpStore %318 %387 
                                Private f32* %388 = OpAccessChain %177 %50 
                                         f32 %389 = OpLoad %388 
                                         f32 %390 = OpLoad %318 
                                         f32 %391 = OpFMul %389 %390 
                                         f32 %392 = OpFAdd %391 %55 
                                                      OpStore %318 %392 
                                Private f32* %394 = OpAccessChain %101 %50 
                                         f32 %395 = OpLoad %394 
                                         f32 %396 = OpLoad %318 
                                         f32 %397 = OpFMul %395 %396 
                                                      OpStore %393 %397 
                                         f32 %398 = OpLoad %393 
                                         f32 %399 = OpExtInst %1 37 %398 %55 
                                                      OpStore %393 %399 
                                         f32 %400 = OpLoad %276 
                                         f32 %401 = OpLoad %393 
                                         f32 %402 = OpFMul %400 %401 
                                                      OpStore %393 %402 
                                         f32 %404 = OpLoad %393 
                                         f32 %405 = OpFMul %404 %334 
                                         f32 %406 = OpFAdd %405 %334 
                                                      OpStore %403 %406 
                                         f32 %407 = OpLoad %403 
                                Private f32* %408 = OpAccessChain %131 %50 
                                                      OpStore %408 %407 
                                Uniform f32* %409 = OpAccessChain %144 %49 
                                         f32 %410 = OpLoad %409 
                                Uniform f32* %411 = OpAccessChain %144 %49 
                                         f32 %412 = OpLoad %411 
                                       f32_2 %413 = OpCompositeConstruct %410 %412 
                                         f32 %414 = OpCompositeExtract %413 0 
                                         f32 %415 = OpCompositeExtract %413 1 
                                       f32_2 %416 = OpCompositeConstruct %414 %415 
                                       f32_4 %417 = OpLoad %131 
                                       f32_4 %418 = OpVectorShuffle %417 %416 0 4 2 5 
                                                      OpStore %131 %418 
                         read_only Texture2D %421 = OpLoad %420 
                                     sampler %423 = OpLoad %422 
                  read_only Texture2DSampled %424 = OpSampledImage %421 %423 
                                       f32_4 %425 = OpLoad %131 
                                       f32_2 %426 = OpVectorShuffle %425 %425 0 1 
                                       f32_4 %427 = OpImageSampleImplicitLod %424 %426 
                                       f32_3 %428 = OpVectorShuffle %427 %427 0 1 2 
                                                      OpStore %419 %428 
                                       f32_3 %430 = OpLoad %419 
                                Uniform f32* %432 = OpAccessChain %144 %431 
                                         f32 %433 = OpLoad %432 
                                Uniform f32* %434 = OpAccessChain %144 %431 
                                         f32 %435 = OpLoad %434 
                                Uniform f32* %436 = OpAccessChain %144 %431 
                                         f32 %437 = OpLoad %436 
                                       f32_3 %438 = OpCompositeConstruct %433 %435 %437 
                                         f32 %439 = OpCompositeExtract %438 0 
                                         f32 %440 = OpCompositeExtract %438 1 
                                         f32 %441 = OpCompositeExtract %438 2 
                                       f32_3 %442 = OpCompositeConstruct %439 %440 %441 
                                       f32_3 %443 = OpFMul %430 %442 
                                                      OpStore %429 %443 
                                Private f32* %444 = OpAccessChain %42 %50 
                                         f32 %445 = OpLoad %444 
                                Private f32* %446 = OpAccessChain %131 %50 
                                         f32 %447 = OpLoad %446 
                                         f32 %448 = OpExtInst %1 37 %445 %447 
                                Private f32* %449 = OpAccessChain %101 %50 
                                                      OpStore %449 %448 
                                       f32_3 %451 = OpLoad %241 
                                       f32_3 %452 = OpLoad %429 
                                       f32_3 %453 = OpFMul %451 %452 
                                                      OpStore %450 %453 
                                       f32_3 %454 = OpLoad %450 
                              Uniform f32_4* %455 = OpAccessChain %116 %145 
                                       f32_4 %456 = OpLoad %455 
                                       f32_3 %457 = OpVectorShuffle %456 %456 0 1 2 
                                       f32_3 %458 = OpFMul %454 %457 
                                                      OpStore %429 %458 
                                       f32_3 %459 = OpLoad %429 
                                       f32_3 %460 = OpLoad %101 
                                       f32_3 %461 = OpVectorShuffle %460 %460 0 0 0 
                                       f32_3 %462 = OpFMul %459 %461 
                                       f32_3 %463 = OpLoad %223 
                                       f32_3 %464 = OpFAdd %462 %463 
                                                      OpStore %429 %464 
                                Uniform f32* %465 = OpAccessChain %116 %225 %50 
                                         f32 %466 = OpLoad %465 
                                Uniform f32* %473 = OpAccessChain %472 %431 %194 
                                         f32 %474 = OpLoad %473 
                                         f32 %475 = OpExtInst %1 37 %466 %474 
                                                      OpStore %393 %475 
                                         f32 %478 = OpLoad %393 
                                         i32 %479 = OpConvertFToS %478 
                                                      OpStore %477 %479 
                                       f32_3 %480 = OpLoad %429 
                                                      OpStore %450 %480 
                                                      OpStore %482 %50 
                                                      OpBranch %483 
                                             %483 = OpLabel 
                                                      OpLoopMerge %485 %486 None 
                                                      OpBranch %487 
                                             %487 = OpLabel 
                                         u32 %488 = OpLoad %482 
                                         i32 %489 = OpLoad %477 
                                         u32 %490 = OpBitcast %489 
                                        bool %491 = OpULessThan %488 %490 
                                                      OpBranchConditional %491 %484 %485 
                                             %484 = OpLabel 
                                         u32 %493 = OpLoad %482 
                                         u32 %495 = OpBitwiseAnd %493 %494 
                                         i32 %496 = OpBitcast %495 
                                                      OpStore %492 %496 
                                         u32 %499 = OpLoad %482 
                                         u32 %500 = OpShiftRightLogical %499 %17 
                                                      OpStore %498 %500 
                                         u32 %502 = OpLoad %498 
                                         i32 %503 = OpBitcast %502 
                              Uniform f32_4* %504 = OpAccessChain %472 %501 %503 
                                       f32_4 %505 = OpLoad %504 
                                         i32 %514 = OpLoad %492 
                                                      OpStore %516 %513 
                             Function u32_4* %518 = OpAccessChain %516 %514 
                                       u32_4 %519 = OpLoad %518 
                                       f32_4 %520 = OpBitcast %519 
                                         f32 %521 = OpDot %505 %520 
                                                      OpStore %393 %521 
                                         f32 %522 = OpLoad %393 
                                         i32 %523 = OpConvertFToS %522 
                                                      OpStore %492 %523 
                                       f32_3 %526 = OpLoad vs_TEXCOORD5 
                                       f32_3 %527 = OpFNegate %526 
                                         i32 %537 = OpLoad %492 
                              Uniform f32_4* %538 = OpAccessChain %536 %117 %537 
                                       f32_4 %539 = OpLoad %538 
                                       f32_3 %540 = OpVectorShuffle %539 %539 3 3 3 
                                       f32_3 %541 = OpFMul %527 %540 
                                         i32 %542 = OpLoad %492 
                              Uniform f32_4* %543 = OpAccessChain %536 %117 %542 
                                       f32_4 %544 = OpLoad %543 
                                       f32_3 %545 = OpVectorShuffle %544 %544 0 1 2 
                                       f32_3 %546 = OpFAdd %541 %545 
                                                      OpStore %524 %546 
                                       f32_3 %548 = OpLoad %524 
                                       f32_3 %549 = OpLoad %524 
                                         f32 %550 = OpDot %548 %549 
                                                      OpStore %547 %550 
                                         f32 %551 = OpLoad %547 
                                         f32 %553 = OpExtInst %1 40 %551 %552 
                                                      OpStore %547 %553 
                                         f32 %555 = OpLoad %547 
                                         f32 %556 = OpExtInst %1 32 %555 
                                                      OpStore %554 %556 
                                         f32 %557 = OpLoad %554 
                                       f32_3 %558 = OpCompositeConstruct %557 %557 %557 
                                       f32_3 %559 = OpLoad %524 
                                       f32_3 %560 = OpFMul %558 %559 
                                                      OpStore %524 %560 
                                         f32 %561 = OpLoad %547 
                                         f32 %562 = OpFDiv %55 %561 
                                                      OpStore %554 %562 
                                         f32 %563 = OpLoad %547 
                                         i32 %564 = OpLoad %492 
                                Uniform f32* %565 = OpAccessChain %536 %225 %564 %50 
                                         f32 %566 = OpLoad %565 
                                         f32 %567 = OpFMul %563 %566 
                                         i32 %568 = OpLoad %492 
                                Uniform f32* %569 = OpAccessChain %536 %225 %568 %194 
                                         f32 %570 = OpLoad %569 
                                         f32 %571 = OpFAdd %567 %570 
                                                      OpStore %547 %571 
                                         f32 %572 = OpLoad %547 
                                         f32 %573 = OpExtInst %1 43 %572 %38 %55 
                                                      OpStore %547 %573 
                                         f32 %574 = OpLoad %547 
                                         f32 %575 = OpLoad %554 
                                         f32 %576 = OpFMul %574 %575 
                                                      OpStore %547 %576 
                                         i32 %577 = OpLoad %492 
                              Uniform f32_4* %578 = OpAccessChain %536 %197 %577 
                                       f32_4 %579 = OpLoad %578 
                                       f32_3 %580 = OpVectorShuffle %579 %579 0 1 2 
                                       f32_3 %581 = OpLoad %524 
                                         f32 %582 = OpDot %580 %581 
                                                      OpStore %393 %582 
                                         f32 %583 = OpLoad %393 
                                         i32 %584 = OpLoad %492 
                                Uniform f32* %585 = OpAccessChain %536 %225 %584 %17 
                                         f32 %586 = OpLoad %585 
                                         f32 %587 = OpFMul %583 %586 
                                         i32 %588 = OpLoad %492 
                                Uniform f32* %589 = OpAccessChain %536 %225 %588 %494 
                                         f32 %590 = OpLoad %589 
                                         f32 %591 = OpFAdd %587 %590 
                                                      OpStore %393 %591 
                                         f32 %592 = OpLoad %393 
                                         f32 %593 = OpExtInst %1 43 %592 %38 %55 
                                                      OpStore %393 %593 
                                         f32 %594 = OpLoad %393 
                                         f32 %595 = OpLoad %393 
                                         f32 %596 = OpFMul %594 %595 
                                                      OpStore %393 %596 
                                         f32 %597 = OpLoad %547 
                                         f32 %598 = OpLoad %393 
                                         f32 %599 = OpFMul %597 %598 
                                                      OpStore %547 %599 
                                       f32_4 %600 = OpLoad %282 
                                       f32_3 %601 = OpVectorShuffle %600 %600 0 1 2 
                                       f32_3 %602 = OpLoad %524 
                                         f32 %603 = OpDot %601 %602 
                                                      OpStore %554 %603 
                                         f32 %604 = OpLoad %554 
                                         f32 %605 = OpExtInst %1 40 %604 %296 
                                Private f32* %606 = OpAccessChain %131 %17 
                                                      OpStore %606 %605 
                         read_only Texture2D %608 = OpLoad %420 
                                     sampler %609 = OpLoad %422 
                  read_only Texture2DSampled %610 = OpSampledImage %608 %609 
                                       f32_4 %611 = OpLoad %131 
                                       f32_2 %612 = OpVectorShuffle %611 %611 2 3 
                                       f32_4 %613 = OpImageSampleImplicitLod %610 %612 
                                       f32_3 %614 = OpVectorShuffle %613 %613 0 1 2 
                                                      OpStore %607 %614 
                                       f32_3 %615 = OpLoad %607 
                                Uniform f32* %616 = OpAccessChain %144 %431 
                                         f32 %617 = OpLoad %616 
                                Uniform f32* %618 = OpAccessChain %144 %431 
                                         f32 %619 = OpLoad %618 
                                Uniform f32* %620 = OpAccessChain %144 %431 
                                         f32 %621 = OpLoad %620 
                                       f32_3 %622 = OpCompositeConstruct %617 %619 %621 
                                         f32 %623 = OpCompositeExtract %622 0 
                                         f32 %624 = OpCompositeExtract %622 1 
                                         f32 %625 = OpCompositeExtract %622 2 
                                       f32_3 %626 = OpCompositeConstruct %623 %624 %625 
                                       f32_3 %627 = OpFMul %615 %626 
                                                      OpStore %524 %627 
                                       f32_3 %629 = OpLoad %241 
                                       f32_3 %630 = OpLoad %524 
                                       f32_3 %631 = OpFMul %629 %630 
                                                      OpStore %628 %631 
                                       f32_3 %632 = OpLoad %628 
                                         i32 %633 = OpLoad %492 
                              Uniform f32_4* %634 = OpAccessChain %536 %145 %633 
                                       f32_4 %635 = OpLoad %634 
                                       f32_3 %636 = OpVectorShuffle %635 %635 0 1 2 
                                       f32_3 %637 = OpFMul %632 %636 
                                                      OpStore %628 %637 
                                       f32_3 %638 = OpLoad %628 
                                         f32 %639 = OpLoad %547 
                                       f32_3 %640 = OpCompositeConstruct %639 %639 %639 
                                       f32_3 %641 = OpFMul %638 %640 
                                       f32_3 %642 = OpLoad %223 
                                       f32_3 %643 = OpFAdd %641 %642 
                                                      OpStore %628 %643 
                                       f32_3 %644 = OpLoad %450 
                                       f32_3 %645 = OpLoad %628 
                                       f32_3 %646 = OpFAdd %644 %645 
                                                      OpStore %450 %646 
                                                      OpBranch %486 
                                             %486 = OpLabel 
                                         u32 %647 = OpLoad %482 
                                         u32 %648 = OpIAdd %647 %145 
                                                      OpStore %482 %648 
                                                      OpBranch %483 
                                             %485 = OpLabel 
                                Private f32* %649 = OpAccessChain %89 %50 
                                         f32 %650 = OpLoad %649 
                                         f32 %651 = OpExtInst %1 32 %650 
                                Private f32* %652 = OpAccessChain %89 %50 
                                                      OpStore %652 %651 
                                       f32_4 %653 = OpLoad %89 
                                       f32_3 %654 = OpVectorShuffle %653 %653 0 0 0 
                                       f32_3 %655 = OpLoad %106 
                                       f32_3 %656 = OpFMul %654 %655 
                                       f32_4 %657 = OpLoad %89 
                                       f32_4 %658 = OpVectorShuffle %657 %656 4 5 2 6 
                                                      OpStore %89 %658 
                                       f32_4 %659 = OpLoad %282 
                                       f32_3 %660 = OpVectorShuffle %659 %659 0 1 2 
                                       f32_4 %661 = OpLoad %89 
                                       f32_3 %662 = OpVectorShuffle %661 %661 0 1 3 
                                         f32 %663 = OpDot %660 %662 
                                Private f32* %664 = OpAccessChain %106 %50 
                                                      OpStore %664 %663 
                                Private f32* %665 = OpAccessChain %106 %50 
                                         f32 %666 = OpLoad %665 
                                         f32 %667 = OpExtInst %1 43 %666 %38 %55 
                                Private f32* %668 = OpAccessChain %106 %50 
                                                      OpStore %668 %667 
                              Uniform f32_4* %669 = OpAccessChain %116 %117 
                                       f32_4 %670 = OpLoad %669 
                                       f32_3 %671 = OpVectorShuffle %670 %670 0 1 2 
                                       f32_4 %672 = OpLoad %89 
                                       f32_3 %673 = OpVectorShuffle %672 %672 0 1 3 
                                         f32 %674 = OpDot %671 %673 
                                Private f32* %675 = OpAccessChain %89 %50 
                                                      OpStore %675 %674 
                                Private f32* %676 = OpAccessChain %89 %50 
                                         f32 %677 = OpLoad %676 
                                         f32 %678 = OpExtInst %1 43 %677 %38 %55 
                                Private f32* %679 = OpAccessChain %89 %50 
                                                      OpStore %679 %678 
                                Private f32* %680 = OpAccessChain %106 %50 
                                         f32 %681 = OpLoad %680 
                                Private f32* %682 = OpAccessChain %106 %50 
                                         f32 %683 = OpLoad %682 
                                         f32 %684 = OpFMul %681 %683 
                                Private f32* %685 = OpAccessChain %101 %50 
                                                      OpStore %685 %684 
                                Private f32* %686 = OpAccessChain %202 %50 
                                         f32 %687 = OpLoad %686 
                                Private f32* %688 = OpAccessChain %202 %50 
                                         f32 %689 = OpLoad %688 
                                         f32 %690 = OpFMul %687 %689 
                                                      OpStore %393 %690 
                                Private f32* %692 = OpAccessChain %202 %50 
                                         f32 %693 = OpLoad %692 
                                Private f32* %694 = OpAccessChain %202 %50 
                                         f32 %695 = OpLoad %694 
                                         f32 %696 = OpFMul %693 %695 
                                         f32 %697 = OpFAdd %696 %182 
                                                      OpStore %691 %697 
                                Private f32* %698 = OpAccessChain %101 %50 
                                         f32 %699 = OpLoad %698 
                                         f32 %700 = OpLoad %691 
                                         f32 %701 = OpFMul %699 %700 
                                         f32 %703 = OpFAdd %701 %702 
                                Private f32* %704 = OpAccessChain %101 %50 
                                                      OpStore %704 %703 
                                Private f32* %705 = OpAccessChain %89 %50 
                                         f32 %706 = OpLoad %705 
                                Private f32* %707 = OpAccessChain %89 %50 
                                         f32 %708 = OpLoad %707 
                                         f32 %709 = OpFMul %706 %708 
                                                      OpStore %691 %709 
                                Private f32* %710 = OpAccessChain %101 %50 
                                         f32 %711 = OpLoad %710 
                                Private f32* %712 = OpAccessChain %101 %50 
                                         f32 %713 = OpLoad %712 
                                         f32 %714 = OpFMul %711 %713 
                                Private f32* %715 = OpAccessChain %89 %50 
                                                      OpStore %715 %714 
                                         f32 %716 = OpLoad %691 
                                         f32 %718 = OpExtInst %1 40 %716 %717 
                                Private f32* %719 = OpAccessChain %101 %50 
                                                      OpStore %719 %718 
                                Private f32* %720 = OpAccessChain %101 %50 
                                         f32 %721 = OpLoad %720 
                                Private f32* %722 = OpAccessChain %89 %50 
                                         f32 %723 = OpLoad %722 
                                         f32 %724 = OpFMul %721 %723 
                                Private f32* %725 = OpAccessChain %89 %50 
                                                      OpStore %725 %724 
                                Private f32* %726 = OpAccessChain %202 %50 
                                         f32 %727 = OpLoad %726 
                                         f32 %729 = OpFMul %727 %728 
                                         f32 %730 = OpFAdd %729 %179 
                                                      OpStore %691 %730 
                                Private f32* %731 = OpAccessChain %89 %50 
                                         f32 %732 = OpLoad %731 
                                         f32 %733 = OpLoad %691 
                                         f32 %734 = OpFMul %732 %733 
                                Private f32* %735 = OpAccessChain %89 %50 
                                                      OpStore %735 %734 
                                         f32 %736 = OpLoad %393 
                                Private f32* %737 = OpAccessChain %89 %50 
                                         f32 %738 = OpLoad %737 
                                         f32 %739 = OpFDiv %736 %738 
                                Private f32* %740 = OpAccessChain %89 %50 
                                                      OpStore %740 %739 
                                       f32_3 %741 = OpLoad %218 
                                       f32_4 %742 = OpLoad %89 
                                       f32_3 %743 = OpVectorShuffle %742 %742 0 0 0 
                                       f32_3 %744 = OpFMul %741 %743 
                                       f32_4 %745 = OpLoad %89 
                                       f32_4 %746 = OpVectorShuffle %745 %744 4 5 2 6 
                                                      OpStore %89 %746 
                                       f32_4 %747 = OpLoad %89 
                                       f32_3 %748 = OpVectorShuffle %747 %747 0 1 3 
                                       f32_3 %751 = OpFMul %748 %750 
                                                      OpStore %628 %751 
                                       f32_3 %752 = OpLoad %628 
                              Uniform f32_4* %753 = OpAccessChain %116 %145 
                                       f32_4 %754 = OpLoad %753 
                                       f32_3 %755 = OpVectorShuffle %754 %754 0 1 2 
                                       f32_3 %756 = OpFMul %752 %755 
                                                      OpStore %106 %756 
                                       f32_3 %757 = OpLoad %106 
                                       f32_3 %758 = OpLoad %138 
                                       f32_3 %759 = OpVectorShuffle %758 %758 0 0 0 
                                       f32_3 %760 = OpFMul %757 %759 
                                       f32_3 %761 = OpLoad %450 
                                       f32_3 %762 = OpFAdd %760 %761 
                                                      OpStore %450 %762 
                                Private f32* %763 = OpAccessChain %282 %494 
                                                      OpStore %763 %55 
                              Uniform f32_4* %764 = OpAccessChain %472 %49 
                                       f32_4 %765 = OpLoad %764 
                                       f32_4 %766 = OpLoad %282 
                                         f32 %767 = OpDot %765 %766 
                                Private f32* %768 = OpAccessChain %628 %50 
                                                      OpStore %768 %767 
                              Uniform f32_4* %770 = OpAccessChain %472 %769 
                                       f32_4 %771 = OpLoad %770 
                                       f32_4 %772 = OpLoad %282 
                                         f32 %773 = OpDot %771 %772 
                                Private f32* %774 = OpAccessChain %628 %194 
                                                      OpStore %774 %773 
                              Uniform f32_4* %776 = OpAccessChain %472 %775 
                                       f32_4 %777 = OpLoad %776 
                                       f32_4 %778 = OpLoad %282 
                                         f32 %779 = OpDot %777 %778 
                                Private f32* %780 = OpAccessChain %628 %17 
                                                      OpStore %780 %779 
                                       f32_4 %781 = OpLoad %282 
                                       f32_4 %782 = OpVectorShuffle %781 %781 1 2 2 0 
                                       f32_4 %783 = OpLoad %282 
                                       f32_4 %784 = OpVectorShuffle %783 %783 0 1 2 2 
                                       f32_4 %785 = OpFMul %782 %784 
                                                      OpStore %42 %785 
                              Uniform f32_4* %788 = OpAccessChain %472 %787 
                                       f32_4 %789 = OpLoad %788 
                                       f32_4 %790 = OpLoad %42 
                                         f32 %791 = OpDot %789 %790 
                                Private f32* %792 = OpAccessChain %786 %50 
                                                      OpStore %792 %791 
                              Uniform f32_4* %794 = OpAccessChain %472 %793 
                                       f32_4 %795 = OpLoad %794 
                                       f32_4 %796 = OpLoad %42 
                                         f32 %797 = OpDot %795 %796 
                                Private f32* %798 = OpAccessChain %786 %194 
                                                      OpStore %798 %797 
                              Uniform f32_4* %800 = OpAccessChain %472 %799 
                                       f32_4 %801 = OpLoad %800 
                                       f32_4 %802 = OpLoad %42 
                                         f32 %803 = OpDot %801 %802 
                                Private f32* %804 = OpAccessChain %786 %17 
                                                      OpStore %804 %803 
                                Private f32* %805 = OpAccessChain %282 %194 
                                         f32 %806 = OpLoad %805 
                                Private f32* %807 = OpAccessChain %282 %194 
                                         f32 %808 = OpLoad %807 
                                         f32 %809 = OpFMul %806 %808 
                                                      OpStore %393 %809 
                                Private f32* %810 = OpAccessChain %282 %50 
                                         f32 %811 = OpLoad %810 
                                Private f32* %812 = OpAccessChain %282 %50 
                                         f32 %813 = OpLoad %812 
                                         f32 %814 = OpFMul %811 %813 
                                         f32 %815 = OpLoad %393 
                                         f32 %816 = OpFNegate %815 
                                         f32 %817 = OpFAdd %814 %816 
                                                      OpStore %393 %817 
                              Uniform f32_4* %819 = OpAccessChain %472 %818 
                                       f32_4 %820 = OpLoad %819 
                                       f32_3 %821 = OpVectorShuffle %820 %820 0 1 2 
                                         f32 %822 = OpLoad %393 
                                       f32_3 %823 = OpCompositeConstruct %822 %822 %822 
                                       f32_3 %824 = OpFMul %821 %823 
                                       f32_3 %825 = OpLoad %786 
                                       f32_3 %826 = OpFAdd %824 %825 
                                                      OpStore %786 %826 
                                       f32_3 %827 = OpLoad %628 
                                       f32_3 %828 = OpLoad %786 
                                       f32_3 %829 = OpFAdd %827 %828 
                                                      OpStore %628 %829 
                                       f32_3 %830 = OpLoad %628 
                                       f32_3 %832 = OpExtInst %1 40 %830 %831 
                                                      OpStore %628 %832 
                                       f32_3 %833 = OpLoad %241 
                                       f32_3 %834 = OpLoad %628 
                                       f32_3 %835 = OpFMul %833 %834 
                                                      OpStore %241 %835 
                                Uniform f32* %836 = OpAccessChain %116 %197 %117 %50 
                                         f32 %837 = OpLoad %836 
                                Private f32* %838 = OpAccessChain %106 %50 
                                                      OpStore %838 %837 
                                Uniform f32* %839 = OpAccessChain %116 %197 %145 %50 
                                         f32 %840 = OpLoad %839 
                                Private f32* %841 = OpAccessChain %106 %194 
                                                      OpStore %841 %840 
                                Uniform f32* %842 = OpAccessChain %116 %197 %225 %50 
                                         f32 %843 = OpLoad %842 
                                Private f32* %844 = OpAccessChain %106 %17 
                                                      OpStore %844 %843 
                                       f32_3 %845 = OpLoad %106 
                                       f32_4 %846 = OpLoad %282 
                                       f32_3 %847 = OpVectorShuffle %846 %846 0 1 2 
                                         f32 %848 = OpDot %845 %847 
                                Private f32* %849 = OpAccessChain %628 %50 
                                                      OpStore %849 %848 
                                Uniform f32* %850 = OpAccessChain %116 %197 %117 %194 
                                         f32 %851 = OpLoad %850 
                                Private f32* %852 = OpAccessChain %106 %50 
                                                      OpStore %852 %851 
                                Uniform f32* %853 = OpAccessChain %116 %197 %145 %194 
                                         f32 %854 = OpLoad %853 
                                Private f32* %855 = OpAccessChain %106 %194 
                                                      OpStore %855 %854 
                                Uniform f32* %856 = OpAccessChain %116 %197 %225 %194 
                                         f32 %857 = OpLoad %856 
                                Private f32* %858 = OpAccessChain %106 %17 
                                                      OpStore %858 %857 
                                       f32_3 %859 = OpLoad %106 
                                       f32_4 %860 = OpLoad %282 
                                       f32_3 %861 = OpVectorShuffle %860 %860 0 1 2 
                                         f32 %862 = OpDot %859 %861 
                                Private f32* %863 = OpAccessChain %628 %194 
                                                      OpStore %863 %862 
                                       f32_3 %864 = OpLoad %628 
                                       f32_2 %865 = OpVectorShuffle %864 %864 0 1 
                                       f32_2 %867 = OpFMul %865 %866 
                                       f32_2 %868 = OpFAdd %867 %866 
                                       f32_3 %869 = OpLoad %628 
                                       f32_3 %870 = OpVectorShuffle %869 %868 3 4 2 
                                                      OpStore %628 %870 
                                Private f32* %871 = OpAccessChain %202 %50 
                                         f32 %872 = OpLoad %871 
                                         f32 %873 = OpFNegate %872 
                                         f32 %875 = OpFMul %873 %874 
                                         f32 %877 = OpFAdd %875 %876 
                                                      OpStore %393 %877 
                                Private f32* %878 = OpAccessChain %202 %50 
                                         f32 %879 = OpLoad %878 
                                         f32 %880 = OpLoad %393 
                                         f32 %881 = OpFMul %879 %880 
                                Private f32* %882 = OpAccessChain %202 %50 
                                                      OpStore %882 %881 
                                Private f32* %883 = OpAccessChain %202 %50 
                                         f32 %884 = OpLoad %883 
                                         f32 %886 = OpFMul %884 %885 
                                                      OpStore %393 %886 
                         read_only Texture2D %889 = OpLoad %888 
                                     sampler %891 = OpLoad %890 
                  read_only Texture2DSampled %892 = OpSampledImage %889 %891 
                                       f32_3 %893 = OpLoad %628 
                                       f32_2 %894 = OpVectorShuffle %893 %893 0 1 
                                         f32 %895 = OpLoad %393 
                                       f32_4 %896 = OpImageSampleExplicitLod %892 %894 Lod %10 
                                       f32_3 %897 = OpVectorShuffle %896 %896 0 1 2 
                                                      OpStore %887 %897 
                                Private f32* %898 = OpAccessChain %202 %50 
                                         f32 %899 = OpLoad %898 
                                Private f32* %900 = OpAccessChain %202 %50 
                                         f32 %901 = OpLoad %900 
                                         f32 %902 = OpFMul %899 %901 
                                         f32 %903 = OpFAdd %902 %55 
                                Private f32* %904 = OpAccessChain %131 %50 
                                                      OpStore %904 %903 
                                Private f32* %905 = OpAccessChain %131 %50 
                                         f32 %906 = OpLoad %905 
                                         f32 %907 = OpFDiv %55 %906 
                                Private f32* %908 = OpAccessChain %131 %50 
                                                      OpStore %908 %907 
                                Private f32* %909 = OpAccessChain %89 %194 
                                         f32 %910 = OpLoad %909 
                                Private f32* %911 = OpAccessChain %89 %50 
                                         f32 %912 = OpLoad %911 
                                         f32 %913 = OpExtInst %1 40 %910 %912 
                                Private f32* %914 = OpAccessChain %89 %50 
                                                      OpStore %914 %913 
                                Private f32* %915 = OpAccessChain %89 %494 
                                         f32 %916 = OpLoad %915 
                                Private f32* %917 = OpAccessChain %89 %50 
                                         f32 %918 = OpLoad %917 
                                         f32 %919 = OpExtInst %1 40 %916 %918 
                                Private f32* %920 = OpAccessChain %89 %50 
                                                      OpStore %920 %919 
                                         f32 %921 = OpLoad %127 
                                Private f32* %922 = OpAccessChain %89 %50 
                                         f32 %923 = OpLoad %922 
                                         f32 %924 = OpFAdd %921 %923 
                                Private f32* %925 = OpAccessChain %89 %50 
                                                      OpStore %925 %924 
                                Private f32* %926 = OpAccessChain %89 %50 
                                         f32 %927 = OpLoad %926 
                                         f32 %928 = OpExtInst %1 43 %927 %38 %55 
                                Private f32* %929 = OpAccessChain %89 %50 
                                                      OpStore %929 %928 
                                Private f32* %930 = OpAccessChain %89 %17 
                                         f32 %931 = OpLoad %930 
                                         f32 %932 = OpFNegate %931 
                                         f32 %933 = OpFAdd %932 %55 
                                Private f32* %934 = OpAccessChain %101 %50 
                                                      OpStore %934 %933 
                                Private f32* %935 = OpAccessChain %101 %50 
                                         f32 %936 = OpLoad %935 
                                         f32 %937 = OpExtInst %1 40 %936 %38 
                                Private f32* %938 = OpAccessChain %101 %50 
                                                      OpStore %938 %937 
                                Private f32* %940 = OpAccessChain %101 %50 
                                         f32 %941 = OpLoad %940 
                                Private f32* %942 = OpAccessChain %101 %50 
                                         f32 %943 = OpLoad %942 
                                         f32 %944 = OpFMul %941 %943 
                                                      OpStore %939 %944 
                                         f32 %945 = OpLoad %939 
                                         f32 %946 = OpLoad %939 
                                         f32 %947 = OpFMul %945 %946 
                                                      OpStore %939 %947 
                                Private f32* %948 = OpAccessChain %101 %50 
                                         f32 %949 = OpLoad %948 
                                         f32 %950 = OpLoad %939 
                                         f32 %951 = OpFMul %949 %950 
                                Private f32* %952 = OpAccessChain %101 %50 
                                                      OpStore %952 %951 
                                       f32_3 %953 = OpLoad %218 
                                       f32_3 %954 = OpFNegate %953 
                                       f32_4 %955 = OpLoad %89 
                                       f32_3 %956 = OpVectorShuffle %955 %955 0 0 0 
                                       f32_3 %957 = OpFAdd %954 %956 
                                       f32_4 %958 = OpLoad %89 
                                       f32_4 %959 = OpVectorShuffle %958 %957 4 1 5 6 
                                                      OpStore %89 %959 
                                       f32_3 %960 = OpLoad %101 
                                       f32_3 %961 = OpVectorShuffle %960 %960 0 0 0 
                                       f32_4 %962 = OpLoad %89 
                                       f32_3 %963 = OpVectorShuffle %962 %962 0 2 3 
                                       f32_3 %964 = OpFMul %961 %963 
                                       f32_3 %965 = OpLoad %218 
                                       f32_3 %966 = OpFAdd %964 %965 
                                       f32_4 %967 = OpLoad %89 
                                       f32_4 %968 = OpVectorShuffle %967 %966 4 5 6 3 
                                                      OpStore %89 %968 
                                       f32_4 %969 = OpLoad %131 
                                       f32_3 %970 = OpVectorShuffle %969 %969 0 0 0 
                                       f32_4 %971 = OpLoad %89 
                                       f32_3 %972 = OpVectorShuffle %971 %971 0 1 2 
                                       f32_3 %973 = OpFMul %970 %972 
                                       f32_4 %974 = OpLoad %89 
                                       f32_4 %975 = OpVectorShuffle %974 %973 4 5 6 3 
                                                      OpStore %89 %975 
                                       f32_4 %976 = OpLoad %185 
                                       f32_3 %977 = OpVectorShuffle %976 %976 3 3 3 
                                       f32_3 %978 = OpLoad %887 
                                       f32_3 %979 = OpFMul %977 %978 
                                                      OpStore %202 %979 
                                       f32_4 %980 = OpLoad %89 
                                       f32_3 %981 = OpVectorShuffle %980 %980 0 1 2 
                                       f32_3 %982 = OpLoad %202 
                                       f32_3 %983 = OpFMul %981 %982 
                                       f32_4 %984 = OpLoad %89 
                                       f32_4 %985 = OpVectorShuffle %984 %983 4 5 6 3 
                                                      OpStore %89 %985 
                                       f32_3 %986 = OpLoad %241 
                                Uniform f32* %987 = OpAccessChain %144 %117 
                                         f32 %988 = OpLoad %987 
                                       f32_3 %989 = OpCompositeConstruct %988 %988 %988 
                                       f32_3 %990 = OpFMul %986 %989 
                                       f32_4 %991 = OpLoad %89 
                                       f32_3 %992 = OpVectorShuffle %991 %991 0 1 2 
                                       f32_3 %993 = OpFAdd %990 %992 
                                                      OpStore %202 %993 
                              Uniform f32_4* %994 = OpAccessChain %116 %431 %145 
                                       f32_4 %995 = OpLoad %994 
                                       f32_3 %996 = OpVectorShuffle %995 %995 0 1 2 
                              Uniform f32_3* %998 = OpAccessChain %144 %501 
                                       f32_3 %999 = OpLoad %998 
                                      f32_3 %1000 = OpVectorShuffle %999 %999 1 1 1 
                                      f32_3 %1001 = OpFMul %996 %1000 
                                      f32_4 %1002 = OpLoad %89 
                                      f32_4 %1003 = OpVectorShuffle %1002 %1001 4 5 6 3 
                                                      OpStore %89 %1003 
                             Uniform f32_4* %1004 = OpAccessChain %116 %431 %117 
                                      f32_4 %1005 = OpLoad %1004 
                                      f32_3 %1006 = OpVectorShuffle %1005 %1005 0 1 2 
                             Uniform f32_3* %1007 = OpAccessChain %144 %501 
                                      f32_3 %1008 = OpLoad %1007 
                                      f32_3 %1009 = OpVectorShuffle %1008 %1008 0 0 0 
                                      f32_3 %1010 = OpFMul %1006 %1009 
                                      f32_4 %1011 = OpLoad %89 
                                      f32_3 %1012 = OpVectorShuffle %1011 %1011 0 1 2 
                                      f32_3 %1013 = OpFAdd %1010 %1012 
                                      f32_4 %1014 = OpLoad %89 
                                      f32_4 %1015 = OpVectorShuffle %1014 %1013 4 5 6 3 
                                                      OpStore %89 %1015 
                             Uniform f32_4* %1016 = OpAccessChain %116 %431 %225 
                                      f32_4 %1017 = OpLoad %1016 
                                      f32_3 %1018 = OpVectorShuffle %1017 %1017 0 1 2 
                             Uniform f32_3* %1019 = OpAccessChain %144 %501 
                                      f32_3 %1020 = OpLoad %1019 
                                      f32_3 %1021 = OpVectorShuffle %1020 %1020 2 2 2 
                                      f32_3 %1022 = OpFMul %1018 %1021 
                                      f32_4 %1023 = OpLoad %89 
                                      f32_3 %1024 = OpVectorShuffle %1023 %1023 0 1 2 
                                      f32_3 %1025 = OpFAdd %1022 %1024 
                                      f32_4 %1026 = OpLoad %89 
                                      f32_4 %1027 = OpVectorShuffle %1026 %1025 4 5 6 3 
                                                      OpStore %89 %1027 
                                      f32_4 %1028 = OpLoad %89 
                                      f32_3 %1029 = OpVectorShuffle %1028 %1028 0 1 2 
                                      f32_4 %1030 = OpLoad %89 
                                      f32_3 %1031 = OpVectorShuffle %1030 %1030 0 1 2 
                                        f32 %1032 = OpDot %1029 %1031 
                                                      OpStore %318 %1032 
                                        f32 %1033 = OpLoad %318 
                                        f32 %1034 = OpExtInst %1 32 %1033 
                                                      OpStore %318 %1034 
                                        f32 %1035 = OpLoad %318 
                                      f32_3 %1036 = OpCompositeConstruct %1035 %1035 %1035 
                                      f32_4 %1037 = OpLoad %89 
                                      f32_3 %1038 = OpVectorShuffle %1037 %1037 0 1 2 
                                      f32_3 %1039 = OpFMul %1036 %1038 
                                      f32_4 %1040 = OpLoad %89 
                                      f32_4 %1041 = OpVectorShuffle %1040 %1039 4 5 6 3 
                                                      OpStore %89 %1041 
                                      f32_4 %1042 = OpLoad %282 
                                      f32_3 %1043 = OpVectorShuffle %1042 %1042 0 1 2 
                                      f32_4 %1044 = OpLoad %89 
                                      f32_3 %1045 = OpVectorShuffle %1044 %1044 0 1 2 
                                        f32 %1046 = OpDot %1043 %1045 
                               Private f32* %1047 = OpAccessChain %89 %50 
                                                      OpStore %1047 %1046 
                               Private f32* %1048 = OpAccessChain %89 %50 
                                        f32 %1049 = OpLoad %1048 
                                        f32 %1050 = OpFMul %1049 %334 
                                        f32 %1051 = OpFAdd %1050 %334 
                               Private f32* %1052 = OpAccessChain %89 %50 
                                                      OpStore %1052 %1051 
                               Private f32* %1053 = OpAccessChain %89 %50 
                                        f32 %1054 = OpLoad %1053 
                               Private f32* %1055 = OpAccessChain %185 %494 
                                        f32 %1056 = OpLoad %1055 
                                        f32 %1057 = OpFMul %1054 %1056 
                               Uniform f32* %1059 = OpAccessChain %144 %1058 
                                        f32 %1060 = OpLoad %1059 
                                        f32 %1061 = OpFNegate %1060 
                                        f32 %1062 = OpFAdd %1057 %1061 
                               Private f32* %1063 = OpAccessChain %89 %50 
                                                      OpStore %1063 %1062 
                               Private f32* %1064 = OpAccessChain %89 %50 
                                        f32 %1065 = OpLoad %1064 
                               Uniform f32* %1067 = OpAccessChain %144 %1066 
                                        f32 %1068 = OpLoad %1067 
                                        f32 %1069 = OpFMul %1065 %1068 
                               Private f32* %1070 = OpAccessChain %89 %50 
                                                      OpStore %1070 %1069 
                               Private f32* %1071 = OpAccessChain %89 %50 
                                        f32 %1072 = OpLoad %1071 
                                        f32 %1073 = OpExtInst %1 43 %1072 %38 %55 
                               Private f32* %1074 = OpAccessChain %89 %50 
                                                      OpStore %1074 %1073 
                                      f32_4 %1075 = OpLoad %89 
                                      f32_3 %1076 = OpVectorShuffle %1075 %1075 0 0 0 
                             Uniform f32_4* %1078 = OpAccessChain %144 %1077 
                                      f32_4 %1079 = OpLoad %1078 
                                      f32_3 %1080 = OpVectorShuffle %1079 %1079 0 1 2 
                                      f32_3 %1081 = OpFMul %1076 %1080 
                                                      OpStore %241 %1081 
                                      f32_3 %1082 = OpLoad %241 
                               Uniform f32* %1084 = OpAccessChain %144 %1083 
                                        f32 %1085 = OpLoad %1084 
                               Uniform f32* %1086 = OpAccessChain %144 %1083 
                                        f32 %1087 = OpLoad %1086 
                               Uniform f32* %1088 = OpAccessChain %144 %1083 
                                        f32 %1089 = OpLoad %1088 
                                      f32_3 %1090 = OpCompositeConstruct %1085 %1087 %1089 
                                        f32 %1091 = OpCompositeExtract %1090 0 
                                        f32 %1092 = OpCompositeExtract %1090 1 
                                        f32 %1093 = OpCompositeExtract %1090 2 
                                      f32_3 %1094 = OpCompositeConstruct %1091 %1092 %1093 
                                      f32_3 %1095 = OpFMul %1082 %1094 
                                      f32_4 %1096 = OpLoad %89 
                                      f32_4 %1097 = OpVectorShuffle %1096 %1095 4 5 6 3 
                                                      OpStore %89 %1097 
                                      f32_3 %1098 = OpLoad %138 
                                      f32_3 %1099 = OpVectorShuffle %1098 %1098 0 0 0 
                                      f32_4 %1100 = OpLoad %89 
                                      f32_3 %1101 = OpVectorShuffle %1100 %1100 0 1 2 
                                      f32_3 %1102 = OpFMul %1099 %1101 
                                                      OpStore %106 %1102 
                                      f32_3 %1103 = OpLoad %106 
                                      f32_3 %1105 = OpFMul %1103 %1104 
                                                      OpStore %106 %1105 
                                      f32_4 %1106 = OpLoad %89 
                                      f32_3 %1107 = OpVectorShuffle %1106 %1106 0 1 2 
                                      f32_3 %1110 = OpFMul %1107 %1109 
                                      f32_3 %1111 = OpLoad %106 
                                      f32_3 %1112 = OpFAdd %1110 %1111 
                                      f32_4 %1113 = OpLoad %89 
                                      f32_4 %1114 = OpVectorShuffle %1113 %1112 4 5 6 3 
                                                      OpStore %89 %1114 
                                      f32_3 %1115 = OpLoad %450 
                                      f32_3 %1116 = OpLoad %202 
                                      f32_3 %1117 = OpFAdd %1115 %1116 
                                                      OpStore %202 %1117 
                                      f32_4 %1118 = OpLoad %89 
                                      f32_3 %1119 = OpVectorShuffle %1118 %1118 0 1 2 
                                      f32_3 %1120 = OpLoad %202 
                                      f32_3 %1121 = OpFAdd %1119 %1120 
                                                      OpStore %202 %1121 
                                      f32_3 %1122 = OpLoad %202 
                                      f32_3 %1123 = OpExtInst %1 40 %1122 %831 
                                                      OpStore %202 %1123 
                                      f32_3 %1124 = OpLoad %202 
                                      f32_3 %1125 = OpExtInst %1 30 %1124 
                                                      OpStore %202 %1125 
                                      f32_3 %1126 = OpLoad %202 
                                      f32_3 %1129 = OpFMul %1126 %1128 
                                                      OpStore %202 %1129 
                                      f32_3 %1130 = OpLoad %202 
                                      f32_3 %1131 = OpExtInst %1 29 %1130 
                                                      OpStore %202 %1131 
                                      f32_3 %1134 = OpLoad %202 
                                      f32_3 %1135 = OpExtInst %1 31 %1134 
                                      f32_4 %1136 = OpLoad %1133 
                                      f32_4 %1137 = OpVectorShuffle %1136 %1135 4 5 6 3 
                                                      OpStore %1133 %1137 
                                Output f32* %1139 = OpAccessChain %1133 %494 
                                                      OpStore %1139 %55 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD3.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD4.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD7 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[32];
uniform 	mediump vec4 _AdditionalLightsColor[32];
uniform 	mediump vec4 _AdditionalLightsAttenuation[32];
uniform 	mediump vec4 _AdditionalLightsSpotDir[32];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _Expond;
	UNITY_UNIFORM vec4 _MainTex_ST;
	UNITY_UNIFORM vec4 _Emissioncolor;
	UNITY_UNIFORM float _Roughness;
	UNITY_UNIFORM float _sss;
	UNITY_UNIFORM vec3 _rimlightdir;
	UNITY_UNIFORM vec4 _rimcolor;
	UNITY_UNIFORM float _rimhardness;
	UNITY_UNIFORM float _rimthreshold;
	UNITY_UNIFORM float _rimintensity;
	UNITY_UNIFORM float _Curvemn;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _Normal;
UNITY_LOCATION(2) uniform mediump sampler2D _MREA;
UNITY_LOCATION(3) uniform mediump sampler2D _SSSLUT;
UNITY_LOCATION(4) uniform mediump sampler2D _reflectmap;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
int u_xlati2;
bool u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_12;
vec3 u_xlat13;
int u_xlati13;
float u_xlat15;
uint u_xlatu15;
float u_xlat16;
float u_xlat26;
float u_xlat39;
uint u_xlatu39;
float u_xlat40;
float u_xlat41;
mediump float u_xlat16_45;
mediump float u_xlat16_46;
mediump float u_xlat16_47;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    u_xlat0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat13.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xyz = vs_TEXCOORD2.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat40 = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = vec3(u_xlat40) * u_xlat1.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat16_4.xyz = texture(_MainTex, u_xlat3.xy).xyz;
    u_xlat16_5.xyz = texture(_Normal, u_xlat3.xy).xyz;
    u_xlat16_6.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3 = texture(_MREA, u_xlat3.xy);
    u_xlat40 = u_xlat16_3.y + (-_Roughness);
    u_xlat16_45 = (-u_xlat40) + 1.0;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;
    u_xlat16_45 = max(u_xlat16_45, 0.00200000009);
    u_xlat16_7.xyz = u_xlat16_4.xyz * u_xlat16_3.zzz;
    u_xlat5.xyz = u_xlat16_7.xyz * _Emissioncolor.xyz;
    u_xlat16_7.xyz = u_xlat16_4.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_7.xyz = u_xlat16_3.xxx * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_46 = u_xlat16_3.x * -0.959999979 + 0.959999979;
    u_xlat16_8.xyz = u_xlat16_4.xyz * vec3(u_xlat16_46);
    u_xlat16_8.xyz = u_xlat16_3.www * u_xlat16_8.xyz;
    u_xlat3.xyz = u_xlat16_6.yyy * vs_TEXCOORD4.xyz;
    u_xlat3.xyz = u_xlat16_6.xxx * vs_TEXCOORD3.xyz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat16_6.zzz * vs_TEXCOORD1.xyz + u_xlat3.xyz;
    u_xlat41 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat41 = inversesqrt(u_xlat41);
    u_xlat4.xyz = vec3(u_xlat41) * u_xlat3.xyz;
    u_xlat41 = dot(u_xlat4.xyz, _MainLightPosition.xyz);
    u_xlat3.x = max(u_xlat41, 9.99999975e-06);
    u_xlat0.y = dot(u_xlat4.xyz, u_xlat13.xyz);
    u_xlat0.z = dot(_MainLightPosition.xyz, u_xlat2.xyz);
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(1.17549435e-38, 9.99999975e-06, 9.99999975e-06));
    u_xlat39 = u_xlat16_45 + u_xlat16_45;
    u_xlat2.x = u_xlat0.z * u_xlat0.z;
    u_xlat39 = u_xlat2.x * u_xlat39 + 0.5;
    u_xlat16_6.x = u_xlat39 + -1.0;
    u_xlat13.x = (-u_xlat0.y) + 1.0;
    u_xlat13.x = max(u_xlat13.x, 0.0);
    u_xlat39 = u_xlat13.x * u_xlat13.x;
    u_xlat39 = u_xlat39 * u_xlat39;
    u_xlat13.x = u_xlat13.x * u_xlat39;
    u_xlat13.x = u_xlat16_6.x * u_xlat13.x + 1.0;
    u_xlat39 = (-u_xlat3.x) + 1.0;
    u_xlat39 = max(u_xlat39, 0.0);
    u_xlat2.x = u_xlat39 * u_xlat39;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat39 = u_xlat39 * u_xlat2.x;
    u_xlat39 = u_xlat16_6.x * u_xlat39 + 1.0;
    u_xlat16_6.x = u_xlat13.x * u_xlat39;
    u_xlat16_6.x = min(u_xlat16_6.x, 1.0);
    u_xlat16_6.x = u_xlat41 * u_xlat16_6.x;
    u_xlat16_2.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat2.x = u_xlat16_2.x;
    u_xlat2.yw = vec2(vec2(_Curvemn, _Curvemn));
    u_xlat16_9.xyz = texture(_SSSLUT, u_xlat2.xy).xyz;
    u_xlat9.xyz = u_xlat16_9.xyz * vec3(vec3(_sss, _sss, _sss));
    u_xlat13.x = min(u_xlat2.x, 1.0);
    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat9.xyz;
    u_xlat9.xyz = u_xlat16_6.xyz * _MainLightColor.xyz;
    u_xlat9.xyz = u_xlat9.xyz * u_xlat13.xxx + u_xlat5.xyz;
    u_xlat16_6.x = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlati13 = int(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat9.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<uint(u_xlati13) ; u_xlatu_loop_1++)
    {
        u_xlati2 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu15 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_46 = dot(unity_LightIndices[int(u_xlatu15)], ImmCB_0[u_xlati2]);
        u_xlati2 = int(u_xlat16_46);
        u_xlat10.xyz = (-vs_TEXCOORD5.xyz) * _AdditionalLightsPosition[u_xlati2].www + _AdditionalLightsPosition[u_xlati2].xyz;
        u_xlat15 = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat15 = max(u_xlat15, 6.10351563e-05);
        u_xlat16 = inversesqrt(u_xlat15);
        u_xlat10.xyz = vec3(u_xlat16) * u_xlat10.xyz;
        u_xlat16 = float(1.0) / float(u_xlat15);
        u_xlat15 = u_xlat15 * _AdditionalLightsAttenuation[u_xlati2].x + _AdditionalLightsAttenuation[u_xlati2].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
        u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
        u_xlat15 = u_xlat15 * u_xlat16;
        u_xlat16_46 = dot(_AdditionalLightsSpotDir[u_xlati2].xyz, u_xlat10.xyz);
        u_xlat16_46 = u_xlat16_46 * _AdditionalLightsAttenuation[u_xlati2].z + _AdditionalLightsAttenuation[u_xlati2].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_46 = min(max(u_xlat16_46, 0.0), 1.0);
#else
        u_xlat16_46 = clamp(u_xlat16_46, 0.0, 1.0);
#endif
        u_xlat16_46 = u_xlat16_46 * u_xlat16_46;
        u_xlat15 = u_xlat15 * u_xlat16_46;
        u_xlat16 = dot(u_xlat4.xyz, u_xlat10.xyz);
        u_xlat2.z = max(u_xlat16, 9.99999975e-06);
        u_xlat16_10.xyz = texture(_SSSLUT, u_xlat2.zw).xyz;
        u_xlat10.xyz = u_xlat16_10.xyz * vec3(vec3(_sss, _sss, _sss));
        u_xlat16_11.xyz = u_xlat16_8.xyz * u_xlat10.xyz;
        u_xlat16_11.xyz = u_xlat16_11.xyz * _AdditionalLightsColor[u_xlati2].xyz;
        u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(u_xlat15) + u_xlat5.xyz;
        u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_11.xyz;
    }
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyw = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat0.xyw);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat0.xyw);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_46 = u_xlat16_45 * u_xlat16_45;
    u_xlat16_47 = u_xlat16_45 * u_xlat16_45 + -1.0;
    u_xlat13.x = u_xlat13.x * u_xlat16_47 + 1.00001001;
    u_xlat16_47 = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat13.x * u_xlat13.x;
    u_xlat13.x = max(u_xlat16_47, 0.100000001);
    u_xlat0.x = u_xlat13.x * u_xlat0.x;
    u_xlat16_47 = u_xlat16_45 * 4.0 + 2.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_47;
    u_xlat0.x = u_xlat16_46 / u_xlat0.x;
    u_xlat0.xyw = u_xlat16_7.xyz * u_xlat0.xxx;
    u_xlat16_11.xyz = u_xlat0.xyw * vec3(3.14159274, 3.14159274, 3.14159274);
    u_xlat1.xyz = u_xlat16_11.xyz * _MainLightColor.xyz;
    u_xlat16_6.xyz = u_xlat1.xyz * u_xlat3.xxx + u_xlat16_6.xyz;
    u_xlat4.w = 1.0;
    u_xlat16_11.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_11.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_11.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_2 = u_xlat4.yzzx * u_xlat4.xyzz;
    u_xlat16_12.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_12.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_12.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_46 = u_xlat4.y * u_xlat4.y;
    u_xlat16_46 = u_xlat4.x * u_xlat4.x + (-u_xlat16_46);
    u_xlat16_12.xyz = unity_SHC.xyz * vec3(u_xlat16_46) + u_xlat16_12.xyz;
    u_xlat16_11.xyz = u_xlat16_11.xyz + u_xlat16_12.xyz;
    u_xlat16_11.xyz = max(u_xlat16_11.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_11.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].x;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat16_11.x = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].y;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].y;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].y;
    u_xlat16_11.y = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat16_11.xy = u_xlat16_11.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat16_46 = (-u_xlat16_45) * 0.699999988 + 1.70000005;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_46;
    u_xlat16_46 = u_xlat16_45 * 8.0;
    u_xlat16_1.xyz = textureLod(_reflectmap, u_xlat16_11.xy, u_xlat16_46).xyz;
    u_xlat16 = u_xlat16_45 * u_xlat16_45 + 1.0;
    u_xlat16 = float(1.0) / u_xlat16;
    u_xlat0.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat0.x = max(u_xlat0.w, u_xlat0.x);
    u_xlat0.x = u_xlat40 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat13.x = (-u_xlat0.z) + 1.0;
    u_xlat13.x = max(u_xlat13.x, 0.0);
    u_xlat26 = u_xlat13.x * u_xlat13.x;
    u_xlat26 = u_xlat26 * u_xlat26;
    u_xlat13.x = u_xlat13.x * u_xlat26;
    u_xlat0.xzw = (-u_xlat16_7.xyz) + u_xlat0.xxx;
    u_xlat0.xyz = u_xlat13.xxx * u_xlat0.xzw + u_xlat16_7.xyz;
    u_xlat0.xyz = vec3(u_xlat16) * u_xlat0.xyz;
    u_xlat16_7.xyz = u_xlat16_3.www * u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_8.xyz * vec3(_Expond) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixInvV[1].xyz * _rimlightdir.yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixInvV[0].xyz * _rimlightdir.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixInvV[2].xyz * _rimlightdir.zzz + u_xlat0.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat0.x = u_xlat0.x * u_xlat16_3.w + (-_rimthreshold);
    u_xlat0.x = u_xlat0.x * _rimhardness;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = u_xlat0.xxx * _rimcolor.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz * vec3(vec3(_rimintensity, _rimintensity, _rimintensity));
    u_xlat1.xyz = u_xlat3.xxx * u_xlat0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_6.xyz = u_xlat0.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(2.20000005, 2.20000005, 2.20000005);
    u_xlat16_6.xyz = exp2(u_xlat16_6.xyz);
    SV_Target0.xyz = sqrt(u_xlat16_6.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 268
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %94 %103 %105 %108 %148 %151 %161 %195 %221 %227 %230 %231 %257 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpName vs_TEXCOORD6 "vs_TEXCOORD6" 
                                                      OpName vs_TEXCOORD7 "vs_TEXCOORD7" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 RelaxedPrecision 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 RelaxedPrecision 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 RelaxedPrecision 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 RelaxedPrecision 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 RelaxedPrecision 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 RelaxedPrecision 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpMemberDecorate %21 16 RelaxedPrecision 
                                                      OpMemberDecorate %21 16 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpDecorate %69 ArrayStride 69 
                                                      OpMemberDecorate %70 0 Offset 70 
                                                      OpMemberDecorate %70 1 Offset 70 
                                                      OpDecorate %70 Block 
                                                      OpDecorate %72 DescriptorSet 72 
                                                      OpDecorate %72 Binding 72 
                                                      OpMemberDecorate %92 0 BuiltIn 92 
                                                      OpMemberDecorate %92 1 BuiltIn 92 
                                                      OpMemberDecorate %92 2 BuiltIn 92 
                                                      OpDecorate %92 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 103 
                                                      OpDecorate %105 Location 105 
                                                      OpDecorate %108 Location 108 
                                                      OpDecorate vs_TEXCOORD1 Location 148 
                                                      OpDecorate vs_TEXCOORD2 Location 151 
                                                      OpDecorate %161 Location 161 
                                                      OpDecorate vs_TEXCOORD3 Location 195 
                                                      OpDecorate %219 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 221 
                                                      OpDecorate vs_TEXCOORD5 Location 227 
                                                      OpDecorate vs_TEXCOORD6 Location 230 
                                                      OpDecorate %231 Location 231 
                                                      OpDecorate %236 ArrayStride 236 
                                                      OpMemberDecorate %237 0 Offset 237 
                                                      OpMemberDecorate %237 1 Offset 237 
                                                      OpMemberDecorate %237 2 Offset 237 
                                                      OpMemberDecorate %237 3 Offset 237 
                                                      OpMemberDecorate %237 4 Offset 237 
                                                      OpMemberDecorate %237 5 Offset 237 
                                                      OpMemberDecorate %237 6 RelaxedPrecision 
                                                      OpMemberDecorate %237 6 Offset 237 
                                                      OpMemberDecorate %237 7 RelaxedPrecision 
                                                      OpMemberDecorate %237 7 Offset 237 
                                                      OpMemberDecorate %237 8 RelaxedPrecision 
                                                      OpMemberDecorate %237 8 Offset 237 
                                                      OpMemberDecorate %237 9 RelaxedPrecision 
                                                      OpMemberDecorate %237 9 Offset 237 
                                                      OpMemberDecorate %237 10 RelaxedPrecision 
                                                      OpMemberDecorate %237 10 Offset 237 
                                                      OpMemberDecorate %237 11 Offset 237 
                                                      OpDecorate %237 Block 
                                                      OpDecorate %239 DescriptorSet 239 
                                                      OpDecorate %239 Binding 239 
                                                      OpDecorate vs_TEXCOORD7 Location 257 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 3 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeArray %7 %16 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypeArray %7 %19 
                                              %21 = OpTypeStruct %17 %18 %7 %7 %7 %20 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4; f32_4[2]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 0 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %45 = OpConstant 2 
                                          i32 %59 = OpConstant 3 
                               Private f32_4* %66 = OpVariable Private 
                                              %69 = OpTypeArray %7 %16 
                                              %70 = OpTypeStruct %12 %69 
                                              %71 = OpTypePointer Uniform %70 
           Uniform struct {f32_3; f32_4[4];}* %72 = OpVariable Uniform 
                                          u32 %90 = OpConstant 1 
                                              %91 = OpTypeArray %6 %90 
                                              %92 = OpTypeStruct %7 %6 %91 
                                              %93 = OpTypePointer Output %92 
         Output struct {f32_4; f32; f32[1];}* %94 = OpVariable Output 
                                              %99 = OpTypePointer Output %7 
                                             %101 = OpTypeVector %6 2 
                                             %102 = OpTypePointer Output %101 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %104 = OpTypePointer Input %101 
                                Input f32_2* %105 = OpVariable Input 
                                             %107 = OpTypePointer Input %12 
                                Input f32_3* %108 = OpVariable Input 
                                         u32 %114 = OpConstant 0 
                                             %115 = OpTypePointer Private %6 
                                Private f32* %129 = OpVariable Private 
                                         f32 %136 = OpConstant 3.674022E-40 
                                             %147 = OpTypePointer Output %12 
                       Output f32_3* vs_TEXCOORD1 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD2 = OpVariable Output 
                                             %155 = OpTypePointer Uniform %12 
                                             %159 = OpTypePointer Private %12 
                              Private f32_3* %160 = OpVariable Private 
                                Input f32_4* %161 = OpVariable Input 
                       Output f32_3* vs_TEXCOORD3 = OpVariable Output 
                              Private f32_3* %197 = OpVariable Private 
                                         u32 %213 = OpConstant 3 
                                             %214 = OpTypePointer Input %6 
                                             %217 = OpTypePointer Uniform %6 
                       Output f32_3* vs_TEXCOORD4 = OpVariable Output 
                       Output f32_3* vs_TEXCOORD5 = OpVariable Output 
                       Output f32_4* vs_TEXCOORD6 = OpVariable Output 
                                Input f32_4* %231 = OpVariable Input 
                                         u32 %235 = OpConstant 20 
                                             %236 = OpTypeArray %7 %235 
                                             %237 = OpTypeStruct %236 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 
                                             %238 = OpTypePointer Uniform %237 
Uniform struct {f32_4[20]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %239 = OpVariable Uniform 
                       Output f32_4* vs_TEXCOORD7 = OpVariable Output 
                                             %262 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %11 
                                        f32_3 %14 = OpVectorShuffle %13 %13 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_3 %30 = OpVectorShuffle %29 %29 0 1 2 
                                        f32_3 %31 = OpFMul %14 %30 
                                        f32_4 %32 = OpLoad %9 
                                        f32_4 %33 = OpVectorShuffle %32 %31 4 5 6 3 
                                                      OpStore %9 %33 
                               Uniform f32_4* %34 = OpAccessChain %23 %25 %25 
                                        f32_4 %35 = OpLoad %34 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 1 2 
                                        f32_4 %37 = OpLoad %11 
                                        f32_3 %38 = OpVectorShuffle %37 %37 0 0 0 
                                        f32_3 %39 = OpFMul %36 %38 
                                        f32_4 %40 = OpLoad %9 
                                        f32_3 %41 = OpVectorShuffle %40 %40 0 1 2 
                                        f32_3 %42 = OpFAdd %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpVectorShuffle %43 %42 4 5 6 3 
                                                      OpStore %9 %44 
                               Uniform f32_4* %46 = OpAccessChain %23 %25 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_3 %48 = OpVectorShuffle %47 %47 0 1 2 
                                        f32_4 %49 = OpLoad %11 
                                        f32_3 %50 = OpVectorShuffle %49 %49 2 2 2 
                                        f32_3 %51 = OpFMul %48 %50 
                                        f32_4 %52 = OpLoad %9 
                                        f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                        f32_3 %54 = OpFAdd %51 %53 
                                        f32_4 %55 = OpLoad %9 
                                        f32_4 %56 = OpVectorShuffle %55 %54 4 5 6 3 
                                                      OpStore %9 %56 
                                        f32_4 %57 = OpLoad %9 
                                        f32_3 %58 = OpVectorShuffle %57 %57 0 1 2 
                               Uniform f32_4* %60 = OpAccessChain %23 %25 %59 
                                        f32_4 %61 = OpLoad %60 
                                        f32_3 %62 = OpVectorShuffle %61 %61 0 1 2 
                                        f32_3 %63 = OpFAdd %58 %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %63 4 5 6 3 
                                                      OpStore %9 %65 
                                        f32_4 %67 = OpLoad %9 
                                        f32_4 %68 = OpVectorShuffle %67 %67 1 1 1 1 
                               Uniform f32_4* %73 = OpAccessChain %72 %26 %26 
                                        f32_4 %74 = OpLoad %73 
                                        f32_4 %75 = OpFMul %68 %74 
                                                      OpStore %66 %75 
                               Uniform f32_4* %76 = OpAccessChain %72 %26 %25 
                                        f32_4 %77 = OpLoad %76 
                                        f32_4 %78 = OpLoad %9 
                                        f32_4 %79 = OpVectorShuffle %78 %78 0 0 0 0 
                                        f32_4 %80 = OpFMul %77 %79 
                                        f32_4 %81 = OpLoad %66 
                                        f32_4 %82 = OpFAdd %80 %81 
                                                      OpStore %66 %82 
                               Uniform f32_4* %83 = OpAccessChain %72 %26 %45 
                                        f32_4 %84 = OpLoad %83 
                                        f32_4 %85 = OpLoad %9 
                                        f32_4 %86 = OpVectorShuffle %85 %85 2 2 2 2 
                                        f32_4 %87 = OpFMul %84 %86 
                                        f32_4 %88 = OpLoad %66 
                                        f32_4 %89 = OpFAdd %87 %88 
                                                      OpStore %66 %89 
                                        f32_4 %95 = OpLoad %66 
                               Uniform f32_4* %96 = OpAccessChain %72 %26 %59 
                                        f32_4 %97 = OpLoad %96 
                                        f32_4 %98 = OpFAdd %95 %97 
                               Output f32_4* %100 = OpAccessChain %94 %25 
                                                      OpStore %100 %98 
                                       f32_2 %106 = OpLoad %105 
                                                      OpStore vs_TEXCOORD0 %106 
                                       f32_3 %109 = OpLoad %108 
                              Uniform f32_4* %110 = OpAccessChain %23 %26 %25 
                                       f32_4 %111 = OpLoad %110 
                                       f32_3 %112 = OpVectorShuffle %111 %111 0 1 2 
                                         f32 %113 = OpDot %109 %112 
                                Private f32* %116 = OpAccessChain %66 %114 
                                                      OpStore %116 %113 
                                       f32_3 %117 = OpLoad %108 
                              Uniform f32_4* %118 = OpAccessChain %23 %26 %26 
                                       f32_4 %119 = OpLoad %118 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                         f32 %121 = OpDot %117 %120 
                                Private f32* %122 = OpAccessChain %66 %90 
                                                      OpStore %122 %121 
                                       f32_3 %123 = OpLoad %108 
                              Uniform f32_4* %124 = OpAccessChain %23 %26 %45 
                                       f32_4 %125 = OpLoad %124 
                                       f32_3 %126 = OpVectorShuffle %125 %125 0 1 2 
                                         f32 %127 = OpDot %123 %126 
                                Private f32* %128 = OpAccessChain %66 %19 
                                                      OpStore %128 %127 
                                       f32_4 %130 = OpLoad %66 
                                       f32_3 %131 = OpVectorShuffle %130 %130 0 1 2 
                                       f32_4 %132 = OpLoad %66 
                                       f32_3 %133 = OpVectorShuffle %132 %132 0 1 2 
                                         f32 %134 = OpDot %131 %133 
                                                      OpStore %129 %134 
                                         f32 %135 = OpLoad %129 
                                         f32 %137 = OpExtInst %1 40 %135 %136 
                                                      OpStore %129 %137 
                                         f32 %138 = OpLoad %129 
                                         f32 %139 = OpExtInst %1 32 %138 
                                                      OpStore %129 %139 
                                         f32 %140 = OpLoad %129 
                                       f32_3 %141 = OpCompositeConstruct %140 %140 %140 
                                       f32_4 %142 = OpLoad %66 
                                       f32_3 %143 = OpVectorShuffle %142 %142 0 1 2 
                                       f32_3 %144 = OpFMul %141 %143 
                                       f32_4 %145 = OpLoad %66 
                                       f32_4 %146 = OpVectorShuffle %145 %144 4 5 6 3 
                                                      OpStore %66 %146 
                                       f32_4 %149 = OpLoad %66 
                                       f32_3 %150 = OpVectorShuffle %149 %149 0 1 2 
                                                      OpStore vs_TEXCOORD1 %150 
                                       f32_4 %152 = OpLoad %9 
                                       f32_3 %153 = OpVectorShuffle %152 %152 0 1 2 
                                       f32_3 %154 = OpFNegate %153 
                              Uniform f32_3* %156 = OpAccessChain %72 %25 
                                       f32_3 %157 = OpLoad %156 
                                       f32_3 %158 = OpFAdd %154 %157 
                                                      OpStore vs_TEXCOORD2 %158 
                                       f32_4 %162 = OpLoad %161 
                                       f32_3 %163 = OpVectorShuffle %162 %162 1 1 1 
                              Uniform f32_4* %164 = OpAccessChain %23 %25 %26 
                                       f32_4 %165 = OpLoad %164 
                                       f32_3 %166 = OpVectorShuffle %165 %165 0 1 2 
                                       f32_3 %167 = OpFMul %163 %166 
                                                      OpStore %160 %167 
                              Uniform f32_4* %168 = OpAccessChain %23 %25 %25 
                                       f32_4 %169 = OpLoad %168 
                                       f32_3 %170 = OpVectorShuffle %169 %169 0 1 2 
                                       f32_4 %171 = OpLoad %161 
                                       f32_3 %172 = OpVectorShuffle %171 %171 0 0 0 
                                       f32_3 %173 = OpFMul %170 %172 
                                       f32_3 %174 = OpLoad %160 
                                       f32_3 %175 = OpFAdd %173 %174 
                                                      OpStore %160 %175 
                              Uniform f32_4* %176 = OpAccessChain %23 %25 %45 
                                       f32_4 %177 = OpLoad %176 
                                       f32_3 %178 = OpVectorShuffle %177 %177 0 1 2 
                                       f32_4 %179 = OpLoad %161 
                                       f32_3 %180 = OpVectorShuffle %179 %179 2 2 2 
                                       f32_3 %181 = OpFMul %178 %180 
                                       f32_3 %182 = OpLoad %160 
                                       f32_3 %183 = OpFAdd %181 %182 
                                                      OpStore %160 %183 
                                       f32_3 %184 = OpLoad %160 
                                       f32_3 %185 = OpLoad %160 
                                         f32 %186 = OpDot %184 %185 
                                                      OpStore %129 %186 
                                         f32 %187 = OpLoad %129 
                                         f32 %188 = OpExtInst %1 40 %187 %136 
                                                      OpStore %129 %188 
                                         f32 %189 = OpLoad %129 
                                         f32 %190 = OpExtInst %1 32 %189 
                                                      OpStore %129 %190 
                                         f32 %191 = OpLoad %129 
                                       f32_3 %192 = OpCompositeConstruct %191 %191 %191 
                                       f32_3 %193 = OpLoad %160 
                                       f32_3 %194 = OpFMul %192 %193 
                                                      OpStore %160 %194 
                                       f32_3 %196 = OpLoad %160 
                                                      OpStore vs_TEXCOORD3 %196 
                                       f32_4 %198 = OpLoad %66 
                                       f32_3 %199 = OpVectorShuffle %198 %198 2 0 1 
                                       f32_3 %200 = OpLoad %160 
                                       f32_3 %201 = OpVectorShuffle %200 %200 1 2 0 
                                       f32_3 %202 = OpFMul %199 %201 
                                                      OpStore %197 %202 
                                       f32_4 %203 = OpLoad %66 
                                       f32_3 %204 = OpVectorShuffle %203 %203 1 2 0 
                                       f32_3 %205 = OpLoad %160 
                                       f32_3 %206 = OpVectorShuffle %205 %205 2 0 1 
                                       f32_3 %207 = OpFMul %204 %206 
                                       f32_3 %208 = OpLoad %197 
                                       f32_3 %209 = OpFNegate %208 
                                       f32_3 %210 = OpFAdd %207 %209 
                                       f32_4 %211 = OpLoad %66 
                                       f32_4 %212 = OpVectorShuffle %211 %210 4 5 6 3 
                                                      OpStore %66 %212 
                                  Input f32* %215 = OpAccessChain %161 %213 
                                         f32 %216 = OpLoad %215 
                                Uniform f32* %218 = OpAccessChain %23 %59 %213 
                                         f32 %219 = OpLoad %218 
                                         f32 %220 = OpFMul %216 %219 
                                                      OpStore %129 %220 
                                         f32 %222 = OpLoad %129 
                                       f32_3 %223 = OpCompositeConstruct %222 %222 %222 
                                       f32_4 %224 = OpLoad %66 
                                       f32_3 %225 = OpVectorShuffle %224 %224 0 1 2 
                                       f32_3 %226 = OpFMul %223 %225 
                                                      OpStore vs_TEXCOORD4 %226 
                                       f32_4 %228 = OpLoad %9 
                                       f32_3 %229 = OpVectorShuffle %228 %228 0 1 2 
                                                      OpStore vs_TEXCOORD5 %229 
                                       f32_4 %232 = OpLoad %231 
                                                      OpStore vs_TEXCOORD6 %232 
                                       f32_4 %233 = OpLoad %9 
                                       f32_4 %234 = OpVectorShuffle %233 %233 1 1 1 1 
                              Uniform f32_4* %240 = OpAccessChain %239 %25 %26 
                                       f32_4 %241 = OpLoad %240 
                                       f32_4 %242 = OpFMul %234 %241 
                                                      OpStore %66 %242 
                              Uniform f32_4* %243 = OpAccessChain %239 %25 %25 
                                       f32_4 %244 = OpLoad %243 
                                       f32_4 %245 = OpLoad %9 
                                       f32_4 %246 = OpVectorShuffle %245 %245 0 0 0 0 
                                       f32_4 %247 = OpFMul %244 %246 
                                       f32_4 %248 = OpLoad %66 
                                       f32_4 %249 = OpFAdd %247 %248 
                                                      OpStore %66 %249 
                              Uniform f32_4* %250 = OpAccessChain %239 %25 %45 
                                       f32_4 %251 = OpLoad %250 
                                       f32_4 %252 = OpLoad %9 
                                       f32_4 %253 = OpVectorShuffle %252 %252 2 2 2 2 
                                       f32_4 %254 = OpFMul %251 %253 
                                       f32_4 %255 = OpLoad %66 
                                       f32_4 %256 = OpFAdd %254 %255 
                                                      OpStore %9 %256 
                                       f32_4 %258 = OpLoad %9 
                              Uniform f32_4* %259 = OpAccessChain %239 %25 %59 
                                       f32_4 %260 = OpLoad %259 
                                       f32_4 %261 = OpFAdd %258 %260 
                                                      OpStore vs_TEXCOORD7 %261 
                                 Output f32* %263 = OpAccessChain %94 %25 %90 
                                         f32 %264 = OpLoad %263 
                                         f32 %265 = OpFNegate %264 
                                 Output f32* %266 = OpAccessChain %94 %25 %90 
                                                      OpStore %266 %265 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 1064
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Fragment %4 "main" %12 %66 %185 %190 %197 %459 %1053 
                                                      OpExecutionMode %4 OriginUpperLeft 
                                                      OpName vs_TEXCOORD2 "vs_TEXCOORD2" 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpName vs_TEXCOORD4 "vs_TEXCOORD4" 
                                                      OpName vs_TEXCOORD3 "vs_TEXCOORD3" 
                                                      OpName vs_TEXCOORD1 "vs_TEXCOORD1" 
                                                      OpName vs_TEXCOORD5 "vs_TEXCOORD5" 
                                                      OpDecorate vs_TEXCOORD2 Location 12 
                                                      OpDecorate %36 ArrayStride 36 
                                                      OpDecorate %37 ArrayStride 37 
                                                      OpMemberDecorate %38 0 Offset 38 
                                                      OpMemberDecorate %38 1 RelaxedPrecision 
                                                      OpMemberDecorate %38 1 Offset 38 
                                                      OpMemberDecorate %38 2 RelaxedPrecision 
                                                      OpMemberDecorate %38 2 Offset 38 
                                                      OpMemberDecorate %38 3 Offset 38 
                                                      OpMemberDecorate %38 4 Offset 38 
                                                      OpDecorate %38 Block 
                                                      OpDecorate %40 DescriptorSet 40 
                                                      OpDecorate %40 Binding 40 
                                                      OpDecorate vs_TEXCOORD0 Location 66 
                                                      OpMemberDecorate %68 0 Offset 68 
                                                      OpMemberDecorate %68 1 Offset 68 
                                                      OpMemberDecorate %68 2 Offset 68 
                                                      OpMemberDecorate %68 3 Offset 68 
                                                      OpMemberDecorate %68 4 Offset 68 
                                                      OpMemberDecorate %68 5 Offset 68 
                                                      OpMemberDecorate %68 6 Offset 68 
                                                      OpMemberDecorate %68 7 Offset 68 
                                                      OpMemberDecorate %68 8 Offset 68 
                                                      OpMemberDecorate %68 9 Offset 68 
                                                      OpMemberDecorate %68 10 Offset 68 
                                                      OpDecorate %68 Block 
                                                      OpDecorate %70 DescriptorSet 70 
                                                      OpDecorate %70 Binding 70 
                                                      OpDecorate %82 RelaxedPrecision 
                                                      OpDecorate %85 RelaxedPrecision 
                                                      OpDecorate %85 DescriptorSet 85 
                                                      OpDecorate %85 Binding 85 
                                                      OpDecorate %86 RelaxedPrecision 
                                                      OpDecorate %89 RelaxedPrecision 
                                                      OpDecorate %89 DescriptorSet 89 
                                                      OpDecorate %89 Binding 89 
                                                      OpDecorate %90 RelaxedPrecision 
                                                      OpDecorate %96 RelaxedPrecision 
                                                      OpDecorate %97 RelaxedPrecision 
                                                      OpDecorate %98 RelaxedPrecision 
                                                      OpDecorate %98 DescriptorSet 98 
                                                      OpDecorate %98 Binding 98 
                                                      OpDecorate %99 RelaxedPrecision 
                                                      OpDecorate %100 RelaxedPrecision 
                                                      OpDecorate %100 DescriptorSet 100 
                                                      OpDecorate %100 Binding 100 
                                                      OpDecorate %101 RelaxedPrecision 
                                                      OpDecorate %106 RelaxedPrecision 
                                                      OpDecorate %107 RelaxedPrecision 
                                                      OpDecorate %108 RelaxedPrecision 
                                                      OpDecorate %111 RelaxedPrecision 
                                                      OpDecorate %114 RelaxedPrecision 
                                                      OpDecorate %115 RelaxedPrecision 
                                                      OpDecorate %116 RelaxedPrecision 
                                                      OpDecorate %116 DescriptorSet 116 
                                                      OpDecorate %116 Binding 116 
                                                      OpDecorate %117 RelaxedPrecision 
                                                      OpDecorate %118 RelaxedPrecision 
                                                      OpDecorate %118 DescriptorSet 118 
                                                      OpDecorate %118 Binding 118 
                                                      OpDecorate %119 RelaxedPrecision 
                                                      OpDecorate %126 RelaxedPrecision 
                                                      OpDecorate %133 RelaxedPrecision 
                                                      OpDecorate %138 RelaxedPrecision 
                                                      OpDecorate %139 RelaxedPrecision 
                                                      OpDecorate %140 RelaxedPrecision 
                                                      OpDecorate %141 RelaxedPrecision 
                                                      OpDecorate %143 RelaxedPrecision 
                                                      OpDecorate %144 RelaxedPrecision 
                                                      OpDecorate %145 RelaxedPrecision 
                                                      OpDecorate %146 RelaxedPrecision 
                                                      OpDecorate %147 RelaxedPrecision 
                                                      OpDecorate %148 RelaxedPrecision 
                                                      OpDecorate %150 RelaxedPrecision 
                                                      OpDecorate %156 RelaxedPrecision 
                                                      OpDecorate %159 RelaxedPrecision 
                                                      OpDecorate %160 RelaxedPrecision 
                                                      OpDecorate %161 RelaxedPrecision 
                                                      OpDecorate %162 RelaxedPrecision 
                                                      OpDecorate %163 RelaxedPrecision 
                                                      OpDecorate %166 RelaxedPrecision 
                                                      OpDecorate %167 RelaxedPrecision 
                                                      OpDecorate %169 RelaxedPrecision 
                                                      OpDecorate %171 RelaxedPrecision 
                                                      OpDecorate %173 RelaxedPrecision 
                                                      OpDecorate %174 RelaxedPrecision 
                                                      OpDecorate %175 RelaxedPrecision 
                                                      OpDecorate %176 RelaxedPrecision 
                                                      OpDecorate %177 RelaxedPrecision 
                                                      OpDecorate %178 RelaxedPrecision 
                                                      OpDecorate %179 RelaxedPrecision 
                                                      OpDecorate %180 RelaxedPrecision 
                                                      OpDecorate %181 RelaxedPrecision 
                                                      OpDecorate %182 RelaxedPrecision 
                                                      OpDecorate %183 RelaxedPrecision 
                                                      OpDecorate %184 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD4 Location 185 
                                                      OpDecorate %188 RelaxedPrecision 
                                                      OpDecorate %189 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD3 Location 190 
                                                      OpDecorate %195 RelaxedPrecision 
                                                      OpDecorate %196 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD1 Location 197 
                                                      OpDecorate %246 RelaxedPrecision 
                                                      OpDecorate %247 RelaxedPrecision 
                                                      OpDecorate %248 RelaxedPrecision 
                                                      OpDecorate %288 RelaxedPrecision 
                                                      OpDecorate %315 RelaxedPrecision 
                                                      OpDecorate %325 RelaxedPrecision 
                                                      OpDecorate %326 RelaxedPrecision 
                                                      OpDecorate %330 RelaxedPrecision 
                                                      OpDecorate %333 RelaxedPrecision 
                                                      OpDecorate %335 RelaxedPrecision 
                                                      OpDecorate %336 RelaxedPrecision 
                                                      OpDecorate %337 RelaxedPrecision 
                                                      OpDecorate %340 RelaxedPrecision 
                                                      OpDecorate %353 RelaxedPrecision 
                                                      OpDecorate %354 RelaxedPrecision 
                                                      OpDecorate %354 DescriptorSet 354 
                                                      OpDecorate %354 Binding 354 
                                                      OpDecorate %355 RelaxedPrecision 
                                                      OpDecorate %356 RelaxedPrecision 
                                                      OpDecorate %356 DescriptorSet 356 
                                                      OpDecorate %356 Binding 356 
                                                      OpDecorate %357 RelaxedPrecision 
                                                      OpDecorate %362 RelaxedPrecision 
                                                      OpDecorate %364 RelaxedPrecision 
                                                      OpDecorate %372 RelaxedPrecision 
                                                      OpDecorate %373 RelaxedPrecision 
                                                      OpDecorate %374 RelaxedPrecision 
                                                      OpDecorate %375 RelaxedPrecision 
                                                      OpDecorate %376 RelaxedPrecision 
                                                      OpDecorate %377 RelaxedPrecision 
                                                      OpDecorate %382 RelaxedPrecision 
                                                      OpDecorate %385 RelaxedPrecision 
                                                      OpDecorate %387 RelaxedPrecision 
                                                      OpDecorate %388 RelaxedPrecision 
                                                      OpDecorate %389 RelaxedPrecision 
                                                      OpDecorate %397 RelaxedPrecision 
                                                      OpDecorate %398 ArrayStride 398 
                                                      OpDecorate %399 ArrayStride 399 
                                                      OpDecorate %400 ArrayStride 400 
                                                      OpMemberDecorate %401 0 Offset 401 
                                                      OpMemberDecorate %401 1 Offset 401 
                                                      OpMemberDecorate %401 2 Offset 401 
                                                      OpMemberDecorate %401 3 RelaxedPrecision 
                                                      OpMemberDecorate %401 3 Offset 401 
                                                      OpMemberDecorate %401 4 RelaxedPrecision 
                                                      OpMemberDecorate %401 4 Offset 401 
                                                      OpMemberDecorate %401 5 RelaxedPrecision 
                                                      OpMemberDecorate %401 5 Offset 401 
                                                      OpMemberDecorate %401 6 Offset 401 
                                                      OpMemberDecorate %401 7 RelaxedPrecision 
                                                      OpMemberDecorate %401 7 Offset 401 
                                                      OpMemberDecorate %401 8 Offset 401 
                                                      OpMemberDecorate %401 9 Offset 401 
                                                      OpMemberDecorate %401 10 RelaxedPrecision 
                                                      OpMemberDecorate %401 10 Offset 401 
                                                      OpMemberDecorate %401 11 RelaxedPrecision 
                                                      OpMemberDecorate %401 11 Offset 401 
                                                      OpMemberDecorate %401 12 RelaxedPrecision 
                                                      OpMemberDecorate %401 12 Offset 401 
                                                      OpMemberDecorate %401 13 RelaxedPrecision 
                                                      OpMemberDecorate %401 13 Offset 401 
                                                      OpMemberDecorate %401 14 RelaxedPrecision 
                                                      OpMemberDecorate %401 14 Offset 401 
                                                      OpMemberDecorate %401 15 RelaxedPrecision 
                                                      OpMemberDecorate %401 15 Offset 401 
                                                      OpMemberDecorate %401 16 RelaxedPrecision 
                                                      OpMemberDecorate %401 16 Offset 401 
                                                      OpDecorate %401 Block 
                                                      OpDecorate %403 DescriptorSet 403 
                                                      OpDecorate %403 Binding 403 
                                                      OpDecorate %405 RelaxedPrecision 
                                                      OpDecorate %406 RelaxedPrecision 
                                                      OpDecorate %411 RelaxedPrecision 
                                                      OpDecorate %439 RelaxedPrecision 
                                                      OpDecorate %456 RelaxedPrecision 
                                                      OpDecorate vs_TEXCOORD5 Location 459 
                                                      OpDecorate %463 ArrayStride 463 
                                                      OpDecorate %464 ArrayStride 464 
                                                      OpDecorate %465 ArrayStride 465 
                                                      OpDecorate %466 ArrayStride 466 
                                                      OpDecorate %467 ArrayStride 467 
                                                      OpMemberDecorate %468 0 Offset 468 
                                                      OpMemberDecorate %468 1 RelaxedPrecision 
                                                      OpMemberDecorate %468 1 Offset 468 
                                                      OpMemberDecorate %468 2 RelaxedPrecision 
                                                      OpMemberDecorate %468 2 Offset 468 
                                                      OpMemberDecorate %468 3 RelaxedPrecision 
                                                      OpMemberDecorate %468 3 Offset 468 
                                                      OpMemberDecorate %468 4 RelaxedPrecision 
                                                      OpMemberDecorate %468 4 Offset 468 
                                                      OpDecorate %468 Block 
                                                      OpDecorate %470 DescriptorSet 470 
                                                      OpDecorate %470 Binding 470 
                                                      OpDecorate %500 RelaxedPrecision 
                                                      OpDecorate %504 RelaxedPrecision 
                                                      OpDecorate %513 RelaxedPrecision 
                                                      OpDecorate %514 RelaxedPrecision 
                                                      OpDecorate %517 RelaxedPrecision 
                                                      OpDecorate %520 RelaxedPrecision 
                                                      OpDecorate %521 RelaxedPrecision 
                                                      OpDecorate %524 RelaxedPrecision 
                                                      OpDecorate %525 RelaxedPrecision 
                                                      OpDecorate %526 RelaxedPrecision 
                                                      OpDecorate %527 RelaxedPrecision 
                                                      OpDecorate %528 RelaxedPrecision 
                                                      OpDecorate %529 RelaxedPrecision 
                                                      OpDecorate %530 RelaxedPrecision 
                                                      OpDecorate %532 RelaxedPrecision 
                                                      OpDecorate %541 RelaxedPrecision 
                                                      OpDecorate %542 RelaxedPrecision 
                                                      OpDecorate %543 RelaxedPrecision 
                                                      OpDecorate %548 RelaxedPrecision 
                                                      OpDecorate %549 RelaxedPrecision 
                                                      OpDecorate %556 RelaxedPrecision 
                                                      OpDecorate %557 RelaxedPrecision 
                                                      OpDecorate %558 RelaxedPrecision 
                                                      OpDecorate %559 RelaxedPrecision 
                                                      OpDecorate %560 RelaxedPrecision 
                                                      OpDecorate %561 RelaxedPrecision 
                                                      OpDecorate %562 RelaxedPrecision 
                                                      OpDecorate %563 RelaxedPrecision 
                                                      OpDecorate %566 RelaxedPrecision 
                                                      OpDecorate %569 RelaxedPrecision 
                                                      OpDecorate %570 RelaxedPrecision 
                                                      OpDecorate %571 RelaxedPrecision 
                                                      OpDecorate %572 RelaxedPrecision 
                                                      OpDecorate %574 RelaxedPrecision 
                                                      OpDecorate %575 RelaxedPrecision 
                                                      OpDecorate %578 RelaxedPrecision 
                                                      OpDecorate %579 RelaxedPrecision 
                                                      OpDecorate %580 RelaxedPrecision 
                                                      OpDecorate %620 RelaxedPrecision 
                                                      OpDecorate %621 RelaxedPrecision 
                                                      OpDecorate %622 RelaxedPrecision 
                                                      OpDecorate %623 RelaxedPrecision 
                                                      OpDecorate %624 RelaxedPrecision 
                                                      OpDecorate %625 RelaxedPrecision 
                                                      OpDecorate %626 RelaxedPrecision 
                                                      OpDecorate %627 RelaxedPrecision 
                                                      OpDecorate %630 RelaxedPrecision 
                                                      OpDecorate %646 RelaxedPrecision 
                                                      OpDecorate %648 RelaxedPrecision 
                                                      OpDecorate %656 RelaxedPrecision 
                                                      OpDecorate %658 RelaxedPrecision 
                                                      OpDecorate %659 RelaxedPrecision 
                                                      OpDecorate %662 RelaxedPrecision 
                                                      OpDecorate %665 RelaxedPrecision 
                                                      OpDecorate %670 RelaxedPrecision 
                                                      OpDecorate %681 RelaxedPrecision 
                                                      OpDecorate %683 RelaxedPrecision 
                                                      OpDecorate %684 RelaxedPrecision 
                                                      OpDecorate %685 RelaxedPrecision 
                                                      OpDecorate %690 RelaxedPrecision 
                                                      OpDecorate %694 RelaxedPrecision 
                                                      OpDecorate %700 RelaxedPrecision 
                                                      OpDecorate %706 RelaxedPrecision 
                                                      OpDecorate %715 RelaxedPrecision 
                                                      OpDecorate %718 RelaxedPrecision 
                                                      OpDecorate %719 RelaxedPrecision 
                                                      OpDecorate %720 RelaxedPrecision 
                                                      OpDecorate %724 RelaxedPrecision 
                                                      OpDecorate %725 RelaxedPrecision 
                                                      OpDecorate %726 RelaxedPrecision 
                                                      OpDecorate %730 RelaxedPrecision 
                                                      OpDecorate %731 RelaxedPrecision 
                                                      OpDecorate %732 RelaxedPrecision 
                                                      OpDecorate %744 RelaxedPrecision 
                                                      OpDecorate %745 RelaxedPrecision 
                                                      OpDecorate %749 RelaxedPrecision 
                                                      OpDecorate %750 RelaxedPrecision 
                                                      OpDecorate %751 RelaxedPrecision 
                                                      OpDecorate %752 RelaxedPrecision 
                                                      OpDecorate %753 RelaxedPrecision 
                                                      OpDecorate %754 RelaxedPrecision 
                                                      OpDecorate %755 RelaxedPrecision 
                                                      OpDecorate %756 RelaxedPrecision 
                                                      OpDecorate %757 RelaxedPrecision 
                                                      OpDecorate %758 RelaxedPrecision 
                                                      OpDecorate %759 RelaxedPrecision 
                                                      OpDecorate %761 RelaxedPrecision 
                                                      OpDecorate %762 RelaxedPrecision 
                                                      OpDecorate %763 RelaxedPrecision 
                                                      OpDecorate %764 RelaxedPrecision 
                                                      OpDecorate %793 RelaxedPrecision 
                                                      OpDecorate %794 RelaxedPrecision 
                                                      OpDecorate %796 RelaxedPrecision 
                                                      OpDecorate %797 RelaxedPrecision 
                                                      OpDecorate %800 RelaxedPrecision 
                                                      OpDecorate %801 RelaxedPrecision 
                                                      OpDecorate %803 RelaxedPrecision 
                                                      OpDecorate %805 RelaxedPrecision 
                                                      OpDecorate %806 RelaxedPrecision 
                                                      OpDecorate %807 RelaxedPrecision 
                                                      OpDecorate %808 RelaxedPrecision 
                                                      OpDecorate %809 RelaxedPrecision 
                                                      OpDecorate %811 RelaxedPrecision 
                                                      OpDecorate %812 RelaxedPrecision 
                                                      OpDecorate %813 RelaxedPrecision 
                                                      OpDecorate %813 DescriptorSet 813 
                                                      OpDecorate %813 Binding 813 
                                                      OpDecorate %814 RelaxedPrecision 
                                                      OpDecorate %815 RelaxedPrecision 
                                                      OpDecorate %815 DescriptorSet 815 
                                                      OpDecorate %815 Binding 815 
                                                      OpDecorate %816 RelaxedPrecision 
                                                      OpDecorate %818 RelaxedPrecision 
                                                      OpDecorate %819 RelaxedPrecision 
                                                      OpDecorate %820 RelaxedPrecision 
                                                      OpDecorate %821 RelaxedPrecision 
                                                      OpDecorate %822 RelaxedPrecision 
                                                      OpDecorate %823 RelaxedPrecision 
                                                      OpDecorate %824 RelaxedPrecision 
                                                      OpDecorate %825 RelaxedPrecision 
                                                      OpDecorate %826 RelaxedPrecision 
                                                      OpDecorate %873 RelaxedPrecision 
                                                      OpDecorate %874 RelaxedPrecision 
                                                      OpDecorate %885 RelaxedPrecision 
                                                      OpDecorate %896 RelaxedPrecision 
                                                      OpDecorate %897 RelaxedPrecision 
                                                      OpDecorate %898 RelaxedPrecision 
                                                      OpDecorate %899 RelaxedPrecision 
                                                      OpDecorate %902 RelaxedPrecision 
                                                      OpDecorate %906 RelaxedPrecision 
                                                      OpDecorate %909 RelaxedPrecision 
                                                      OpDecorate %910 RelaxedPrecision 
                                                      OpDecorate %976 RelaxedPrecision 
                                                      OpDecorate %1002 RelaxedPrecision 
                                                      OpDecorate %1010 RelaxedPrecision 
                                                      OpDecorate %1011 RelaxedPrecision 
                                                      OpDecorate %1012 RelaxedPrecision 
                                                      OpDecorate %1013 RelaxedPrecision 
                                                      OpDecorate %1014 RelaxedPrecision 
                                                      OpDecorate %1015 RelaxedPrecision 
                                                      OpDecorate %1035 RelaxedPrecision 
                                                      OpDecorate %1036 RelaxedPrecision 
                                                      OpDecorate %1037 RelaxedPrecision 
                                                      OpDecorate %1040 RelaxedPrecision 
                                                      OpDecorate %1042 RelaxedPrecision 
                                                      OpDecorate %1043 RelaxedPrecision 
                                                      OpDecorate %1044 RelaxedPrecision 
                                                      OpDecorate %1045 RelaxedPrecision 
                                                      OpDecorate %1046 RelaxedPrecision 
                                                      OpDecorate %1049 RelaxedPrecision 
                                                      OpDecorate %1050 RelaxedPrecision 
                                                      OpDecorate %1051 RelaxedPrecision 
                                                      OpDecorate %1053 RelaxedPrecision 
                                                      OpDecorate %1053 Location 1053 
                                                      OpDecorate %1054 RelaxedPrecision 
                                                      OpDecorate %1055 RelaxedPrecision 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypeVector %6 3 
                                              %11 = OpTypePointer Input %10 
                        Input f32_3* vs_TEXCOORD2 = OpVariable Input 
                                              %16 = OpTypeInt 32 0 
                                          u32 %17 = OpConstant 0 
                                              %18 = OpTypePointer Private %6 
                                              %24 = OpTypePointer Private %10 
                               Private f32_3* %25 = OpVariable Private 
                               Private f32_3* %30 = OpVariable Private 
                                          u32 %35 = OpConstant 4 
                                              %36 = OpTypeArray %7 %35 
                                              %37 = OpTypeArray %7 %35 
                                              %38 = OpTypeStruct %7 %7 %7 %36 %37 
                                              %39 = OpTypePointer Uniform %38 
Uniform struct {f32_4; f32_4; f32_4; f32_4[4]; f32_4[4];}* %40 = OpVariable Uniform 
                                              %41 = OpTypeInt 32 1 
                                          i32 %42 = OpConstant 0 
                                              %43 = OpTypePointer Uniform %7 
                                 Private f32* %52 = OpVariable Private 
                               Private f32_4* %56 = OpVariable Private 
                               Private f32_3* %63 = OpVariable Private 
                                              %64 = OpTypeVector %6 2 
                                              %65 = OpTypePointer Input %64 
                        Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                              %68 = OpTypeStruct %6 %7 %7 %6 %6 %10 %7 %6 %6 %6 %6 
                                              %69 = OpTypePointer Uniform %68 
Uniform struct {f32; f32_4; f32_4; f32; f32; f32_3; f32_4; f32; f32; f32; f32;}* %70 = OpVariable Uniform 
                                          i32 %71 = OpConstant 1 
                               Private f32_3* %82 = OpVariable Private 
                                              %83 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                              %84 = OpTypePointer UniformConstant %83 
         UniformConstant read_only Texture2D* %85 = OpVariable UniformConstant 
                                              %87 = OpTypeSampler 
                                              %88 = OpTypePointer UniformConstant %87 
                     UniformConstant sampler* %89 = OpVariable UniformConstant 
                                              %91 = OpTypeSampledImage %83 
                               Private f32_3* %97 = OpVariable Private 
         UniformConstant read_only Texture2D* %98 = OpVariable UniformConstant 
                    UniformConstant sampler* %100 = OpVariable UniformConstant 
                              Private f32_3* %107 = OpVariable Private 
                                         f32 %109 = OpConstant 3.674022E-40 
                                       f32_3 %110 = OpConstantComposite %109 %109 %109 
                                         f32 %112 = OpConstant 3.674022E-40 
                                       f32_3 %113 = OpConstantComposite %112 %112 %112 
                              Private f32_4* %115 = OpVariable Private 
        UniformConstant read_only Texture2D* %116 = OpVariable UniformConstant 
                    UniformConstant sampler* %118 = OpVariable UniformConstant 
                                         u32 %124 = OpConstant 1 
                                         i32 %127 = OpConstant 3 
                                             %128 = OpTypePointer Uniform %6 
                                Private f32* %133 = OpVariable Private 
                                         f32 %136 = OpConstant 3.674022E-40 
                                         f32 %142 = OpConstant 3.674022E-40 
                              Private f32_3* %144 = OpVariable Private 
                              Private f32_3* %149 = OpVariable Private 
                                         i32 %151 = OpConstant 2 
                                         f32 %157 = OpConstant 3.674022E-40 
                                       f32_3 %158 = OpConstantComposite %157 %157 %157 
                                         f32 %164 = OpConstant 3.674022E-40 
                                       f32_3 %165 = OpConstantComposite %164 %164 %164 
                                Private f32* %167 = OpVariable Private 
                                         f32 %170 = OpConstant 3.674022E-40 
                                         f32 %172 = OpConstant 3.674022E-40 
                              Private f32_3* %174 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD4 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD3 = OpVariable Input 
                        Input f32_3* vs_TEXCOORD1 = OpVariable Input 
                                Private f32* %202 = OpVariable Private 
                              Private f32_4* %208 = OpVariable Private 
                                         f32 %222 = OpConstant 3.674022E-40 
                                         u32 %236 = OpConstant 2 
                                         f32 %240 = OpConstant 3.674022E-40 
                                       f32_3 %241 = OpConstantComposite %240 %222 %222 
                                Private f32* %245 = OpVariable Private 
                                         f32 %259 = OpConstant 3.674022E-40 
                                         f32 %271 = OpConstant 3.674022E-40 
                              Private f32_4* %333 = OpVariable Private 
                                         i32 %342 = OpConstant 10 
                              Private f32_3* %353 = OpVariable Private 
        UniformConstant read_only Texture2D* %354 = OpVariable UniformConstant 
                    UniformConstant sampler* %356 = OpVariable UniformConstant 
                              Private f32_3* %363 = OpVariable Private 
                                         i32 %365 = OpConstant 4 
                                             %398 = OpTypeArray %7 %35 
                                             %399 = OpTypeArray %7 %35 
                                             %400 = OpTypeArray %7 %236 
                                             %401 = OpTypeStruct %398 %399 %7 %7 %7 %400 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 
                                             %402 = OpTypePointer Uniform %401 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4; f32_4[2]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %403 = OpVariable Uniform 
                                             %408 = OpTypePointer Private %41 
                                Private i32* %409 = OpVariable Private 
                                             %414 = OpTypePointer Function %16 
                                             %424 = OpTypeBool 
                                Private i32* %426 = OpVariable Private 
                                         u32 %428 = OpConstant 3 
                                             %431 = OpTypePointer Private %16 
                                Private u32* %432 = OpVariable Private 
                                         i32 %435 = OpConstant 5 
                                             %440 = OpTypeVector %16 4 
                                             %441 = OpTypeArray %440 %35 
                                         u32 %442 = OpConstant 1065353216 
                                       u32_4 %443 = OpConstantComposite %442 %17 %17 %17 
                                       u32_4 %444 = OpConstantComposite %17 %442 %17 %17 
                                       u32_4 %445 = OpConstantComposite %17 %17 %442 %17 
                                       u32_4 %446 = OpConstantComposite %17 %17 %17 %442 
                                    u32_4[4] %447 = OpConstantComposite %443 %444 %445 %446 
                                             %449 = OpTypePointer Function %441 
                                             %451 = OpTypePointer Function %440 
                              Private f32_3* %458 = OpVariable Private 
                        Input f32_3* vs_TEXCOORD5 = OpVariable Input 
                                         u32 %462 = OpConstant 32 
                                             %463 = OpTypeArray %7 %462 
                                             %464 = OpTypeArray %7 %462 
                                             %465 = OpTypeArray %7 %462 
                                             %466 = OpTypeArray %7 %462 
                                             %467 = OpTypeArray %7 %462 
                                             %468 = OpTypeStruct %463 %464 %465 %466 %467 
                                             %469 = OpTypePointer Uniform %468 
Uniform struct {f32_4[32]; f32_4[32]; f32_4[32]; f32_4[32]; f32_4[32];}* %470 = OpVariable Uniform 
                                Private f32* %481 = OpVariable Private 
                                         f32 %486 = OpConstant 3.674022E-40 
                                Private f32* %488 = OpVariable Private 
                              Private f32_3* %541 = OpVariable Private 
                              Private f32_3* %562 = OpVariable Private 
                                Private f32* %623 = OpVariable Private 
                                         f32 %632 = OpConstant 3.674022E-40 
                                         f32 %647 = OpConstant 3.674022E-40 
                                         f32 %657 = OpConstant 3.674022E-40 
                                         f32 %678 = OpConstant 3.674022E-40 
                                       f32_3 %679 = OpConstantComposite %678 %678 %678 
                                         i32 %698 = OpConstant 11 
                                         i32 %704 = OpConstant 12 
                              Private f32_3* %715 = OpVariable Private 
                                         i32 %716 = OpConstant 13 
                                         i32 %722 = OpConstant 14 
                                         i32 %728 = OpConstant 15 
                                         i32 %747 = OpConstant 16 
                                       f32_3 %760 = OpConstantComposite %271 %271 %271 
                                       f32_2 %795 = OpConstantComposite %259 %259 
                                         f32 %802 = OpConstant 3.674022E-40 
                                         f32 %804 = OpConstant 3.674022E-40 
                                         f32 %810 = OpConstant 3.674022E-40 
                              Private f32_3* %812 = OpVariable Private 
        UniformConstant read_only Texture2D* %813 = OpVariable UniformConstant 
                    UniformConstant sampler* %815 = OpVariable UniformConstant 
                                Private f32* %859 = OpVariable Private 
                                             %917 = OpTypePointer Uniform %10 
                                         i32 %978 = OpConstant 8 
                                         i32 %986 = OpConstant 7 
                                         i32 %997 = OpConstant 6 
                                        i32 %1003 = OpConstant 9 
                                      f32_3 %1024 = OpConstantComposite %802 %802 %802 
                                        f32 %1028 = OpConstant 3.674022E-40 
                                      f32_3 %1029 = OpConstantComposite %1028 %1028 %1028 
                                        f32 %1047 = OpConstant 3.674022E-40 
                                      f32_3 %1048 = OpConstantComposite %1047 %1047 %1047 
                                            %1052 = OpTypePointer Output %7 
                              Output f32_4* %1053 = OpVariable Output 
                                            %1058 = OpTypePointer Output %6 
                                            %1061 = OpTypePointer Private %424 
                              Private bool* %1062 = OpVariable Private 
                               Private u32* %1063 = OpVariable Private 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                               Function u32* %415 = OpVariable Function 
                          Function u32_4[4]* %450 = OpVariable Function 
                                        f32_3 %13 = OpLoad vs_TEXCOORD2 
                                        f32_3 %14 = OpLoad vs_TEXCOORD2 
                                          f32 %15 = OpDot %13 %14 
                                 Private f32* %19 = OpAccessChain %9 %17 
                                                      OpStore %19 %15 
                                 Private f32* %20 = OpAccessChain %9 %17 
                                          f32 %21 = OpLoad %20 
                                          f32 %22 = OpExtInst %1 32 %21 
                                 Private f32* %23 = OpAccessChain %9 %17 
                                                      OpStore %23 %22 
                                        f32_4 %26 = OpLoad %9 
                                        f32_3 %27 = OpVectorShuffle %26 %26 0 0 0 
                                        f32_3 %28 = OpLoad vs_TEXCOORD2 
                                        f32_3 %29 = OpFMul %27 %28 
                                                      OpStore %25 %29 
                                        f32_3 %31 = OpLoad vs_TEXCOORD2 
                                        f32_4 %32 = OpLoad %9 
                                        f32_3 %33 = OpVectorShuffle %32 %32 0 0 0 
                                        f32_3 %34 = OpFMul %31 %33 
                               Uniform f32_4* %44 = OpAccessChain %40 %42 
                                        f32_4 %45 = OpLoad %44 
                                        f32_3 %46 = OpVectorShuffle %45 %45 0 1 2 
                                        f32_3 %47 = OpFAdd %34 %46 
                                                      OpStore %30 %47 
                                        f32_3 %48 = OpLoad %30 
                                        f32_3 %49 = OpLoad %30 
                                          f32 %50 = OpDot %48 %49 
                                 Private f32* %51 = OpAccessChain %9 %17 
                                                      OpStore %51 %50 
                                 Private f32* %53 = OpAccessChain %9 %17 
                                          f32 %54 = OpLoad %53 
                                          f32 %55 = OpExtInst %1 32 %54 
                                                      OpStore %52 %55 
                                          f32 %57 = OpLoad %52 
                                        f32_3 %58 = OpCompositeConstruct %57 %57 %57 
                                        f32_3 %59 = OpLoad %30 
                                        f32_3 %60 = OpFMul %58 %59 
                                        f32_4 %61 = OpLoad %56 
                                        f32_4 %62 = OpVectorShuffle %61 %60 4 5 6 3 
                                                      OpStore %56 %62 
                                        f32_2 %67 = OpLoad vs_TEXCOORD0 
                               Uniform f32_4* %72 = OpAccessChain %70 %71 
                                        f32_4 %73 = OpLoad %72 
                                        f32_2 %74 = OpVectorShuffle %73 %73 0 1 
                                        f32_2 %75 = OpFMul %67 %74 
                               Uniform f32_4* %76 = OpAccessChain %70 %71 
                                        f32_4 %77 = OpLoad %76 
                                        f32_2 %78 = OpVectorShuffle %77 %77 2 3 
                                        f32_2 %79 = OpFAdd %75 %78 
                                        f32_3 %80 = OpLoad %63 
                                        f32_3 %81 = OpVectorShuffle %80 %79 3 4 2 
                                                      OpStore %63 %81 
                          read_only Texture2D %86 = OpLoad %85 
                                      sampler %90 = OpLoad %89 
                   read_only Texture2DSampled %92 = OpSampledImage %86 %90 
                                        f32_3 %93 = OpLoad %63 
                                        f32_2 %94 = OpVectorShuffle %93 %93 0 1 
                                        f32_4 %95 = OpImageSampleImplicitLod %92 %94 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 1 2 
                                                      OpStore %82 %96 
                          read_only Texture2D %99 = OpLoad %98 
                                     sampler %101 = OpLoad %100 
                  read_only Texture2DSampled %102 = OpSampledImage %99 %101 
                                       f32_3 %103 = OpLoad %63 
                                       f32_2 %104 = OpVectorShuffle %103 %103 0 1 
                                       f32_4 %105 = OpImageSampleImplicitLod %102 %104 
                                       f32_3 %106 = OpVectorShuffle %105 %105 0 1 2 
                                                      OpStore %97 %106 
                                       f32_3 %108 = OpLoad %97 
                                       f32_3 %111 = OpFMul %108 %110 
                                       f32_3 %114 = OpFAdd %111 %113 
                                                      OpStore %107 %114 
                         read_only Texture2D %117 = OpLoad %116 
                                     sampler %119 = OpLoad %118 
                  read_only Texture2DSampled %120 = OpSampledImage %117 %119 
                                       f32_3 %121 = OpLoad %63 
                                       f32_2 %122 = OpVectorShuffle %121 %121 0 1 
                                       f32_4 %123 = OpImageSampleImplicitLod %120 %122 
                                                      OpStore %115 %123 
                                Private f32* %125 = OpAccessChain %115 %124 
                                         f32 %126 = OpLoad %125 
                                Uniform f32* %129 = OpAccessChain %70 %127 
                                         f32 %130 = OpLoad %129 
                                         f32 %131 = OpFNegate %130 
                                         f32 %132 = OpFAdd %126 %131 
                                                      OpStore %52 %132 
                                         f32 %134 = OpLoad %52 
                                         f32 %135 = OpFNegate %134 
                                         f32 %137 = OpFAdd %135 %136 
                                                      OpStore %133 %137 
                                         f32 %138 = OpLoad %133 
                                         f32 %139 = OpLoad %133 
                                         f32 %140 = OpFMul %138 %139 
                                                      OpStore %133 %140 
                                         f32 %141 = OpLoad %133 
                                         f32 %143 = OpExtInst %1 40 %141 %142 
                                                      OpStore %133 %143 
                                       f32_3 %145 = OpLoad %82 
                                       f32_4 %146 = OpLoad %115 
                                       f32_3 %147 = OpVectorShuffle %146 %146 2 2 2 
                                       f32_3 %148 = OpFMul %145 %147 
                                                      OpStore %144 %148 
                                       f32_3 %150 = OpLoad %144 
                              Uniform f32_4* %152 = OpAccessChain %70 %151 
                                       f32_4 %153 = OpLoad %152 
                                       f32_3 %154 = OpVectorShuffle %153 %153 0 1 2 
                                       f32_3 %155 = OpFMul %150 %154 
                                                      OpStore %149 %155 
                                       f32_3 %156 = OpLoad %82 
                                       f32_3 %159 = OpFAdd %156 %158 
                                                      OpStore %144 %159 
                                       f32_4 %160 = OpLoad %115 
                                       f32_3 %161 = OpVectorShuffle %160 %160 0 0 0 
                                       f32_3 %162 = OpLoad %144 
                                       f32_3 %163 = OpFMul %161 %162 
                                       f32_3 %166 = OpFAdd %163 %165 
                                                      OpStore %144 %166 
                                Private f32* %168 = OpAccessChain %115 %17 
                                         f32 %169 = OpLoad %168 
                                         f32 %171 = OpFMul %169 %170 
                                         f32 %173 = OpFAdd %171 %172 
                                                      OpStore %167 %173 
                                       f32_3 %175 = OpLoad %82 
                                         f32 %176 = OpLoad %167 
                                       f32_3 %177 = OpCompositeConstruct %176 %176 %176 
                                       f32_3 %178 = OpFMul %175 %177 
                                                      OpStore %174 %178 
                                       f32_4 %179 = OpLoad %115 
                                       f32_3 %180 = OpVectorShuffle %179 %179 3 3 3 
                                       f32_3 %181 = OpLoad %174 
                                       f32_3 %182 = OpFMul %180 %181 
                                                      OpStore %174 %182 
                                       f32_3 %183 = OpLoad %107 
                                       f32_3 %184 = OpVectorShuffle %183 %183 1 1 1 
                                       f32_3 %186 = OpLoad vs_TEXCOORD4 
                                       f32_3 %187 = OpFMul %184 %186 
                                                      OpStore %63 %187 
                                       f32_3 %188 = OpLoad %107 
                                       f32_3 %189 = OpVectorShuffle %188 %188 0 0 0 
                                       f32_3 %191 = OpLoad vs_TEXCOORD3 
                                       f32_3 %192 = OpFMul %189 %191 
                                       f32_3 %193 = OpLoad %63 
                                       f32_3 %194 = OpFAdd %192 %193 
                                                      OpStore %63 %194 
                                       f32_3 %195 = OpLoad %107 
                                       f32_3 %196 = OpVectorShuffle %195 %195 2 2 2 
                                       f32_3 %198 = OpLoad vs_TEXCOORD1 
                                       f32_3 %199 = OpFMul %196 %198 
                                       f32_3 %200 = OpLoad %63 
                                       f32_3 %201 = OpFAdd %199 %200 
                                                      OpStore %63 %201 
                                       f32_3 %203 = OpLoad %63 
                                       f32_3 %204 = OpLoad %63 
                                         f32 %205 = OpDot %203 %204 
                                                      OpStore %202 %205 
                                         f32 %206 = OpLoad %202 
                                         f32 %207 = OpExtInst %1 32 %206 
                                                      OpStore %202 %207 
                                         f32 %209 = OpLoad %202 
                                       f32_3 %210 = OpCompositeConstruct %209 %209 %209 
                                       f32_3 %211 = OpLoad %63 
                                       f32_3 %212 = OpFMul %210 %211 
                                       f32_4 %213 = OpLoad %208 
                                       f32_4 %214 = OpVectorShuffle %213 %212 4 5 6 3 
                                                      OpStore %208 %214 
                                       f32_4 %215 = OpLoad %208 
                                       f32_3 %216 = OpVectorShuffle %215 %215 0 1 2 
                              Uniform f32_4* %217 = OpAccessChain %40 %42 
                                       f32_4 %218 = OpLoad %217 
                                       f32_3 %219 = OpVectorShuffle %218 %218 0 1 2 
                                         f32 %220 = OpDot %216 %219 
                                                      OpStore %202 %220 
                                         f32 %221 = OpLoad %202 
                                         f32 %223 = OpExtInst %1 40 %221 %222 
                                Private f32* %224 = OpAccessChain %63 %17 
                                                      OpStore %224 %223 
                                       f32_4 %225 = OpLoad %208 
                                       f32_3 %226 = OpVectorShuffle %225 %225 0 1 2 
                                       f32_3 %227 = OpLoad %25 
                                         f32 %228 = OpDot %226 %227 
                                Private f32* %229 = OpAccessChain %9 %124 
                                                      OpStore %229 %228 
                              Uniform f32_4* %230 = OpAccessChain %40 %42 
                                       f32_4 %231 = OpLoad %230 
                                       f32_3 %232 = OpVectorShuffle %231 %231 0 1 2 
                                       f32_4 %233 = OpLoad %56 
                                       f32_3 %234 = OpVectorShuffle %233 %233 0 1 2 
                                         f32 %235 = OpDot %232 %234 
                                Private f32* %237 = OpAccessChain %9 %236 
                                                      OpStore %237 %235 
                                       f32_4 %238 = OpLoad %9 
                                       f32_3 %239 = OpVectorShuffle %238 %238 0 1 2 
                                       f32_3 %242 = OpExtInst %1 40 %239 %241 
                                       f32_4 %243 = OpLoad %9 
                                       f32_4 %244 = OpVectorShuffle %243 %242 4 5 6 3 
                                                      OpStore %9 %244 
                                         f32 %246 = OpLoad %133 
                                         f32 %247 = OpLoad %133 
                                         f32 %248 = OpFAdd %246 %247 
                                                      OpStore %245 %248 
                                Private f32* %249 = OpAccessChain %9 %236 
                                         f32 %250 = OpLoad %249 
                                Private f32* %251 = OpAccessChain %9 %236 
                                         f32 %252 = OpLoad %251 
                                         f32 %253 = OpFMul %250 %252 
                                Private f32* %254 = OpAccessChain %56 %17 
                                                      OpStore %254 %253 
                                Private f32* %255 = OpAccessChain %56 %17 
                                         f32 %256 = OpLoad %255 
                                         f32 %257 = OpLoad %245 
                                         f32 %258 = OpFMul %256 %257 
                                         f32 %260 = OpFAdd %258 %259 
                                                      OpStore %245 %260 
                                         f32 %261 = OpLoad %245 
                                         f32 %262 = OpFAdd %261 %112 
                                Private f32* %263 = OpAccessChain %107 %17 
                                                      OpStore %263 %262 
                                Private f32* %264 = OpAccessChain %9 %124 
                                         f32 %265 = OpLoad %264 
                                         f32 %266 = OpFNegate %265 
                                         f32 %267 = OpFAdd %266 %136 
                                Private f32* %268 = OpAccessChain %25 %17 
                                                      OpStore %268 %267 
                                Private f32* %269 = OpAccessChain %25 %17 
                                         f32 %270 = OpLoad %269 
                                         f32 %272 = OpExtInst %1 40 %270 %271 
                                Private f32* %273 = OpAccessChain %25 %17 
                                                      OpStore %273 %272 
                                Private f32* %274 = OpAccessChain %25 %17 
                                         f32 %275 = OpLoad %274 
                                Private f32* %276 = OpAccessChain %25 %17 
                                         f32 %277 = OpLoad %276 
                                         f32 %278 = OpFMul %275 %277 
                                                      OpStore %245 %278 
                                         f32 %279 = OpLoad %245 
                                         f32 %280 = OpLoad %245 
                                         f32 %281 = OpFMul %279 %280 
                                                      OpStore %245 %281 
                                Private f32* %282 = OpAccessChain %25 %17 
                                         f32 %283 = OpLoad %282 
                                         f32 %284 = OpLoad %245 
                                         f32 %285 = OpFMul %283 %284 
                                Private f32* %286 = OpAccessChain %25 %17 
                                                      OpStore %286 %285 
                                Private f32* %287 = OpAccessChain %107 %17 
                                         f32 %288 = OpLoad %287 
                                Private f32* %289 = OpAccessChain %25 %17 
                                         f32 %290 = OpLoad %289 
                                         f32 %291 = OpFMul %288 %290 
                                         f32 %292 = OpFAdd %291 %136 
                                Private f32* %293 = OpAccessChain %25 %17 
                                                      OpStore %293 %292 
                                Private f32* %294 = OpAccessChain %63 %17 
                                         f32 %295 = OpLoad %294 
                                         f32 %296 = OpFNegate %295 
                                         f32 %297 = OpFAdd %296 %136 
                                                      OpStore %245 %297 
                                         f32 %298 = OpLoad %245 
                                         f32 %299 = OpExtInst %1 40 %298 %271 
                                                      OpStore %245 %299 
                                         f32 %300 = OpLoad %245 
                                         f32 %301 = OpLoad %245 
                                         f32 %302 = OpFMul %300 %301 
                                Private f32* %303 = OpAccessChain %56 %17 
                                                      OpStore %303 %302 
                                Private f32* %304 = OpAccessChain %56 %17 
                                         f32 %305 = OpLoad %304 
                                Private f32* %306 = OpAccessChain %56 %17 
                                         f32 %307 = OpLoad %306 
                                         f32 %308 = OpFMul %305 %307 
                                Private f32* %309 = OpAccessChain %56 %17 
                                                      OpStore %309 %308 
                                         f32 %310 = OpLoad %245 
                                Private f32* %311 = OpAccessChain %56 %17 
                                         f32 %312 = OpLoad %311 
                                         f32 %313 = OpFMul %310 %312 
                                                      OpStore %245 %313 
                                Private f32* %314 = OpAccessChain %107 %17 
                                         f32 %315 = OpLoad %314 
                                         f32 %316 = OpLoad %245 
                                         f32 %317 = OpFMul %315 %316 
                                         f32 %318 = OpFAdd %317 %136 
                                                      OpStore %245 %318 
                                Private f32* %319 = OpAccessChain %25 %17 
                                         f32 %320 = OpLoad %319 
                                         f32 %321 = OpLoad %245 
                                         f32 %322 = OpFMul %320 %321 
                                Private f32* %323 = OpAccessChain %107 %17 
                                                      OpStore %323 %322 
                                Private f32* %324 = OpAccessChain %107 %17 
                                         f32 %325 = OpLoad %324 
                                         f32 %326 = OpExtInst %1 37 %325 %136 
                                Private f32* %327 = OpAccessChain %107 %17 
                                                      OpStore %327 %326 
                                         f32 %328 = OpLoad %202 
                                Private f32* %329 = OpAccessChain %107 %17 
                                         f32 %330 = OpLoad %329 
                                         f32 %331 = OpFMul %328 %330 
                                Private f32* %332 = OpAccessChain %107 %17 
                                                      OpStore %332 %331 
                                Private f32* %334 = OpAccessChain %107 %17 
                                         f32 %335 = OpLoad %334 
                                         f32 %336 = OpFMul %335 %259 
                                         f32 %337 = OpFAdd %336 %259 
                                Private f32* %338 = OpAccessChain %333 %17 
                                                      OpStore %338 %337 
                                Private f32* %339 = OpAccessChain %333 %17 
                                         f32 %340 = OpLoad %339 
                                Private f32* %341 = OpAccessChain %56 %17 
                                                      OpStore %341 %340 
                                Uniform f32* %343 = OpAccessChain %70 %342 
                                         f32 %344 = OpLoad %343 
                                Uniform f32* %345 = OpAccessChain %70 %342 
                                         f32 %346 = OpLoad %345 
                                       f32_2 %347 = OpCompositeConstruct %344 %346 
                                         f32 %348 = OpCompositeExtract %347 0 
                                         f32 %349 = OpCompositeExtract %347 1 
                                       f32_2 %350 = OpCompositeConstruct %348 %349 
                                       f32_4 %351 = OpLoad %56 
                                       f32_4 %352 = OpVectorShuffle %351 %350 0 4 2 5 
                                                      OpStore %56 %352 
                         read_only Texture2D %355 = OpLoad %354 
                                     sampler %357 = OpLoad %356 
                  read_only Texture2DSampled %358 = OpSampledImage %355 %357 
                                       f32_4 %359 = OpLoad %56 
                                       f32_2 %360 = OpVectorShuffle %359 %359 0 1 
                                       f32_4 %361 = OpImageSampleImplicitLod %358 %360 
                                       f32_3 %362 = OpVectorShuffle %361 %361 0 1 2 
                                                      OpStore %353 %362 
                                       f32_3 %364 = OpLoad %353 
                                Uniform f32* %366 = OpAccessChain %70 %365 
                                         f32 %367 = OpLoad %366 
                                Uniform f32* %368 = OpAccessChain %70 %365 
                                         f32 %369 = OpLoad %368 
                                Uniform f32* %370 = OpAccessChain %70 %365 
                                         f32 %371 = OpLoad %370 
                                       f32_3 %372 = OpCompositeConstruct %367 %369 %371 
                                         f32 %373 = OpCompositeExtract %372 0 
                                         f32 %374 = OpCompositeExtract %372 1 
                                         f32 %375 = OpCompositeExtract %372 2 
                                       f32_3 %376 = OpCompositeConstruct %373 %374 %375 
                                       f32_3 %377 = OpFMul %364 %376 
                                                      OpStore %363 %377 
                                Private f32* %378 = OpAccessChain %56 %17 
                                         f32 %379 = OpLoad %378 
                                         f32 %380 = OpExtInst %1 37 %379 %136 
                                Private f32* %381 = OpAccessChain %25 %17 
                                                      OpStore %381 %380 
                                       f32_3 %382 = OpLoad %174 
                                       f32_3 %383 = OpLoad %363 
                                       f32_3 %384 = OpFMul %382 %383 
                                                      OpStore %107 %384 
                                       f32_3 %385 = OpLoad %107 
                              Uniform f32_4* %386 = OpAccessChain %40 %71 
                                       f32_4 %387 = OpLoad %386 
                                       f32_3 %388 = OpVectorShuffle %387 %387 0 1 2 
                                       f32_3 %389 = OpFMul %385 %388 
                                                      OpStore %363 %389 
                                       f32_3 %390 = OpLoad %363 
                                       f32_3 %391 = OpLoad %25 
                                       f32_3 %392 = OpVectorShuffle %391 %391 0 0 0 
                                       f32_3 %393 = OpFMul %390 %392 
                                       f32_3 %394 = OpLoad %149 
                                       f32_3 %395 = OpFAdd %393 %394 
                                                      OpStore %363 %395 
                                Uniform f32* %396 = OpAccessChain %40 %151 %17 
                                         f32 %397 = OpLoad %396 
                                Uniform f32* %404 = OpAccessChain %403 %365 %124 
                                         f32 %405 = OpLoad %404 
                                         f32 %406 = OpExtInst %1 37 %397 %405 
                                Private f32* %407 = OpAccessChain %107 %17 
                                                      OpStore %407 %406 
                                Private f32* %410 = OpAccessChain %107 %17 
                                         f32 %411 = OpLoad %410 
                                         i32 %412 = OpConvertFToS %411 
                                                      OpStore %409 %412 
                                       f32_3 %413 = OpLoad %363 
                                                      OpStore %107 %413 
                                                      OpStore %415 %17 
                                                      OpBranch %416 
                                             %416 = OpLabel 
                                                      OpLoopMerge %418 %419 None 
                                                      OpBranch %420 
                                             %420 = OpLabel 
                                         u32 %421 = OpLoad %415 
                                         i32 %422 = OpLoad %409 
                                         u32 %423 = OpBitcast %422 
                                        bool %425 = OpULessThan %421 %423 
                                                      OpBranchConditional %425 %417 %418 
                                             %417 = OpLabel 
                                         u32 %427 = OpLoad %415 
                                         u32 %429 = OpBitwiseAnd %427 %428 
                                         i32 %430 = OpBitcast %429 
                                                      OpStore %426 %430 
                                         u32 %433 = OpLoad %415 
                                         u32 %434 = OpShiftRightLogical %433 %236 
                                                      OpStore %432 %434 
                                         u32 %436 = OpLoad %432 
                                         i32 %437 = OpBitcast %436 
                              Uniform f32_4* %438 = OpAccessChain %403 %435 %437 
                                       f32_4 %439 = OpLoad %438 
                                         i32 %448 = OpLoad %426 
                                                      OpStore %450 %447 
                             Function u32_4* %452 = OpAccessChain %450 %448 
                                       u32_4 %453 = OpLoad %452 
                                       f32_4 %454 = OpBitcast %453 
                                         f32 %455 = OpDot %439 %454 
                                                      OpStore %167 %455 
                                         f32 %456 = OpLoad %167 
                                         i32 %457 = OpConvertFToS %456 
                                                      OpStore %426 %457 
                                       f32_3 %460 = OpLoad vs_TEXCOORD5 
                                       f32_3 %461 = OpFNegate %460 
                                         i32 %471 = OpLoad %426 
                              Uniform f32_4* %472 = OpAccessChain %470 %42 %471 
                                       f32_4 %473 = OpLoad %472 
                                       f32_3 %474 = OpVectorShuffle %473 %473 3 3 3 
                                       f32_3 %475 = OpFMul %461 %474 
                                         i32 %476 = OpLoad %426 
                              Uniform f32_4* %477 = OpAccessChain %470 %42 %476 
                                       f32_4 %478 = OpLoad %477 
                                       f32_3 %479 = OpVectorShuffle %478 %478 0 1 2 
                                       f32_3 %480 = OpFAdd %475 %479 
                                                      OpStore %458 %480 
                                       f32_3 %482 = OpLoad %458 
                                       f32_3 %483 = OpLoad %458 
                                         f32 %484 = OpDot %482 %483 
                                                      OpStore %481 %484 
                                         f32 %485 = OpLoad %481 
                                         f32 %487 = OpExtInst %1 40 %485 %486 
                                                      OpStore %481 %487 
                                         f32 %489 = OpLoad %481 
                                         f32 %490 = OpExtInst %1 32 %489 
                                                      OpStore %488 %490 
                                         f32 %491 = OpLoad %488 
                                       f32_3 %492 = OpCompositeConstruct %491 %491 %491 
                                       f32_3 %493 = OpLoad %458 
                                       f32_3 %494 = OpFMul %492 %493 
                                                      OpStore %458 %494 
                                         f32 %495 = OpLoad %481 
                                         f32 %496 = OpFDiv %136 %495 
                                                      OpStore %488 %496 
                                         f32 %497 = OpLoad %481 
                                         i32 %498 = OpLoad %426 
                                Uniform f32* %499 = OpAccessChain %470 %151 %498 %17 
                                         f32 %500 = OpLoad %499 
                                         f32 %501 = OpFMul %497 %500 
                                         i32 %502 = OpLoad %426 
                                Uniform f32* %503 = OpAccessChain %470 %151 %502 %124 
                                         f32 %504 = OpLoad %503 
                                         f32 %505 = OpFAdd %501 %504 
                                                      OpStore %481 %505 
                                         f32 %506 = OpLoad %481 
                                         f32 %507 = OpExtInst %1 43 %506 %271 %136 
                                                      OpStore %481 %507 
                                         f32 %508 = OpLoad %481 
                                         f32 %509 = OpLoad %488 
                                         f32 %510 = OpFMul %508 %509 
                                                      OpStore %481 %510 
                                         i32 %511 = OpLoad %426 
                              Uniform f32_4* %512 = OpAccessChain %470 %127 %511 
                                       f32_4 %513 = OpLoad %512 
                                       f32_3 %514 = OpVectorShuffle %513 %513 0 1 2 
                                       f32_3 %515 = OpLoad %458 
                                         f32 %516 = OpDot %514 %515 
                                                      OpStore %167 %516 
                                         f32 %517 = OpLoad %167 
                                         i32 %518 = OpLoad %426 
                                Uniform f32* %519 = OpAccessChain %470 %151 %518 %236 
                                         f32 %520 = OpLoad %519 
                                         f32 %521 = OpFMul %517 %520 
                                         i32 %522 = OpLoad %426 
                                Uniform f32* %523 = OpAccessChain %470 %151 %522 %428 
                                         f32 %524 = OpLoad %523 
                                         f32 %525 = OpFAdd %521 %524 
                                                      OpStore %167 %525 
                                         f32 %526 = OpLoad %167 
                                         f32 %527 = OpExtInst %1 43 %526 %271 %136 
                                                      OpStore %167 %527 
                                         f32 %528 = OpLoad %167 
                                         f32 %529 = OpLoad %167 
                                         f32 %530 = OpFMul %528 %529 
                                                      OpStore %167 %530 
                                         f32 %531 = OpLoad %481 
                                         f32 %532 = OpLoad %167 
                                         f32 %533 = OpFMul %531 %532 
                                                      OpStore %481 %533 
                                       f32_4 %534 = OpLoad %208 
                                       f32_3 %535 = OpVectorShuffle %534 %534 0 1 2 
                                       f32_3 %536 = OpLoad %458 
                                         f32 %537 = OpDot %535 %536 
                                                      OpStore %488 %537 
                                         f32 %538 = OpLoad %488 
                                         f32 %539 = OpExtInst %1 40 %538 %222 
                                Private f32* %540 = OpAccessChain %56 %236 
                                                      OpStore %540 %539 
                         read_only Texture2D %542 = OpLoad %354 
                                     sampler %543 = OpLoad %356 
                  read_only Texture2DSampled %544 = OpSampledImage %542 %543 
                                       f32_4 %545 = OpLoad %56 
                                       f32_2 %546 = OpVectorShuffle %545 %545 2 3 
                                       f32_4 %547 = OpImageSampleImplicitLod %544 %546 
                                       f32_3 %548 = OpVectorShuffle %547 %547 0 1 2 
                                                      OpStore %541 %548 
                                       f32_3 %549 = OpLoad %541 
                                Uniform f32* %550 = OpAccessChain %70 %365 
                                         f32 %551 = OpLoad %550 
                                Uniform f32* %552 = OpAccessChain %70 %365 
                                         f32 %553 = OpLoad %552 
                                Uniform f32* %554 = OpAccessChain %70 %365 
                                         f32 %555 = OpLoad %554 
                                       f32_3 %556 = OpCompositeConstruct %551 %553 %555 
                                         f32 %557 = OpCompositeExtract %556 0 
                                         f32 %558 = OpCompositeExtract %556 1 
                                         f32 %559 = OpCompositeExtract %556 2 
                                       f32_3 %560 = OpCompositeConstruct %557 %558 %559 
                                       f32_3 %561 = OpFMul %549 %560 
                                                      OpStore %458 %561 
                                       f32_3 %563 = OpLoad %174 
                                       f32_3 %564 = OpLoad %458 
                                       f32_3 %565 = OpFMul %563 %564 
                                                      OpStore %562 %565 
                                       f32_3 %566 = OpLoad %562 
                                         i32 %567 = OpLoad %426 
                              Uniform f32_4* %568 = OpAccessChain %470 %71 %567 
                                       f32_4 %569 = OpLoad %568 
                                       f32_3 %570 = OpVectorShuffle %569 %569 0 1 2 
                                       f32_3 %571 = OpFMul %566 %570 
                                                      OpStore %562 %571 
                                       f32_3 %572 = OpLoad %562 
                                         f32 %573 = OpLoad %481 
                                       f32_3 %574 = OpCompositeConstruct %573 %573 %573 
                                       f32_3 %575 = OpFMul %572 %574 
                                       f32_3 %576 = OpLoad %149 
                                       f32_3 %577 = OpFAdd %575 %576 
                                                      OpStore %562 %577 
                                       f32_3 %578 = OpLoad %107 
                                       f32_3 %579 = OpLoad %562 
                                       f32_3 %580 = OpFAdd %578 %579 
                                                      OpStore %107 %580 
                                                      OpBranch %419 
                                             %419 = OpLabel 
                                         u32 %581 = OpLoad %415 
                                         u32 %582 = OpIAdd %581 %71 
                                                      OpStore %415 %582 
                                                      OpBranch %416 
                                             %418 = OpLabel 
                                Private f32* %583 = OpAccessChain %9 %17 
                                         f32 %584 = OpLoad %583 
                                         f32 %585 = OpExtInst %1 32 %584 
                                Private f32* %586 = OpAccessChain %9 %17 
                                                      OpStore %586 %585 
                                       f32_4 %587 = OpLoad %9 
                                       f32_3 %588 = OpVectorShuffle %587 %587 0 0 0 
                                       f32_3 %589 = OpLoad %30 
                                       f32_3 %590 = OpFMul %588 %589 
                                       f32_4 %591 = OpLoad %9 
                                       f32_4 %592 = OpVectorShuffle %591 %590 4 5 2 6 
                                                      OpStore %9 %592 
                                       f32_4 %593 = OpLoad %208 
                                       f32_3 %594 = OpVectorShuffle %593 %593 0 1 2 
                                       f32_4 %595 = OpLoad %9 
                                       f32_3 %596 = OpVectorShuffle %595 %595 0 1 3 
                                         f32 %597 = OpDot %594 %596 
                                Private f32* %598 = OpAccessChain %30 %17 
                                                      OpStore %598 %597 
                                Private f32* %599 = OpAccessChain %30 %17 
                                         f32 %600 = OpLoad %599 
                                         f32 %601 = OpExtInst %1 43 %600 %271 %136 
                                Private f32* %602 = OpAccessChain %30 %17 
                                                      OpStore %602 %601 
                              Uniform f32_4* %603 = OpAccessChain %40 %42 
                                       f32_4 %604 = OpLoad %603 
                                       f32_3 %605 = OpVectorShuffle %604 %604 0 1 2 
                                       f32_4 %606 = OpLoad %9 
                                       f32_3 %607 = OpVectorShuffle %606 %606 0 1 3 
                                         f32 %608 = OpDot %605 %607 
                                Private f32* %609 = OpAccessChain %9 %17 
                                                      OpStore %609 %608 
                                Private f32* %610 = OpAccessChain %9 %17 
                                         f32 %611 = OpLoad %610 
                                         f32 %612 = OpExtInst %1 43 %611 %271 %136 
                                Private f32* %613 = OpAccessChain %9 %17 
                                                      OpStore %613 %612 
                                Private f32* %614 = OpAccessChain %30 %17 
                                         f32 %615 = OpLoad %614 
                                Private f32* %616 = OpAccessChain %30 %17 
                                         f32 %617 = OpLoad %616 
                                         f32 %618 = OpFMul %615 %617 
                                Private f32* %619 = OpAccessChain %25 %17 
                                                      OpStore %619 %618 
                                         f32 %620 = OpLoad %133 
                                         f32 %621 = OpLoad %133 
                                         f32 %622 = OpFMul %620 %621 
                                                      OpStore %167 %622 
                                         f32 %624 = OpLoad %133 
                                         f32 %625 = OpLoad %133 
                                         f32 %626 = OpFMul %624 %625 
                                         f32 %627 = OpFAdd %626 %112 
                                                      OpStore %623 %627 
                                Private f32* %628 = OpAccessChain %25 %17 
                                         f32 %629 = OpLoad %628 
                                         f32 %630 = OpLoad %623 
                                         f32 %631 = OpFMul %629 %630 
                                         f32 %633 = OpFAdd %631 %632 
                                Private f32* %634 = OpAccessChain %25 %17 
                                                      OpStore %634 %633 
                                Private f32* %635 = OpAccessChain %9 %17 
                                         f32 %636 = OpLoad %635 
                                Private f32* %637 = OpAccessChain %9 %17 
                                         f32 %638 = OpLoad %637 
                                         f32 %639 = OpFMul %636 %638 
                                                      OpStore %623 %639 
                                Private f32* %640 = OpAccessChain %25 %17 
                                         f32 %641 = OpLoad %640 
                                Private f32* %642 = OpAccessChain %25 %17 
                                         f32 %643 = OpLoad %642 
                                         f32 %644 = OpFMul %641 %643 
                                Private f32* %645 = OpAccessChain %9 %17 
                                                      OpStore %645 %644 
                                         f32 %646 = OpLoad %623 
                                         f32 %648 = OpExtInst %1 40 %646 %647 
                                Private f32* %649 = OpAccessChain %25 %17 
                                                      OpStore %649 %648 
                                Private f32* %650 = OpAccessChain %25 %17 
                                         f32 %651 = OpLoad %650 
                                Private f32* %652 = OpAccessChain %9 %17 
                                         f32 %653 = OpLoad %652 
                                         f32 %654 = OpFMul %651 %653 
                                Private f32* %655 = OpAccessChain %9 %17 
                                                      OpStore %655 %654 
                                         f32 %656 = OpLoad %133 
                                         f32 %658 = OpFMul %656 %657 
                                         f32 %659 = OpFAdd %658 %109 
                                                      OpStore %623 %659 
                                Private f32* %660 = OpAccessChain %9 %17 
                                         f32 %661 = OpLoad %660 
                                         f32 %662 = OpLoad %623 
                                         f32 %663 = OpFMul %661 %662 
                                Private f32* %664 = OpAccessChain %9 %17 
                                                      OpStore %664 %663 
                                         f32 %665 = OpLoad %167 
                                Private f32* %666 = OpAccessChain %9 %17 
                                         f32 %667 = OpLoad %666 
                                         f32 %668 = OpFDiv %665 %667 
                                Private f32* %669 = OpAccessChain %9 %17 
                                                      OpStore %669 %668 
                                       f32_3 %670 = OpLoad %144 
                                       f32_4 %671 = OpLoad %9 
                                       f32_3 %672 = OpVectorShuffle %671 %671 0 0 0 
                                       f32_3 %673 = OpFMul %670 %672 
                                       f32_4 %674 = OpLoad %9 
                                       f32_4 %675 = OpVectorShuffle %674 %673 4 5 2 6 
                                                      OpStore %9 %675 
                                       f32_4 %676 = OpLoad %9 
                                       f32_3 %677 = OpVectorShuffle %676 %676 0 1 3 
                                       f32_3 %680 = OpFMul %677 %679 
                                                      OpStore %562 %680 
                                       f32_3 %681 = OpLoad %562 
                              Uniform f32_4* %682 = OpAccessChain %40 %71 
                                       f32_4 %683 = OpLoad %682 
                                       f32_3 %684 = OpVectorShuffle %683 %683 0 1 2 
                                       f32_3 %685 = OpFMul %681 %684 
                                                      OpStore %30 %685 
                                       f32_3 %686 = OpLoad %30 
                                       f32_3 %687 = OpLoad %63 
                                       f32_3 %688 = OpVectorShuffle %687 %687 0 0 0 
                                       f32_3 %689 = OpFMul %686 %688 
                                       f32_3 %690 = OpLoad %107 
                                       f32_3 %691 = OpFAdd %689 %690 
                                                      OpStore %107 %691 
                                Private f32* %692 = OpAccessChain %208 %428 
                                                      OpStore %692 %136 
                              Uniform f32_4* %693 = OpAccessChain %403 %342 
                                       f32_4 %694 = OpLoad %693 
                                       f32_4 %695 = OpLoad %208 
                                         f32 %696 = OpDot %694 %695 
                                Private f32* %697 = OpAccessChain %562 %17 
                                                      OpStore %697 %696 
                              Uniform f32_4* %699 = OpAccessChain %403 %698 
                                       f32_4 %700 = OpLoad %699 
                                       f32_4 %701 = OpLoad %208 
                                         f32 %702 = OpDot %700 %701 
                                Private f32* %703 = OpAccessChain %562 %124 
                                                      OpStore %703 %702 
                              Uniform f32_4* %705 = OpAccessChain %403 %704 
                                       f32_4 %706 = OpLoad %705 
                                       f32_4 %707 = OpLoad %208 
                                         f32 %708 = OpDot %706 %707 
                                Private f32* %709 = OpAccessChain %562 %236 
                                                      OpStore %709 %708 
                                       f32_4 %710 = OpLoad %208 
                                       f32_4 %711 = OpVectorShuffle %710 %710 1 2 2 0 
                                       f32_4 %712 = OpLoad %208 
                                       f32_4 %713 = OpVectorShuffle %712 %712 0 1 2 2 
                                       f32_4 %714 = OpFMul %711 %713 
                                                      OpStore %333 %714 
                              Uniform f32_4* %717 = OpAccessChain %403 %716 
                                       f32_4 %718 = OpLoad %717 
                                       f32_4 %719 = OpLoad %333 
                                         f32 %720 = OpDot %718 %719 
                                Private f32* %721 = OpAccessChain %715 %17 
                                                      OpStore %721 %720 
                              Uniform f32_4* %723 = OpAccessChain %403 %722 
                                       f32_4 %724 = OpLoad %723 
                                       f32_4 %725 = OpLoad %333 
                                         f32 %726 = OpDot %724 %725 
                                Private f32* %727 = OpAccessChain %715 %124 
                                                      OpStore %727 %726 
                              Uniform f32_4* %729 = OpAccessChain %403 %728 
                                       f32_4 %730 = OpLoad %729 
                                       f32_4 %731 = OpLoad %333 
                                         f32 %732 = OpDot %730 %731 
                                Private f32* %733 = OpAccessChain %715 %236 
                                                      OpStore %733 %732 
                                Private f32* %734 = OpAccessChain %208 %124 
                                         f32 %735 = OpLoad %734 
                                Private f32* %736 = OpAccessChain %208 %124 
                                         f32 %737 = OpLoad %736 
                                         f32 %738 = OpFMul %735 %737 
                                                      OpStore %167 %738 
                                Private f32* %739 = OpAccessChain %208 %17 
                                         f32 %740 = OpLoad %739 
                                Private f32* %741 = OpAccessChain %208 %17 
                                         f32 %742 = OpLoad %741 
                                         f32 %743 = OpFMul %740 %742 
                                         f32 %744 = OpLoad %167 
                                         f32 %745 = OpFNegate %744 
                                         f32 %746 = OpFAdd %743 %745 
                                                      OpStore %167 %746 
                              Uniform f32_4* %748 = OpAccessChain %403 %747 
                                       f32_4 %749 = OpLoad %748 
                                       f32_3 %750 = OpVectorShuffle %749 %749 0 1 2 
                                         f32 %751 = OpLoad %167 
                                       f32_3 %752 = OpCompositeConstruct %751 %751 %751 
                                       f32_3 %753 = OpFMul %750 %752 
                                       f32_3 %754 = OpLoad %715 
                                       f32_3 %755 = OpFAdd %753 %754 
                                                      OpStore %715 %755 
                                       f32_3 %756 = OpLoad %562 
                                       f32_3 %757 = OpLoad %715 
                                       f32_3 %758 = OpFAdd %756 %757 
                                                      OpStore %562 %758 
                                       f32_3 %759 = OpLoad %562 
                                       f32_3 %761 = OpExtInst %1 40 %759 %760 
                                                      OpStore %562 %761 
                                       f32_3 %762 = OpLoad %174 
                                       f32_3 %763 = OpLoad %562 
                                       f32_3 %764 = OpFMul %762 %763 
                                                      OpStore %174 %764 
                                Uniform f32* %765 = OpAccessChain %40 %127 %42 %17 
                                         f32 %766 = OpLoad %765 
                                Private f32* %767 = OpAccessChain %30 %17 
                                                      OpStore %767 %766 
                                Uniform f32* %768 = OpAccessChain %40 %127 %71 %17 
                                         f32 %769 = OpLoad %768 
                                Private f32* %770 = OpAccessChain %30 %124 
                                                      OpStore %770 %769 
                                Uniform f32* %771 = OpAccessChain %40 %127 %151 %17 
                                         f32 %772 = OpLoad %771 
                                Private f32* %773 = OpAccessChain %30 %236 
                                                      OpStore %773 %772 
                                       f32_3 %774 = OpLoad %30 
                                       f32_4 %775 = OpLoad %208 
                                       f32_3 %776 = OpVectorShuffle %775 %775 0 1 2 
                                         f32 %777 = OpDot %774 %776 
                                Private f32* %778 = OpAccessChain %562 %17 
                                                      OpStore %778 %777 
                                Uniform f32* %779 = OpAccessChain %40 %127 %42 %124 
                                         f32 %780 = OpLoad %779 
                                Private f32* %781 = OpAccessChain %30 %17 
                                                      OpStore %781 %780 
                                Uniform f32* %782 = OpAccessChain %40 %127 %71 %124 
                                         f32 %783 = OpLoad %782 
                                Private f32* %784 = OpAccessChain %30 %124 
                                                      OpStore %784 %783 
                                Uniform f32* %785 = OpAccessChain %40 %127 %151 %124 
                                         f32 %786 = OpLoad %785 
                                Private f32* %787 = OpAccessChain %30 %236 
                                                      OpStore %787 %786 
                                       f32_3 %788 = OpLoad %30 
                                       f32_4 %789 = OpLoad %208 
                                       f32_3 %790 = OpVectorShuffle %789 %789 0 1 2 
                                         f32 %791 = OpDot %788 %790 
                                Private f32* %792 = OpAccessChain %562 %124 
                                                      OpStore %792 %791 
                                       f32_3 %793 = OpLoad %562 
                                       f32_2 %794 = OpVectorShuffle %793 %793 0 1 
                                       f32_2 %796 = OpFMul %794 %795 
                                       f32_2 %797 = OpFAdd %796 %795 
                                       f32_3 %798 = OpLoad %562 
                                       f32_3 %799 = OpVectorShuffle %798 %797 3 4 2 
                                                      OpStore %562 %799 
                                         f32 %800 = OpLoad %133 
                                         f32 %801 = OpFNegate %800 
                                         f32 %803 = OpFMul %801 %802 
                                         f32 %805 = OpFAdd %803 %804 
                                                      OpStore %167 %805 
                                         f32 %806 = OpLoad %133 
                                         f32 %807 = OpLoad %167 
                                         f32 %808 = OpFMul %806 %807 
                                                      OpStore %133 %808 
                                         f32 %809 = OpLoad %133 
                                         f32 %811 = OpFMul %809 %810 
                                                      OpStore %167 %811 
                         read_only Texture2D %814 = OpLoad %813 
                                     sampler %816 = OpLoad %815 
                  read_only Texture2DSampled %817 = OpSampledImage %814 %816 
                                       f32_3 %818 = OpLoad %562 
                                       f32_2 %819 = OpVectorShuffle %818 %818 0 1 
                                         f32 %820 = OpLoad %167 
                                       f32_4 %821 = OpImageSampleExplicitLod %817 %819 Lod %7 
                                       f32_3 %822 = OpVectorShuffle %821 %821 0 1 2 
                                                      OpStore %812 %822 
                                         f32 %823 = OpLoad %133 
                                         f32 %824 = OpLoad %133 
                                         f32 %825 = OpFMul %823 %824 
                                         f32 %826 = OpFAdd %825 %136 
                                                      OpStore %488 %826 
                                         f32 %827 = OpLoad %488 
                                         f32 %828 = OpFDiv %136 %827 
                                                      OpStore %488 %828 
                                Private f32* %829 = OpAccessChain %9 %124 
                                         f32 %830 = OpLoad %829 
                                Private f32* %831 = OpAccessChain %9 %17 
                                         f32 %832 = OpLoad %831 
                                         f32 %833 = OpExtInst %1 40 %830 %832 
                                Private f32* %834 = OpAccessChain %9 %17 
                                                      OpStore %834 %833 
                                Private f32* %835 = OpAccessChain %9 %428 
                                         f32 %836 = OpLoad %835 
                                Private f32* %837 = OpAccessChain %9 %17 
                                         f32 %838 = OpLoad %837 
                                         f32 %839 = OpExtInst %1 40 %836 %838 
                                Private f32* %840 = OpAccessChain %9 %17 
                                                      OpStore %840 %839 
                                         f32 %841 = OpLoad %52 
                                Private f32* %842 = OpAccessChain %9 %17 
                                         f32 %843 = OpLoad %842 
                                         f32 %844 = OpFAdd %841 %843 
                                Private f32* %845 = OpAccessChain %9 %17 
                                                      OpStore %845 %844 
                                Private f32* %846 = OpAccessChain %9 %17 
                                         f32 %847 = OpLoad %846 
                                         f32 %848 = OpExtInst %1 43 %847 %271 %136 
                                Private f32* %849 = OpAccessChain %9 %17 
                                                      OpStore %849 %848 
                                Private f32* %850 = OpAccessChain %9 %236 
                                         f32 %851 = OpLoad %850 
                                         f32 %852 = OpFNegate %851 
                                         f32 %853 = OpFAdd %852 %136 
                                Private f32* %854 = OpAccessChain %25 %17 
                                                      OpStore %854 %853 
                                Private f32* %855 = OpAccessChain %25 %17 
                                         f32 %856 = OpLoad %855 
                                         f32 %857 = OpExtInst %1 40 %856 %271 
                                Private f32* %858 = OpAccessChain %25 %17 
                                                      OpStore %858 %857 
                                Private f32* %860 = OpAccessChain %25 %17 
                                         f32 %861 = OpLoad %860 
                                Private f32* %862 = OpAccessChain %25 %17 
                                         f32 %863 = OpLoad %862 
                                         f32 %864 = OpFMul %861 %863 
                                                      OpStore %859 %864 
                                         f32 %865 = OpLoad %859 
                                         f32 %866 = OpLoad %859 
                                         f32 %867 = OpFMul %865 %866 
                                                      OpStore %859 %867 
                                Private f32* %868 = OpAccessChain %25 %17 
                                         f32 %869 = OpLoad %868 
                                         f32 %870 = OpLoad %859 
                                         f32 %871 = OpFMul %869 %870 
                                Private f32* %872 = OpAccessChain %25 %17 
                                                      OpStore %872 %871 
                                       f32_3 %873 = OpLoad %144 
                                       f32_3 %874 = OpFNegate %873 
                                       f32_4 %875 = OpLoad %9 
                                       f32_3 %876 = OpVectorShuffle %875 %875 0 0 0 
                                       f32_3 %877 = OpFAdd %874 %876 
                                       f32_4 %878 = OpLoad %9 
                                       f32_4 %879 = OpVectorShuffle %878 %877 4 1 5 6 
                                                      OpStore %9 %879 
                                       f32_3 %880 = OpLoad %25 
                                       f32_3 %881 = OpVectorShuffle %880 %880 0 0 0 
                                       f32_4 %882 = OpLoad %9 
                                       f32_3 %883 = OpVectorShuffle %882 %882 0 2 3 
                                       f32_3 %884 = OpFMul %881 %883 
                                       f32_3 %885 = OpLoad %144 
                                       f32_3 %886 = OpFAdd %884 %885 
                                       f32_4 %887 = OpLoad %9 
                                       f32_4 %888 = OpVectorShuffle %887 %886 4 5 6 3 
                                                      OpStore %9 %888 
                                         f32 %889 = OpLoad %488 
                                       f32_3 %890 = OpCompositeConstruct %889 %889 %889 
                                       f32_4 %891 = OpLoad %9 
                                       f32_3 %892 = OpVectorShuffle %891 %891 0 1 2 
                                       f32_3 %893 = OpFMul %890 %892 
                                       f32_4 %894 = OpLoad %9 
                                       f32_4 %895 = OpVectorShuffle %894 %893 4 5 6 3 
                                                      OpStore %9 %895 
                                       f32_4 %896 = OpLoad %115 
                                       f32_3 %897 = OpVectorShuffle %896 %896 3 3 3 
                                       f32_3 %898 = OpLoad %812 
                                       f32_3 %899 = OpFMul %897 %898 
                                                      OpStore %144 %899 
                                       f32_4 %900 = OpLoad %9 
                                       f32_3 %901 = OpVectorShuffle %900 %900 0 1 2 
                                       f32_3 %902 = OpLoad %144 
                                       f32_3 %903 = OpFMul %901 %902 
                                       f32_4 %904 = OpLoad %9 
                                       f32_4 %905 = OpVectorShuffle %904 %903 4 5 6 3 
                                                      OpStore %9 %905 
                                       f32_3 %906 = OpLoad %174 
                                Uniform f32* %907 = OpAccessChain %70 %42 
                                         f32 %908 = OpLoad %907 
                                       f32_3 %909 = OpCompositeConstruct %908 %908 %908 
                                       f32_3 %910 = OpFMul %906 %909 
                                       f32_4 %911 = OpLoad %9 
                                       f32_3 %912 = OpVectorShuffle %911 %911 0 1 2 
                                       f32_3 %913 = OpFAdd %910 %912 
                                                      OpStore %144 %913 
                              Uniform f32_4* %914 = OpAccessChain %40 %365 %71 
                                       f32_4 %915 = OpLoad %914 
                                       f32_3 %916 = OpVectorShuffle %915 %915 0 1 2 
                              Uniform f32_3* %918 = OpAccessChain %70 %435 
                                       f32_3 %919 = OpLoad %918 
                                       f32_3 %920 = OpVectorShuffle %919 %919 1 1 1 
                                       f32_3 %921 = OpFMul %916 %920 
                                       f32_4 %922 = OpLoad %9 
                                       f32_4 %923 = OpVectorShuffle %922 %921 4 5 6 3 
                                                      OpStore %9 %923 
                              Uniform f32_4* %924 = OpAccessChain %40 %365 %42 
                                       f32_4 %925 = OpLoad %924 
                                       f32_3 %926 = OpVectorShuffle %925 %925 0 1 2 
                              Uniform f32_3* %927 = OpAccessChain %70 %435 
                                       f32_3 %928 = OpLoad %927 
                                       f32_3 %929 = OpVectorShuffle %928 %928 0 0 0 
                                       f32_3 %930 = OpFMul %926 %929 
                                       f32_4 %931 = OpLoad %9 
                                       f32_3 %932 = OpVectorShuffle %931 %931 0 1 2 
                                       f32_3 %933 = OpFAdd %930 %932 
                                       f32_4 %934 = OpLoad %9 
                                       f32_4 %935 = OpVectorShuffle %934 %933 4 5 6 3 
                                                      OpStore %9 %935 
                              Uniform f32_4* %936 = OpAccessChain %40 %365 %151 
                                       f32_4 %937 = OpLoad %936 
                                       f32_3 %938 = OpVectorShuffle %937 %937 0 1 2 
                              Uniform f32_3* %939 = OpAccessChain %70 %435 
                                       f32_3 %940 = OpLoad %939 
                                       f32_3 %941 = OpVectorShuffle %940 %940 2 2 2 
                                       f32_3 %942 = OpFMul %938 %941 
                                       f32_4 %943 = OpLoad %9 
                                       f32_3 %944 = OpVectorShuffle %943 %943 0 1 2 
                                       f32_3 %945 = OpFAdd %942 %944 
                                       f32_4 %946 = OpLoad %9 
                                       f32_4 %947 = OpVectorShuffle %946 %945 4 5 6 3 
                                                      OpStore %9 %947 
                                       f32_4 %948 = OpLoad %9 
                                       f32_3 %949 = OpVectorShuffle %948 %948 0 1 2 
                                       f32_4 %950 = OpLoad %9 
                                       f32_3 %951 = OpVectorShuffle %950 %950 0 1 2 
                                         f32 %952 = OpDot %949 %951 
                                                      OpStore %245 %952 
                                         f32 %953 = OpLoad %245 
                                         f32 %954 = OpExtInst %1 32 %953 
                                                      OpStore %245 %954 
                                         f32 %955 = OpLoad %245 
                                       f32_3 %956 = OpCompositeConstruct %955 %955 %955 
                                       f32_4 %957 = OpLoad %9 
                                       f32_3 %958 = OpVectorShuffle %957 %957 0 1 2 
                                       f32_3 %959 = OpFMul %956 %958 
                                       f32_4 %960 = OpLoad %9 
                                       f32_4 %961 = OpVectorShuffle %960 %959 4 5 6 3 
                                                      OpStore %9 %961 
                                       f32_4 %962 = OpLoad %208 
                                       f32_3 %963 = OpVectorShuffle %962 %962 0 1 2 
                                       f32_4 %964 = OpLoad %9 
                                       f32_3 %965 = OpVectorShuffle %964 %964 0 1 2 
                                         f32 %966 = OpDot %963 %965 
                                Private f32* %967 = OpAccessChain %9 %17 
                                                      OpStore %967 %966 
                                Private f32* %968 = OpAccessChain %9 %17 
                                         f32 %969 = OpLoad %968 
                                         f32 %970 = OpFMul %969 %259 
                                         f32 %971 = OpFAdd %970 %259 
                                Private f32* %972 = OpAccessChain %9 %17 
                                                      OpStore %972 %971 
                                Private f32* %973 = OpAccessChain %9 %17 
                                         f32 %974 = OpLoad %973 
                                Private f32* %975 = OpAccessChain %115 %428 
                                         f32 %976 = OpLoad %975 
                                         f32 %977 = OpFMul %974 %976 
                                Uniform f32* %979 = OpAccessChain %70 %978 
                                         f32 %980 = OpLoad %979 
                                         f32 %981 = OpFNegate %980 
                                         f32 %982 = OpFAdd %977 %981 
                                Private f32* %983 = OpAccessChain %9 %17 
                                                      OpStore %983 %982 
                                Private f32* %984 = OpAccessChain %9 %17 
                                         f32 %985 = OpLoad %984 
                                Uniform f32* %987 = OpAccessChain %70 %986 
                                         f32 %988 = OpLoad %987 
                                         f32 %989 = OpFMul %985 %988 
                                Private f32* %990 = OpAccessChain %9 %17 
                                                      OpStore %990 %989 
                                Private f32* %991 = OpAccessChain %9 %17 
                                         f32 %992 = OpLoad %991 
                                         f32 %993 = OpExtInst %1 43 %992 %271 %136 
                                Private f32* %994 = OpAccessChain %9 %17 
                                                      OpStore %994 %993 
                                       f32_4 %995 = OpLoad %9 
                                       f32_3 %996 = OpVectorShuffle %995 %995 0 0 0 
                              Uniform f32_4* %998 = OpAccessChain %70 %997 
                                       f32_4 %999 = OpLoad %998 
                                      f32_3 %1000 = OpVectorShuffle %999 %999 0 1 2 
                                      f32_3 %1001 = OpFMul %996 %1000 
                                                      OpStore %174 %1001 
                                      f32_3 %1002 = OpLoad %174 
                               Uniform f32* %1004 = OpAccessChain %70 %1003 
                                        f32 %1005 = OpLoad %1004 
                               Uniform f32* %1006 = OpAccessChain %70 %1003 
                                        f32 %1007 = OpLoad %1006 
                               Uniform f32* %1008 = OpAccessChain %70 %1003 
                                        f32 %1009 = OpLoad %1008 
                                      f32_3 %1010 = OpCompositeConstruct %1005 %1007 %1009 
                                        f32 %1011 = OpCompositeExtract %1010 0 
                                        f32 %1012 = OpCompositeExtract %1010 1 
                                        f32 %1013 = OpCompositeExtract %1010 2 
                                      f32_3 %1014 = OpCompositeConstruct %1011 %1012 %1013 
                                      f32_3 %1015 = OpFMul %1002 %1014 
                                      f32_4 %1016 = OpLoad %9 
                                      f32_4 %1017 = OpVectorShuffle %1016 %1015 4 5 6 3 
                                                      OpStore %9 %1017 
                                      f32_3 %1018 = OpLoad %63 
                                      f32_3 %1019 = OpVectorShuffle %1018 %1018 0 0 0 
                                      f32_4 %1020 = OpLoad %9 
                                      f32_3 %1021 = OpVectorShuffle %1020 %1020 0 1 2 
                                      f32_3 %1022 = OpFMul %1019 %1021 
                                                      OpStore %30 %1022 
                                      f32_3 %1023 = OpLoad %30 
                                      f32_3 %1025 = OpFMul %1023 %1024 
                                                      OpStore %30 %1025 
                                      f32_4 %1026 = OpLoad %9 
                                      f32_3 %1027 = OpVectorShuffle %1026 %1026 0 1 2 
                                      f32_3 %1030 = OpFMul %1027 %1029 
                                      f32_3 %1031 = OpLoad %30 
                                      f32_3 %1032 = OpFAdd %1030 %1031 
                                      f32_4 %1033 = OpLoad %9 
                                      f32_4 %1034 = OpVectorShuffle %1033 %1032 4 5 6 3 
                                                      OpStore %9 %1034 
                                      f32_3 %1035 = OpLoad %107 
                                      f32_3 %1036 = OpLoad %144 
                                      f32_3 %1037 = OpFAdd %1035 %1036 
                                                      OpStore %107 %1037 
                                      f32_4 %1038 = OpLoad %9 
                                      f32_3 %1039 = OpVectorShuffle %1038 %1038 0 1 2 
                                      f32_3 %1040 = OpLoad %107 
                                      f32_3 %1041 = OpFAdd %1039 %1040 
                                                      OpStore %107 %1041 
                                      f32_3 %1042 = OpLoad %107 
                                      f32_3 %1043 = OpExtInst %1 40 %1042 %760 
                                                      OpStore %107 %1043 
                                      f32_3 %1044 = OpLoad %107 
                                      f32_3 %1045 = OpExtInst %1 30 %1044 
                                                      OpStore %107 %1045 
                                      f32_3 %1046 = OpLoad %107 
                                      f32_3 %1049 = OpFMul %1046 %1048 
                                                      OpStore %107 %1049 
                                      f32_3 %1050 = OpLoad %107 
                                      f32_3 %1051 = OpExtInst %1 29 %1050 
                                                      OpStore %107 %1051 
                                      f32_3 %1054 = OpLoad %107 
                                      f32_3 %1055 = OpExtInst %1 31 %1054 
                                      f32_4 %1056 = OpLoad %1053 
                                      f32_4 %1057 = OpVectorShuffle %1056 %1055 4 5 6 3 
                                                      OpStore %1053 %1057 
                                Output f32* %1059 = OpAccessChain %1053 %428 
                                                      OpStore %1059 %136 
                                                      OpReturn
                                                      OpFunctionEnd
"
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    vs_TEXCOORD3.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
    vs_TEXCOORD4.xyz = vec3(u_xlat12) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD6 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4_MainLightWorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4_MainLightWorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4_MainLightWorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD7 = u_xlat0 + hlslcc_mtx4x4_MainLightWorldToShadow[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
vec4 ImmCB_0[4];
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	mediump vec4 _AdditionalLightsCount;
uniform 	vec4 _AdditionalLightsPosition[32];
uniform 	mediump vec4 _AdditionalLightsColor[32];
uniform 	mediump vec4 _AdditionalLightsAttenuation[32];
uniform 	mediump vec4 _AdditionalLightsSpotDir[32];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump vec4 _MainLightShadowParams;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _Expond;
	UNITY_UNIFORM vec4 _MainTex_ST;
	UNITY_UNIFORM vec4 _Emissioncolor;
	UNITY_UNIFORM float _Roughness;
	UNITY_UNIFORM float _sss;
	UNITY_UNIFORM vec3 _rimlightdir;
	UNITY_UNIFORM vec4 _rimcolor;
	UNITY_UNIFORM float _rimhardness;
	UNITY_UNIFORM float _rimthreshold;
	UNITY_UNIFORM float _rimintensity;
	UNITY_UNIFORM float _Curvemn;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(1) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
UNITY_LOCATION(2) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(3) uniform mediump sampler2D _Normal;
UNITY_LOCATION(4) uniform mediump sampler2D _MREA;
UNITY_LOCATION(5) uniform mediump sampler2D _SSSLUT;
UNITY_LOCATION(6) uniform mediump sampler2D _reflectmap;
in highp vec2 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump float u_xlat16_3;
int u_xlati3;
bool u_xlatb3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
vec4 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
mediump vec3 u_xlat16_13;
mediump vec3 u_xlat16_14;
vec3 u_xlat15;
int u_xlati15;
bool u_xlatb15;
mediump vec3 u_xlat16_16;
float u_xlat18;
uint u_xlatu18;
float u_xlat19;
mediump vec3 u_xlat16_22;
float u_xlat30;
float u_xlat45;
uint u_xlatu45;
float u_xlat47;
float u_xlat48;
mediump float u_xlat16_54;
mediump float u_xlat16_56;
void main()
{
ImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);
ImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);
ImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);
ImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);
    vec3 txVec0 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    u_xlat16_0 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_1.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_1.x = u_xlat16_0 * _MainLightShadowParams.x + u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0>=vs_TEXCOORD7.z);
#else
    u_xlatb0 = 0.0>=vs_TEXCOORD7.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vs_TEXCOORD7.z>=1.0);
#else
    u_xlatb15 = vs_TEXCOORD7.z>=1.0;
#endif
    u_xlatb0 = u_xlatb15 || u_xlatb0;
    u_xlat16_1.x = (u_xlatb0) ? 1.0 : u_xlat16_1.x;
    u_xlat0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat15.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat2.xyz = vs_TEXCOORD2.xyz * u_xlat0.xxx + _MainLightPosition.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat47 = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = vec3(u_xlat47) * u_xlat2.xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat4.xy).xyz;
    u_xlat16_6.xyz = texture(_Normal, u_xlat4.xy).xyz;
    u_xlat16_16.xyz = u_xlat16_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4 = texture(_MREA, u_xlat4.xy);
    u_xlat47 = u_xlat16_4.y + (-_Roughness);
    u_xlat16_7.x = (-u_xlat47) + 1.0;
    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
    u_xlat16_7.x = max(u_xlat16_7.x, 0.00200000009);
    u_xlat16_22.xyz = u_xlat16_5.xyz * u_xlat16_4.zzz;
    u_xlat8.xyz = u_xlat16_22.xyz * _Emissioncolor.xyz;
    u_xlat16_22.xyz = u_xlat16_5.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_22.xyz = u_xlat16_4.xxx * u_xlat16_22.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    u_xlat16_9.x = u_xlat16_4.x * -0.959999979 + 0.959999979;
    u_xlat16_9.xyz = u_xlat16_5.xyz * u_xlat16_9.xxx;
    u_xlat16_9.xyz = u_xlat16_4.www * u_xlat16_9.xyz;
    u_xlat4.xyz = u_xlat16_16.yyy * vs_TEXCOORD4.xyz;
    u_xlat4.xyz = u_xlat16_16.xxx * vs_TEXCOORD3.xyz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat16_16.zzz * vs_TEXCOORD1.xyz + u_xlat4.xyz;
    u_xlat48 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat48 = inversesqrt(u_xlat48);
    u_xlat5.xyz = vec3(u_xlat48) * u_xlat4.xyz;
    u_xlat48 = dot(u_xlat5.xyz, _MainLightPosition.xyz);
    u_xlat4.x = max(u_xlat48, 9.99999975e-06);
    u_xlat0.y = dot(u_xlat5.xyz, u_xlat15.xyz);
    u_xlat0.z = dot(_MainLightPosition.xyz, u_xlat3.xyz);
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(1.17549435e-38, 9.99999975e-06, 9.99999975e-06));
    u_xlat45 = u_xlat16_7.x + u_xlat16_7.x;
    u_xlat3.x = u_xlat0.z * u_xlat0.z;
    u_xlat45 = u_xlat3.x * u_xlat45 + 0.5;
    u_xlat16_16.x = u_xlat45 + -1.0;
    u_xlat15.x = (-u_xlat0.y) + 1.0;
    u_xlat15.x = max(u_xlat15.x, 0.0);
    u_xlat45 = u_xlat15.x * u_xlat15.x;
    u_xlat45 = u_xlat45 * u_xlat45;
    u_xlat15.x = u_xlat15.x * u_xlat45;
    u_xlat15.x = u_xlat16_16.x * u_xlat15.x + 1.0;
    u_xlat45 = (-u_xlat4.x) + 1.0;
    u_xlat45 = max(u_xlat45, 0.0);
    u_xlat3.x = u_xlat45 * u_xlat45;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat45 = u_xlat45 * u_xlat3.x;
    u_xlat45 = u_xlat16_16.x * u_xlat45 + 1.0;
    u_xlat16_54 = u_xlat15.x * u_xlat45;
    u_xlat16_54 = min(u_xlat16_54, 1.0);
    u_xlat16_54 = u_xlat48 * u_xlat16_54;
    u_xlat16_3 = u_xlat16_54 * 0.5 + 0.5;
    u_xlat3.x = u_xlat16_3;
    u_xlat3.yw = vec2(vec2(_Curvemn, _Curvemn));
    u_xlat16_10.xyz = texture(_SSSLUT, u_xlat3.xy).xyz;
    u_xlat10.xyz = u_xlat16_10.xyz * vec3(vec3(_sss, _sss, _sss));
    u_xlat15.x = min(u_xlat16_1.x, u_xlat3.x);
    u_xlat16_11.xyz = u_xlat16_9.xyz * u_xlat10.xyz;
    u_xlat10.xyz = u_xlat16_11.xyz * _MainLightColor.xyz;
    u_xlat10.xyz = u_xlat10.xyz * u_xlat15.xxx + u_xlat8.xyz;
    u_xlat16_54 = min(_AdditionalLightsCount.x, unity_LightData.y);
    u_xlati15 = int(u_xlat16_54);
    u_xlat16_11.xyz = u_xlat10.xyz;
    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<uint(u_xlati15) ; u_xlatu_loop_1++)
    {
        u_xlati3 = int(uint(u_xlatu_loop_1 & 3u));
        u_xlatu18 = uint(u_xlatu_loop_1 >> 2u);
        u_xlat16_54 = dot(unity_LightIndices[int(u_xlatu18)], ImmCB_0[u_xlati3]);
        u_xlati3 = int(u_xlat16_54);
        u_xlat12.xyz = (-vs_TEXCOORD5.xyz) * _AdditionalLightsPosition[u_xlati3].www + _AdditionalLightsPosition[u_xlati3].xyz;
        u_xlat18 = dot(u_xlat12.xyz, u_xlat12.xyz);
        u_xlat18 = max(u_xlat18, 6.10351563e-05);
        u_xlat19 = inversesqrt(u_xlat18);
        u_xlat12.xyz = vec3(u_xlat19) * u_xlat12.xyz;
        u_xlat19 = float(1.0) / float(u_xlat18);
        u_xlat18 = u_xlat18 * _AdditionalLightsAttenuation[u_xlati3].x + _AdditionalLightsAttenuation[u_xlati3].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
        u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
        u_xlat18 = u_xlat18 * u_xlat19;
        u_xlat16_54 = dot(_AdditionalLightsSpotDir[u_xlati3].xyz, u_xlat12.xyz);
        u_xlat16_54 = u_xlat16_54 * _AdditionalLightsAttenuation[u_xlati3].z + _AdditionalLightsAttenuation[u_xlati3].w;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_54 = min(max(u_xlat16_54, 0.0), 1.0);
#else
        u_xlat16_54 = clamp(u_xlat16_54, 0.0, 1.0);
#endif
        u_xlat16_54 = u_xlat16_54 * u_xlat16_54;
        u_xlat18 = u_xlat18 * u_xlat16_54;
        u_xlat19 = dot(u_xlat5.xyz, u_xlat12.xyz);
        u_xlat3.z = max(u_xlat19, 9.99999975e-06);
        u_xlat16_12.xyz = texture(_SSSLUT, u_xlat3.zw).xyz;
        u_xlat12.xyz = u_xlat16_12.xyz * vec3(vec3(_sss, _sss, _sss));
        u_xlat16_13.xyz = u_xlat16_9.xyz * u_xlat12.xyz;
        u_xlat16_13.xyz = u_xlat16_13.xyz * _AdditionalLightsColor[u_xlati3].xyz;
        u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat18) + u_xlat8.xyz;
        u_xlat16_11.xyz = u_xlat16_11.xyz + u_xlat16_13.xyz;
    }
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyw = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat0.xyw);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat0.xyw);
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat15.x = u_xlat2.x * u_xlat2.x;
    u_xlat16_54 = u_xlat16_7.x * u_xlat16_7.x;
    u_xlat16_56 = u_xlat16_7.x * u_xlat16_7.x + -1.0;
    u_xlat15.x = u_xlat15.x * u_xlat16_56 + 1.00001001;
    u_xlat16_56 = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat15.x * u_xlat15.x;
    u_xlat15.x = max(u_xlat16_56, 0.100000001);
    u_xlat0.x = u_xlat15.x * u_xlat0.x;
    u_xlat16_56 = u_xlat16_7.x * 4.0 + 2.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_56;
    u_xlat0.x = u_xlat16_54 / u_xlat0.x;
    u_xlat0.xyw = u_xlat16_22.xyz * u_xlat0.xxx;
    u_xlat16_13.xyz = u_xlat0.xyw * vec3(3.14159274, 3.14159274, 3.14159274);
    u_xlat2.xyz = u_xlat16_13.xyz * _MainLightColor.xyz;
    u_xlat16_11.xyz = u_xlat2.xyz * u_xlat4.xxx + u_xlat16_11.xyz;
    u_xlat5.w = 1.0;
    u_xlat16_13.x = dot(unity_SHAr, u_xlat5);
    u_xlat16_13.y = dot(unity_SHAg, u_xlat5);
    u_xlat16_13.z = dot(unity_SHAb, u_xlat5);
    u_xlat16_1 = u_xlat5.yzzx * u_xlat5.xyzz;
    u_xlat16_14.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_14.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_14.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_54 = u_xlat5.y * u_xlat5.y;
    u_xlat16_54 = u_xlat5.x * u_xlat5.x + (-u_xlat16_54);
    u_xlat16_14.xyz = unity_SHC.xyz * vec3(u_xlat16_54) + u_xlat16_14.xyz;
    u_xlat16_13.xyz = u_xlat16_13.xyz + u_xlat16_14.xyz;
    u_xlat16_13.xyz = max(u_xlat16_13.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_13.xyz;
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].x;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].x;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].x;
    u_xlat16_13.x = dot(u_xlat2.xyz, u_xlat5.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].y;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].y;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].y;
    u_xlat16_13.y = dot(u_xlat2.xyz, u_xlat5.xyz);
    u_xlat16_13.xy = u_xlat16_13.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
    u_xlat16_54 = (-u_xlat16_7.x) * 0.699999988 + 1.70000005;
    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_54;
    u_xlat16_54 = u_xlat16_7.x * 8.0;
    u_xlat16_2.xyz = textureLod(_reflectmap, u_xlat16_13.xy, u_xlat16_54).xyz;
    u_xlat3.x = u_xlat16_7.x * u_xlat16_7.x + 1.0;
    u_xlat3.x = float(1.0) / u_xlat3.x;
    u_xlat0.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat0.x = max(u_xlat0.w, u_xlat0.x);
    u_xlat0.x = u_xlat47 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat15.x = (-u_xlat0.z) + 1.0;
    u_xlat15.x = max(u_xlat15.x, 0.0);
    u_xlat30 = u_xlat15.x * u_xlat15.x;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat15.x = u_xlat15.x * u_xlat30;
    u_xlat0.xzw = (-u_xlat16_22.xyz) + u_xlat0.xxx;
    u_xlat0.xyz = u_xlat15.xxx * u_xlat0.xzw + u_xlat16_22.xyz;
    u_xlat0.xyz = u_xlat3.xxx * u_xlat0.xyz;
    u_xlat16_7.xyz = u_xlat16_4.www * u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_9.xyz * vec3(_Expond) + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixInvV[1].xyz * _rimlightdir.yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixInvV[0].xyz * _rimlightdir.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixInvV[2].xyz * _rimlightdir.zzz + u_xlat0.xyz;
    u_xlat45 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat45 = inversesqrt(u_xlat45);
    u_xlat0.xyz = vec3(u_xlat45) * u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat0.x = u_xlat0.x * 0.5 + 0.5;
    u_xlat0.x = u_xlat0.x * u_xlat16_4.w + (-_rimthreshold);
    u_xlat0.x = u_xlat0.x * _rimhardness;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_9.xyz = u_xlat0.xxx * _rimcolor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_rimintensity, _rimintensity, _rimintensity));
    u_xlat2.xyz = u_xlat4.xxx * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.699999988, 0.699999988, 0.699999988);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat2.xyz;
    u_xlat16_7.xyz = u_xlat16_11.xyz + u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(2.20000005, 2.20000005, 2.20000005);
    u_xlat16_7.xyz = exp2(u_xlat16_7.xyz);
    SV_Target0.xyz = sqrt(u_xlat16_7.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
""
}
SubProgram "vulkan " {
Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
""
}
SubProgram "vulkan " {
Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
""
}
SubProgram "gles3 " {
Keywords { "_MAIN_LIGHT_SHADOWS" }
""
}
SubProgram "vulkan " {
Keywords { "_ADDITIONAL_LIGHTS" }
""
}
SubProgram "gles3 " {
Keywords { "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
""
}
SubProgram "vulkan " {
Keywords { "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
""
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS_VERTEX" }
""
}
SubProgram "vulkan " {
Keywords { "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" }
""
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" }
""
}
SubProgram "vulkan " {
Keywords { "_ADDITIONAL_LIGHTS_VERTEX" }
""
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS_VERTEX" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
""
}
SubProgram "vulkan " {
Keywords { "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
""
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
""
}
SubProgram "vulkan " {
Keywords { "_MAIN_LIGHT_SHADOWS" }
""
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS" }
""
}
SubProgram "vulkan " {
""
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS" "_MAIN_LIGHT_SHADOWS" }
""
}
}
}
 Pass {
  LOD 100
  Tags { "LIGHTMODE" = "SHADOWCASTER" "QUEUE" = "AlphaTest" "RenderType" = "Opaque" }
  GpuProgramID 124585
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ShadowBias;
uniform 	mediump vec3 _LightDirection;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _Expond;
	UNITY_UNIFORM vec4 _MainTex_ST;
	UNITY_UNIFORM vec4 _Emissioncolor;
	UNITY_UNIFORM float _Roughness;
	UNITY_UNIFORM float _sss;
	UNITY_UNIFORM vec3 _rimlightdir;
	UNITY_UNIFORM vec4 _rimcolor;
	UNITY_UNIFORM float _rimhardness;
	UNITY_UNIFORM float _rimthreshold;
	UNITY_UNIFORM float _rimintensity;
	UNITY_UNIFORM float _Curvemn;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.xyz = _LightDirection.xyz * _ShadowBias.xxx + u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat6 = dot(_LightDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat6 = (-u_xlat6) + 1.0;
    u_xlat6 = u_xlat6 * _ShadowBias.y;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _Cutoff;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_TARGET0;
float u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat0 = u_xlat16_0 + (-_Cutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0<0.0);
#else
    u_xlatb0 = u_xlat0<0.0;
#endif
    if(u_xlatb0){discard;}
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "vulkan " {
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 203
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %84 %173 %182 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 RelaxedPrecision 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 RelaxedPrecision 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 RelaxedPrecision 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 RelaxedPrecision 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 RelaxedPrecision 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 RelaxedPrecision 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpMemberDecorate %21 16 RelaxedPrecision 
                                                      OpMemberDecorate %21 16 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpDecorate %66 ArrayStride 66 
                                                      OpMemberDecorate %67 0 Offset 67 
                                                      OpMemberDecorate %67 1 Offset 67 
                                                      OpMemberDecorate %67 2 RelaxedPrecision 
                                                      OpMemberDecorate %67 2 Offset 67 
                                                      OpDecorate %67 Block 
                                                      OpDecorate %69 DescriptorSet 69 
                                                      OpDecorate %69 Binding 69 
                                                      OpDecorate %72 RelaxedPrecision 
                                                      OpDecorate %84 Location 84 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpMemberDecorate %171 0 BuiltIn 171 
                                                      OpMemberDecorate %171 1 BuiltIn 171 
                                                      OpMemberDecorate %171 2 BuiltIn 171 
                                                      OpDecorate %171 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 182 
                                                      OpDecorate %184 Location 184 
                                                      OpMemberDecorate %186 0 Offset 186 
                                                      OpMemberDecorate %186 1 Offset 186 
                                                      OpMemberDecorate %186 2 Offset 186 
                                                      OpMemberDecorate %186 3 Offset 186 
                                                      OpMemberDecorate %186 4 Offset 186 
                                                      OpMemberDecorate %186 5 Offset 186 
                                                      OpMemberDecorate %186 6 Offset 186 
                                                      OpMemberDecorate %186 7 Offset 186 
                                                      OpMemberDecorate %186 8 Offset 186 
                                                      OpMemberDecorate %186 9 Offset 186 
                                                      OpMemberDecorate %186 10 Offset 186 
                                                      OpDecorate %186 Block 
                                                      OpDecorate %188 DescriptorSet 188 
                                                      OpDecorate %188 Binding 188 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 3 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeArray %7 %16 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypeArray %7 %19 
                                              %21 = OpTypeStruct %17 %18 %7 %7 %7 %20 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4; f32_4[2]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 0 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %45 = OpConstant 2 
                                          i32 %59 = OpConstant 3 
                                              %66 = OpTypeArray %7 %16 
                                              %67 = OpTypeStruct %66 %7 %12 
                                              %68 = OpTypePointer Uniform %67 
    Uniform struct {f32_4[4]; f32_4; f32_3;}* %69 = OpVariable Uniform 
                                              %70 = OpTypePointer Uniform %12 
                               Private f32_4* %82 = OpVariable Private 
                                              %83 = OpTypePointer Input %12 
                                 Input f32_3* %84 = OpVariable Input 
                                          u32 %90 = OpConstant 0 
                                              %91 = OpTypePointer Private %6 
                                          u32 %98 = OpConstant 1 
                                Private f32* %106 = OpVariable Private 
                                         f32 %113 = OpConstant 3.674022E-40 
                                         f32 %130 = OpConstant 3.674022E-40 
                                         f32 %131 = OpConstant 3.674022E-40 
                                             %137 = OpTypePointer Uniform %6 
                                             %170 = OpTypeArray %6 %98 
                                             %171 = OpTypeStruct %7 %6 %170 
                                             %172 = OpTypePointer Output %171 
        Output struct {f32_4; f32; f32[1];}* %173 = OpVariable Output 
                                             %178 = OpTypePointer Output %7 
                                             %180 = OpTypeVector %6 2 
                                             %181 = OpTypePointer Output %180 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %183 = OpTypePointer Input %180 
                                Input f32_2* %184 = OpVariable Input 
                                             %186 = OpTypeStruct %6 %7 %7 %6 %6 %12 %7 %6 %6 %6 %6 
                                             %187 = OpTypePointer Uniform %186 
Uniform struct {f32; f32_4; f32_4; f32; f32; f32_3; f32_4; f32; f32; f32; f32;}* %188 = OpVariable Uniform 
                                             %197 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %11 
                                        f32_3 %14 = OpVectorShuffle %13 %13 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_3 %30 = OpVectorShuffle %29 %29 0 1 2 
                                        f32_3 %31 = OpFMul %14 %30 
                                        f32_4 %32 = OpLoad %9 
                                        f32_4 %33 = OpVectorShuffle %32 %31 4 5 6 3 
                                                      OpStore %9 %33 
                               Uniform f32_4* %34 = OpAccessChain %23 %25 %25 
                                        f32_4 %35 = OpLoad %34 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 1 2 
                                        f32_4 %37 = OpLoad %11 
                                        f32_3 %38 = OpVectorShuffle %37 %37 0 0 0 
                                        f32_3 %39 = OpFMul %36 %38 
                                        f32_4 %40 = OpLoad %9 
                                        f32_3 %41 = OpVectorShuffle %40 %40 0 1 2 
                                        f32_3 %42 = OpFAdd %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpVectorShuffle %43 %42 4 5 6 3 
                                                      OpStore %9 %44 
                               Uniform f32_4* %46 = OpAccessChain %23 %25 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_3 %48 = OpVectorShuffle %47 %47 0 1 2 
                                        f32_4 %49 = OpLoad %11 
                                        f32_3 %50 = OpVectorShuffle %49 %49 2 2 2 
                                        f32_3 %51 = OpFMul %48 %50 
                                        f32_4 %52 = OpLoad %9 
                                        f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                        f32_3 %54 = OpFAdd %51 %53 
                                        f32_4 %55 = OpLoad %9 
                                        f32_4 %56 = OpVectorShuffle %55 %54 4 5 6 3 
                                                      OpStore %9 %56 
                                        f32_4 %57 = OpLoad %9 
                                        f32_3 %58 = OpVectorShuffle %57 %57 0 1 2 
                               Uniform f32_4* %60 = OpAccessChain %23 %25 %59 
                                        f32_4 %61 = OpLoad %60 
                                        f32_3 %62 = OpVectorShuffle %61 %61 0 1 2 
                                        f32_3 %63 = OpFAdd %58 %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %63 4 5 6 3 
                                                      OpStore %9 %65 
                               Uniform f32_3* %71 = OpAccessChain %69 %45 
                                        f32_3 %72 = OpLoad %71 
                               Uniform f32_4* %73 = OpAccessChain %69 %26 
                                        f32_4 %74 = OpLoad %73 
                                        f32_3 %75 = OpVectorShuffle %74 %74 0 0 0 
                                        f32_3 %76 = OpFMul %72 %75 
                                        f32_4 %77 = OpLoad %9 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFAdd %76 %78 
                                        f32_4 %80 = OpLoad %9 
                                        f32_4 %81 = OpVectorShuffle %80 %79 4 5 6 3 
                                                      OpStore %9 %81 
                                        f32_3 %85 = OpLoad %84 
                               Uniform f32_4* %86 = OpAccessChain %23 %26 %25 
                                        f32_4 %87 = OpLoad %86 
                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
                                          f32 %89 = OpDot %85 %88 
                                 Private f32* %92 = OpAccessChain %82 %90 
                                                      OpStore %92 %89 
                                        f32_3 %93 = OpLoad %84 
                               Uniform f32_4* %94 = OpAccessChain %23 %26 %26 
                                        f32_4 %95 = OpLoad %94 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 1 2 
                                          f32 %97 = OpDot %93 %96 
                                 Private f32* %99 = OpAccessChain %82 %98 
                                                      OpStore %99 %97 
                                       f32_3 %100 = OpLoad %84 
                              Uniform f32_4* %101 = OpAccessChain %23 %26 %45 
                                       f32_4 %102 = OpLoad %101 
                                       f32_3 %103 = OpVectorShuffle %102 %102 0 1 2 
                                         f32 %104 = OpDot %100 %103 
                                Private f32* %105 = OpAccessChain %82 %19 
                                                      OpStore %105 %104 
                                       f32_4 %107 = OpLoad %82 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                       f32_4 %109 = OpLoad %82 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                         f32 %111 = OpDot %108 %110 
                                                      OpStore %106 %111 
                                         f32 %112 = OpLoad %106 
                                         f32 %114 = OpExtInst %1 40 %112 %113 
                                                      OpStore %106 %114 
                                         f32 %115 = OpLoad %106 
                                         f32 %116 = OpExtInst %1 32 %115 
                                                      OpStore %106 %116 
                                         f32 %117 = OpLoad %106 
                                       f32_3 %118 = OpCompositeConstruct %117 %117 %117 
                                       f32_4 %119 = OpLoad %82 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_3 %121 = OpFMul %118 %120 
                                       f32_4 %122 = OpLoad %82 
                                       f32_4 %123 = OpVectorShuffle %122 %121 4 5 6 3 
                                                      OpStore %82 %123 
                              Uniform f32_3* %124 = OpAccessChain %69 %45 
                                       f32_3 %125 = OpLoad %124 
                                       f32_4 %126 = OpLoad %82 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 2 
                                         f32 %128 = OpDot %125 %127 
                                                      OpStore %106 %128 
                                         f32 %129 = OpLoad %106 
                                         f32 %132 = OpExtInst %1 43 %129 %130 %131 
                                                      OpStore %106 %132 
                                         f32 %133 = OpLoad %106 
                                         f32 %134 = OpFNegate %133 
                                         f32 %135 = OpFAdd %134 %131 
                                                      OpStore %106 %135 
                                         f32 %136 = OpLoad %106 
                                Uniform f32* %138 = OpAccessChain %69 %26 %98 
                                         f32 %139 = OpLoad %138 
                                         f32 %140 = OpFMul %136 %139 
                                                      OpStore %106 %140 
                                       f32_4 %141 = OpLoad %82 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                         f32 %143 = OpLoad %106 
                                       f32_3 %144 = OpCompositeConstruct %143 %143 %143 
                                       f32_3 %145 = OpFMul %142 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFAdd %145 %147 
                                       f32_4 %149 = OpLoad %9 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %9 %150 
                                       f32_4 %151 = OpLoad %9 
                                       f32_4 %152 = OpVectorShuffle %151 %151 1 1 1 1 
                              Uniform f32_4* %153 = OpAccessChain %69 %25 %26 
                                       f32_4 %154 = OpLoad %153 
                                       f32_4 %155 = OpFMul %152 %154 
                                                      OpStore %82 %155 
                              Uniform f32_4* %156 = OpAccessChain %69 %25 %25 
                                       f32_4 %157 = OpLoad %156 
                                       f32_4 %158 = OpLoad %9 
                                       f32_4 %159 = OpVectorShuffle %158 %158 0 0 0 0 
                                       f32_4 %160 = OpFMul %157 %159 
                                       f32_4 %161 = OpLoad %82 
                                       f32_4 %162 = OpFAdd %160 %161 
                                                      OpStore %82 %162 
                              Uniform f32_4* %163 = OpAccessChain %69 %25 %45 
                                       f32_4 %164 = OpLoad %163 
                                       f32_4 %165 = OpLoad %9 
                                       f32_4 %166 = OpVectorShuffle %165 %165 2 2 2 2 
                                       f32_4 %167 = OpFMul %164 %166 
                                       f32_4 %168 = OpLoad %82 
                                       f32_4 %169 = OpFAdd %167 %168 
                                                      OpStore %9 %169 
                                       f32_4 %174 = OpLoad %9 
                              Uniform f32_4* %175 = OpAccessChain %69 %25 %59 
                                       f32_4 %176 = OpLoad %175 
                                       f32_4 %177 = OpFAdd %174 %176 
                               Output f32_4* %179 = OpAccessChain %173 %25 
                                                      OpStore %179 %177 
                                       f32_2 %185 = OpLoad %184 
                              Uniform f32_4* %189 = OpAccessChain %188 %26 
                                       f32_4 %190 = OpLoad %189 
                                       f32_2 %191 = OpVectorShuffle %190 %190 0 1 
                                       f32_2 %192 = OpFMul %185 %191 
                              Uniform f32_4* %193 = OpAccessChain %188 %26 
                                       f32_4 %194 = OpLoad %193 
                                       f32_2 %195 = OpVectorShuffle %194 %194 2 3 
                                       f32_2 %196 = OpFAdd %192 %195 
                                                      OpStore vs_TEXCOORD0 %196 
                                 Output f32* %198 = OpAccessChain %173 %25 %98 
                                         f32 %199 = OpLoad %198 
                                         f32 %200 = OpFNegate %199 
                                 Output f32* %201 = OpAccessChain %173 %25 %98 
                                                      OpStore %201 %200 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 59
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %21 %56 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate %8 RelaxedPrecision 
                                             OpDecorate %11 RelaxedPrecision 
                                             OpDecorate %11 DescriptorSet 11 
                                             OpDecorate %11 Binding 11 
                                             OpDecorate %12 RelaxedPrecision 
                                             OpDecorate %15 RelaxedPrecision 
                                             OpDecorate %15 DescriptorSet 15 
                                             OpDecorate %15 Binding 15 
                                             OpDecorate %16 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 21 
                                             OpDecorate %27 RelaxedPrecision 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpMemberDecorate %30 0 Offset 30 
                                             OpDecorate %30 Block 
                                             OpDecorate %32 DescriptorSet 32 
                                             OpDecorate %32 Binding 32 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %56 Location 56 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypePointer Private %6 
                         Private f32* %8 = OpVariable Private 
                                      %9 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %10 = OpTypePointer UniformConstant %9 
UniformConstant read_only Texture2D* %11 = OpVariable UniformConstant 
                                     %13 = OpTypeSampler 
                                     %14 = OpTypePointer UniformConstant %13 
            UniformConstant sampler* %15 = OpVariable UniformConstant 
                                     %17 = OpTypeSampledImage %9 
                                     %19 = OpTypeVector %6 2 
                                     %20 = OpTypePointer Input %19 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %23 = OpTypeVector %6 4 
                                     %25 = OpTypeInt 32 0 
                                 u32 %26 = OpConstant 3 
                        Private f32* %28 = OpVariable Private 
                                     %30 = OpTypeStruct %6 
                                     %31 = OpTypePointer Uniform %30 
              Uniform struct {f32;}* %32 = OpVariable Uniform 
                                     %33 = OpTypeInt 32 1 
                                 i32 %34 = OpConstant 0 
                                     %35 = OpTypePointer Uniform %6 
                                     %40 = OpTypeBool 
                                     %41 = OpTypePointer Private %40 
                       Private bool* %42 = OpVariable Private 
                                 f32 %44 = OpConstant 3.674022E-40 
                                 i32 %47 = OpConstant 1 
                                 i32 %49 = OpConstant -1 
                                     %55 = OpTypePointer Output %23 
                       Output f32_4* %56 = OpVariable Output 
                               f32_4 %57 = OpConstantComposite %44 %44 %44 %44 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %12 = OpLoad %11 
                             sampler %16 = OpLoad %15 
          read_only Texture2DSampled %18 = OpSampledImage %12 %16 
                               f32_2 %22 = OpLoad vs_TEXCOORD0 
                               f32_4 %24 = OpImageSampleImplicitLod %18 %22 
                                 f32 %27 = OpCompositeExtract %24 3 
                                             OpStore %8 %27 
                                 f32 %29 = OpLoad %8 
                        Uniform f32* %36 = OpAccessChain %32 %34 
                                 f32 %37 = OpLoad %36 
                                 f32 %38 = OpFNegate %37 
                                 f32 %39 = OpFAdd %29 %38 
                                             OpStore %28 %39 
                                 f32 %43 = OpLoad %28 
                                bool %45 = OpFOrdLessThan %43 %44 
                                             OpStore %42 %45 
                                bool %46 = OpLoad %42 
                                 i32 %48 = OpSelect %46 %47 %34 
                                 i32 %50 = OpIMul %48 %49 
                                bool %51 = OpINotEqual %50 %34 
                                             OpSelectionMerge %53 None 
                                             OpBranchConditional %51 %52 %53 
                                     %52 = OpLabel 
                                             OpKill
                                     %53 = OpLabel 
                                             OpStore %56 %57 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS_VERTEX" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ShadowBias;
uniform 	mediump vec3 _LightDirection;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _Expond;
	UNITY_UNIFORM vec4 _MainTex_ST;
	UNITY_UNIFORM vec4 _Emissioncolor;
	UNITY_UNIFORM float _Roughness;
	UNITY_UNIFORM float _sss;
	UNITY_UNIFORM vec3 _rimlightdir;
	UNITY_UNIFORM vec4 _rimcolor;
	UNITY_UNIFORM float _rimhardness;
	UNITY_UNIFORM float _rimthreshold;
	UNITY_UNIFORM float _rimintensity;
	UNITY_UNIFORM float _Curvemn;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.xyz = _LightDirection.xyz * _ShadowBias.xxx + u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat6 = dot(_LightDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat6 = (-u_xlat6) + 1.0;
    u_xlat6 = u_xlat6 * _ShadowBias.y;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _Cutoff;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_TARGET0;
float u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat0 = u_xlat16_0 + (-_Cutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0<0.0);
#else
    u_xlatb0 = u_xlat0<0.0;
#endif
    if(u_xlatb0){discard;}
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "_ADDITIONAL_LIGHTS_VERTEX" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 203
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %84 %173 %182 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 RelaxedPrecision 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 RelaxedPrecision 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 RelaxedPrecision 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 RelaxedPrecision 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 RelaxedPrecision 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 RelaxedPrecision 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpMemberDecorate %21 16 RelaxedPrecision 
                                                      OpMemberDecorate %21 16 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpDecorate %66 ArrayStride 66 
                                                      OpMemberDecorate %67 0 Offset 67 
                                                      OpMemberDecorate %67 1 Offset 67 
                                                      OpMemberDecorate %67 2 RelaxedPrecision 
                                                      OpMemberDecorate %67 2 Offset 67 
                                                      OpDecorate %67 Block 
                                                      OpDecorate %69 DescriptorSet 69 
                                                      OpDecorate %69 Binding 69 
                                                      OpDecorate %72 RelaxedPrecision 
                                                      OpDecorate %84 Location 84 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpMemberDecorate %171 0 BuiltIn 171 
                                                      OpMemberDecorate %171 1 BuiltIn 171 
                                                      OpMemberDecorate %171 2 BuiltIn 171 
                                                      OpDecorate %171 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 182 
                                                      OpDecorate %184 Location 184 
                                                      OpMemberDecorate %186 0 Offset 186 
                                                      OpMemberDecorate %186 1 Offset 186 
                                                      OpMemberDecorate %186 2 Offset 186 
                                                      OpMemberDecorate %186 3 Offset 186 
                                                      OpMemberDecorate %186 4 Offset 186 
                                                      OpMemberDecorate %186 5 Offset 186 
                                                      OpMemberDecorate %186 6 Offset 186 
                                                      OpMemberDecorate %186 7 Offset 186 
                                                      OpMemberDecorate %186 8 Offset 186 
                                                      OpMemberDecorate %186 9 Offset 186 
                                                      OpMemberDecorate %186 10 Offset 186 
                                                      OpDecorate %186 Block 
                                                      OpDecorate %188 DescriptorSet 188 
                                                      OpDecorate %188 Binding 188 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 3 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeArray %7 %16 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypeArray %7 %19 
                                              %21 = OpTypeStruct %17 %18 %7 %7 %7 %20 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4; f32_4[2]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 0 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %45 = OpConstant 2 
                                          i32 %59 = OpConstant 3 
                                              %66 = OpTypeArray %7 %16 
                                              %67 = OpTypeStruct %66 %7 %12 
                                              %68 = OpTypePointer Uniform %67 
    Uniform struct {f32_4[4]; f32_4; f32_3;}* %69 = OpVariable Uniform 
                                              %70 = OpTypePointer Uniform %12 
                               Private f32_4* %82 = OpVariable Private 
                                              %83 = OpTypePointer Input %12 
                                 Input f32_3* %84 = OpVariable Input 
                                          u32 %90 = OpConstant 0 
                                              %91 = OpTypePointer Private %6 
                                          u32 %98 = OpConstant 1 
                                Private f32* %106 = OpVariable Private 
                                         f32 %113 = OpConstant 3.674022E-40 
                                         f32 %130 = OpConstant 3.674022E-40 
                                         f32 %131 = OpConstant 3.674022E-40 
                                             %137 = OpTypePointer Uniform %6 
                                             %170 = OpTypeArray %6 %98 
                                             %171 = OpTypeStruct %7 %6 %170 
                                             %172 = OpTypePointer Output %171 
        Output struct {f32_4; f32; f32[1];}* %173 = OpVariable Output 
                                             %178 = OpTypePointer Output %7 
                                             %180 = OpTypeVector %6 2 
                                             %181 = OpTypePointer Output %180 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %183 = OpTypePointer Input %180 
                                Input f32_2* %184 = OpVariable Input 
                                             %186 = OpTypeStruct %6 %7 %7 %6 %6 %12 %7 %6 %6 %6 %6 
                                             %187 = OpTypePointer Uniform %186 
Uniform struct {f32; f32_4; f32_4; f32; f32; f32_3; f32_4; f32; f32; f32; f32;}* %188 = OpVariable Uniform 
                                             %197 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %11 
                                        f32_3 %14 = OpVectorShuffle %13 %13 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_3 %30 = OpVectorShuffle %29 %29 0 1 2 
                                        f32_3 %31 = OpFMul %14 %30 
                                        f32_4 %32 = OpLoad %9 
                                        f32_4 %33 = OpVectorShuffle %32 %31 4 5 6 3 
                                                      OpStore %9 %33 
                               Uniform f32_4* %34 = OpAccessChain %23 %25 %25 
                                        f32_4 %35 = OpLoad %34 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 1 2 
                                        f32_4 %37 = OpLoad %11 
                                        f32_3 %38 = OpVectorShuffle %37 %37 0 0 0 
                                        f32_3 %39 = OpFMul %36 %38 
                                        f32_4 %40 = OpLoad %9 
                                        f32_3 %41 = OpVectorShuffle %40 %40 0 1 2 
                                        f32_3 %42 = OpFAdd %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpVectorShuffle %43 %42 4 5 6 3 
                                                      OpStore %9 %44 
                               Uniform f32_4* %46 = OpAccessChain %23 %25 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_3 %48 = OpVectorShuffle %47 %47 0 1 2 
                                        f32_4 %49 = OpLoad %11 
                                        f32_3 %50 = OpVectorShuffle %49 %49 2 2 2 
                                        f32_3 %51 = OpFMul %48 %50 
                                        f32_4 %52 = OpLoad %9 
                                        f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                        f32_3 %54 = OpFAdd %51 %53 
                                        f32_4 %55 = OpLoad %9 
                                        f32_4 %56 = OpVectorShuffle %55 %54 4 5 6 3 
                                                      OpStore %9 %56 
                                        f32_4 %57 = OpLoad %9 
                                        f32_3 %58 = OpVectorShuffle %57 %57 0 1 2 
                               Uniform f32_4* %60 = OpAccessChain %23 %25 %59 
                                        f32_4 %61 = OpLoad %60 
                                        f32_3 %62 = OpVectorShuffle %61 %61 0 1 2 
                                        f32_3 %63 = OpFAdd %58 %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %63 4 5 6 3 
                                                      OpStore %9 %65 
                               Uniform f32_3* %71 = OpAccessChain %69 %45 
                                        f32_3 %72 = OpLoad %71 
                               Uniform f32_4* %73 = OpAccessChain %69 %26 
                                        f32_4 %74 = OpLoad %73 
                                        f32_3 %75 = OpVectorShuffle %74 %74 0 0 0 
                                        f32_3 %76 = OpFMul %72 %75 
                                        f32_4 %77 = OpLoad %9 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFAdd %76 %78 
                                        f32_4 %80 = OpLoad %9 
                                        f32_4 %81 = OpVectorShuffle %80 %79 4 5 6 3 
                                                      OpStore %9 %81 
                                        f32_3 %85 = OpLoad %84 
                               Uniform f32_4* %86 = OpAccessChain %23 %26 %25 
                                        f32_4 %87 = OpLoad %86 
                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
                                          f32 %89 = OpDot %85 %88 
                                 Private f32* %92 = OpAccessChain %82 %90 
                                                      OpStore %92 %89 
                                        f32_3 %93 = OpLoad %84 
                               Uniform f32_4* %94 = OpAccessChain %23 %26 %26 
                                        f32_4 %95 = OpLoad %94 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 1 2 
                                          f32 %97 = OpDot %93 %96 
                                 Private f32* %99 = OpAccessChain %82 %98 
                                                      OpStore %99 %97 
                                       f32_3 %100 = OpLoad %84 
                              Uniform f32_4* %101 = OpAccessChain %23 %26 %45 
                                       f32_4 %102 = OpLoad %101 
                                       f32_3 %103 = OpVectorShuffle %102 %102 0 1 2 
                                         f32 %104 = OpDot %100 %103 
                                Private f32* %105 = OpAccessChain %82 %19 
                                                      OpStore %105 %104 
                                       f32_4 %107 = OpLoad %82 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                       f32_4 %109 = OpLoad %82 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                         f32 %111 = OpDot %108 %110 
                                                      OpStore %106 %111 
                                         f32 %112 = OpLoad %106 
                                         f32 %114 = OpExtInst %1 40 %112 %113 
                                                      OpStore %106 %114 
                                         f32 %115 = OpLoad %106 
                                         f32 %116 = OpExtInst %1 32 %115 
                                                      OpStore %106 %116 
                                         f32 %117 = OpLoad %106 
                                       f32_3 %118 = OpCompositeConstruct %117 %117 %117 
                                       f32_4 %119 = OpLoad %82 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_3 %121 = OpFMul %118 %120 
                                       f32_4 %122 = OpLoad %82 
                                       f32_4 %123 = OpVectorShuffle %122 %121 4 5 6 3 
                                                      OpStore %82 %123 
                              Uniform f32_3* %124 = OpAccessChain %69 %45 
                                       f32_3 %125 = OpLoad %124 
                                       f32_4 %126 = OpLoad %82 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 2 
                                         f32 %128 = OpDot %125 %127 
                                                      OpStore %106 %128 
                                         f32 %129 = OpLoad %106 
                                         f32 %132 = OpExtInst %1 43 %129 %130 %131 
                                                      OpStore %106 %132 
                                         f32 %133 = OpLoad %106 
                                         f32 %134 = OpFNegate %133 
                                         f32 %135 = OpFAdd %134 %131 
                                                      OpStore %106 %135 
                                         f32 %136 = OpLoad %106 
                                Uniform f32* %138 = OpAccessChain %69 %26 %98 
                                         f32 %139 = OpLoad %138 
                                         f32 %140 = OpFMul %136 %139 
                                                      OpStore %106 %140 
                                       f32_4 %141 = OpLoad %82 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                         f32 %143 = OpLoad %106 
                                       f32_3 %144 = OpCompositeConstruct %143 %143 %143 
                                       f32_3 %145 = OpFMul %142 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFAdd %145 %147 
                                       f32_4 %149 = OpLoad %9 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %9 %150 
                                       f32_4 %151 = OpLoad %9 
                                       f32_4 %152 = OpVectorShuffle %151 %151 1 1 1 1 
                              Uniform f32_4* %153 = OpAccessChain %69 %25 %26 
                                       f32_4 %154 = OpLoad %153 
                                       f32_4 %155 = OpFMul %152 %154 
                                                      OpStore %82 %155 
                              Uniform f32_4* %156 = OpAccessChain %69 %25 %25 
                                       f32_4 %157 = OpLoad %156 
                                       f32_4 %158 = OpLoad %9 
                                       f32_4 %159 = OpVectorShuffle %158 %158 0 0 0 0 
                                       f32_4 %160 = OpFMul %157 %159 
                                       f32_4 %161 = OpLoad %82 
                                       f32_4 %162 = OpFAdd %160 %161 
                                                      OpStore %82 %162 
                              Uniform f32_4* %163 = OpAccessChain %69 %25 %45 
                                       f32_4 %164 = OpLoad %163 
                                       f32_4 %165 = OpLoad %9 
                                       f32_4 %166 = OpVectorShuffle %165 %165 2 2 2 2 
                                       f32_4 %167 = OpFMul %164 %166 
                                       f32_4 %168 = OpLoad %82 
                                       f32_4 %169 = OpFAdd %167 %168 
                                                      OpStore %9 %169 
                                       f32_4 %174 = OpLoad %9 
                              Uniform f32_4* %175 = OpAccessChain %69 %25 %59 
                                       f32_4 %176 = OpLoad %175 
                                       f32_4 %177 = OpFAdd %174 %176 
                               Output f32_4* %179 = OpAccessChain %173 %25 
                                                      OpStore %179 %177 
                                       f32_2 %185 = OpLoad %184 
                              Uniform f32_4* %189 = OpAccessChain %188 %26 
                                       f32_4 %190 = OpLoad %189 
                                       f32_2 %191 = OpVectorShuffle %190 %190 0 1 
                                       f32_2 %192 = OpFMul %185 %191 
                              Uniform f32_4* %193 = OpAccessChain %188 %26 
                                       f32_4 %194 = OpLoad %193 
                                       f32_2 %195 = OpVectorShuffle %194 %194 2 3 
                                       f32_2 %196 = OpFAdd %192 %195 
                                                      OpStore vs_TEXCOORD0 %196 
                                 Output f32* %198 = OpAccessChain %173 %25 %98 
                                         f32 %199 = OpLoad %198 
                                         f32 %200 = OpFNegate %199 
                                 Output f32* %201 = OpAccessChain %173 %25 %98 
                                                      OpStore %201 %200 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 59
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %21 %56 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate %8 RelaxedPrecision 
                                             OpDecorate %11 RelaxedPrecision 
                                             OpDecorate %11 DescriptorSet 11 
                                             OpDecorate %11 Binding 11 
                                             OpDecorate %12 RelaxedPrecision 
                                             OpDecorate %15 RelaxedPrecision 
                                             OpDecorate %15 DescriptorSet 15 
                                             OpDecorate %15 Binding 15 
                                             OpDecorate %16 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 21 
                                             OpDecorate %27 RelaxedPrecision 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpMemberDecorate %30 0 Offset 30 
                                             OpDecorate %30 Block 
                                             OpDecorate %32 DescriptorSet 32 
                                             OpDecorate %32 Binding 32 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %56 Location 56 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypePointer Private %6 
                         Private f32* %8 = OpVariable Private 
                                      %9 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %10 = OpTypePointer UniformConstant %9 
UniformConstant read_only Texture2D* %11 = OpVariable UniformConstant 
                                     %13 = OpTypeSampler 
                                     %14 = OpTypePointer UniformConstant %13 
            UniformConstant sampler* %15 = OpVariable UniformConstant 
                                     %17 = OpTypeSampledImage %9 
                                     %19 = OpTypeVector %6 2 
                                     %20 = OpTypePointer Input %19 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %23 = OpTypeVector %6 4 
                                     %25 = OpTypeInt 32 0 
                                 u32 %26 = OpConstant 3 
                        Private f32* %28 = OpVariable Private 
                                     %30 = OpTypeStruct %6 
                                     %31 = OpTypePointer Uniform %30 
              Uniform struct {f32;}* %32 = OpVariable Uniform 
                                     %33 = OpTypeInt 32 1 
                                 i32 %34 = OpConstant 0 
                                     %35 = OpTypePointer Uniform %6 
                                     %40 = OpTypeBool 
                                     %41 = OpTypePointer Private %40 
                       Private bool* %42 = OpVariable Private 
                                 f32 %44 = OpConstant 3.674022E-40 
                                 i32 %47 = OpConstant 1 
                                 i32 %49 = OpConstant -1 
                                     %55 = OpTypePointer Output %23 
                       Output f32_4* %56 = OpVariable Output 
                               f32_4 %57 = OpConstantComposite %44 %44 %44 %44 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %12 = OpLoad %11 
                             sampler %16 = OpLoad %15 
          read_only Texture2DSampled %18 = OpSampledImage %12 %16 
                               f32_2 %22 = OpLoad vs_TEXCOORD0 
                               f32_4 %24 = OpImageSampleImplicitLod %18 %22 
                                 f32 %27 = OpCompositeExtract %24 3 
                                             OpStore %8 %27 
                                 f32 %29 = OpLoad %8 
                        Uniform f32* %36 = OpAccessChain %32 %34 
                                 f32 %37 = OpLoad %36 
                                 f32 %38 = OpFNegate %37 
                                 f32 %39 = OpFAdd %29 %38 
                                             OpStore %28 %39 
                                 f32 %43 = OpLoad %28 
                                bool %45 = OpFOrdLessThan %43 %44 
                                             OpStore %42 %45 
                                bool %46 = OpLoad %42 
                                 i32 %48 = OpSelect %46 %47 %34 
                                 i32 %50 = OpIMul %48 %49 
                                bool %51 = OpINotEqual %50 %34 
                                             OpSelectionMerge %53 None 
                                             OpBranchConditional %51 %52 %53 
                                     %52 = OpLabel 
                                             OpKill
                                     %53 = OpLabel 
                                             OpStore %56 %57 
                                             OpReturn
                                             OpFunctionEnd
"
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ShadowBias;
uniform 	mediump vec3 _LightDirection;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM float _Expond;
	UNITY_UNIFORM vec4 _MainTex_ST;
	UNITY_UNIFORM vec4 _Emissioncolor;
	UNITY_UNIFORM float _Roughness;
	UNITY_UNIFORM float _sss;
	UNITY_UNIFORM vec3 _rimlightdir;
	UNITY_UNIFORM vec4 _rimcolor;
	UNITY_UNIFORM float _rimhardness;
	UNITY_UNIFORM float _rimthreshold;
	UNITY_UNIFORM float _rimintensity;
	UNITY_UNIFORM float _Curvemn;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec3 in_NORMAL0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.xyz = _LightDirection.xyz * _ShadowBias.xxx + u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat6 = dot(_LightDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat6 = (-u_xlat6) + 1.0;
    u_xlat6 = u_xlat6 * _ShadowBias.y;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	float _Cutoff;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_TARGET0;
float u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat0 = u_xlat16_0 + (-_Cutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0<0.0);
#else
    u_xlatb0 = u_xlat0<0.0;
#endif
    if(u_xlatb0){discard;}
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "_ADDITIONAL_LIGHTS" }
"; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 203
; Schema: 0
                                                      OpCapability Shader 
                                               %1 = OpExtInstImport "GLSL.std.450" 
                                                      OpMemoryModel Logical GLSL450 
                                                      OpEntryPoint Vertex %4 "main" %11 %84 %173 %182 %184 
                                                      OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                                      OpDecorate %11 Location 11 
                                                      OpDecorate %17 ArrayStride 17 
                                                      OpDecorate %18 ArrayStride 18 
                                                      OpDecorate %20 ArrayStride 20 
                                                      OpMemberDecorate %21 0 Offset 21 
                                                      OpMemberDecorate %21 1 Offset 21 
                                                      OpMemberDecorate %21 2 Offset 21 
                                                      OpMemberDecorate %21 3 RelaxedPrecision 
                                                      OpMemberDecorate %21 3 Offset 21 
                                                      OpMemberDecorate %21 4 RelaxedPrecision 
                                                      OpMemberDecorate %21 4 Offset 21 
                                                      OpMemberDecorate %21 5 RelaxedPrecision 
                                                      OpMemberDecorate %21 5 Offset 21 
                                                      OpMemberDecorate %21 6 Offset 21 
                                                      OpMemberDecorate %21 7 RelaxedPrecision 
                                                      OpMemberDecorate %21 7 Offset 21 
                                                      OpMemberDecorate %21 8 Offset 21 
                                                      OpMemberDecorate %21 9 Offset 21 
                                                      OpMemberDecorate %21 10 RelaxedPrecision 
                                                      OpMemberDecorate %21 10 Offset 21 
                                                      OpMemberDecorate %21 11 RelaxedPrecision 
                                                      OpMemberDecorate %21 11 Offset 21 
                                                      OpMemberDecorate %21 12 RelaxedPrecision 
                                                      OpMemberDecorate %21 12 Offset 21 
                                                      OpMemberDecorate %21 13 RelaxedPrecision 
                                                      OpMemberDecorate %21 13 Offset 21 
                                                      OpMemberDecorate %21 14 RelaxedPrecision 
                                                      OpMemberDecorate %21 14 Offset 21 
                                                      OpMemberDecorate %21 15 RelaxedPrecision 
                                                      OpMemberDecorate %21 15 Offset 21 
                                                      OpMemberDecorate %21 16 RelaxedPrecision 
                                                      OpMemberDecorate %21 16 Offset 21 
                                                      OpDecorate %21 Block 
                                                      OpDecorate %23 DescriptorSet 23 
                                                      OpDecorate %23 Binding 23 
                                                      OpDecorate %66 ArrayStride 66 
                                                      OpMemberDecorate %67 0 Offset 67 
                                                      OpMemberDecorate %67 1 Offset 67 
                                                      OpMemberDecorate %67 2 RelaxedPrecision 
                                                      OpMemberDecorate %67 2 Offset 67 
                                                      OpDecorate %67 Block 
                                                      OpDecorate %69 DescriptorSet 69 
                                                      OpDecorate %69 Binding 69 
                                                      OpDecorate %72 RelaxedPrecision 
                                                      OpDecorate %84 Location 84 
                                                      OpDecorate %125 RelaxedPrecision 
                                                      OpMemberDecorate %171 0 BuiltIn 171 
                                                      OpMemberDecorate %171 1 BuiltIn 171 
                                                      OpMemberDecorate %171 2 BuiltIn 171 
                                                      OpDecorate %171 Block 
                                                      OpDecorate vs_TEXCOORD0 Location 182 
                                                      OpDecorate %184 Location 184 
                                                      OpMemberDecorate %186 0 Offset 186 
                                                      OpMemberDecorate %186 1 Offset 186 
                                                      OpMemberDecorate %186 2 Offset 186 
                                                      OpMemberDecorate %186 3 Offset 186 
                                                      OpMemberDecorate %186 4 Offset 186 
                                                      OpMemberDecorate %186 5 Offset 186 
                                                      OpMemberDecorate %186 6 Offset 186 
                                                      OpMemberDecorate %186 7 Offset 186 
                                                      OpMemberDecorate %186 8 Offset 186 
                                                      OpMemberDecorate %186 9 Offset 186 
                                                      OpMemberDecorate %186 10 Offset 186 
                                                      OpDecorate %186 Block 
                                                      OpDecorate %188 DescriptorSet 188 
                                                      OpDecorate %188 Binding 188 
                                               %2 = OpTypeVoid 
                                               %3 = OpTypeFunction %2 
                                               %6 = OpTypeFloat 32 
                                               %7 = OpTypeVector %6 4 
                                               %8 = OpTypePointer Private %7 
                                Private f32_4* %9 = OpVariable Private 
                                              %10 = OpTypePointer Input %7 
                                 Input f32_4* %11 = OpVariable Input 
                                              %12 = OpTypeVector %6 3 
                                              %15 = OpTypeInt 32 0 
                                          u32 %16 = OpConstant 4 
                                              %17 = OpTypeArray %7 %16 
                                              %18 = OpTypeArray %7 %16 
                                          u32 %19 = OpConstant 2 
                                              %20 = OpTypeArray %7 %19 
                                              %21 = OpTypeStruct %17 %18 %7 %7 %7 %20 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 %7 
                                              %22 = OpTypePointer Uniform %21 
Uniform struct {f32_4[4]; f32_4[4]; f32_4; f32_4; f32_4; f32_4[2]; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4; f32_4;}* %23 = OpVariable Uniform 
                                              %24 = OpTypeInt 32 1 
                                          i32 %25 = OpConstant 0 
                                          i32 %26 = OpConstant 1 
                                              %27 = OpTypePointer Uniform %7 
                                          i32 %45 = OpConstant 2 
                                          i32 %59 = OpConstant 3 
                                              %66 = OpTypeArray %7 %16 
                                              %67 = OpTypeStruct %66 %7 %12 
                                              %68 = OpTypePointer Uniform %67 
    Uniform struct {f32_4[4]; f32_4; f32_3;}* %69 = OpVariable Uniform 
                                              %70 = OpTypePointer Uniform %12 
                               Private f32_4* %82 = OpVariable Private 
                                              %83 = OpTypePointer Input %12 
                                 Input f32_3* %84 = OpVariable Input 
                                          u32 %90 = OpConstant 0 
                                              %91 = OpTypePointer Private %6 
                                          u32 %98 = OpConstant 1 
                                Private f32* %106 = OpVariable Private 
                                         f32 %113 = OpConstant 3.674022E-40 
                                         f32 %130 = OpConstant 3.674022E-40 
                                         f32 %131 = OpConstant 3.674022E-40 
                                             %137 = OpTypePointer Uniform %6 
                                             %170 = OpTypeArray %6 %98 
                                             %171 = OpTypeStruct %7 %6 %170 
                                             %172 = OpTypePointer Output %171 
        Output struct {f32_4; f32; f32[1];}* %173 = OpVariable Output 
                                             %178 = OpTypePointer Output %7 
                                             %180 = OpTypeVector %6 2 
                                             %181 = OpTypePointer Output %180 
                       Output f32_2* vs_TEXCOORD0 = OpVariable Output 
                                             %183 = OpTypePointer Input %180 
                                Input f32_2* %184 = OpVariable Input 
                                             %186 = OpTypeStruct %6 %7 %7 %6 %6 %12 %7 %6 %6 %6 %6 
                                             %187 = OpTypePointer Uniform %186 
Uniform struct {f32; f32_4; f32_4; f32; f32; f32_3; f32_4; f32; f32; f32; f32;}* %188 = OpVariable Uniform 
                                             %197 = OpTypePointer Output %6 
                                          void %4 = OpFunction None %3 
                                               %5 = OpLabel 
                                        f32_4 %13 = OpLoad %11 
                                        f32_3 %14 = OpVectorShuffle %13 %13 1 1 1 
                               Uniform f32_4* %28 = OpAccessChain %23 %25 %26 
                                        f32_4 %29 = OpLoad %28 
                                        f32_3 %30 = OpVectorShuffle %29 %29 0 1 2 
                                        f32_3 %31 = OpFMul %14 %30 
                                        f32_4 %32 = OpLoad %9 
                                        f32_4 %33 = OpVectorShuffle %32 %31 4 5 6 3 
                                                      OpStore %9 %33 
                               Uniform f32_4* %34 = OpAccessChain %23 %25 %25 
                                        f32_4 %35 = OpLoad %34 
                                        f32_3 %36 = OpVectorShuffle %35 %35 0 1 2 
                                        f32_4 %37 = OpLoad %11 
                                        f32_3 %38 = OpVectorShuffle %37 %37 0 0 0 
                                        f32_3 %39 = OpFMul %36 %38 
                                        f32_4 %40 = OpLoad %9 
                                        f32_3 %41 = OpVectorShuffle %40 %40 0 1 2 
                                        f32_3 %42 = OpFAdd %39 %41 
                                        f32_4 %43 = OpLoad %9 
                                        f32_4 %44 = OpVectorShuffle %43 %42 4 5 6 3 
                                                      OpStore %9 %44 
                               Uniform f32_4* %46 = OpAccessChain %23 %25 %45 
                                        f32_4 %47 = OpLoad %46 
                                        f32_3 %48 = OpVectorShuffle %47 %47 0 1 2 
                                        f32_4 %49 = OpLoad %11 
                                        f32_3 %50 = OpVectorShuffle %49 %49 2 2 2 
                                        f32_3 %51 = OpFMul %48 %50 
                                        f32_4 %52 = OpLoad %9 
                                        f32_3 %53 = OpVectorShuffle %52 %52 0 1 2 
                                        f32_3 %54 = OpFAdd %51 %53 
                                        f32_4 %55 = OpLoad %9 
                                        f32_4 %56 = OpVectorShuffle %55 %54 4 5 6 3 
                                                      OpStore %9 %56 
                                        f32_4 %57 = OpLoad %9 
                                        f32_3 %58 = OpVectorShuffle %57 %57 0 1 2 
                               Uniform f32_4* %60 = OpAccessChain %23 %25 %59 
                                        f32_4 %61 = OpLoad %60 
                                        f32_3 %62 = OpVectorShuffle %61 %61 0 1 2 
                                        f32_3 %63 = OpFAdd %58 %62 
                                        f32_4 %64 = OpLoad %9 
                                        f32_4 %65 = OpVectorShuffle %64 %63 4 5 6 3 
                                                      OpStore %9 %65 
                               Uniform f32_3* %71 = OpAccessChain %69 %45 
                                        f32_3 %72 = OpLoad %71 
                               Uniform f32_4* %73 = OpAccessChain %69 %26 
                                        f32_4 %74 = OpLoad %73 
                                        f32_3 %75 = OpVectorShuffle %74 %74 0 0 0 
                                        f32_3 %76 = OpFMul %72 %75 
                                        f32_4 %77 = OpLoad %9 
                                        f32_3 %78 = OpVectorShuffle %77 %77 0 1 2 
                                        f32_3 %79 = OpFAdd %76 %78 
                                        f32_4 %80 = OpLoad %9 
                                        f32_4 %81 = OpVectorShuffle %80 %79 4 5 6 3 
                                                      OpStore %9 %81 
                                        f32_3 %85 = OpLoad %84 
                               Uniform f32_4* %86 = OpAccessChain %23 %26 %25 
                                        f32_4 %87 = OpLoad %86 
                                        f32_3 %88 = OpVectorShuffle %87 %87 0 1 2 
                                          f32 %89 = OpDot %85 %88 
                                 Private f32* %92 = OpAccessChain %82 %90 
                                                      OpStore %92 %89 
                                        f32_3 %93 = OpLoad %84 
                               Uniform f32_4* %94 = OpAccessChain %23 %26 %26 
                                        f32_4 %95 = OpLoad %94 
                                        f32_3 %96 = OpVectorShuffle %95 %95 0 1 2 
                                          f32 %97 = OpDot %93 %96 
                                 Private f32* %99 = OpAccessChain %82 %98 
                                                      OpStore %99 %97 
                                       f32_3 %100 = OpLoad %84 
                              Uniform f32_4* %101 = OpAccessChain %23 %26 %45 
                                       f32_4 %102 = OpLoad %101 
                                       f32_3 %103 = OpVectorShuffle %102 %102 0 1 2 
                                         f32 %104 = OpDot %100 %103 
                                Private f32* %105 = OpAccessChain %82 %19 
                                                      OpStore %105 %104 
                                       f32_4 %107 = OpLoad %82 
                                       f32_3 %108 = OpVectorShuffle %107 %107 0 1 2 
                                       f32_4 %109 = OpLoad %82 
                                       f32_3 %110 = OpVectorShuffle %109 %109 0 1 2 
                                         f32 %111 = OpDot %108 %110 
                                                      OpStore %106 %111 
                                         f32 %112 = OpLoad %106 
                                         f32 %114 = OpExtInst %1 40 %112 %113 
                                                      OpStore %106 %114 
                                         f32 %115 = OpLoad %106 
                                         f32 %116 = OpExtInst %1 32 %115 
                                                      OpStore %106 %116 
                                         f32 %117 = OpLoad %106 
                                       f32_3 %118 = OpCompositeConstruct %117 %117 %117 
                                       f32_4 %119 = OpLoad %82 
                                       f32_3 %120 = OpVectorShuffle %119 %119 0 1 2 
                                       f32_3 %121 = OpFMul %118 %120 
                                       f32_4 %122 = OpLoad %82 
                                       f32_4 %123 = OpVectorShuffle %122 %121 4 5 6 3 
                                                      OpStore %82 %123 
                              Uniform f32_3* %124 = OpAccessChain %69 %45 
                                       f32_3 %125 = OpLoad %124 
                                       f32_4 %126 = OpLoad %82 
                                       f32_3 %127 = OpVectorShuffle %126 %126 0 1 2 
                                         f32 %128 = OpDot %125 %127 
                                                      OpStore %106 %128 
                                         f32 %129 = OpLoad %106 
                                         f32 %132 = OpExtInst %1 43 %129 %130 %131 
                                                      OpStore %106 %132 
                                         f32 %133 = OpLoad %106 
                                         f32 %134 = OpFNegate %133 
                                         f32 %135 = OpFAdd %134 %131 
                                                      OpStore %106 %135 
                                         f32 %136 = OpLoad %106 
                                Uniform f32* %138 = OpAccessChain %69 %26 %98 
                                         f32 %139 = OpLoad %138 
                                         f32 %140 = OpFMul %136 %139 
                                                      OpStore %106 %140 
                                       f32_4 %141 = OpLoad %82 
                                       f32_3 %142 = OpVectorShuffle %141 %141 0 1 2 
                                         f32 %143 = OpLoad %106 
                                       f32_3 %144 = OpCompositeConstruct %143 %143 %143 
                                       f32_3 %145 = OpFMul %142 %144 
                                       f32_4 %146 = OpLoad %9 
                                       f32_3 %147 = OpVectorShuffle %146 %146 0 1 2 
                                       f32_3 %148 = OpFAdd %145 %147 
                                       f32_4 %149 = OpLoad %9 
                                       f32_4 %150 = OpVectorShuffle %149 %148 4 5 6 3 
                                                      OpStore %9 %150 
                                       f32_4 %151 = OpLoad %9 
                                       f32_4 %152 = OpVectorShuffle %151 %151 1 1 1 1 
                              Uniform f32_4* %153 = OpAccessChain %69 %25 %26 
                                       f32_4 %154 = OpLoad %153 
                                       f32_4 %155 = OpFMul %152 %154 
                                                      OpStore %82 %155 
                              Uniform f32_4* %156 = OpAccessChain %69 %25 %25 
                                       f32_4 %157 = OpLoad %156 
                                       f32_4 %158 = OpLoad %9 
                                       f32_4 %159 = OpVectorShuffle %158 %158 0 0 0 0 
                                       f32_4 %160 = OpFMul %157 %159 
                                       f32_4 %161 = OpLoad %82 
                                       f32_4 %162 = OpFAdd %160 %161 
                                                      OpStore %82 %162 
                              Uniform f32_4* %163 = OpAccessChain %69 %25 %45 
                                       f32_4 %164 = OpLoad %163 
                                       f32_4 %165 = OpLoad %9 
                                       f32_4 %166 = OpVectorShuffle %165 %165 2 2 2 2 
                                       f32_4 %167 = OpFMul %164 %166 
                                       f32_4 %168 = OpLoad %82 
                                       f32_4 %169 = OpFAdd %167 %168 
                                                      OpStore %9 %169 
                                       f32_4 %174 = OpLoad %9 
                              Uniform f32_4* %175 = OpAccessChain %69 %25 %59 
                                       f32_4 %176 = OpLoad %175 
                                       f32_4 %177 = OpFAdd %174 %176 
                               Output f32_4* %179 = OpAccessChain %173 %25 
                                                      OpStore %179 %177 
                                       f32_2 %185 = OpLoad %184 
                              Uniform f32_4* %189 = OpAccessChain %188 %26 
                                       f32_4 %190 = OpLoad %189 
                                       f32_2 %191 = OpVectorShuffle %190 %190 0 1 
                                       f32_2 %192 = OpFMul %185 %191 
                              Uniform f32_4* %193 = OpAccessChain %188 %26 
                                       f32_4 %194 = OpLoad %193 
                                       f32_2 %195 = OpVectorShuffle %194 %194 2 3 
                                       f32_2 %196 = OpFAdd %192 %195 
                                                      OpStore vs_TEXCOORD0 %196 
                                 Output f32* %198 = OpAccessChain %173 %25 %98 
                                         f32 %199 = OpLoad %198 
                                         f32 %200 = OpFNegate %199 
                                 Output f32* %201 = OpAccessChain %173 %25 %98 
                                                      OpStore %201 %200 
                                                      OpReturn
                                                      OpFunctionEnd
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 59
; Schema: 0
                                             OpCapability Shader 
                                      %1 = OpExtInstImport "GLSL.std.450" 
                                             OpMemoryModel Logical GLSL450 
                                             OpEntryPoint Fragment %4 "main" %21 %56 
                                             OpExecutionMode %4 OriginUpperLeft 
                                             OpName vs_TEXCOORD0 "vs_TEXCOORD0" 
                                             OpDecorate %8 RelaxedPrecision 
                                             OpDecorate %11 RelaxedPrecision 
                                             OpDecorate %11 DescriptorSet 11 
                                             OpDecorate %11 Binding 11 
                                             OpDecorate %12 RelaxedPrecision 
                                             OpDecorate %15 RelaxedPrecision 
                                             OpDecorate %15 DescriptorSet 15 
                                             OpDecorate %15 Binding 15 
                                             OpDecorate %16 RelaxedPrecision 
                                             OpDecorate vs_TEXCOORD0 Location 21 
                                             OpDecorate %27 RelaxedPrecision 
                                             OpDecorate %29 RelaxedPrecision 
                                             OpMemberDecorate %30 0 Offset 30 
                                             OpDecorate %30 Block 
                                             OpDecorate %32 DescriptorSet 32 
                                             OpDecorate %32 Binding 32 
                                             OpDecorate %56 RelaxedPrecision 
                                             OpDecorate %56 Location 56 
                                      %2 = OpTypeVoid 
                                      %3 = OpTypeFunction %2 
                                      %6 = OpTypeFloat 32 
                                      %7 = OpTypePointer Private %6 
                         Private f32* %8 = OpVariable Private 
                                      %9 = OpTypeImage %6 Dim2D 0 0 0 1 Unknown 
                                     %10 = OpTypePointer UniformConstant %9 
UniformConstant read_only Texture2D* %11 = OpVariable UniformConstant 
                                     %13 = OpTypeSampler 
                                     %14 = OpTypePointer UniformConstant %13 
            UniformConstant sampler* %15 = OpVariable UniformConstant 
                                     %17 = OpTypeSampledImage %9 
                                     %19 = OpTypeVector %6 2 
                                     %20 = OpTypePointer Input %19 
               Input f32_2* vs_TEXCOORD0 = OpVariable Input 
                                     %23 = OpTypeVector %6 4 
                                     %25 = OpTypeInt 32 0 
                                 u32 %26 = OpConstant 3 
                        Private f32* %28 = OpVariable Private 
                                     %30 = OpTypeStruct %6 
                                     %31 = OpTypePointer Uniform %30 
              Uniform struct {f32;}* %32 = OpVariable Uniform 
                                     %33 = OpTypeInt 32 1 
                                 i32 %34 = OpConstant 0 
                                     %35 = OpTypePointer Uniform %6 
                                     %40 = OpTypeBool 
                                     %41 = OpTypePointer Private %40 
                       Private bool* %42 = OpVariable Private 
                                 f32 %44 = OpConstant 3.674022E-40 
                                 i32 %47 = OpConstant 1 
                                 i32 %49 = OpConstant -1 
                                     %55 = OpTypePointer Output %23 
                       Output f32_4* %56 = OpVariable Output 
                               f32_4 %57 = OpConstantComposite %44 %44 %44 %44 
                                 void %4 = OpFunction None %3 
                                      %5 = OpLabel 
                 read_only Texture2D %12 = OpLoad %11 
                             sampler %16 = OpLoad %15 
          read_only Texture2DSampled %18 = OpSampledImage %12 %16 
                               f32_2 %22 = OpLoad vs_TEXCOORD0 
                               f32_4 %24 = OpImageSampleImplicitLod %18 %22 
                                 f32 %27 = OpCompositeExtract %24 3 
                                             OpStore %8 %27 
                                 f32 %29 = OpLoad %8 
                        Uniform f32* %36 = OpAccessChain %32 %34 
                                 f32 %37 = OpLoad %36 
                                 f32 %38 = OpFNegate %37 
                                 f32 %39 = OpFAdd %29 %38 
                                             OpStore %28 %39 
                                 f32 %43 = OpLoad %28 
                                bool %45 = OpFOrdLessThan %43 %44 
                                             OpStore %42 %45 
                                bool %46 = OpLoad %42 
                                 i32 %48 = OpSelect %46 %47 %34 
                                 i32 %50 = OpIMul %48 %49 
                                bool %51 = OpINotEqual %50 %34 
                                             OpSelectionMerge %53 None 
                                             OpBranchConditional %51 %52 %53 
                                     %52 = OpLabel 
                                             OpKill
                                     %53 = OpLabel 
                                             OpStore %56 %57 
                                             OpReturn
                                             OpFunctionEnd
"
}
}
Program "fp" {
SubProgram "gles3 " {
""
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS_VERTEX" }
""
}
SubProgram "gles3 " {
Keywords { "_ADDITIONAL_LIGHTS" }
""
}
SubProgram "vulkan " {
""
}
SubProgram "vulkan " {
Keywords { "_ADDITIONAL_LIGHTS_VERTEX" }
""
}
SubProgram "vulkan " {
Keywords { "_ADDITIONAL_LIGHTS" }
""
}
}
}
}
}